// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MrFunGuyAwarenessPrius.hpp>
#include <rivet/ddl/generated/BotNpcAwarenessPrius.hpp> 

#include <rivet/ddl/generated/BotAreaAwarenessPrius.hpp>

namespace rivet::ddl::generated {
	BotAreaAwarenessPrius::BotAreaAwarenessPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): AwarenessBasePrius(serialized) {
		SourceLocatorName = serialized->get_string(SourceLocatorName_type_id, "head");
		NearbyAlertRange = serialized->get_float(NearbyAlertRange_type_id, 3.000000f);
		NearbyShotAlertRange = serialized->get_float(NearbyShotAlertRange_type_id, 10.000000f);
		UseRandomConfirmTime = serialized->get_bool(UseRandomConfirmTime_type_id, false); 
	}

	[[nodiscard]] auto
	BotAreaAwarenessPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotAreaAwarenessPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotAreaAwarenessPrius> {
		if (incoming_type_id == BotAreaAwarenessPrius::type_id) {
			return std::make_shared<BotAreaAwarenessPrius>(serialized);
		}

		auto BotNpcAwarenessPrius_ptr = BotNpcAwarenessPrius::from_substruct(incoming_type_id, serialized);
		if (BotNpcAwarenessPrius_ptr != nullptr) {
			return BotNpcAwarenessPrius_ptr;
		}

		auto MrFunGuyAwarenessPrius_ptr = MrFunGuyAwarenessPrius::from_substruct(incoming_type_id, serialized);
		if (MrFunGuyAwarenessPrius_ptr != nullptr) {
			return MrFunGuyAwarenessPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
