// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TestAnimalSubstruct2.hpp> 

#include <rivet/ddl/generated/TestUIElementLabel6.hpp>

namespace rivet::ddl::generated {
	TestUIElementLabel6::TestUIElementLabel6([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Pets1 = serialized->unwrap_into_many<rivet::ddl::generated::TestAnimalSubstruct2>(Pets1_type_id);
		Pets2 = serialized->unwrap_into_many<rivet::ddl::generated::TestAnimalSubstruct2>(Pets2_type_id);
		Pets5 = serialized->unwrap_into_many<rivet::ddl::generated::TestAnimalSubstruct2>(Pets5_type_id);
		Pets7 = serialized->unwrap_into_many<rivet::ddl::generated::TestAnimalSubstruct2>(Pets7_type_id);
		Pets9 = serialized->unwrap_into_many<rivet::ddl::generated::TestAnimalSubstruct2>(Pets9_type_id);
		Pets10 = serialized->unwrap_into_many<rivet::ddl::generated::TestAnimalSubstruct2>(Pets10_type_id);
		Pets11 = serialized->unwrap_into_many<rivet::ddl::generated::TestAnimalSubstruct2>(Pets11_type_id); 
	}

	[[nodiscard]] auto
	TestUIElementLabel6::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TestUIElementLabel6::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TestUIElementLabel6> {
		if (incoming_type_id == TestUIElementLabel6::type_id) {
			return std::make_shared<TestUIElementLabel6>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
