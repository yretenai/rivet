// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED ShotWarningIndicatorPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ShotWarningIndicatorPrius";
		constexpr static rivet::rivet_type_id type_id = 0xa8992f3a;

		constexpr static std::string_view TargetPos_type_name = "TargetPos";
		constexpr static rivet::rivet_type_id TargetPos_type_id = 0x49a6f116;
		constexpr static std::string_view Radius_type_name = "Radius";
		constexpr static rivet::rivet_type_id Radius_type_id = 0x504203d;
		constexpr static std::string_view Timer_type_name = "Timer";
		constexpr static rivet::rivet_type_id Timer_type_id = 0x738312db;
		constexpr static std::string_view WarnFromActivate_type_name = "WarnFromActivate";
		constexpr static rivet::rivet_type_id WarnFromActivate_type_id = 0x551fbd4a; 

		explicit ShotWarningIndicatorPrius() = default;
		explicit ShotWarningIndicatorPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::DDLVector3> TargetPos {};
		float Radius {};
		float Timer {};
		bool WarnFromActivate {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotWarningIndicatorPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
