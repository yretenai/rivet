// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Beam2PointPrius.hpp>

namespace rivet::ddl::generated {
	Beam2PointPrius::Beam2PointPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartLocator = serialized->get_string(StartLocator_type_id);
		EndLocator = serialized->get_string(EndLocator_type_id);
		BeamLength = serialized->get_float(BeamLength_type_id);
		IsStartLocatorFixed = serialized->get_bool(IsStartLocatorFixed_type_id);
		StopAtCollision = serialized->get_bool(StopAtCollision_type_id);
		FX = serialized->get_bool(FX_type_id);
		TurnOnWhenActivated = serialized->get_bool(TurnOnWhenActivated_type_id);
		ForceSweptSphere = serialized->get_bool(ForceSweptSphere_type_id);
		DamageAmount = serialized->get_float(DamageAmount_type_id);
		DamageRadius = serialized->get_float(DamageRadius_type_id);
		BeamRadius = serialized->get_float(BeamRadius_type_id);
		InstantKill = serialized->get_bool(InstantKill_type_id);
		ApplyDamageToIncludeGroup = serialized->get_bool(ApplyDamageToIncludeGroup_type_id);
		TurnTargetInvulnerable = serialized->get_bool(TurnTargetInvulnerable_type_id);
		OnlyDirectDamage = serialized->get_bool(OnlyDirectDamage_type_id);
		DamageIncludeGroupHandle = serialized->get_uint32(DamageIncludeGroupHandle_type_id); 
	}

	[[nodiscard]] auto
	Beam2PointPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Beam2PointPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Beam2PointPrius> {
		if (incoming_type_id == Beam2PointPrius::type_id) {
			return std::make_shared<Beam2PointPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
