// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/TargetType.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED FireFromLookData : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "FireFromLookData";
		constexpr const static rivet::rivet_type_id type_id = 0x272b4bcf;

		constexpr const static std::string_view PerformAdditionalTestsAlongEmitPath_type_name = "PerformAdditionalTestsAlongEmitPath";
		constexpr const static rivet::rivet_type_id PerformAdditionalTestsAlongEmitPath_type_id = 0xd28849ec;
		constexpr const static std::string_view CollideWithNonActors_type_name = "CollideWithNonActors";
		constexpr const static rivet::rivet_type_id CollideWithNonActors_type_id = 0x59a6bb1a;
		constexpr const static std::string_view CollideWithNonTargets_type_name = "CollideWithNonTargets";
		constexpr const static rivet::rivet_type_id CollideWithNonTargets_type_id = 0x50c59358;
		constexpr const static std::string_view CollideWithTargetTypes_type_name = "CollideWithTargetTypes";
		constexpr const static rivet::rivet_type_id CollideWithTargetTypes_type_id = 0x7a0385a0; 

		explicit FireFromLookData() = default;
		explicit FireFromLookData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool PerformAdditionalTestsAlongEmitPath {};
		bool CollideWithNonActors {};
		bool CollideWithNonTargets {};
		rivet::ddl::generated::TargetType CollideWithTargetTypes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FireFromLookData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
