// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/MountAbilityBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED MountAbilityFireWeapon : MountAbilityBase {
		constexpr const static std::string_view type_name = "MountAbilityFireWeapon";
		constexpr const static rivet::rivet_type_id type_id = 0x93b799f7;

		constexpr const static std::string_view EquipIndex_type_name = "EquipIndex";
		constexpr const static rivet::rivet_type_id EquipIndex_type_id = 0x9e860af6;
		constexpr const static std::string_view TriggerIndex_type_name = "TriggerIndex";
		constexpr const static rivet::rivet_type_id TriggerIndex_type_id = 0xee73b5b3;
		constexpr const static std::string_view ReticleForwardOffsetFromCamera_type_name = "ReticleForwardOffsetFromCamera";
		constexpr const static rivet::rivet_type_id ReticleForwardOffsetFromCamera_type_id = 0xb185aa3a;
		constexpr const static std::string_view ReticleUpOffsetFromCamera_type_name = "ReticleUpOffsetFromCamera";
		constexpr const static rivet::rivet_type_id ReticleUpOffsetFromCamera_type_id = 0x303a78e4;
		constexpr const static std::string_view ReticleTestDist_type_name = "ReticleTestDist";
		constexpr const static rivet::rivet_type_id ReticleTestDist_type_id = 0x203fce7f;
		constexpr const static std::string_view ReticleOn_type_name = "ReticleOn";
		constexpr const static rivet::rivet_type_id ReticleOn_type_id = 0x29e337fc;
		constexpr const static std::string_view IDString_type_name = "IDString";
		constexpr const static rivet::rivet_type_id IDString_type_id = 0xc8139edf; 

		explicit MountAbilityFireWeapon() = default;
		explicit MountAbilityFireWeapon([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t EquipIndex {};
		uint32_t TriggerIndex {};
		float ReticleForwardOffsetFromCamera {};
		float ReticleUpOffsetFromCamera {};
		float ReticleTestDist {};
		bool ReticleOn {};
		std::string_view IDString {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MountAbilityFireWeapon>;
	};
} // namespace rivet::ddl::generated

// clang-format on
