// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/InitMissionGraphNodeSharedDef.hpp>
#include <rivet/ddl/generated/MissionStartObjectiveNodeSharedDef.hpp>
#include <rivet/ddl/generated/OutputPlugBoolean.hpp> 

#include <rivet/ddl/generated/MissionSystemRootNodeBaseDef.hpp>

namespace rivet::ddl::generated {
	MissionSystemRootNodeBaseDef::MissionSystemRootNodeBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): MissionSystemNodeBaseDef(serialized) {
		Start = serialized->unwrap_into<rivet::ddl::generated::OutputPlugBoolean>(Start_type_id); 
	}

	[[nodiscard]] auto
	MissionSystemRootNodeBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MissionSystemRootNodeBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionSystemRootNodeBaseDef> {
		if (incoming_type_id == MissionSystemRootNodeBaseDef::type_id) {
			return std::make_shared<MissionSystemRootNodeBaseDef>(serialized);
		}

		auto MissionStartObjectiveNodeSharedDef_ptr = MissionStartObjectiveNodeSharedDef::from_substruct(incoming_type_id, serialized);
		if (MissionStartObjectiveNodeSharedDef_ptr != nullptr) {
			return MissionStartObjectiveNodeSharedDef_ptr;
		}

		auto InitMissionGraphNodeSharedDef_ptr = InitMissionGraphNodeSharedDef::from_substruct(incoming_type_id, serialized);
		if (InitMissionGraphNodeSharedDef_ptr != nullptr) {
			return InitMissionGraphNodeSharedDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
