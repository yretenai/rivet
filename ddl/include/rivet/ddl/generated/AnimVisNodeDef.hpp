// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x6c8f7f60.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimVisNodeDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimVisNodeDef";
		constexpr static rivet::rivet_type_id type_id = 0x689ef173;

		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view DriverName_type_name = "DriverName";
		constexpr static rivet::rivet_type_id DriverName_type_id = 0x7a8704f5;
		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view Duration_type_name = "Duration";
		constexpr static rivet::rivet_type_id Duration_type_id = 0x7c5e3db0;
		constexpr static std::string_view LocalTime_type_name = "LocalTime";
		constexpr static rivet::rivet_type_id LocalTime_type_id = 0x1cbeb3a9;
		constexpr static std::string_view LocalWeight_type_name = "LocalWeight";
		constexpr static rivet::rivet_type_id LocalWeight_type_id = 0x18637134;
		constexpr static std::string_view Weight_type_name = "Weight";
		constexpr static rivet::rivet_type_id Weight_type_id = 0x39b51b26;
		constexpr static std::string_view RefNames_type_name = "RefNames";
		constexpr static rivet::rivet_type_id RefNames_type_id = 0x83a5eaa8; 

		explicit AnimVisNodeDef() = default;
		explicit AnimVisNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x6c8f7f60 Type {};
		std::string_view DriverName {};
		std::string_view Name {};
		float Duration {};
		float LocalTime {};
		float LocalWeight {};
		float Weight {};
		std::vector<std::string_view> RefNames {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimVisNodeDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
