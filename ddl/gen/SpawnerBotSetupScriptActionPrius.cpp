// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SpawnerBotSetupScriptActionPrius.hpp>

namespace rivet::ddl::generated {
	SpawnerBotSetupScriptActionPrius::SpawnerBotSetupScriptActionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActionType = serialized->get_enum<rivet::ddl::generated::x10228b34>(ActionType_type_id, rivet::ddl::generated::x10228b34_values);
		Notes = serialized->get_string(Notes_type_id);
		MaxActive = serialized->get_float(MaxActive_type_id);
		MaxSpawned = serialized->get_float(MaxSpawned_type_id);
		SpawnDelay = serialized->get_float(SpawnDelay_type_id);
		TriggerDelay = serialized->get_float(TriggerDelay_type_id);
		SpawnedTargetAreas = serialized->get_uint64(SpawnedTargetAreas_type_id);
		SpawnedTemplate = serialized->get_uint64(SpawnedTemplate_type_id);
		CombatMarkupCollection = serialized->get_uint64(CombatMarkupCollection_type_id);
		SpawnedGroup = serialized->get_uint64(SpawnedGroup_type_id);
		ExtraSpawnGroup = serialized->get_uint64(ExtraSpawnGroup_type_id); 
	}

	[[nodiscard]] auto
	SpawnerBotSetupScriptActionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SpawnerBotSetupScriptActionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SpawnerBotSetupScriptActionPrius> {
		if (incoming_type_id == SpawnerBotSetupScriptActionPrius::type_id) {
			return std::make_shared<SpawnerBotSetupScriptActionPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
