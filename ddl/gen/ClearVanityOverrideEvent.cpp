// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ClearVanityOverrideEvent.hpp>

namespace rivet::ddl::generated {
	ClearVanityOverrideEvent::ClearVanityOverrideEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		ClearHelmet = serialized->get_bool(ClearHelmet_type_id, true);
		ClearHead = serialized->get_bool(ClearHead_type_id, true);
		ClearTorso = serialized->get_bool(ClearTorso_type_id, true);
		ClearLeftGlove = serialized->get_bool(ClearLeftGlove_type_id, true);
		ClearRightGlove = serialized->get_bool(ClearRightGlove_type_id, true);
		ClearLegs = serialized->get_bool(ClearLegs_type_id, true);
		ClearBoots = serialized->get_bool(ClearBoots_type_id, true); 
	}

	[[nodiscard]] auto
	ClearVanityOverrideEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ClearVanityOverrideEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ClearVanityOverrideEvent> {
		if (incoming_type_id == ClearVanityOverrideEvent::type_id) {
			return std::make_shared<ClearVanityOverrideEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
