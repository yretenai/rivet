// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroReactConfig.hpp>
#include <rivet/ddl/generated/HeroCameraConfig.hpp>
#include <rivet/ddl/generated/HeroCVCConfig.hpp>
#include <rivet/ddl/generated/HeroMotionConfig.hpp>
#include <rivet/ddl/generated/HeroMeleeSmashConfig.hpp>
#include <rivet/ddl/generated/HeroAimConfig.hpp>
#include <rivet/ddl/generated/HeroFlavorAnimConfig.hpp>
#include <rivet/ddl/generated/HeroAttackerConfig.hpp>
#include <rivet/ddl/generated/HeroHealthConfig.hpp>
#include <rivet/ddl/generated/HeroEffectsConfig.hpp>
#include <rivet/ddl/generated/HeroSuperMeterPrius.hpp> 

#include <rivet/ddl/generated/SharedHeroConfig.hpp>

namespace rivet::ddl::generated {
	SharedHeroConfig::SharedHeroConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		Camera = serialized->unwrap_into<rivet::ddl::generated::HeroCameraConfig>(Camera_type_id);
		BaseDepthOfFieldConfig = serialized->get_string(BaseDepthOfFieldConfig_type_id);
		AimAssistUserConfig = serialized->get_string(AimAssistUserConfig_type_id);
		CasualAimAssistUserConfig = serialized->get_string(CasualAimAssistUserConfig_type_id);
		HeroMoverConfig = serialized->get_string(HeroMoverConfig_type_id);
		PropConfig = serialized->get_string(PropConfig_type_id);
		DefaultZoomConfig = serialized->get_string(DefaultZoomConfig_type_id);
		DefaultWeaponBeamInConfig = serialized->get_string(DefaultWeaponBeamInConfig_type_id);
		BeamInConfig = serialized->get_string(BeamInConfig_type_id);
		BeamOutConfig = serialized->get_string(BeamOutConfig_type_id);
		ClankPuzzleTargetConfig = serialized->get_string(ClankPuzzleTargetConfig_type_id);
		Motion = serialized->unwrap_into<rivet::ddl::generated::HeroMotionConfig>(Motion_type_id);
		React = serialized->unwrap_into<rivet::ddl::generated::HeroReactConfig>(React_type_id);
		CVC = serialized->unwrap_into<rivet::ddl::generated::HeroCVCConfig>(CVC_type_id);
		MeleeSmash = serialized->unwrap_into<rivet::ddl::generated::HeroMeleeSmashConfig>(MeleeSmash_type_id);
		Aiming = serialized->unwrap_into<rivet::ddl::generated::HeroAimConfig>(Aiming_type_id);
		FlavorAnim = serialized->unwrap_into<rivet::ddl::generated::HeroFlavorAnimConfig>(FlavorAnim_type_id);
		AttackerConfig = serialized->unwrap_into<rivet::ddl::generated::HeroAttackerConfig>(AttackerConfig_type_id);
		HealthConfig = serialized->unwrap_into<rivet::ddl::generated::HeroHealthConfig>(HealthConfig_type_id);
		Effects = serialized->unwrap_into<rivet::ddl::generated::HeroEffectsConfig>(Effects_type_id);
		SuperMeter = serialized->unwrap_into<rivet::ddl::generated::HeroSuperMeterPrius>(SuperMeter_type_id); 
	}

	[[nodiscard]] auto
	SharedHeroConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SharedHeroConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SharedHeroConfig> {
		if (incoming_type_id == SharedHeroConfig::type_id) {
			return std::make_shared<SharedHeroConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
