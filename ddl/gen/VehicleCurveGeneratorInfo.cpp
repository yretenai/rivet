// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VehicleMergeDistance.hpp> 

#include <rivet/ddl/generated/VehicleCurveGeneratorInfo.hpp>

namespace rivet::ddl::generated {
	VehicleCurveGeneratorInfo::VehicleCurveGeneratorInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MaxPositionHistoryPoints = serialized->get_uint16(MaxPositionHistoryPoints_type_id, 3u);
		PositionHistorySegmentLength = serialized->get_float(PositionHistorySegmentLength_type_id, 1.000000f);
		MaxBlendPoints = serialized->get_uint16(MaxBlendPoints_type_id, 3u);
		BlendSegmentLength = serialized->get_float(BlendSegmentLength_type_id, 1.000000f);
		MaxDestinationNodes = serialized->get_uint16(MaxDestinationNodes_type_id, 8u);
		CurveRegenMinT = serialized->get_float(CurveRegenMinT_type_id, 0.500000f);
		MergeBezierPoints = serialized->get_uint16(MergeBezierPoints_type_id, 8u);
		MergeBezierSpeedCoeff = serialized->get_float(MergeBezierSpeedCoeff_type_id, 0.250000f);
		MinPostMergeDistance = serialized->get_float(MinPostMergeDistance_type_id, 1.000000f);
		BezierMergeDistances = serialized->unwrap_into_many<rivet::ddl::generated::VehicleMergeDistance>(BezierMergeDistances_type_id); 
	}

	[[nodiscard]] auto
	VehicleCurveGeneratorInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VehicleCurveGeneratorInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VehicleCurveGeneratorInfo> {
		if (incoming_type_id == VehicleCurveGeneratorInfo::type_id) {
			return std::make_shared<VehicleCurveGeneratorInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
