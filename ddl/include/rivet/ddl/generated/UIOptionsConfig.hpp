// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct UIOptionsPresetData;
	struct UIHUDIconToggleOptions;
	struct UIOptionColorData;
	struct UIOptionsPage; 

	struct RIVET_DDL_SHARED UIOptionsConfig : ConfigBase {
		constexpr static std::string_view type_name = "UIOptionsConfig";
		constexpr static rivet::rivet_type_id type_id = 0x2a6dc9fe;

		constexpr static std::string_view Pages_type_name = "Pages";
		constexpr static rivet::rivet_type_id Pages_type_id = 0x392729b4;
		constexpr static std::string_view Colors_type_name = "Colors";
		constexpr static rivet::rivet_type_id Colors_type_id = 0xfcc68df8;
		constexpr static std::string_view HUDIconToggleOptions_type_name = "HUDIconToggleOptions";
		constexpr static rivet::rivet_type_id HUDIconToggleOptions_type_id = 0x4f656054;
		constexpr static std::string_view SimpleControlsOptions_type_name = "SimpleControlsOptions";
		constexpr static rivet::rivet_type_id SimpleControlsOptions_type_id = 0x223c7a8a;
		constexpr static std::string_view VisualPresetOptions_type_name = "VisualPresetOptions";
		constexpr static rivet::rivet_type_id VisualPresetOptions_type_id = 0x395f5c48;
		constexpr static std::string_view HearingPresetOptions_type_name = "HearingPresetOptions";
		constexpr static rivet::rivet_type_id HearingPresetOptions_type_id = 0x94ec4cbd;
		constexpr static std::string_view MotorPresetOptions_type_name = "MotorPresetOptions";
		constexpr static rivet::rivet_type_id MotorPresetOptions_type_id = 0x31bc6617; 

		explicit UIOptionsConfig() = default;
		explicit UIOptionsConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::UIOptionsPage>> Pages {};
		std::vector<std::shared_ptr<rivet::ddl::generated::UIOptionColorData>> Colors {};
		std::shared_ptr<rivet::ddl::generated::UIHUDIconToggleOptions> HUDIconToggleOptions {};
		std::shared_ptr<rivet::ddl::generated::UIOptionsPresetData> SimpleControlsOptions {};
		std::shared_ptr<rivet::ddl::generated::UIOptionsPresetData> VisualPresetOptions {};
		std::shared_ptr<rivet::ddl::generated::UIOptionsPresetData> HearingPresetOptions {};
		std::shared_ptr<rivet::ddl::generated::UIOptionsPresetData> MotorPresetOptions {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIOptionsConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
