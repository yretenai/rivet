// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WwiseSwitchSelectItem.hpp>
#include <rivet/ddl/generated/WwiseSwitch.hpp> 

#include <rivet/ddl/generated/SoundSourceComponentPrius.hpp>

namespace rivet::ddl::generated {
	SoundSourceComponentPrius::SoundSourceComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Use3dBoom = serialized->get_bool(Use3dBoom_type_id, true);
		UsePropagation2 = serialized->get_bool(UsePropagation2_type_id, false);
		Propagation2UsePortaling = serialized->get_bool(Propagation2UsePortaling_type_id, true);
		Propagation2UseReverb = serialized->get_bool(Propagation2UseReverb_type_id, false);
		DirectPathPropagation = serialized->get_bool(DirectPathPropagation_type_id, true);
		SourceDependentReverb = serialized->get_bool(SourceDependentReverb_type_id, false);
		DirectPathSampleAreaScaleX = serialized->get_float(DirectPathSampleAreaScaleX_type_id, 1.000000f);
		DirectPathSampleAreaScaleY = serialized->get_float(DirectPathSampleAreaScaleY_type_id, 1.000000f);
		DirectPathStickinessIncreasing = serialized->get_float(DirectPathStickinessIncreasing_type_id, 0.000000f);
		DirectPathStickinessDecreasing = serialized->get_float(DirectPathStickinessDecreasing_type_id, 0.000000f);
		SwitchGroupsCountMax = serialized->get_uint32(SwitchGroupsCountMax_type_id, 8u);
		SwitchGroupList = serialized->unwrap_into_many<rivet::ddl::generated::WwiseSwitch>(SwitchGroupList_type_id);
		RandomSelectList = serialized->unwrap_into_many<rivet::ddl::generated::WwiseSwitchSelectItem>(RandomSelectList_type_id); 
	}

	[[nodiscard]] auto
	SoundSourceComponentPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SoundSourceComponentPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundSourceComponentPrius> {
		if (incoming_type_id == SoundSourceComponentPrius::type_id) {
			return std::make_shared<SoundSourceComponentPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
