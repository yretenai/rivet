// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED ShellCasingData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ShellCasingData";
		constexpr static rivet::rivet_type_id type_id = 0x2fda4eac;

		constexpr static std::string_view ShellAsset_type_name = "ShellAsset";
		constexpr static rivet::rivet_type_id ShellAsset_type_id = 0x6c1eee42;
		constexpr static std::string_view LifetimeMin_type_name = "LifetimeMin";
		constexpr static rivet::rivet_type_id LifetimeMin_type_id = 0x1ae401c6;
		constexpr static std::string_view LifetimeMax_type_name = "LifetimeMax";
		constexpr static rivet::rivet_type_id LifetimeMax_type_id = 0x26e93e9f;
		constexpr static std::string_view EjectSpeedMin_type_name = "EjectSpeedMin";
		constexpr static rivet::rivet_type_id EjectSpeedMin_type_id = 0xbbb1fe4f;
		constexpr static std::string_view EjectSpeedMax_type_name = "EjectSpeedMax";
		constexpr static rivet::rivet_type_id EjectSpeedMax_type_id = 0x87bcc116;
		constexpr static std::string_view EjectSpinMin_type_name = "EjectSpinMin";
		constexpr static rivet::rivet_type_id EjectSpinMin_type_id = 0xf0582fb1;
		constexpr static std::string_view EjectSpinMax_type_name = "EjectSpinMax";
		constexpr static rivet::rivet_type_id EjectSpinMax_type_id = 0xcc5510e8; 

		explicit ShellCasingData() = default;
		explicit ShellCasingData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view ShellAsset {};
		float LifetimeMin {};
		float LifetimeMax {};
		float EjectSpeedMin {};
		float EjectSpeedMax {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> EjectSpinMin {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> EjectSpinMax {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShellCasingData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
