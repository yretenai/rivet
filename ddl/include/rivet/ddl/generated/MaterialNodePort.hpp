// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED MaterialNodePort : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "MaterialNodePort";
		constexpr static rivet::rivet_type_id type_id = 0xa0416a37;

		constexpr static std::string_view InternalName_type_name = "InternalName";
		constexpr static rivet::rivet_type_id InternalName_type_id = 0x93971d83;
		constexpr static std::string_view DisplayName_type_name = "DisplayName";
		constexpr static rivet::rivet_type_id DisplayName_type_id = 0xeaf33243;
		constexpr static std::string_view Minimums_type_name = "Minimums";
		constexpr static rivet::rivet_type_id Minimums_type_id = 0xee16155a;
		constexpr static std::string_view Maximums_type_name = "Maximums";
		constexpr static rivet::rivet_type_id Maximums_type_id = 0x876babb;
		constexpr static std::string_view Values_type_name = "Values";
		constexpr static rivet::rivet_type_id Values_type_id = 0x4df0281;
		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view Description_type_name = "Description";
		constexpr static rivet::rivet_type_id Description_type_id = 0xe03811fd; 

		explicit MaterialNodePort() = default;
		explicit MaterialNodePort([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view InternalName {};
		std::string_view DisplayName {};
		std::string_view Minimums {};
		std::string_view Maximums {};
		std::string_view Values {};
		std::string_view Type {};
		std::string_view Description {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialNodePort>;
	};
} // namespace rivet::ddl::generated

// clang-format on
