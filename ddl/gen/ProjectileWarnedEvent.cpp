// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/ProjectileWarnedEvent.hpp>

namespace rivet::ddl::generated {
	ProjectileWarnedEvent::ProjectileWarnedEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		TimeLeft = serialized->get_float(TimeLeft_type_id, 1.000000f);
		Radius = serialized->get_float(Radius_type_id, 1.000000f);
		UseWarnPosition = serialized->get_bool(UseWarnPosition_type_id, false);
		WarnPosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(WarnPosition_type_id);
		WarnFriends = serialized->get_bool(WarnFriends_type_id, true); 
	}

	[[nodiscard]] auto
	ProjectileWarnedEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ProjectileWarnedEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ProjectileWarnedEvent> {
		if (incoming_type_id == ProjectileWarnedEvent::type_id) {
			return std::make_shared<ProjectileWarnedEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
