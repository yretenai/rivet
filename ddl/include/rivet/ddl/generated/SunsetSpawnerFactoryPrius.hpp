// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/SpawnerFactoryPrius.hpp> 

namespace rivet::ddl::generated {
	struct SetUpControllerData;
	struct BotSetupData; 

	struct RIVET_DDL_SHARED SunsetSpawnerFactoryPrius : SpawnerFactoryPrius {
		constexpr static std::string_view type_name = "SunsetSpawnerFactoryPrius";
		constexpr static rivet::rivet_type_id type_id = 0xa1a9ab32;

		constexpr static std::string_view NumForcedHealthDrops_type_name = "NumForcedHealthDrops";
		constexpr static rivet::rivet_type_id NumForcedHealthDrops_type_id = 0xc5c4b720;
		constexpr static std::string_view BotSetupData_type_name = "BotSetupData";
		constexpr static rivet::rivet_type_id BotSetupData_type_id = 0x5f793cc;
		constexpr static std::string_view SetupControllerData_type_name = "SetupControllerData";
		constexpr static rivet::rivet_type_id SetupControllerData_type_id = 0xf75a809b; 

		explicit SunsetSpawnerFactoryPrius() = default;
		explicit SunsetSpawnerFactoryPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t NumForcedHealthDrops {};
		std::shared_ptr<rivet::ddl::generated::BotSetupData> BotSetupData {};
		std::shared_ptr<rivet::ddl::generated::SetUpControllerData> SetupControllerData {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SunsetSpawnerFactoryPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
