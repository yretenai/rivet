// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/IdealDistanceParamsDDL.hpp>

namespace rivet::ddl::generated {
	IdealDistanceParamsDDL::IdealDistanceParamsDDL([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		IdealMinDistance = serialized->get_float(IdealMinDistance_type_id, 27.000000);
		IdealMaxDistance = serialized->get_float(IdealMaxDistance_type_id, 37.000000);
		MinChaseSpeed = serialized->get_float(MinChaseSpeed_type_id, 8.000000);
		MaxChaseSpeed = serialized->get_float(MaxChaseSpeed_type_id, 20.000000);
		Deceleration = serialized->get_float(Deceleration_type_id, -10.000000);
		Acceleration = serialized->get_float(Acceleration_type_id, 10.000000); 
	}

	[[nodiscard]] auto
	IdealDistanceParamsDDL::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	IdealDistanceParamsDDL::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<IdealDistanceParamsDDL> {
		if (incoming_type_id == IdealDistanceParamsDDL::type_id) {
			return std::make_shared<IdealDistanceParamsDDL>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
