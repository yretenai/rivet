// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/x3ebe0bf2.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HeroFreezeManagerPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "HeroFreezeManagerPrius";
		constexpr static rivet::rivet_type_id type_id = 0x7d5d0278;

		constexpr static std::string_view MaxFreezePoints_type_name = "MaxFreezePoints";
		constexpr static rivet::rivet_type_id MaxFreezePoints_type_id = 0xb6cd1368;
		constexpr static std::string_view FreezeLevel1Threshold_type_name = "FreezeLevel1Threshold";
		constexpr static rivet::rivet_type_id FreezeLevel1Threshold_type_id = 0x74670138;
		constexpr static std::string_view FreezeLevel2Threshold_type_name = "FreezeLevel2Threshold";
		constexpr static rivet::rivet_type_id FreezeLevel2Threshold_type_id = 0x9f50ba3b;
		constexpr static std::string_view FreezeDeathTime_type_name = "FreezeDeathTime";
		constexpr static rivet::rivet_type_id FreezeDeathTime_type_id = 0xd634a23c;
		constexpr static std::string_view FreezeDecayRate_type_name = "FreezeDecayRate";
		constexpr static rivet::rivet_type_id FreezeDecayRate_type_id = 0xff483973;
		constexpr static std::string_view FreezeHitAmount_type_name = "FreezeHitAmount";
		constexpr static rivet::rivet_type_id FreezeHitAmount_type_id = 0xbd95b8e5;
		constexpr static std::string_view ReFreezeLockoutTime_type_name = "ReFreezeLockoutTime";
		constexpr static rivet::rivet_type_id ReFreezeLockoutTime_type_id = 0x7967bc17;
		constexpr static std::string_view Flags_type_name = "Flags";
		constexpr static rivet::rivet_type_id Flags_type_id = 0x12568d7b; 

		explicit HeroFreezeManagerPrius() = default;
		explicit HeroFreezeManagerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MaxFreezePoints {};
		float FreezeLevel1Threshold {};
		float FreezeLevel2Threshold {};
		float FreezeDeathTime {};
		float FreezeDecayRate {};
		float FreezeHitAmount {};
		float ReFreezeLockoutTime {};
		rivet::ddl::generated::x3ebe0bf2 Flags {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroFreezeManagerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
