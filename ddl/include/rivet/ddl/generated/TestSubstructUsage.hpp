// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct TestSubstructBase3;
	struct TestSubstructBase2;
	struct TestSubstructBase1; 

	struct RIVET_DDL_SHARED TestSubstructUsage : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "TestSubstructUsage";
		constexpr static rivet::rivet_type_id type_id = 0x9fe809bf;

		constexpr static std::string_view subStruct1_type_name = "subStruct1";
		constexpr static rivet::rivet_type_id subStruct1_type_id = 0x4f04bc15;
		constexpr static std::string_view subStruct2_type_name = "subStruct2";
		constexpr static rivet::rivet_type_id subStruct2_type_id = 0xd60dedaf;
		constexpr static std::string_view subStruct3_type_name = "subStruct3";
		constexpr static rivet::rivet_type_id subStruct3_type_id = 0xa10add39;
		constexpr static std::string_view subStruct4_type_name = "subStruct4";
		constexpr static rivet::rivet_type_id subStruct4_type_id = 0x3f6e489a; 

		explicit TestSubstructUsage() = default;
		explicit TestSubstructUsage([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::TestSubstructBase1> subStruct1 {};
		std::shared_ptr<rivet::ddl::generated::TestSubstructBase1> subStruct2 {};
		std::shared_ptr<rivet::ddl::generated::TestSubstructBase2> subStruct3 {};
		std::shared_ptr<rivet::ddl::generated::TestSubstructBase3> subStruct4 {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TestSubstructUsage>;
	};
} // namespace rivet::ddl::generated

// clang-format on
