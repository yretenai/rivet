// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RobotTestActionEventInfo.hpp>
#include <rivet/ddl/generated/RobotestCineFrameActorInfo.hpp>
#include <rivet/ddl/generated/RobotTestCineEnableShotActor.hpp>
#include <rivet/ddl/generated/DDLTransform.hpp> 

#include <rivet/ddl/generated/RoboTestCineFrameInfo.hpp>

namespace rivet::ddl::generated {
	RoboTestCineFrameInfo::RoboTestCineFrameInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TestName = serialized->get_string(TestName_type_id, {});
		CurrentCineTime = serialized->get_float(CurrentCineTime_type_id, 0.000000f);
		Status = serialized->get_string(Status_type_id, {});
		CinematicAsset = serialized->get_string(CinematicAsset_type_id, {});
		Transform = serialized->unwrap_into<rivet::ddl::generated::DDLTransform>(Transform_type_id);
		EnabledShotActors = serialized->unwrap_into_many<rivet::ddl::generated::RobotTestCineEnableShotActor>(EnabledShotActors_type_id);
		ActorInfos = serialized->unwrap_into_many<rivet::ddl::generated::RobotestCineFrameActorInfo>(ActorInfos_type_id);
		ActionEvents = serialized->unwrap_into_many<rivet::ddl::generated::RobotTestActionEventInfo>(ActionEvents_type_id); 
	}

	[[nodiscard]] auto
	RoboTestCineFrameInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RoboTestCineFrameInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RoboTestCineFrameInfo> {
		if (incoming_type_id == RoboTestCineFrameInfo::type_id) {
			return std::make_shared<RoboTestCineFrameInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
