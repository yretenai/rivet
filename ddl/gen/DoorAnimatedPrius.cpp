// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DoorAnimatedPrius.hpp>

namespace rivet::ddl::generated {
	DoorAnimatedPrius::DoorAnimatedPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): DoorPrius(serialized) {
		AnimRate = serialized->get_float(AnimRate_type_id, 1.000000f);
		OpenAnim = serialized->get_string(OpenAnim_type_id, "Door_Open");
		OpenIdleAnim = serialized->get_string(OpenIdleAnim_type_id, "Door_OpenIdle");
		CloseAnim = serialized->get_string(CloseAnim_type_id, "Door_Close");
		CloseIdleAnim = serialized->get_string(CloseIdleAnim_type_id, "Door_CloseIdle");
		ReverseOpenAnim = serialized->get_string(ReverseOpenAnim_type_id, {});
		ReverseCloseAnim = serialized->get_string(ReverseCloseAnim_type_id, {}); 
	}

	[[nodiscard]] auto
	DoorAnimatedPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DoorAnimatedPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DoorAnimatedPrius> {
		if (incoming_type_id == DoorAnimatedPrius::type_id) {
			return std::make_shared<DoorAnimatedPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
