// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SargassoCentipedeAODPrius.hpp>

namespace rivet::ddl::generated {
	SargassoCentipedeAODPrius::SargassoCentipedeAODPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Radius = serialized->get_float(Radius_type_id);
		Height = serialized->get_float(Height_type_id);
		OnSpawnDamage = serialized->get_float(OnSpawnDamage_type_id);
		OnSpawnKnockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(OnSpawnKnockback_type_id, rivet::ddl::generated::KnockbackLevels_values);
		Damage = serialized->get_float(Damage_type_id);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values);
		IgnoreDuration = serialized->get_float(IgnoreDuration_type_id);
		LifeTime = serialized->get_float(LifeTime_type_id);
		DamageType = serialized->get_enum<rivet::ddl::generated::x8d7e44cf>(DamageType_type_id, rivet::ddl::generated::x8d7e44cf_values);
		DamageString = serialized->get_string(DamageString_type_id);
		AODCVCActor = serialized->get_string(AODCVCActor_type_id); 
	}

	[[nodiscard]] auto
	SargassoCentipedeAODPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SargassoCentipedeAODPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SargassoCentipedeAODPrius> {
		if (incoming_type_id == SargassoCentipedeAODPrius::type_id) {
			return std::make_shared<SargassoCentipedeAODPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
