// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PickupItemPrius.hpp>
#include <rivet/ddl/generated/PickupGeneralPrius.hpp>
#include <rivet/ddl/generated/PickupRestrictedPrius.hpp>
#include <rivet/ddl/generated/EventBase.hpp> 

#include <rivet/ddl/generated/PickupSharedPrius.hpp>

namespace rivet::ddl::generated {
	PickupSharedPrius::PickupSharedPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): PickupBasePrius(serialized) {
		DeleteOnEvent = serialized->get_enum<rivet::ddl::generated::x993e7bef>(DeleteOnEvent_type_id, rivet::ddl::generated::x993e7bef_values);
		DeleteEvent = serialized->unwrap_into<rivet::ddl::generated::EventBase>(DeleteEvent_type_id); 
	}

	[[nodiscard]] auto
	PickupSharedPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PickupSharedPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PickupSharedPrius> {
		if (incoming_type_id == PickupSharedPrius::type_id) {
			return std::make_shared<PickupSharedPrius>(serialized);
		}

		auto PickupRestrictedPrius_ptr = PickupRestrictedPrius::from_substruct(incoming_type_id, serialized);
		if (PickupRestrictedPrius_ptr != nullptr) {
			return PickupRestrictedPrius_ptr;
		}

		auto PickupGeneralPrius_ptr = PickupGeneralPrius::from_substruct(incoming_type_id, serialized);
		if (PickupGeneralPrius_ptr != nullptr) {
			return PickupGeneralPrius_ptr;
		}

		auto PickupItemPrius_ptr = PickupItemPrius::from_substruct(incoming_type_id, serialized);
		if (PickupItemPrius_ptr != nullptr) {
			return PickupItemPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
