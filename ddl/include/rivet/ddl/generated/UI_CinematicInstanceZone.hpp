// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED UI_CinematicInstanceZone : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "UI_CinematicInstanceZone";
		constexpr static rivet::rivet_type_id type_id = 0x5444d6f1;

		constexpr static std::string_view IsCinematicOwner_type_name = "IsCinematicOwner";
		constexpr static rivet::rivet_type_id IsCinematicOwner_type_id = 0x1520cb03;
		constexpr static std::string_view ParentRegionAssetPath_type_name = "ParentRegionAssetPath";
		constexpr static rivet::rivet_type_id ParentRegionAssetPath_type_id = 0x80b18bf0;
		constexpr static std::string_view ShadowZoneAssetPath_type_name = "ShadowZoneAssetPath";
		constexpr static rivet::rivet_type_id ShadowZoneAssetPath_type_id = 0x52d00d23;
		constexpr static std::string_view ZoneAssetPath_type_name = "ZoneAssetPath";
		constexpr static rivet::rivet_type_id ZoneAssetPath_type_id = 0x37f3578c; 

		explicit UI_CinematicInstanceZone() = default;
		explicit UI_CinematicInstanceZone([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool IsCinematicOwner {};
		std::string_view ParentRegionAssetPath {};
		std::string_view ShadowZoneAssetPath {};
		std::string_view ZoneAssetPath {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UI_CinematicInstanceZone>;
	};
} // namespace rivet::ddl::generated

// clang-format on
