// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LevelDefAux.hpp>
#include <rivet/ddl/generated/DDLAABB.hpp>
#include <rivet/ddl/generated/LevelGridSettings.hpp>
#include <rivet/ddl/generated/VaultMetaData.hpp> 

#include <rivet/ddl/generated/LevelDef.hpp>

namespace rivet::ddl::generated {
	LevelDef::LevelDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VaultMetaData = serialized->unwrap_into<rivet::ddl::generated::VaultMetaData>(VaultMetaData_type_id);
		IconPath = serialized->get_string(IconPath_type_id);
		DefaultNamedLink = serialized->get_string(DefaultNamedLink_type_id);
		InstallGroup = serialized->get_int32(InstallGroup_type_id);
		GlobalRegion = serialized->get_string(GlobalRegion_type_id);
		Regions = serialized->get_strings(Regions_type_id);
		WorldMapAABB = serialized->unwrap_into<rivet::ddl::generated::DDLAABB>(WorldMapAABB_type_id);
		GridSettings = serialized->unwrap_into<rivet::ddl::generated::LevelGridSettings>(GridSettings_type_id);
		Aux = serialized->unwrap_into<rivet::ddl::generated::LevelDefAux>(Aux_type_id);
		HibernateSet = serialized->get_string(HibernateSet_type_id);
		AssetSwapPlatSpec = serialized->get_string(AssetSwapPlatSpec_type_id); 
	}

	[[nodiscard]] auto
	LevelDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LevelDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LevelDef> {
		if (incoming_type_id == LevelDef::type_id) {
			return std::make_shared<LevelDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
