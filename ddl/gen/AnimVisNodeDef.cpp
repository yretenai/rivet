// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimVisNodeDef.hpp>

namespace rivet::ddl::generated {
	AnimVisNodeDef::AnimVisNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Type = serialized->get_enum<rivet::ddl::generated::x6c8f7f60>(Type_type_id, rivet::ddl::generated::x6c8f7f60_values, rivet::ddl::generated::x6c8f7f60::TypeDriverClip);
		DriverName = serialized->get_string(DriverName_type_id, {});
		Name = serialized->get_string(Name_type_id, {});
		Duration = serialized->get_float(Duration_type_id, 0.000000);
		LocalTime = serialized->get_float(LocalTime_type_id, 0.000000);
		LocalWeight = serialized->get_float(LocalWeight_type_id, 0.000000);
		Weight = serialized->get_float(Weight_type_id, 0.000000);
		RefNames = serialized->get_strings(RefNames_type_id); 
	}

	[[nodiscard]] auto
	AnimVisNodeDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimVisNodeDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimVisNodeDef> {
		if (incoming_type_id == AnimVisNodeDef::type_id) {
			return std::make_shared<AnimVisNodeDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
