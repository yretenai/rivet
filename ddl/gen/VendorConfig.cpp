// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VendorItemData.hpp> 

#include <rivet/ddl/generated/VendorConfig.hpp>

namespace rivet::ddl::generated {
	VendorConfig::VendorConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		Type = serialized->get_enum<rivet::ddl::generated::x189ff42f>(Type_type_id, rivet::ddl::generated::x189ff42f_values, rivet::ddl::generated::x189ff42f::Weapons);
		TabChangeDelayDuration = serialized->get_float(TabChangeDelayDuration_type_id, 0.250000);
		PurchaseWeaponHoldTime = serialized->get_float(PurchaseWeaponHoldTime_type_id, 1.000000);
		UpgradeCellHoldTime = serialized->get_float(UpgradeCellHoldTime_type_id, 0.500000);
		UpgradeCellWidth = serialized->get_float(UpgradeCellWidth_type_id, 53.000000);
		UpgradeCellHeight = serialized->get_float(UpgradeCellHeight_type_id, 62.000000);
		UpgradeCellYOffset = serialized->get_float(UpgradeCellYOffset_type_id, 31.000000);
		IdleVOTriggerTime = serialized->get_float(IdleVOTriggerTime_type_id, 20.000000);
		ItemDatas = serialized->unwrap_into_many<rivet::ddl::generated::VendorItemData>(ItemDatas_type_id); 
	}

	[[nodiscard]] auto
	VendorConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VendorConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VendorConfig> {
		if (incoming_type_id == VendorConfig::type_id) {
			return std::make_shared<VendorConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
