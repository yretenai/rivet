// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ChargeAttackData.hpp> 

#include <rivet/ddl/generated/ChargeAttackConfig.hpp>

namespace rivet::ddl::generated {
	ChargeAttackConfig::ChargeAttackConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		UseBelowHPFraction = serialized->get_float(UseBelowHPFraction_type_id);
		MinIntervalGlobal = serialized->get_float(MinIntervalGlobal_type_id);
		MinIntervalSelf = serialized->get_float(MinIntervalSelf_type_id);
		MinStartDist = serialized->get_float(MinStartDist_type_id);
		MaxStartDist = serialized->get_float(MaxStartDist_type_id);
		MaxStartAngle = serialized->get_float(MaxStartAngle_type_id);
		ChargeAttackData = serialized->unwrap_into<rivet::ddl::generated::ChargeAttackData>(ChargeAttackData_type_id); 
	}

	[[nodiscard]] auto
	ChargeAttackConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ChargeAttackConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ChargeAttackConfig> {
		if (incoming_type_id == ChargeAttackConfig::type_id) {
			return std::make_shared<ChargeAttackConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
