// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VanityCineHelmetTransData.hpp>

namespace rivet::ddl::generated {
	VanityCineHelmetTransData::VanityCineHelmetTransData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		HelmetDissolvePreMat = serialized->get_string(HelmetDissolvePreMat_type_id);
		HelmetDissolvePostMat = serialized->get_string(HelmetDissolvePostMat_type_id);
		GrowAnimName = serialized->get_string(GrowAnimName_type_id);
		ShrinkAnimName = serialized->get_string(ShrinkAnimName_type_id);
		DissolveOffDuration = serialized->get_float(DissolveOffDuration_type_id);
		DissolveOffStartTime = serialized->get_float(DissolveOffStartTime_type_id);
		ScaleOffDuration = serialized->get_float(ScaleOffDuration_type_id);
		ScaleOffStartTime = serialized->get_float(ScaleOffStartTime_type_id);
		SwapOffTime = serialized->get_float(SwapOffTime_type_id);
		DissolveOnDuration = serialized->get_float(DissolveOnDuration_type_id);
		DissolveOnStartTime = serialized->get_float(DissolveOnStartTime_type_id);
		ScaleOnDuration = serialized->get_float(ScaleOnDuration_type_id);
		ScaleOnStartTime = serialized->get_float(ScaleOnStartTime_type_id);
		SwapOnTime = serialized->get_float(SwapOnTime_type_id); 
	}

	[[nodiscard]] auto
	VanityCineHelmetTransData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VanityCineHelmetTransData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VanityCineHelmetTransData> {
		if (incoming_type_id == VanityCineHelmetTransData::type_id) {
			return std::make_shared<VanityCineHelmetTransData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
