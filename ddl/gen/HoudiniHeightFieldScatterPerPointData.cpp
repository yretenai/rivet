// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector2.hpp> 

#include <rivet/ddl/generated/HoudiniHeightFieldScatterPerPointData.hpp>

namespace rivet::ddl::generated {
	HoudiniHeightFieldScatterPerPointData::HoudiniHeightFieldScatterPerPointData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PerPointCountMethod = serialized->get_enum<rivet::ddl::generated::x17a2adb9>(PerPointCountMethod_type_id, rivet::ddl::generated::x17a2adb9_values, rivet::ddl::generated::x17a2adb9::Exact_Number);
		ParamExactNumber = serialized->get_int32(ParamExactNumber_type_id, 10);
		ParamPoissonRange = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(ParamPoissonRange_type_id);
		PositioningMethod = serialized->get_enum<rivet::ddl::generated::xf12451bd>(PositioningMethod_type_id, rivet::ddl::generated::xf12451bd_values, rivet::ddl::generated::xf12451bd::Offset);
		SourceLayerName = serialized->get_string(SourceLayerName_type_id, {}); 
	}

	[[nodiscard]] auto
	HoudiniHeightFieldScatterPerPointData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HoudiniHeightFieldScatterPerPointData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HoudiniHeightFieldScatterPerPointData> {
		if (incoming_type_id == HoudiniHeightFieldScatterPerPointData::type_id) {
			return std::make_shared<HoudiniHeightFieldScatterPerPointData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
