// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ItemPrereqNodeDef.hpp>
#include <rivet/ddl/generated/GlobalSaveTableNodeDef.hpp>
#include <rivet/ddl/generated/ChallengeModePrereqNodeDef.hpp>
#include <rivet/ddl/generated/CharacterPrereqNodeDef.hpp> 

#include <rivet/ddl/generated/PrereqNodeBaseDef.hpp>

namespace rivet::ddl::generated {
	PrereqNodeBaseDef::PrereqNodeBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): MissionSystemDefaultNodeBaseDef(serialized) {

	}

	[[nodiscard]] auto
	PrereqNodeBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PrereqNodeBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PrereqNodeBaseDef> {
		if (incoming_type_id == PrereqNodeBaseDef::type_id) {
			return std::make_shared<PrereqNodeBaseDef>(serialized);
		}

		auto CharacterPrereqNodeDef_ptr = CharacterPrereqNodeDef::from_substruct(incoming_type_id, serialized);
		if (CharacterPrereqNodeDef_ptr != nullptr) {
			return CharacterPrereqNodeDef_ptr;
		}

		auto ChallengeModePrereqNodeDef_ptr = ChallengeModePrereqNodeDef::from_substruct(incoming_type_id, serialized);
		if (ChallengeModePrereqNodeDef_ptr != nullptr) {
			return ChallengeModePrereqNodeDef_ptr;
		}

		auto GlobalSaveTableNodeDef_ptr = GlobalSaveTableNodeDef::from_substruct(incoming_type_id, serialized);
		if (GlobalSaveTableNodeDef_ptr != nullptr) {
			return GlobalSaveTableNodeDef_ptr;
		}

		auto ItemPrereqNodeDef_ptr = ItemPrereqNodeDef::from_substruct(incoming_type_id, serialized);
		if (ItemPrereqNodeDef_ptr != nullptr) {
			return ItemPrereqNodeDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
