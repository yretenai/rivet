// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PhysicsDiagnostics.hpp>

namespace rivet::ddl::generated {
	PhysicsDiagnostics::PhysicsDiagnostics([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BreakablesVerbose = serialized->get_bool(BreakablesVerbose_type_id);
		WarnOnThisManyCollisions = serialized->get_int8(WarnOnThisManyCollisions_type_id);
		WarnWhenRemovingThisManyObjects = serialized->get_int16(WarnWhenRemovingThisManyObjects_type_id);
		ManifoldModifierLogLength = serialized->get_int16(ManifoldModifierLogLength_type_id);
		WarnOnThisManyManifoldsGloballyInOneFrame = serialized->get_int16(WarnOnThisManyManifoldsGloballyInOneFrame_type_id);
		WarnOnThisManyBodyActivationsGloballyInOneFrame = serialized->get_int16(WarnOnThisManyBodyActivationsGloballyInOneFrame_type_id);
		MinimumSecondsBetweenExcessiveManifoldReports = serialized->get_float(MinimumSecondsBetweenExcessiveManifoldReports_type_id);
		FailsafeMaximumVelocity = serialized->get_float(FailsafeMaximumVelocity_type_id); 
	}

	[[nodiscard]] auto
	PhysicsDiagnostics::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PhysicsDiagnostics::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PhysicsDiagnostics> {
		if (incoming_type_id == PhysicsDiagnostics::type_id) {
			return std::make_shared<PhysicsDiagnostics>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
