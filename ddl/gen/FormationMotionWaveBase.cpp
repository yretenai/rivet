// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FormationMotionWaveAroundPivot.hpp>
#include <rivet/ddl/generated/FormationMotionWaveDirection.hpp> 

#include <rivet/ddl/generated/FormationMotionWaveBase.hpp>

namespace rivet::ddl::generated {
	FormationMotionWaveBase::FormationMotionWaveBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): FormationMotionBase(serialized) {
		Amplitude = serialized->get_float(Amplitude_type_id);
		Frequency = serialized->get_float(Frequency_type_id);
		Period = serialized->get_float(Period_type_id);
		PhaseType = serialized->get_enum<rivet::ddl::generated::xe268370>(PhaseType_type_id, rivet::ddl::generated::xe268370_values);
		HeightOffset = serialized->get_float(HeightOffset_type_id); 
	}

	[[nodiscard]] auto
	FormationMotionWaveBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FormationMotionWaveBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FormationMotionWaveBase> {
		if (incoming_type_id == FormationMotionWaveBase::type_id) {
			return std::make_shared<FormationMotionWaveBase>(serialized);
		}

		auto FormationMotionWaveDirection_ptr = FormationMotionWaveDirection::from_substruct(incoming_type_id, serialized);
		if (FormationMotionWaveDirection_ptr != nullptr) {
			return FormationMotionWaveDirection_ptr;
		}

		auto FormationMotionWaveAroundPivot_ptr = FormationMotionWaveAroundPivot::from_substruct(incoming_type_id, serialized);
		if (FormationMotionWaveAroundPivot_ptr != nullptr) {
			return FormationMotionWaveAroundPivot_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
