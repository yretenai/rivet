// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x3234dd4a.hpp> 

namespace rivet::ddl::generated {
	struct AnimDriverConnectionDef;
	struct DDLVector2; 

	struct RIVET_DDL_SHARED AnimDriverGridNodeDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimDriverGridNodeDef";
		constexpr static rivet::rivet_type_id type_id = 0xd7fbe76b;

		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view DisplayName_type_name = "DisplayName";
		constexpr static rivet::rivet_type_id DisplayName_type_id = 0xeaf33243;
		constexpr static std::string_view x_type_name = "x";
		constexpr static rivet::rivet_type_id x_type_id = 0x655d6145;
		constexpr static std::string_view y_type_name = "y";
		constexpr static rivet::rivet_type_id y_type_id = 0x125a51d3;
		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view Rate_type_name = "Rate";
		constexpr static rivet::rivet_type_id Rate_type_id = 0xef7cff89;
		constexpr static std::string_view CountX_type_name = "CountX";
		constexpr static rivet::rivet_type_id CountX_type_id = 0x2af3a11c;
		constexpr static std::string_view CountY_type_name = "CountY";
		constexpr static rivet::rivet_type_id CountY_type_id = 0x5df4918a;
		constexpr static std::string_view GridMin_type_name = "GridMin";
		constexpr static rivet::rivet_type_id GridMin_type_id = 0xd26c95ad;
		constexpr static std::string_view GridMax_type_name = "GridMax";
		constexpr static rivet::rivet_type_id GridMax_type_id = 0xee61aaf4;
		constexpr static std::string_view CurrentPoint_type_name = "CurrentPoint";
		constexpr static rivet::rivet_type_id CurrentPoint_type_id = 0x277cfddd;
		constexpr static std::string_view Connections_type_name = "Connections";
		constexpr static rivet::rivet_type_id Connections_type_id = 0x322aadce; 

		explicit AnimDriverGridNodeDef() = default;
		explicit AnimDriverGridNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Name {};
		std::string_view DisplayName {};
		float x {};
		float y {};
		rivet::ddl::generated::x3234dd4a Type {};
		float Rate {};
		uint32_t CountX {};
		uint32_t CountY {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> GridMin {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> GridMax {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> CurrentPoint {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverConnectionDef>> Connections {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDriverGridNodeDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
