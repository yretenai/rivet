// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CollectibleTypeDenum.hpp>
#include <rivet/ddl/generated/ObjSysUnlockSequence.hpp>
#include <rivet/ddl/generated/CollectibleParentTypeInfo.hpp>
#include <rivet/ddl/generated/CollectibleTypeInfo.hpp> 

#include <rivet/ddl/generated/CollectibleTypeInfoBase.hpp>

namespace rivet::ddl::generated {
	CollectibleTypeInfoBase::CollectibleTypeInfoBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CollectibleType = serialized->unwrap_into<rivet::ddl::generated::CollectibleTypeDenum>(CollectibleType_type_id);
		MissionLocks = serialized->unwrap_into<rivet::ddl::generated::ObjSysUnlockSequence>(MissionLocks_type_id); 
	}

	[[nodiscard]] auto
	CollectibleTypeInfoBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CollectibleTypeInfoBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CollectibleTypeInfoBase> {
		if (incoming_type_id == CollectibleTypeInfoBase::type_id) {
			return std::make_shared<CollectibleTypeInfoBase>(serialized);
		}

		auto CollectibleTypeInfo_ptr = CollectibleTypeInfo::from_substruct(incoming_type_id, serialized);
		if (CollectibleTypeInfo_ptr != nullptr) {
			return CollectibleTypeInfo_ptr;
		}

		auto CollectibleParentTypeInfo_ptr = CollectibleParentTypeInfo::from_substruct(incoming_type_id, serialized);
		if (CollectibleParentTypeInfo_ptr != nullptr) {
			return CollectibleParentTypeInfo_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
