// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BossBotCordelionNefMaterialSwaps.hpp>
#include <rivet/ddl/generated/BossBotCordelionNefariousShieldManagerPrius.hpp>
#include <rivet/ddl/generated/HoverShuffleData.hpp> 

#include <rivet/ddl/generated/BossBotCordelionNefariousPrius.hpp>

namespace rivet::ddl::generated {
	BossBotCordelionNefariousPrius::BossBotCordelionNefariousPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotPrius(serialized) {
		HoverLeanStrength = serialized->get_float(HoverLeanStrength_type_id);
		HoverLeanVarMultiplier = serialized->get_float(HoverLeanVarMultiplier_type_id);
		HoverLeanBlendSpeed = serialized->get_float(HoverLeanBlendSpeed_type_id);
		HoverShuffleData = serialized->unwrap_into<rivet::ddl::generated::HoverShuffleData>(HoverShuffleData_type_id);
		ShieldData = serialized->unwrap_into<rivet::ddl::generated::BossBotCordelionNefariousShieldManagerPrius>(ShieldData_type_id);
		HealthThresholdForSwap = serialized->get_float(HealthThresholdForSwap_type_id);
		MaterialSwapsToDo = serialized->unwrap_into_many<rivet::ddl::generated::BossBotCordelionNefMaterialSwaps>(MaterialSwapsToDo_type_id); 
	}

	[[nodiscard]] auto
	BossBotCordelionNefariousPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BossBotCordelionNefariousPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BossBotCordelionNefariousPrius> {
		if (incoming_type_id == BossBotCordelionNefariousPrius::type_id) {
			return std::make_shared<BossBotCordelionNefariousPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
