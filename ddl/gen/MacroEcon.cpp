// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MacroEcon.hpp>

namespace rivet::ddl::generated {
	MacroEcon::MacroEcon([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SegmentsCompleted = serialized->get_uint32(SegmentsCompleted_type_id);
		MinBolts = serialized->get_uint32(MinBolts_type_id);
		MaxBolts = serialized->get_uint32(MaxBolts_type_id);
		MinHeroXP = serialized->get_uint32(MinHeroXP_type_id);
		MaxHeroXP = serialized->get_uint32(MaxHeroXP_type_id);
		MinWpnXP = serialized->get_uint32(MinWpnXP_type_id);
		MaxWpnXP = serialized->get_uint32(MaxWpnXP_type_id);
		MinRaritanium = serialized->get_uint32(MinRaritanium_type_id);
		MaxRaritanium = serialized->get_uint32(MaxRaritanium_type_id); 
	}

	[[nodiscard]] auto
	MacroEcon::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MacroEcon::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MacroEcon> {
		if (incoming_type_id == MacroEcon::type_id) {
			return std::make_shared<MacroEcon>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
