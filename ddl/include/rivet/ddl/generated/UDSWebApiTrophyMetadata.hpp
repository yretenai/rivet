// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xfb81cf7c.hpp> 

namespace rivet::ddl::generated {
	struct UBPTrophyUnlock;
	struct UDSWebApiReward; 

	struct RIVET_DDL_SHARED UDSWebApiTrophyMetadata : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "UDSWebApiTrophyMetadata";
		constexpr static rivet::rivet_type_id type_id = 0x3fe88e5d;

		constexpr static std::string_view name_type_name = "name";
		constexpr static rivet::rivet_type_id name_type_id = 0xce811188;
		constexpr static std::string_view Description_type_name = "Description";
		constexpr static rivet::rivet_type_id Description_type_id = 0xe03811fd;
		constexpr static std::string_view grade_type_name = "grade";
		constexpr static rivet::rivet_type_id grade_type_id = 0x81c84df1;
		constexpr static std::string_view hidden_type_name = "hidden";
		constexpr static rivet::rivet_type_id hidden_type_id = 0xb189a2ec;
		constexpr static std::string_view sortKey_type_name = "sortKey";
		constexpr static rivet::rivet_type_id sortKey_type_id = 0x5dca42dc;
		constexpr static std::string_view platinumTrophyObjectId_type_name = "platinumTrophyObjectId";
		constexpr static rivet::rivet_type_id platinumTrophyObjectId_type_id = 0x82ae60a2;
		constexpr static std::string_view hasReward_type_name = "hasReward";
		constexpr static rivet::rivet_type_id hasReward_type_id = 0x38c096e8;
		constexpr static std::string_view reward_type_name = "reward";
		constexpr static rivet::rivet_type_id reward_type_id = 0x77053902;
		constexpr static std::string_view unlockCondition_type_name = "unlockCondition";
		constexpr static rivet::rivet_type_id unlockCondition_type_id = 0xd9f0d256; 

		explicit UDSWebApiTrophyMetadata() = default;
		explicit UDSWebApiTrophyMetadata([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::string_view> name {};
		std::vector<std::string_view> Description {};
		rivet::ddl::generated::xfb81cf7c grade {};
		bool hidden {};
		std::string_view sortKey {};
		std::string_view platinumTrophyObjectId {};
		bool hasReward {};
		std::shared_ptr<rivet::ddl::generated::UDSWebApiReward> reward {};
		std::shared_ptr<rivet::ddl::generated::UBPTrophyUnlock> unlockCondition {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UDSWebApiTrophyMetadata>;
	};
} // namespace rivet::ddl::generated

// clang-format on
