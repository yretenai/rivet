// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/WeaponBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct DDLVector3;
	struct BasicRecoilPrius; 

	struct RIVET_DDL_SHARED WeaponGamePrius : WeaponBasePrius {
		constexpr const static std::string_view type_name = "WeaponGamePrius";
		constexpr const static rivet::rivet_type_id type_id = 0x8bbbb4eb;

		constexpr const static std::string_view DebugColorEnabled_type_name = "DebugColorEnabled";
		constexpr const static rivet::rivet_type_id DebugColorEnabled_type_id = 0x14446789;
		constexpr const static std::string_view DebugColor_type_name = "DebugColor";
		constexpr const static rivet::rivet_type_id DebugColor_type_id = 0xae9ea1f6;
		constexpr const static std::string_view IgnoreCameraContextVolumesForAiming_type_name = "IgnoreCameraContextVolumesForAiming";
		constexpr const static rivet::rivet_type_id IgnoreCameraContextVolumesForAiming_type_id = 0x351c9a6a;
		constexpr const static std::string_view SupportsToggleFire_type_name = "SupportsToggleFire";
		constexpr const static rivet::rivet_type_id SupportsToggleFire_type_id = 0xbda2e316;
		constexpr const static std::string_view SupportsHoldFire_type_name = "SupportsHoldFire";
		constexpr const static rivet::rivet_type_id SupportsHoldFire_type_id = 0xb9f35c34;
		constexpr const static std::string_view Recoil_type_name = "Recoil";
		constexpr const static rivet::rivet_type_id Recoil_type_id = 0x2a1925e; 

		explicit WeaponGamePrius() = default;
		explicit WeaponGamePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool DebugColorEnabled {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> DebugColor {};
		bool IgnoreCameraContextVolumesForAiming {};
		bool SupportsToggleFire {};
		bool SupportsHoldFire {};
		std::vector<std::shared_ptr<rivet::ddl::generated::BasicRecoilPrius>> Recoil {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponGamePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
