// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MovingLevelTileList.hpp> 

#include <rivet/ddl/generated/MovingLevelPrius.hpp>

namespace rivet::ddl::generated {
	MovingLevelPrius::MovingLevelPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		InitialTile = serialized->get_uint64(InitialTile_type_id, 0);
		FinalTile = serialized->get_uint64(FinalTile_type_id, 0);
		TileLists = serialized->unwrap_into_many<rivet::ddl::generated::MovingLevelTileList>(TileLists_type_id);
		MaxSpeed = serialized->get_float(MaxSpeed_type_id, 0.000000);
		Accel = serialized->get_float(Accel_type_id, 0.000000);
		Decel = serialized->get_float(Decel_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	MovingLevelPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MovingLevelPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MovingLevelPrius> {
		if (incoming_type_id == MovingLevelPrius::type_id) {
			return std::make_shared<MovingLevelPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
