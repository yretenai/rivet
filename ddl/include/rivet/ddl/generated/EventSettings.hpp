// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED EventSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "EventSettings";
		constexpr static rivet::rivet_type_id type_id = 0xd25568d4;

		constexpr static std::string_view InstanceMax_type_name = "InstanceMax";
		constexpr static rivet::rivet_type_id InstanceMax_type_id = 0x74f7829f;
		constexpr static std::string_view DelayInstanceMax_type_name = "DelayInstanceMax";
		constexpr static rivet::rivet_type_id DelayInstanceMax_type_id = 0xe9e4c138;
		constexpr static std::string_view BucketedInstanceMax_type_name = "BucketedInstanceMax";
		constexpr static rivet::rivet_type_id BucketedInstanceMax_type_id = 0x92f8e199;
		constexpr static std::string_view ThreadInstanceMax_type_name = "ThreadInstanceMax";
		constexpr static rivet::rivet_type_id ThreadInstanceMax_type_id = 0x97831ca5;
		constexpr static std::string_view ThreadEventHeapSize_type_name = "ThreadEventHeapSize";
		constexpr static rivet::rivet_type_id ThreadEventHeapSize_type_id = 0xf6602402; 

		explicit EventSettings() = default;
		explicit EventSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t InstanceMax {};
		int32_t DelayInstanceMax {};
		int32_t BucketedInstanceMax {};
		int32_t ThreadInstanceMax {};
		int32_t ThreadEventHeapSize {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EventSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
