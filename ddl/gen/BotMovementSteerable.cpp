// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotMountDamageData.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/BotMovementSteerable.hpp>

namespace rivet::ddl::generated {
	BotMovementSteerable::BotMovementSteerable([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotMovementBase(serialized) {
		DamageHeroKamikaze = serialized->get_enum<rivet::ddl::generated::x99bafe38>(DamageHeroKamikaze_type_id, rivet::ddl::generated::x99bafe38_values);
		BotKamikazeDamageData = serialized->unwrap_into<rivet::ddl::generated::BotMountDamageData>(BotKamikazeDamageData_type_id);
		BotImpactDamageData = serialized->unwrap_into<rivet::ddl::generated::BotMountDamageData>(BotImpactDamageData_type_id);
		BreakableBusterLocalOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(BreakableBusterLocalOffset_type_id); 
	}

	[[nodiscard]] auto
	BotMovementSteerable::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotMovementSteerable::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotMovementSteerable> {
		if (incoming_type_id == BotMovementSteerable::type_id) {
			return std::make_shared<BotMovementSteerable>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
