// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroAwarenessConfig.hpp>

namespace rivet::ddl::generated {
	HeroAwarenessConfig::HeroAwarenessConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		HeadTurnActivateMaxSpeed = serialized->get_float(HeadTurnActivateMaxSpeed_type_id);
		HeadTurnActivateAccel = serialized->get_float(HeadTurnActivateAccel_type_id);
		HeadTurnActivateDecel = serialized->get_float(HeadTurnActivateDecel_type_id);
		HeadTurnRecoveryMaxSpeed = serialized->get_float(HeadTurnRecoveryMaxSpeed_type_id);
		HeadTurnRecoveryAccel = serialized->get_float(HeadTurnRecoveryAccel_type_id);
		HeadTurnRecoveryDecel = serialized->get_float(HeadTurnRecoveryDecel_type_id);
		HeadTurnMaxYaw = serialized->get_float(HeadTurnMaxYaw_type_id);
		HeadTurnMaxPitch = serialized->get_float(HeadTurnMaxPitch_type_id);
		HeadLookDriverCooldown = serialized->get_float(HeadLookDriverCooldown_type_id);
		AimAssistTargetRange = serialized->get_float(AimAssistTargetRange_type_id);
		AimAssistTargetDecayTime = serialized->get_float(AimAssistTargetDecayTime_type_id);
		RecentAttackerRange = serialized->get_float(RecentAttackerRange_type_id);
		RecentAttackerMaxAge = serialized->get_float(RecentAttackerMaxAge_type_id);
		PointOfInterestRange = serialized->get_float(PointOfInterestRange_type_id);
		NPCRange = serialized->get_float(NPCRange_type_id);
		NPCKeepTargetDuration = serialized->get_float(NPCKeepTargetDuration_type_id);
		EnemyRange = serialized->get_float(EnemyRange_type_id);
		EnemyCheckInterval = serialized->get_float(EnemyCheckInterval_type_id);
		TraversalRange = serialized->get_float(TraversalRange_type_id);
		TraversalMaxAge = serialized->get_float(TraversalMaxAge_type_id); 
	}

	auto
	HeroAwarenessConfig::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	HeroAwarenessConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroAwarenessConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroAwarenessConfig> {
		if (incoming_type_id == HeroAwarenessConfig::type_id) {
			return std::make_shared<HeroAwarenessConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
