// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimDriverConnectionDef.hpp>
#include <rivet/ddl/generated/DDLVector2.hpp> 

#include <rivet/ddl/generated/AnimDriverGridNodeDef.hpp>

namespace rivet::ddl::generated {
	AnimDriverGridNodeDef::AnimDriverGridNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Name = serialized->get_string(Name_type_id, {});
		DisplayName = serialized->get_string(DisplayName_type_id, "");
		x = serialized->get_float(x_type_id, 0.000000f);
		y = serialized->get_float(y_type_id, 0.000000f);
		Type = serialized->get_enum<rivet::ddl::generated::x3234dd4a>(Type_type_id, rivet::ddl::generated::x3234dd4a_values, rivet::ddl::generated::x3234dd4a::Default);
		Rate = serialized->get_float(Rate_type_id, 1.000000f);
		CountX = serialized->get_uint32(CountX_type_id, 0u);
		CountY = serialized->get_uint32(CountY_type_id, 0u);
		GridMin = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(GridMin_type_id);
		GridMax = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(GridMax_type_id);
		CurrentPoint = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(CurrentPoint_type_id);
		Connections = serialized->unwrap_into_many<rivet::ddl::generated::AnimDriverConnectionDef>(Connections_type_id); 
	}

	[[nodiscard]] auto
	AnimDriverGridNodeDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimDriverGridNodeDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDriverGridNodeDef> {
		if (incoming_type_id == AnimDriverGridNodeDef::type_id) {
			return std::make_shared<AnimDriverGridNodeDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
