// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimatedBouncyPrius.hpp>
#include <rivet/ddl/generated/BouncyRaftPrius.hpp> 

#include <rivet/ddl/generated/TrampolinePrius.hpp>

namespace rivet::ddl::generated {
	TrampolinePrius::TrampolinePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ReflectionFactor = serialized->get_float(ReflectionFactor_type_id);
		MinHeight = serialized->get_float(MinHeight_type_id);
		MaxHeight = serialized->get_float(MaxHeight_type_id);
		TimeToPeak = serialized->get_float(TimeToPeak_type_id);
		MinDesiredDistance = serialized->get_float(MinDesiredDistance_type_id);
		MaxDesiredDistance = serialized->get_float(MaxDesiredDistance_type_id);
		CameraMode = serialized->get_enum<rivet::ddl::generated::x925714c8>(CameraMode_type_id, rivet::ddl::generated::x925714c8_values);
		JumpPad = serialized->get_bool(JumpPad_type_id);
		EnableSuperJump = serialized->get_bool(EnableSuperJump_type_id);
		DisableOnDestroyed = serialized->get_bool(DisableOnDestroyed_type_id);
		OverrideMaterial = serialized->get_enum<rivet::ddl::generated::x10b3c4cf>(OverrideMaterial_type_id, rivet::ddl::generated::x10b3c4cf_values);
		VibrateOnBounce = serialized->get_bool(VibrateOnBounce_type_id);
		VibratePosConstant = serialized->get_string(VibratePosConstant_type_id);
		VibrateTConstant = serialized->get_string(VibrateTConstant_type_id);
		VibrateDuration = serialized->get_float(VibrateDuration_type_id);
		Enabled = serialized->get_bool(Enabled_type_id);
		DoesBounceUseMomentum = serialized->get_bool(DoesBounceUseMomentum_type_id); 
	}

	[[nodiscard]] auto
	TrampolinePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TrampolinePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TrampolinePrius> {
		if (incoming_type_id == TrampolinePrius::type_id) {
			return std::make_shared<TrampolinePrius>(serialized);
		}

		auto BouncyRaftPrius_ptr = BouncyRaftPrius::from_substruct(incoming_type_id, serialized);
		if (BouncyRaftPrius_ptr != nullptr) {
			return BouncyRaftPrius_ptr;
		}

		auto AnimatedBouncyPrius_ptr = AnimatedBouncyPrius::from_substruct(incoming_type_id, serialized);
		if (AnimatedBouncyPrius_ptr != nullptr) {
			return AnimatedBouncyPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
