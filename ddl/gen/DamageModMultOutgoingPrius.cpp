// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DamageModMultOutgoingScriptPrius.hpp> 

#include <rivet/ddl/generated/DamageModMultOutgoingPrius.hpp>

namespace rivet::ddl::generated {
	DamageModMultOutgoingPrius::DamageModMultOutgoingPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): DamageModifierOutgoingPrius(serialized) {
		Multiplier = serialized->get_float(Multiplier_type_id, 1.000000f);
		DamageFilter = serialized->get_enums<rivet::ddl::generated::DamageTypes>(DamageFilter_type_id, rivet::ddl::generated::DamageTypes_values);
		WeaponTypeFilter = serialized->get_uint32(WeaponTypeFilter_type_id, 0u);
		AllegianceFilter = serialized->get_uint32(AllegianceFilter_type_id, 0u);
		ModifiedTag = serialized->get_uint32(ModifiedTag_type_id, 0u); 
	}

	[[nodiscard]] auto
	DamageModMultOutgoingPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DamageModMultOutgoingPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DamageModMultOutgoingPrius> {
		if (incoming_type_id == DamageModMultOutgoingPrius::type_id) {
			return std::make_shared<DamageModMultOutgoingPrius>(serialized);
		}

		auto DamageModMultOutgoingScriptPrius_ptr = DamageModMultOutgoingScriptPrius::from_substruct(incoming_type_id, serialized);
		if (DamageModMultOutgoingScriptPrius_ptr != nullptr) {
			return DamageModMultOutgoingScriptPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
