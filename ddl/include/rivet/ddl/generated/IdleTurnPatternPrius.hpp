// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x32fe2d84.hpp>
#include <rivet/ddl/generated/bitsets/x81884035.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED IdleTurnPatternPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "IdleTurnPatternPrius";
		constexpr static rivet::rivet_type_id type_id = 0xdc6453fb;

		constexpr static std::string_view Enabled_type_name = "Enabled";
		constexpr static rivet::rivet_type_id Enabled_type_id = 0x5113d8bc;
		constexpr static std::string_view Directions_type_name = "Directions";
		constexpr static rivet::rivet_type_id Directions_type_id = 0x926e39d5;
		constexpr static std::string_view TurnType_type_name = "TurnType";
		constexpr static rivet::rivet_type_id TurnType_type_id = 0x64294012;
		constexpr static std::string_view MinTurnDelay_type_name = "MinTurnDelay";
		constexpr static rivet::rivet_type_id MinTurnDelay_type_id = 0xdd6f7753;
		constexpr static std::string_view MaxTurnDelay_type_name = "MaxTurnDelay";
		constexpr static rivet::rivet_type_id MaxTurnDelay_type_id = 0x4d1c67b9; 

		explicit IdleTurnPatternPrius() = default;
		explicit IdleTurnPatternPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool Enabled {};
		rivet::ddl::generated::x81884035 Directions {};
		rivet::ddl::generated::x32fe2d84 TurnType {};
		float MinTurnDelay {};
		float MaxTurnDelay {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<IdleTurnPatternPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
