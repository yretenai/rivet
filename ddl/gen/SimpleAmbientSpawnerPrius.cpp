// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SimpleSpawnActorAsset.hpp> 

#include <rivet/ddl/generated/SimpleAmbientSpawnerPrius.hpp>

namespace rivet::ddl::generated {
	SimpleAmbientSpawnerPrius::SimpleAmbientSpawnerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartEnabled = serialized->get_bool(StartEnabled_type_id);
		NumToSpawn = serialized->get_float(NumToSpawn_type_id);
		NumToSpawnImmed = serialized->get_uint8(NumToSpawnImmed_type_id);
		SpawnTimeMin = serialized->get_float(SpawnTimeMin_type_id);
		SpawnTimeMax = serialized->get_float(SpawnTimeMax_type_id);
		UsePlayerForward = serialized->get_bool(UsePlayerForward_type_id);
		AngleFromPlayerMin = serialized->get_float(AngleFromPlayerMin_type_id);
		AngleFromPlayerMax = serialized->get_float(AngleFromPlayerMax_type_id);
		DistFromPlayerMin = serialized->get_float(DistFromPlayerMin_type_id);
		DistFromPlayerMax = serialized->get_float(DistFromPlayerMax_type_id);
		SpawnActorList = serialized->unwrap_into_many<rivet::ddl::generated::SimpleSpawnActorAsset>(SpawnActorList_type_id); 
	}

	[[nodiscard]] auto
	SimpleAmbientSpawnerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SimpleAmbientSpawnerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleAmbientSpawnerPrius> {
		if (incoming_type_id == SimpleAmbientSpawnerPrius::type_id) {
			return std::make_shared<SimpleAmbientSpawnerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
