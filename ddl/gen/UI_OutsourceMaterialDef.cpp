// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MaterialAlpha.hpp> 

#include <rivet/ddl/generated/UI_OutsourceMaterialDef.hpp>

namespace rivet::ddl::generated {
	UI_OutsourceMaterialDef::UI_OutsourceMaterialDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Name = serialized->get_string(Name_type_id, {});
		TemplatePath = serialized->get_string(TemplatePath_type_id, "required/materials/basic_normal_gloss.materialgraph");
		AVMaterial = serialized->get_string(AVMaterial_type_id, {});
		DoubleSided = serialized->get_bool(DoubleSided_type_id, false);
		SortTriangles = serialized->get_bool(SortTriangles_type_id, false);
		AlphaProperties = serialized->unwrap_into<rivet::ddl::generated::MaterialAlpha>(AlphaProperties_type_id);
		Textures = serialized->get_strings(Textures_type_id); 
	}

	[[nodiscard]] auto
	UI_OutsourceMaterialDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UI_OutsourceMaterialDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UI_OutsourceMaterialDef> {
		if (incoming_type_id == UI_OutsourceMaterialDef::type_id) {
			return std::make_shared<UI_OutsourceMaterialDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
