// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/TargetingBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct SpreadHeuristics;
	struct DirectionHeuristics;
	struct DistanceHeuristics;
	struct AggroHeuristics;
	struct LosHeuristics;
	struct PlayerHeuristics; 

	struct RIVET_DDL_SHARED HeuristicTargetingPrius : TargetingBasePrius {
		constexpr const static std::string_view type_name = "HeuristicTargetingPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x35f2fdb4;

		constexpr const static std::string_view Distance_type_name = "Distance";
		constexpr const static rivet::rivet_type_id Distance_type_id = 0xe69327f1;
		constexpr const static std::string_view Los_type_name = "Los";
		constexpr const static rivet::rivet_type_id Los_type_id = 0xbfb09571;
		constexpr const static std::string_view Player_type_name = "Player";
		constexpr const static rivet::rivet_type_id Player_type_id = 0xa6613402;
		constexpr const static std::string_view Aggro_type_name = "Aggro";
		constexpr const static rivet::rivet_type_id Aggro_type_id = 0x504e1083;
		constexpr const static std::string_view Direction_type_name = "Direction";
		constexpr const static rivet::rivet_type_id Direction_type_id = 0xbcb74ebf;
		constexpr const static std::string_view Spread_type_name = "Spread";
		constexpr const static rivet::rivet_type_id Spread_type_id = 0x42cdee1f; 

		explicit HeuristicTargetingPrius() = default;
		explicit HeuristicTargetingPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::DistanceHeuristics> Distance {};
		std::shared_ptr<rivet::ddl::generated::LosHeuristics> Los {};
		std::shared_ptr<rivet::ddl::generated::PlayerHeuristics> Player {};
		std::shared_ptr<rivet::ddl::generated::AggroHeuristics> Aggro {};
		std::shared_ptr<rivet::ddl::generated::DirectionHeuristics> Direction {};
		std::shared_ptr<rivet::ddl::generated::SpreadHeuristics> Spread {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeuristicTargetingPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
