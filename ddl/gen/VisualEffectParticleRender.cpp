// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SeparateUVFlips.hpp>
#include <rivet/ddl/generated/VisualEffectMinMax.hpp>
#include <rivet/ddl/generated/VisualEffectFloat2KeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectRotationKeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectFloat3KeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectColorKeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectFloatKeyFrames.hpp> 

#include <rivet/ddl/generated/VisualEffectParticleRender.hpp>

namespace rivet::ddl::generated {
	VisualEffectParticleRender::VisualEffectParticleRender([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FloatKeyFrames_EmissionLifeTime = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloatKeyFrames>(FloatKeyFrames_EmissionLifeTime_type_id);
		ColorKeyFrames_ParticleColor = serialized->unwrap_into<rivet::ddl::generated::VisualEffectColorKeyFrames>(ColorKeyFrames_ParticleColor_type_id);
		Float2KeyFrames_ParticleAlpha = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat2KeyFrames>(Float2KeyFrames_ParticleAlpha_type_id);
		FloatKeyFrames_ParticleLuminance = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloatKeyFrames>(FloatKeyFrames_ParticleLuminance_type_id);
		Float3KeyFrames_ParticleCustom = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat3KeyFrames>(Float3KeyFrames_ParticleCustom_type_id);
		Float3KeyFrames_ParticleScales = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat3KeyFrames>(Float3KeyFrames_ParticleScales_type_id);
		InputPort_ParticleLength = serialized->unwrap_into<rivet::ddl::generated::VisualEffectMinMax>(InputPort_ParticleLength_type_id);
		Float3KeyFrames_ParticleRotation = serialized->unwrap_into<rivet::ddl::generated::VisualEffectRotationKeyFrames>(Float3KeyFrames_ParticleRotation_type_id);
		UVFlips = serialized->unwrap_into<rivet::ddl::generated::SeparateUVFlips>(UVFlips_type_id); 
	}

	[[nodiscard]] auto
	VisualEffectParticleRender::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VisualEffectParticleRender::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectParticleRender> {
		if (incoming_type_id == VisualEffectParticleRender::type_id) {
			return std::make_shared<VisualEffectParticleRender>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
