// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CustomDamageContainer.hpp>
#include <rivet/ddl/generated/DamageStatusData.hpp> 

#include <rivet/ddl/generated/DamageSphereActionPrius.hpp>

namespace rivet::ddl::generated {
	DamageSphereActionPrius::DamageSphereActionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActionType = serialized->get_enum<rivet::ddl::generated::x10228b34>(ActionType_type_id, rivet::ddl::generated::x10228b34_values, rivet::ddl::generated::x10228b34::Health);
		Radius = serialized->get_float(Radius_type_id, 1.000000);
		Amount = serialized->get_float(Amount_type_id, 1.000000);
		Type = serialized->get_enum<rivet::ddl::generated::DamageTypes>(Type_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::Bullet);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values, rivet::ddl::generated::KnockbackLevels::None);
		KnockbackAmount = serialized->get_float(KnockbackAmount_type_id, -1.000000);
		Flags = serialized->get_bitset<rivet::ddl::generated::x65d7dac2>(Flags_type_id, rivet::ddl::generated::x65d7dac2_values, 0);
		Duration = serialized->get_float(Duration_type_id, 0.000000);
		ConditionDuration = serialized->get_float(ConditionDuration_type_id, 0.000000);
		DamageStatus = serialized->unwrap_into_many<rivet::ddl::generated::DamageStatusData>(DamageStatus_type_id);
		DamageHash = serialized->get_string(DamageHash_type_id, {});
		CustomDamageEntries = serialized->unwrap_into_many<rivet::ddl::generated::CustomDamageContainer>(CustomDamageEntries_type_id); 
	}

	[[nodiscard]] auto
	DamageSphereActionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DamageSphereActionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DamageSphereActionPrius> {
		if (incoming_type_id == DamageSphereActionPrius::type_id) {
			return std::make_shared<DamageSphereActionPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
