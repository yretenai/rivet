// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WindMinMax.hpp> 

#include <rivet/ddl/generated/WindDef.hpp>

namespace rivet::ddl::generated {
	WindDef::WindDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id, true);
		Intensity = serialized->get_float(Intensity_type_id, 1.000000f);
		Azimuth = serialized->get_float(Azimuth_type_id, 0.000000f);
		WindGustsIntensity = serialized->unwrap_into<rivet::ddl::generated::WindMinMax>(WindGustsIntensity_type_id);
		WindGustsFrequency = serialized->unwrap_into<rivet::ddl::generated::WindMinMax>(WindGustsFrequency_type_id);
		WindGustsDuration = serialized->unwrap_into<rivet::ddl::generated::WindMinMax>(WindGustsDuration_type_id); 
	}

	[[nodiscard]] auto
	WindDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WindDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WindDef> {
		if (incoming_type_id == WindDef::type_id) {
			return std::make_shared<WindDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
