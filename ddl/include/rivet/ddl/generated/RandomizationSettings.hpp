// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED RandomizationSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "RandomizationSettings";
		constexpr static rivet::rivet_type_id type_id = 0xd649de83;

		constexpr static std::string_view ScaleAmount_type_name = "ScaleAmount";
		constexpr static rivet::rivet_type_id ScaleAmount_type_id = 0x9656fc30;
		constexpr static std::string_view AngleAmount_type_name = "AngleAmount";
		constexpr static rivet::rivet_type_id AngleAmount_type_id = 0xe6287300;
		constexpr static std::string_view RandomAsset_type_name = "RandomAsset";
		constexpr static rivet::rivet_type_id RandomAsset_type_id = 0x72e832f1;
		constexpr static std::string_view Enable_type_name = "Enable";
		constexpr static rivet::rivet_type_id Enable_type_id = 0xcdd88655; 

		explicit RandomizationSettings() = default;
		explicit RandomizationSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float ScaleAmount {};
		float AngleAmount {};
		bool RandomAsset {};
		bool Enable {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RandomizationSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
