// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DamageStateElement.hpp>

namespace rivet::ddl::generated {
	DamageStateElement::DamageStateElement([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		HPThreshhold = serialized->get_float(HPThreshhold_type_id);
		MinLookChunks = serialized->get_uint8(MinLookChunks_type_id);
		MaxLookChunks = serialized->get_uint8(MaxLookChunks_type_id);
		MinGenericChunks = serialized->get_uint8(MinGenericChunks_type_id);
		MaxGenericChunks = serialized->get_uint8(MaxGenericChunks_type_id);
		MinLookSwaps = serialized->get_uint8(MinLookSwaps_type_id);
		MaxLookSwaps = serialized->get_uint8(MaxLookSwaps_type_id); 
	}

	auto
	DamageStateElement::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	DamageStateElement::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DamageStateElement::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DamageStateElement> {
		if (incoming_type_id == DamageStateElement::type_id) {
			return std::make_shared<DamageStateElement>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
