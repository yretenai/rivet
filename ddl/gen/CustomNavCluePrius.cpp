// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CustomNavCluePrius.hpp>

namespace rivet::ddl::generated {
	CustomNavCluePrius::CustomNavCluePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TargetNavClue = serialized->get_uint64(TargetNavClue_type_id);
		TargetHelper = serialized->get_uint64(TargetHelper_type_id);
		RequiredAbilities = serialized->get_bitset<rivet::ddl::generated::x729ef36c>(RequiredAbilities_type_id, rivet::ddl::generated::x729ef36c_values);
		RequiredEntityType = serialized->get_bitset<rivet::ddl::generated::x117c3bf3>(RequiredEntityType_type_id, rivet::ddl::generated::x117c3bf3_values); 
	}

	[[nodiscard]] auto
	CustomNavCluePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CustomNavCluePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CustomNavCluePrius> {
		if (incoming_type_id == CustomNavCluePrius::type_id) {
			return std::make_shared<CustomNavCluePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
