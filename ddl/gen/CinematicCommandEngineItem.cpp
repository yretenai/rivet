// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLMatrix4.hpp>
#include <rivet/ddl/generated/Cinematic2Options.hpp>
#include <rivet/ddl/generated/Cinematic2Def.hpp> 

#include <rivet/ddl/generated/CinematicCommandEngineItem.hpp>

namespace rivet::ddl::generated {
	CinematicCommandEngineItem::CinematicCommandEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Command = serialized->get_enum<rivet::ddl::generated::x7756f5e5>(Command_type_id, rivet::ddl::generated::x7756f5e5_values);
		ValueBool = serialized->get_bool(ValueBool_type_id);
		ValueCinematic2Def = serialized->unwrap_into<rivet::ddl::generated::Cinematic2Def>(ValueCinematic2Def_type_id);
		ValueCinematic2Options = serialized->unwrap_into<rivet::ddl::generated::Cinematic2Options>(ValueCinematic2Options_type_id);
		ValueDouble = serialized->get_double(ValueDouble_type_id);
		ValueMatrix = serialized->unwrap_into<rivet::ddl::generated::DDLMatrix4>(ValueMatrix_type_id);
		ValueString = serialized->get_string(ValueString_type_id);
		ValueTuidSet = serialized->get_uint64s(ValueTuidSet_type_id); 
	}

	[[nodiscard]] auto
	CinematicCommandEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CinematicCommandEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CinematicCommandEngineItem> {
		if (incoming_type_id == CinematicCommandEngineItem::type_id) {
			return std::make_shared<CinematicCommandEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
