// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/EnabledComponentBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SwingshotTargetBasePrius : EnabledComponentBasePrius {
		constexpr static std::string_view type_name = "SwingshotTargetBasePrius";
		constexpr static rivet::rivet_type_id type_id = 0xdac6946f;

		constexpr static std::string_view CableAttachLocator_type_name = "CableAttachLocator";
		constexpr static rivet::rivet_type_id CableAttachLocator_type_id = 0xf6f36ec0;
		constexpr static std::string_view MinRangeOverride_type_name = "MinRangeOverride";
		constexpr static rivet::rivet_type_id MinRangeOverride_type_id = 0xda98835;
		constexpr static std::string_view MaxRangeOverride_type_name = "MaxRangeOverride";
		constexpr static rivet::rivet_type_id MaxRangeOverride_type_id = 0x5c503368;
		constexpr static std::string_view DisallowGroup_type_name = "DisallowGroup";
		constexpr static rivet::rivet_type_id DisallowGroup_type_id = 0x2eb04317; 

		explicit SwingshotTargetBasePrius() = default;
		explicit SwingshotTargetBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view CableAttachLocator {};
		float MinRangeOverride {};
		float MaxRangeOverride {};
		uint64_t DisallowGroup {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SwingshotTargetBasePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
