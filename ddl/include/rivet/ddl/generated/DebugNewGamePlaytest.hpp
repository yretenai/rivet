// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DebugNewGamePlaytest : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "DebugNewGamePlaytest";
		constexpr static rivet::rivet_type_id type_id = 0x7241bb8e;

		constexpr static std::string_view PlaytestName_type_name = "PlaytestName";
		constexpr static rivet::rivet_type_id PlaytestName_type_id = 0xbdfaa48;
		constexpr static std::string_view UseChallengeMode_type_name = "UseChallengeMode";
		constexpr static rivet::rivet_type_id UseChallengeMode_type_id = 0xc801de1f;
		constexpr static std::string_view IsDemo_type_name = "IsDemo";
		constexpr static rivet::rivet_type_id IsDemo_type_id = 0x490784cb;
		constexpr static std::string_view DemoName_type_name = "DemoName";
		constexpr static rivet::rivet_type_id DemoName_type_id = 0x62515d26; 

		explicit DebugNewGamePlaytest() = default;
		explicit DebugNewGamePlaytest([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view PlaytestName {};
		bool UseChallengeMode {};
		bool IsDemo {};
		std::string_view DemoName {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DebugNewGamePlaytest>;
	};
} // namespace rivet::ddl::generated

// clang-format on
