// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xadae2fa7.hpp> 

namespace rivet::ddl::generated {
	struct Cinematic2AspectBlurDef;
	struct Cinematic2PaneDef;
	struct Cinematic2MayaShotExportInfo; 

	struct RIVET_DDL_SHARED Cinematic2ShotDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "Cinematic2ShotDef";
		constexpr static rivet::rivet_type_id type_id = 0x1af44d4e;

		constexpr static std::string_view Id_type_name = "Id";
		constexpr static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view Duration_type_name = "Duration";
		constexpr static rivet::rivet_type_id Duration_type_id = 0x7c5e3db0;
		constexpr static std::string_view JumpToShotId_type_name = "JumpToShotId";
		constexpr static rivet::rivet_type_id JumpToShotId_type_id = 0xf5e23913;
		constexpr static std::string_view ScriptShotTag_type_name = "ScriptShotTag";
		constexpr static rivet::rivet_type_id ScriptShotTag_type_id = 0xf6da13a9;
		constexpr static std::string_view MayaExportInfo_type_name = "MayaExportInfo";
		constexpr static rivet::rivet_type_id MayaExportInfo_type_id = 0xa1192d52;
		constexpr static std::string_view Panes_type_name = "Panes";
		constexpr static rivet::rivet_type_id Panes_type_id = 0x36f6123b;
		constexpr static std::string_view DepthOnlyFrameAtStart_type_name = "DepthOnlyFrameAtStart";
		constexpr static rivet::rivet_type_id DepthOnlyFrameAtStart_type_id = 0x8e57949d;
		constexpr static std::string_view IsTransitionTarget_type_name = "IsTransitionTarget";
		constexpr static rivet::rivet_type_id IsTransitionTarget_type_id = 0xeda89527;
		constexpr static std::string_view StartRelativeActor_type_name = "StartRelativeActor";
		constexpr static rivet::rivet_type_id StartRelativeActor_type_id = 0x7205a541;
		constexpr static std::string_view CameraConeParent_type_name = "CameraConeParent";
		constexpr static rivet::rivet_type_id CameraConeParent_type_id = 0x56773080;
		constexpr static std::string_view CameraConeStartAngle_type_name = "CameraConeStartAngle";
		constexpr static rivet::rivet_type_id CameraConeStartAngle_type_id = 0xdf149a0c;
		constexpr static std::string_view CameraConeRadius_type_name = "CameraConeRadius";
		constexpr static rivet::rivet_type_id CameraConeRadius_type_id = 0x50853e95;
		constexpr static std::string_view CameraConeHeight_type_name = "CameraConeHeight";
		constexpr static rivet::rivet_type_id CameraConeHeight_type_id = 0x9eb4b5c0;
		constexpr static std::string_view AspectBlurOverride_type_name = "AspectBlurOverride";
		constexpr static rivet::rivet_type_id AspectBlurOverride_type_id = 0x8a3a4c72; 

		explicit Cinematic2ShotDef() = default;
		explicit Cinematic2ShotDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t Id {};
		std::string_view Name {};
		float Duration {};
		uint64_t JumpToShotId {};
		rivet::ddl::generated::xadae2fa7 ScriptShotTag {};
		std::shared_ptr<rivet::ddl::generated::Cinematic2MayaShotExportInfo> MayaExportInfo {};
		std::vector<std::shared_ptr<rivet::ddl::generated::Cinematic2PaneDef>> Panes {};
		bool DepthOnlyFrameAtStart {};
		bool IsTransitionTarget {};
		uint64_t StartRelativeActor {};
		uint64_t CameraConeParent {};
		float CameraConeStartAngle {};
		float CameraConeRadius {};
		float CameraConeHeight {};
		std::shared_ptr<rivet::ddl::generated::Cinematic2AspectBlurDef> AspectBlurOverride {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2ShotDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
