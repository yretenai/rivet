// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GamePickupItemPrius.hpp>
#include <rivet/ddl/generated/PickupBrainItemPrius.hpp> 

#include <rivet/ddl/generated/PickupItemPrius.hpp>

namespace rivet::ddl::generated {
	PickupItemPrius::PickupItemPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): PickupSharedPrius(serialized) {
		ItemConfig = serialized->get_string(ItemConfig_type_id, {});
		Count = serialized->get_uint32(Count_type_id, 1u); 
	}

	[[nodiscard]] auto
	PickupItemPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PickupItemPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PickupItemPrius> {
		if (incoming_type_id == PickupItemPrius::type_id) {
			return std::make_shared<PickupItemPrius>(serialized);
		}

		auto PickupBrainItemPrius_ptr = PickupBrainItemPrius::from_substruct(incoming_type_id, serialized);
		if (PickupBrainItemPrius_ptr != nullptr) {
			return PickupBrainItemPrius_ptr;
		}

		auto GamePickupItemPrius_ptr = GamePickupItemPrius::from_substruct(incoming_type_id, serialized);
		if (GamePickupItemPrius_ptr != nullptr) {
			return GamePickupItemPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
