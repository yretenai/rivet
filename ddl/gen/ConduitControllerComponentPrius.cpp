// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ConduitControllerComponentPrius.hpp>

namespace rivet::ddl::generated {
	ConduitControllerComponentPrius::ConduitControllerComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartOnFlag = serialized->get_bool(StartOnFlag_type_id, true);
		RandomActivateFlag = serialized->get_bool(RandomActivateFlag_type_id, true);
		RandomActivateDelayMin = serialized->get_float(RandomActivateDelayMin_type_id, 2.000000);
		RandomActivateDelayMax = serialized->get_float(RandomActivateDelayMax_type_id, 4.000000);
		RandomActivateOnceFlag = serialized->get_bool(RandomActivateOnceFlag_type_id, false);
		ActiveDurationFlag = serialized->get_bool(ActiveDurationFlag_type_id, false);
		ActiveDurationMin = serialized->get_float(ActiveDurationMin_type_id, 1.000000);
		ActiveDurationMax = serialized->get_float(ActiveDurationMax_type_id, 2.000000); 
	}

	[[nodiscard]] auto
	ConduitControllerComponentPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ConduitControllerComponentPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ConduitControllerComponentPrius> {
		if (incoming_type_id == ConduitControllerComponentPrius::type_id) {
			return std::make_shared<ConduitControllerComponentPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
