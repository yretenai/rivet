// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VarRenderTextureOverride.hpp>
#include <rivet/ddl/generated/VarMaterialOverride.hpp>
#include <rivet/ddl/generated/VarRenderColorOverride.hpp>
#include <rivet/ddl/generated/VarRenderConstantOverride.hpp>
#include <rivet/ddl/generated/VarSceneNodeReference.hpp> 

#include <rivet/ddl/generated/VarNode.hpp>

namespace rivet::ddl::generated {
	VarNode::VarNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SceneNodeReferences = serialized->unwrap_into_many<rivet::ddl::generated::VarSceneNodeReference>(SceneNodeReferences_type_id);
		MaterialOverrides = serialized->unwrap_into_many<rivet::ddl::generated::VarMaterialOverride>(MaterialOverrides_type_id);
		RenderConstantOverrides = serialized->unwrap_into_many<rivet::ddl::generated::VarRenderConstantOverride>(RenderConstantOverrides_type_id);
		RenderColorOverrides = serialized->unwrap_into_many<rivet::ddl::generated::VarRenderColorOverride>(RenderColorOverrides_type_id);
		RenderTextureOverrides = serialized->unwrap_into_many<rivet::ddl::generated::VarRenderTextureOverride>(RenderTextureOverrides_type_id); 
	}

	[[nodiscard]] auto
	VarNode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VarNode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VarNode> {
		if (incoming_type_id == VarNode::type_id) {
			return std::make_shared<VarNode>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
