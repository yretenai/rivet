// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TestSignedPrius.hpp>

namespace rivet::ddl::generated {
	TestSignedPrius::TestSignedPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Signed = serialized->get_float(Signed_type_id, 0.000000);
		Signed2 = serialized->get_int32(Signed2_type_id, 0);
		Signed3 = serialized->get_int32(Signed3_type_id, 0);
		Signed4 = serialized->get_float(Signed4_type_id, 0.000000);
		Signed5 = serialized->get_int64(Signed5_type_id, 0);
		Signed6 = serialized->get_int64(Signed6_type_id, 0);
		Signed7 = serialized->get_int64(Signed7_type_id, 0);
		Signed8 = serialized->get_int64(Signed8_type_id, 0);
		Signed9 = serialized->get_int64(Signed9_type_id, 0);
		Signed9a = serialized->get_int64(Signed9a_type_id, 0);
		Signed9b = serialized->get_int64(Signed9b_type_id, 0);
		Signed9c = serialized->get_int64(Signed9c_type_id, 0); 
	}

	[[nodiscard]] auto
	TestSignedPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TestSignedPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TestSignedPrius> {
		if (incoming_type_id == TestSignedPrius::type_id) {
			return std::make_shared<TestSignedPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
