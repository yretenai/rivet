// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SetDef.hpp>

namespace rivet::ddl::generated {
	SetDef::SetDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SetID = serialized->get_enum<rivet::ddl::generated::xa57aac73>(SetID_type_id, rivet::ddl::generated::xa57aac73_values, rivet::ddl::generated::xa57aac73::Veldin);
		SetNameLocTag = serialized->get_string(SetNameLocTag_type_id, "INVALID");
		TempSetName = serialized->get_string(TempSetName_type_id, "temp name");
		SetDescLocTag = serialized->get_string(SetDescLocTag_type_id, "INVALID");
		TempSetDesc = serialized->get_string(TempSetDesc_type_id, "temp desc");
		CardIDs = serialized->get_enums<rivet::ddl::generated::x507460e6>(CardIDs_type_id, rivet::ddl::generated::x507460e6_values);
		Bonus = serialized->get_enum<rivet::ddl::generated::BonusType>(Bonus_type_id, rivet::ddl::generated::BonusType_values, rivet::ddl::generated::BonusType::None);
		BonusAmount = serialized->get_float(BonusAmount_type_id, 0.000000f); 
	}

	[[nodiscard]] auto
	SetDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SetDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SetDef> {
		if (incoming_type_id == SetDef::type_id) {
			return std::make_shared<SetDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
