// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BooleanOutNodeDef.hpp>
#include <rivet/ddl/generated/IntOutNodeDef.hpp>
#include <rivet/ddl/generated/OutputNodeFloatDef.hpp>
#include <rivet/ddl/generated/StringHashOutNodeDef.hpp>
#include <rivet/ddl/generated/OutputNodeActorDef.hpp>
#include <rivet/ddl/generated/InputNodeStringHashDef.hpp>
#include <rivet/ddl/generated/OutputNodeBooleanDef.hpp>
#include <rivet/ddl/generated/InputNodeVec3Def.hpp>
#include <rivet/ddl/generated/InputNodeStringDef.hpp>
#include <rivet/ddl/generated/InputNodeFloatDef.hpp>
#include <rivet/ddl/generated/OutputNodeIntDef.hpp>
#include <rivet/ddl/generated/InputNodeBooleanDef.hpp>
#include <rivet/ddl/generated/InputNodeActorDef.hpp>
#include <rivet/ddl/generated/SubstringNodeDef.hpp>
#include <rivet/ddl/generated/CompareStringHashesNodeDef.hpp>
#include <rivet/ddl/generated/CheckBoolNodeDef.hpp>
#include <rivet/ddl/generated/OutputNodeUIntDef.hpp>
#include <rivet/ddl/generated/RandomIntGeneratorNodeDef.hpp>
#include <rivet/ddl/generated/OutputNodeStringDef.hpp>
#include <rivet/ddl/generated/FloatsToVecNodeDef.hpp>
#include <rivet/ddl/generated/SubtractFloatsNodeDef.hpp>
#include <rivet/ddl/generated/FloatOutNodeDef.hpp>
#include <rivet/ddl/generated/ClampFloatNodeDef.hpp>
#include <rivet/ddl/generated/InputNodeSignalDef.hpp>
#include <rivet/ddl/generated/MultiplyFloatsNodeDef.hpp>
#include <rivet/ddl/generated/MinFloatNodeDef.hpp>
#include <rivet/ddl/generated/OutputNodeSignalDef.hpp>
#include <rivet/ddl/generated/CompareFloatsInlineNodeDef.hpp>
#include <rivet/ddl/generated/CompareFloatsNodeDef.hpp>
#include <rivet/ddl/generated/OrSignalNodeDef.hpp>
#include <rivet/ddl/generated/AddFloatsNodeDef.hpp>
#include <rivet/ddl/generated/RandomFloatGeneratorNodeDef.hpp>
#include <rivet/ddl/generated/MaxFloatNodeDef.hpp>
#include <rivet/ddl/generated/ActorValidNodeDef.hpp>
#include <rivet/ddl/generated/AndNodeDef.hpp>
#include <rivet/ddl/generated/VecToFloatsNodeDef.hpp>
#include <rivet/ddl/generated/ActorPositionNodeDef.hpp>
#include <rivet/ddl/generated/CompareIntsNodeDef.hpp>
#include <rivet/ddl/generated/OutputNodeVec3Def.hpp>
#include <rivet/ddl/generated/NegateVectorNodeDef.hpp>
#include <rivet/ddl/generated/CompareIntsInlineNodeDef.hpp>
#include <rivet/ddl/generated/NormalizeFloatNodeDef.hpp>
#include <rivet/ddl/generated/OrNodeDef.hpp>
#include <rivet/ddl/generated/OutputNodeStringHashDef.hpp>
#include <rivet/ddl/generated/VecDistanceNodeDef.hpp>
#include <rivet/ddl/generated/UIntOutNodeDef.hpp>
#include <rivet/ddl/generated/SubtractVectorsNodeDef.hpp>
#include <rivet/ddl/generated/Vec3OutNodeDef.hpp>
#include <rivet/ddl/generated/AddVectorsNodeDef.hpp>
#include <rivet/ddl/generated/RandomBoolGeneratorNodeDef.hpp>
#include <rivet/ddl/generated/StringOutNodeDef.hpp>
#include <rivet/ddl/generated/InputNodeIntDef.hpp>
#include <rivet/ddl/generated/MultiplyVectorByScalarNodeDef.hpp>
#include <rivet/ddl/generated/InputNodeUIntDef.hpp>
#include <rivet/ddl/generated/AssetReferenceNodeDef.hpp>
#include <rivet/ddl/generated/NormalizeVectorNodeDef.hpp>
#include <rivet/ddl/generated/DivideFloatsNodeDef.hpp>
#include <rivet/ddl/generated/VectorLengthNodeDef.hpp> 

#include <rivet/ddl/generated/StandardNodesDef.hpp>

namespace rivet::ddl::generated {
	StandardNodesDef::StandardNodesDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): GameplayNodeGraphBaseDef(serialized) {
		AssetReferenceNodes = serialized->unwrap_into_many<rivet::ddl::generated::AssetReferenceNodeDef>(AssetReferenceNodes_type_id);
		ActorValidNodes = serialized->unwrap_into_many<rivet::ddl::generated::ActorValidNodeDef>(ActorValidNodes_type_id);
		ActorPositionNodes = serialized->unwrap_into_many<rivet::ddl::generated::ActorPositionNodeDef>(ActorPositionNodes_type_id);
		RandomFloatNodes = serialized->unwrap_into_many<rivet::ddl::generated::RandomFloatGeneratorNodeDef>(RandomFloatNodes_type_id);
		CompareFloatsNodes = serialized->unwrap_into_many<rivet::ddl::generated::CompareFloatsNodeDef>(CompareFloatsNodes_type_id);
		CompareFloatsInlineNodes = serialized->unwrap_into_many<rivet::ddl::generated::CompareFloatsInlineNodeDef>(CompareFloatsInlineNodes_type_id);
		MinFloatNodes = serialized->unwrap_into_many<rivet::ddl::generated::MinFloatNodeDef>(MinFloatNodes_type_id);
		MaxFloatNodes = serialized->unwrap_into_many<rivet::ddl::generated::MaxFloatNodeDef>(MaxFloatNodes_type_id);
		ClampFloatNodes = serialized->unwrap_into_many<rivet::ddl::generated::ClampFloatNodeDef>(ClampFloatNodes_type_id);
		AddFloatsNodes = serialized->unwrap_into_many<rivet::ddl::generated::AddFloatsNodeDef>(AddFloatsNodes_type_id);
		SubtractFloatsNodes = serialized->unwrap_into_many<rivet::ddl::generated::SubtractFloatsNodeDef>(SubtractFloatsNodes_type_id);
		MultiplyFloatsNodes = serialized->unwrap_into_many<rivet::ddl::generated::MultiplyFloatsNodeDef>(MultiplyFloatsNodes_type_id);
		DivideFloatsNodes = serialized->unwrap_into_many<rivet::ddl::generated::DivideFloatsNodeDef>(DivideFloatsNodes_type_id);
		CompareIntsNodes = serialized->unwrap_into_many<rivet::ddl::generated::CompareIntsNodeDef>(CompareIntsNodes_type_id);
		CompareIntsInlineNodes = serialized->unwrap_into_many<rivet::ddl::generated::CompareIntsInlineNodeDef>(CompareIntsInlineNodes_type_id);
		RandomIntGeneratorNodes = serialized->unwrap_into_many<rivet::ddl::generated::RandomIntGeneratorNodeDef>(RandomIntGeneratorNodes_type_id);
		FloatsToVecNodes = serialized->unwrap_into_many<rivet::ddl::generated::FloatsToVecNodeDef>(FloatsToVecNodes_type_id);
		NormalizeFloatNodes = serialized->unwrap_into_many<rivet::ddl::generated::NormalizeFloatNodeDef>(NormalizeFloatNodes_type_id);
		VecToFloatsNodes = serialized->unwrap_into_many<rivet::ddl::generated::VecToFloatsNodeDef>(VecToFloatsNodes_type_id);
		VecDistanceNodes = serialized->unwrap_into_many<rivet::ddl::generated::VecDistanceNodeDef>(VecDistanceNodes_type_id);
		AddVectorsNodes = serialized->unwrap_into_many<rivet::ddl::generated::AddVectorsNodeDef>(AddVectorsNodes_type_id);
		SubtractVectorsNodes = serialized->unwrap_into_many<rivet::ddl::generated::SubtractVectorsNodeDef>(SubtractVectorsNodes_type_id);
		NegateVectorNodes = serialized->unwrap_into_many<rivet::ddl::generated::NegateVectorNodeDef>(NegateVectorNodes_type_id);
		MultiplyVectorByScalarNodes = serialized->unwrap_into_many<rivet::ddl::generated::MultiplyVectorByScalarNodeDef>(MultiplyVectorByScalarNodes_type_id);
		NormalizeVectorNodes = serialized->unwrap_into_many<rivet::ddl::generated::NormalizeVectorNodeDef>(NormalizeVectorNodes_type_id);
		VectorLengthNodes = serialized->unwrap_into_many<rivet::ddl::generated::VectorLengthNodeDef>(VectorLengthNodes_type_id);
		RandomBoolGeneratorNodes = serialized->unwrap_into_many<rivet::ddl::generated::RandomBoolGeneratorNodeDef>(RandomBoolGeneratorNodes_type_id);
		OrSignalNodes = serialized->unwrap_into_many<rivet::ddl::generated::OrSignalNodeDef>(OrSignalNodes_type_id);
		OrNodes = serialized->unwrap_into_many<rivet::ddl::generated::OrNodeDef>(OrNodes_type_id);
		AndNodes = serialized->unwrap_into_many<rivet::ddl::generated::AndNodeDef>(AndNodes_type_id);
		CheckBoolNodes = serialized->unwrap_into_many<rivet::ddl::generated::CheckBoolNodeDef>(CheckBoolNodes_type_id);
		SubstringNodes = serialized->unwrap_into_many<rivet::ddl::generated::SubstringNodeDef>(SubstringNodes_type_id);
		CompareStringHashesNodes = serialized->unwrap_into_many<rivet::ddl::generated::CompareStringHashesNodeDef>(CompareStringHashesNodes_type_id);
		InputNodeActors = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeActorDef>(InputNodeActors_type_id);
		InputNodeBooleans = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeBooleanDef>(InputNodeBooleans_type_id);
		InputNodeFloats = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeFloatDef>(InputNodeFloats_type_id);
		InputNodeSignals = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeSignalDef>(InputNodeSignals_type_id);
		InputNodeStrings = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeStringDef>(InputNodeStrings_type_id);
		InputNodeVec3s = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeVec3Def>(InputNodeVec3s_type_id);
		InputNodeStringHashes = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeStringHashDef>(InputNodeStringHashes_type_id);
		InputNodeUInts = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeUIntDef>(InputNodeUInts_type_id);
		InputNodeInts = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeIntDef>(InputNodeInts_type_id);
		OutputNodeActors = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeActorDef>(OutputNodeActors_type_id);
		OutputNodeBooleans = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeBooleanDef>(OutputNodeBooleans_type_id);
		OutputNodeFloats = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeFloatDef>(OutputNodeFloats_type_id);
		OutputNodeSignals = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeSignalDef>(OutputNodeSignals_type_id);
		OutputNodeStrings = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeStringDef>(OutputNodeStrings_type_id);
		OutputNodeVec3s = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeVec3Def>(OutputNodeVec3s_type_id);
		OutputNodeStringHashes = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeStringHashDef>(OutputNodeStringHashes_type_id);
		OutputNodeUInts = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeUIntDef>(OutputNodeUInts_type_id);
		OutputNodeInts = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeIntDef>(OutputNodeInts_type_id);
		BooleanOutNodes = serialized->unwrap_into_many<rivet::ddl::generated::BooleanOutNodeDef>(BooleanOutNodes_type_id);
		FloatOutNodes = serialized->unwrap_into_many<rivet::ddl::generated::FloatOutNodeDef>(FloatOutNodes_type_id);
		StringOutNodes = serialized->unwrap_into_many<rivet::ddl::generated::StringOutNodeDef>(StringOutNodes_type_id);
		Vec3OutNodes = serialized->unwrap_into_many<rivet::ddl::generated::Vec3OutNodeDef>(Vec3OutNodes_type_id);
		StringHashOutNodes = serialized->unwrap_into_many<rivet::ddl::generated::StringHashOutNodeDef>(StringHashOutNodes_type_id);
		IntOutNodes = serialized->unwrap_into_many<rivet::ddl::generated::IntOutNodeDef>(IntOutNodes_type_id);
		UIntOutNodes = serialized->unwrap_into_many<rivet::ddl::generated::UIntOutNodeDef>(UIntOutNodes_type_id); 
	}

	[[nodiscard]] auto
	StandardNodesDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StandardNodesDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StandardNodesDef> {
		if (incoming_type_id == StandardNodesDef::type_id) {
			return std::make_shared<StandardNodesDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
