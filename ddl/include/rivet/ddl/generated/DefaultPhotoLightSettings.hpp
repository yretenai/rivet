// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED DefaultPhotoLightSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "DefaultPhotoLightSettings";
		constexpr static rivet::rivet_type_id type_id = 0x484ea4f6;

		constexpr static std::string_view DefaultIntensity_type_name = "DefaultIntensity";
		constexpr static rivet::rivet_type_id DefaultIntensity_type_id = 0x2cfb4df;
		constexpr static std::string_view DefaultLightConeAngle_type_name = "DefaultLightConeAngle";
		constexpr static rivet::rivet_type_id DefaultLightConeAngle_type_id = 0x10b8dc80;
		constexpr static std::string_view DefaultSoftness_type_name = "DefaultSoftness";
		constexpr static rivet::rivet_type_id DefaultSoftness_type_id = 0xcc575ef5;
		constexpr static std::string_view DefaultRange_type_name = "DefaultRange";
		constexpr static rivet::rivet_type_id DefaultRange_type_id = 0x891c06d0;
		constexpr static std::string_view DefaultShadowOn_type_name = "DefaultShadowOn";
		constexpr static rivet::rivet_type_id DefaultShadowOn_type_id = 0xc3fec21c;
		constexpr static std::string_view DefaultColorRGB_type_name = "DefaultColorRGB";
		constexpr static rivet::rivet_type_id DefaultColorRGB_type_id = 0xd75802d4; 

		explicit DefaultPhotoLightSettings() = default;
		explicit DefaultPhotoLightSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float DefaultIntensity {};
		float DefaultLightConeAngle {};
		float DefaultSoftness {};
		float DefaultRange {};
		bool DefaultShadowOn {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> DefaultColorRGB {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DefaultPhotoLightSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
