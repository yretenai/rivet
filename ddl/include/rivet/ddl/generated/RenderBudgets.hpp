// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct HeapTemplate; 

	struct RIVET_DDL_SHARED RenderBudgets : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "RenderBudgets";
		constexpr static rivet::rivet_type_id type_id = 0xf6004e58;

		constexpr static std::string_view ManagedBufferSmallHeapSize_type_name = "ManagedBufferSmallHeapSize";
		constexpr static rivet::rivet_type_id ManagedBufferSmallHeapSize_type_id = 0xbf8f2dd9;
		constexpr static std::string_view ManagedBufferMaxAllocs_type_name = "ManagedBufferMaxAllocs";
		constexpr static rivet::rivet_type_id ManagedBufferMaxAllocs_type_id = 0x5e22c3f0;
		constexpr static std::string_view SkinningBufferSize_type_name = "SkinningBufferSize";
		constexpr static rivet::rivet_type_id SkinningBufferSize_type_id = 0x6c097ac9;
		constexpr static std::string_view FrozenSkinningBufferSize_type_name = "FrozenSkinningBufferSize";
		constexpr static rivet::rivet_type_id FrozenSkinningBufferSize_type_id = 0xaad70ce0;
		constexpr static std::string_view DynamicD3DBufferSize_type_name = "DynamicD3DBufferSize";
		constexpr static rivet::rivet_type_id DynamicD3DBufferSize_type_id = 0x1a63167d;
		constexpr static std::string_view LightGridBufferSize_type_name = "LightGridBufferSize";
		constexpr static rivet::rivet_type_id LightGridBufferSize_type_id = 0x94d335ab;
		constexpr static std::string_view ConstantBufferRingSize_type_name = "ConstantBufferRingSize";
		constexpr static rivet::rivet_type_id ConstantBufferRingSize_type_id = 0x6e74fd68;
		constexpr static std::string_view DebugDynamicD3DBufferSize_type_name = "DebugDynamicD3DBufferSize";
		constexpr static rivet::rivet_type_id DebugDynamicD3DBufferSize_type_id = 0x4a7449d9;
		constexpr static std::string_view XMemHeapTemplate_type_name = "XMemHeapTemplate";
		constexpr static rivet::rivet_type_id XMemHeapTemplate_type_id = 0xa4cc3b85;
		constexpr static std::string_view XMemGpuWCHeapTemplate_type_name = "XMemGpuWCHeapTemplate";
		constexpr static rivet::rivet_type_id XMemGpuWCHeapTemplate_type_id = 0x106306c8;
		constexpr static std::string_view XMemShaderHeapTemplate_type_name = "XMemShaderHeapTemplate";
		constexpr static rivet::rivet_type_id XMemShaderHeapTemplate_type_id = 0x61c99c81; 

		explicit RenderBudgets() = default;
		explicit RenderBudgets([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t ManagedBufferSmallHeapSize {};
		uint32_t ManagedBufferMaxAllocs {};
		uint64_t SkinningBufferSize {};
		uint64_t FrozenSkinningBufferSize {};
		uint64_t DynamicD3DBufferSize {};
		uint64_t LightGridBufferSize {};
		uint64_t ConstantBufferRingSize {};
		uint32_t DebugDynamicD3DBufferSize {};
		std::shared_ptr<rivet::ddl::generated::HeapTemplate> XMemHeapTemplate {};
		std::shared_ptr<rivet::ddl::generated::HeapTemplate> XMemGpuWCHeapTemplate {};
		std::shared_ptr<rivet::ddl::generated::HeapTemplate> XMemShaderHeapTemplate {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RenderBudgets>;
	};
} // namespace rivet::ddl::generated

// clang-format on
