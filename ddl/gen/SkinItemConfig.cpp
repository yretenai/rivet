// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SkinItemModel.hpp>
#include <rivet/ddl/generated/SkinItemModelVariantOverrideListElement.hpp>
#include <rivet/ddl/generated/SkinItemLocatorOverrideListElement.hpp>
#include <rivet/ddl/generated/SkinItemSwitchGroupListElement.hpp>
#include <rivet/ddl/generated/SkinItemTextureOverrideListElement.hpp>
#include <rivet/ddl/generated/SkinItemMaterialOverrideListElement.hpp>
#include <rivet/ddl/generated/SkinItemConduitOverrideListElement.hpp>
#include <rivet/ddl/generated/SkinItemCompositeMaterialOverrideListElement.hpp>
#include <rivet/ddl/generated/SkinItemCompanionItemListElement.hpp>
#include <rivet/ddl/generated/AssetReferenceDef.hpp>
#include <rivet/ddl/generated/SkinShaderUpdaterPrius.hpp>
#include <rivet/ddl/generated/VanityItemConfig.hpp> 

#include <rivet/ddl/generated/SkinItemConfig.hpp>

namespace rivet::ddl::generated {
	SkinItemConfig::SkinItemConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ItemConfig(serialized) {
		Category = serialized->get_enum<rivet::ddl::generated::xf28253cd>(Category_type_id, rivet::ddl::generated::xf28253cd_values);
		Available = serialized->get_enum<rivet::ddl::generated::x7ecfc969>(Available_type_id, rivet::ddl::generated::x7ecfc969_values);
		PartType = serialized->get_enum<rivet::ddl::generated::x576d8e6a>(PartType_type_id, rivet::ddl::generated::x576d8e6a_values);
		ModelList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemModel>(ModelList_type_id);
		LocatorOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemLocatorOverrideListElement>(LocatorOverrideList_type_id);
		TextureOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemTextureOverrideListElement>(TextureOverrideList_type_id);
		MaterialOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemMaterialOverrideListElement>(MaterialOverrideList_type_id);
		CompositeMaterialOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemCompositeMaterialOverrideListElement>(CompositeMaterialOverrideList_type_id);
		ConduitOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemConduitOverrideListElement>(ConduitOverrideList_type_id);
		ModelVariantOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemModelVariantOverrideListElement>(ModelVariantOverrideList_type_id);
		SwitchGroupList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemSwitchGroupListElement>(SwitchGroupList_type_id);
		CompanionItemList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemCompanionItemListElement>(CompanionItemList_type_id);
		ColorChannels = serialized->get_enum<rivet::ddl::generated::x3126d105>(ColorChannels_type_id, rivet::ddl::generated::x3126d105_values);
		SoundBanks = serialized->unwrap_into_many<rivet::ddl::generated::AssetReferenceDef>(SoundBanks_type_id);
		ShaderUpdater = serialized->unwrap_into<rivet::ddl::generated::SkinShaderUpdaterPrius>(ShaderUpdater_type_id); 
	}

	[[nodiscard]] auto
	SkinItemConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SkinItemConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkinItemConfig> {
		if (incoming_type_id == SkinItemConfig::type_id) {
			return std::make_shared<SkinItemConfig>(serialized);
		}

		auto VanityItemConfig_ptr = VanityItemConfig::from_substruct(incoming_type_id, serialized);
		if (VanityItemConfig_ptr != nullptr) {
			return VanityItemConfig_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
