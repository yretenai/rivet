// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x41993474.hpp>
#include <rivet/ddl/generated/ObjectiveNodeSharedDef.hpp> 

namespace rivet::ddl::generated {
	struct ObjectiveTaskInfo;
	struct ObjectiveNodeInfoUI;
	struct ObjectiveLoadInfo; 

	struct RIVET_DDL_SHARED ObjectiveNodeGameDef : ObjectiveNodeSharedDef {
		constexpr static std::string_view type_name = "ObjectiveNodeGameDef";
		constexpr static rivet::rivet_type_id type_id = 0xdbeb67a3;

		constexpr static std::string_view DebugLoadInfo_type_name = "DebugLoadInfo";
		constexpr static rivet::rivet_type_id DebugLoadInfo_type_id = 0x88452526;
		constexpr static std::string_view UIMode_type_name = "UIMode";
		constexpr static rivet::rivet_type_id UIMode_type_id = 0x970a7e07;
		constexpr static std::string_view InfoUI_type_name = "InfoUI";
		constexpr static rivet::rivet_type_id InfoUI_type_id = 0x13490c9d;
		constexpr static std::string_view TaskMode_type_name = "TaskMode";
		constexpr static rivet::rivet_type_id TaskMode_type_id = 0xef10b498;
		constexpr static std::string_view TaskInfo_type_name = "TaskInfo";
		constexpr static rivet::rivet_type_id TaskInfo_type_id = 0xb353c264; 

		explicit ObjectiveNodeGameDef() = default;
		explicit ObjectiveNodeGameDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::ObjectiveLoadInfo> DebugLoadInfo {};
		rivet::ddl::generated::x41993474 UIMode {};
		std::shared_ptr<rivet::ddl::generated::ObjectiveNodeInfoUI> InfoUI {};
		rivet::ddl::generated::x41993474 TaskMode {};
		std::shared_ptr<rivet::ddl::generated::ObjectiveTaskInfo> TaskInfo {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ObjectiveNodeGameDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
