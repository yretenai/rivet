// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/xac616886.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CinematicSessionData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CinematicSessionData";
		constexpr static rivet::rivet_type_id type_id = 0x5a4ff6a6;

		constexpr static std::string_view FreeCam_type_name = "FreeCam";
		constexpr static rivet::rivet_type_id FreeCam_type_id = 0x5219e2c5;
		constexpr static std::string_view CameraFilterIndex_type_name = "CameraFilterIndex";
		constexpr static rivet::rivet_type_id CameraFilterIndex_type_id = 0x71399ab8;
		constexpr static std::string_view CameraMaxFilters_type_name = "CameraMaxFilters";
		constexpr static rivet::rivet_type_id CameraMaxFilters_type_id = 0x4260c5fa;
		constexpr static std::string_view DebugFlags_type_name = "DebugFlags";
		constexpr static rivet::rivet_type_id DebugFlags_type_id = 0xc3cda8a5; 

		explicit CinematicSessionData() = default;
		explicit CinematicSessionData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool FreeCam {};
		int32_t CameraFilterIndex {};
		int32_t CameraMaxFilters {};
		rivet::ddl::generated::xac616886 DebugFlags {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CinematicSessionData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
