// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED AttachedHealthBarPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AttachedHealthBarPrius";
		constexpr static rivet::rivet_type_id type_id = 0x778daaae;

		constexpr static std::string_view HealthBarActor_type_name = "HealthBarActor";
		constexpr static rivet::rivet_type_id HealthBarActor_type_id = 0x9d9ef21c;
		constexpr static std::string_view AttachToJoint_type_name = "AttachToJoint";
		constexpr static rivet::rivet_type_id AttachToJoint_type_id = 0x66348122;
		constexpr static std::string_view AttachOffset_type_name = "AttachOffset";
		constexpr static rivet::rivet_type_id AttachOffset_type_id = 0xf8b48463;
		constexpr static std::string_view Scale_type_name = "Scale";
		constexpr static rivet::rivet_type_id Scale_type_id = 0xf515e945;
		constexpr static std::string_view HideAfterTime_type_name = "HideAfterTime";
		constexpr static rivet::rivet_type_id HideAfterTime_type_id = 0xf4465e52;
		constexpr static std::string_view ShowOnHealthGain_type_name = "ShowOnHealthGain";
		constexpr static rivet::rivet_type_id ShowOnHealthGain_type_id = 0x28edc1d4;
		constexpr static std::string_view AttachWorldOffset_type_name = "AttachWorldOffset";
		constexpr static rivet::rivet_type_id AttachWorldOffset_type_id = 0xc7ac0510; 

		explicit AttachedHealthBarPrius() = default;
		explicit AttachedHealthBarPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view HealthBarActor {};
		std::string_view AttachToJoint {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> AttachOffset {};
		float Scale {};
		bool HideAfterTime {};
		bool ShowOnHealthGain {};
		bool AttachWorldOffset {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AttachedHealthBarPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
