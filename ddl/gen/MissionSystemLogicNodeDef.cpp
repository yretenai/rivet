// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AndMissionSystemNodeDef.hpp>
#include <rivet/ddl/generated/DebugChainStartNodeDef.hpp>
#include <rivet/ddl/generated/DebugChainEndNodeDef.hpp>
#include <rivet/ddl/generated/OrMissionSystemNodeDef.hpp> 

#include <rivet/ddl/generated/MissionSystemLogicNodeDef.hpp>

namespace rivet::ddl::generated {
	MissionSystemLogicNodeDef::MissionSystemLogicNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): MissionSystemDefaultNodeBaseDef(serialized) {

	}

	[[nodiscard]] auto
	MissionSystemLogicNodeDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MissionSystemLogicNodeDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionSystemLogicNodeDef> {
		if (incoming_type_id == MissionSystemLogicNodeDef::type_id) {
			return std::make_shared<MissionSystemLogicNodeDef>(serialized);
		}

		auto OrMissionSystemNodeDef_ptr = OrMissionSystemNodeDef::from_substruct(incoming_type_id, serialized);
		if (OrMissionSystemNodeDef_ptr != nullptr) {
			return OrMissionSystemNodeDef_ptr;
		}

		auto DebugChainEndNodeDef_ptr = DebugChainEndNodeDef::from_substruct(incoming_type_id, serialized);
		if (DebugChainEndNodeDef_ptr != nullptr) {
			return DebugChainEndNodeDef_ptr;
		}

		auto DebugChainStartNodeDef_ptr = DebugChainStartNodeDef::from_substruct(incoming_type_id, serialized);
		if (DebugChainStartNodeDef_ptr != nullptr) {
			return DebugChainStartNodeDef_ptr;
		}

		auto AndMissionSystemNodeDef_ptr = AndMissionSystemNodeDef::from_substruct(incoming_type_id, serialized);
		if (AndMissionSystemNodeDef_ptr != nullptr) {
			return AndMissionSystemNodeDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
