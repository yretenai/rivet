// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraForceLookSettings.hpp> 

#include <rivet/ddl/generated/CameraStickConfig.hpp>

namespace rivet::ddl::generated {
	CameraStickConfig::CameraStickConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		MaxHorizontalSpeed = serialized->get_float(MaxHorizontalSpeed_type_id, 210.000000);
		MaxHorizontalAccelSpeed = serialized->get_float(MaxHorizontalAccelSpeed_type_id, 230.000000);
		MaxVerticalSpeed = serialized->get_float(MaxVerticalSpeed_type_id, 70.000000);
		MaxVerticalAccelSpeed = serialized->get_float(MaxVerticalAccelSpeed_type_id, 120.000000);
		AccelTime = serialized->get_float(AccelTime_type_id, -1.000000);
		HorizontalSpeedCurve = serialized->get_string(HorizontalSpeedCurve_type_id, "configs\\FollowCameraStickConfig\\DefaultCameraHorizontalCurve.config");
		VerticalSpeedCurve = serialized->get_string(VerticalSpeedCurve_type_id, "configs\\FollowCameraStickConfig\\DefaultCameraVerticalCurve.config");
		DiagonalSpeedCurve = serialized->get_string(DiagonalSpeedCurve_type_id, "configs\\FollowCameraStickConfig\\DefaultCameraSpeedMixCurve.config");
		TurnAccel = serialized->get_float(TurnAccel_type_id, 600.000000);
		TurnDecel = serialized->get_float(TurnDecel_type_id, 9000.000000);
		TurnAccelAccel = serialized->get_float(TurnAccelAccel_type_id, 6000.000000);
		TurnAccelMin = serialized->get_float(TurnAccelMin_type_id, 30.000000);
		CardinalBias = serialized->get_float(CardinalBias_type_id, 0.160000);
		BaseFOV = serialized->get_float(BaseFOV_type_id, 84.000000);
		RelativeToFOV = serialized->get_bool(RelativeToFOV_type_id, false);
		AllowMenuMoveStickInput = serialized->get_bool(AllowMenuMoveStickInput_type_id, false);
		MouseHorizontalSensitivityScale = serialized->get_float(MouseHorizontalSensitivityScale_type_id, 1.000000);
		MouseVerticalSensitivityScale = serialized->get_float(MouseVerticalSensitivityScale_type_id, 1.000000);
		ForceLookSettings = serialized->unwrap_into<rivet::ddl::generated::CameraForceLookSettings>(ForceLookSettings_type_id); 
	}

	[[nodiscard]] auto
	CameraStickConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraStickConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraStickConfig> {
		if (incoming_type_id == CameraStickConfig::type_id) {
			return std::make_shared<CameraStickConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
