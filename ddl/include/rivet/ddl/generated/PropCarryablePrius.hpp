// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/PropBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED PropCarryablePrius : PropBasePrius {
		constexpr static std::string_view type_name = "PropCarryablePrius";
		constexpr static rivet::rivet_type_id type_id = 0x6d006168;

		constexpr static std::string_view CreateOffer_type_name = "CreateOffer";
		constexpr static rivet::rivet_type_id CreateOffer_type_id = 0xb94f1493;
		constexpr static std::string_view MimicHolderAnims_type_name = "MimicHolderAnims";
		constexpr static rivet::rivet_type_id MimicHolderAnims_type_id = 0x99bf3cdf;
		constexpr static std::string_view AttachActor_type_name = "AttachActor";
		constexpr static rivet::rivet_type_id AttachActor_type_id = 0x24c2eb7e;
		constexpr static std::string_view AttachPoint_type_name = "AttachPoint";
		constexpr static rivet::rivet_type_id AttachPoint_type_id = 0xd7124ea3; 

		explicit PropCarryablePrius() = default;
		explicit PropCarryablePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool CreateOffer {};
		bool MimicHolderAnims {};
		uint64_t AttachActor {};
		std::string_view AttachPoint {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PropCarryablePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
