// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LightingConditionBitSet.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/LightPlatforms.hpp>
#include <rivet/ddl/generated/VaultMetaData.hpp> 

#include <rivet/ddl/generated/LightDef.hpp>

namespace rivet::ddl::generated {
	LightDef::LightDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VaultMetaData = serialized->unwrap_into<rivet::ddl::generated::VaultMetaData>(VaultMetaData_type_id);
		IconPath = serialized->get_string(IconPath_type_id);
		Active = serialized->get_bool(Active_type_id);
		Platforms = serialized->unwrap_into<rivet::ddl::generated::LightPlatforms>(Platforms_type_id);
		LightType = serialized->get_enum<rivet::ddl::generated::LightType>(LightType_type_id, rivet::ddl::generated::LightType_values);
		UseColorTemperature = serialized->get_bool(UseColorTemperature_type_id);
		Color = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Color_type_id);
		ColorTemperature = serialized->get_float(ColorTemperature_type_id);
		Intensity = serialized->get_float(Intensity_type_id);
		AttenuationRadius = serialized->get_float(AttenuationRadius_type_id);
		VolumetricFogIntensity = serialized->get_float(VolumetricFogIntensity_type_id);
		Saturation = serialized->get_float(Saturation_type_id);
		VolumeShape = serialized->get_enum<rivet::ddl::generated::VolumeShapes>(VolumeShape_type_id, rivet::ddl::generated::VolumeShapes_values);
		ModulateLocalLights = serialized->get_bool(ModulateLocalLights_type_id);
		SkipLightCapture = serialized->get_bool(SkipLightCapture_type_id);
		OnlyLightCapture = serialized->get_bool(OnlyLightCapture_type_id);
		CastShadows = serialized->get_bool(CastShadows_type_id);
		ShadowPlatforms = serialized->unwrap_into<rivet::ddl::generated::LightPlatforms>(ShadowPlatforms_type_id);
		ShadowCastType = serialized->get_enum<rivet::ddl::generated::ShadowCastType>(ShadowCastType_type_id, rivet::ddl::generated::ShadowCastType_values);
		ShadowRes = serialized->get_enum<rivet::ddl::generated::ShadowRes>(ShadowRes_type_id, rivet::ddl::generated::ShadowRes_values);
		SpecIntensity = serialized->get_float(SpecIntensity_type_id);
		SpecType = serialized->get_enum<rivet::ddl::generated::SpecType>(SpecType_type_id, rivet::ddl::generated::SpecType_values);
		BulbRadius = serialized->get_float(BulbRadius_type_id);
		BulbLength = serialized->get_float(BulbLength_type_id);
		BulbPushForward = serialized->get_float(BulbPushForward_type_id);
		BulbIsRectangle = serialized->get_bool(BulbIsRectangle_type_id);
		InnerCone = serialized->get_float(InnerCone_type_id);
		OuterCone = serialized->get_float(OuterCone_type_id);
		CutoffRadius = serialized->get_float(CutoffRadius_type_id);
		CutOnDist = serialized->get_float(CutOnDist_type_id);
		ShadowCutOnDist = serialized->get_float(ShadowCutOnDist_type_id);
		FalloffDistX = serialized->get_float(FalloffDistX_type_id);
		FalloffDistPosX = serialized->get_float(FalloffDistPosX_type_id);
		FalloffDistY = serialized->get_float(FalloffDistY_type_id);
		FalloffDistPosY = serialized->get_float(FalloffDistPosY_type_id);
		FalloffDistZ = serialized->get_float(FalloffDistZ_type_id);
		FalloffDistPosZ = serialized->get_float(FalloffDistPosZ_type_id);
		FadeOutDist = serialized->get_float(FadeOutDist_type_id);
		NearFadeClipDist = serialized->get_float(NearFadeClipDist_type_id);
		NearFadeStartDist = serialized->get_float(NearFadeStartDist_type_id);
		ShadowFadeOutDist = serialized->get_float(ShadowFadeOutDist_type_id);
		SpecFadeOutDist = serialized->get_float(SpecFadeOutDist_type_id);
		TextureAsset = serialized->get_string(TextureAsset_type_id);
		CustomGoboInput = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(CustomGoboInput_type_id);
		VolumeLinks = serialized->get_uint64s(VolumeLinks_type_id);
		LightingConditions = serialized->unwrap_into<rivet::ddl::generated::LightingConditionBitSet>(LightingConditions_type_id); 
	}

	[[nodiscard]] auto
	LightDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LightDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LightDef> {
		if (incoming_type_id == LightDef::type_id) {
			return std::make_shared<LightDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
