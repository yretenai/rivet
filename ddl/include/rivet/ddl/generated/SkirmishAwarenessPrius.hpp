// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/AwarenessBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct VisionConfig; 

	struct RIVET_DDL_SHARED SkirmishAwarenessPrius : AwarenessBasePrius {
		constexpr const static std::string_view type_name = "SkirmishAwarenessPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x8ac5269f;

		constexpr const static std::string_view SourceLocatorName_type_name = "SourceLocatorName";
		constexpr const static rivet::rivet_type_id SourceLocatorName_type_id = 0x58c28db;
		constexpr const static std::string_view MaxRaycastsPerFrame_type_name = "MaxRaycastsPerFrame";
		constexpr const static rivet::rivet_type_id MaxRaycastsPerFrame_type_id = 0x42315c03;
		constexpr const static std::string_view AcquireTimeDistMin_type_name = "AcquireTimeDistMin";
		constexpr const static rivet::rivet_type_id AcquireTimeDistMin_type_id = 0x90e39f74;
		constexpr const static std::string_view AcquireTimeDistMax_type_name = "AcquireTimeDistMax";
		constexpr const static rivet::rivet_type_id AcquireTimeDistMax_type_id = 0xaceea02d;
		constexpr const static std::string_view AcquireTimeMax_type_name = "AcquireTimeMax";
		constexpr const static rivet::rivet_type_id AcquireTimeMax_type_id = 0xb57f9330;
		constexpr const static std::string_view NoLOSTransitionTime_type_name = "NoLOSTransitionTime";
		constexpr const static rivet::rivet_type_id NoLOSTransitionTime_type_id = 0xeb8cd768;
		constexpr const static std::string_view ReacquireTimeMax_type_name = "ReacquireTimeMax";
		constexpr const static rivet::rivet_type_id ReacquireTimeMax_type_id = 0xb250c6d4;
		constexpr const static std::string_view HiddenTransitionTime_type_name = "HiddenTransitionTime";
		constexpr const static rivet::rivet_type_id HiddenTransitionTime_type_id = 0x90169d9a;
		constexpr const static std::string_view DropTime_type_name = "DropTime";
		constexpr const static rivet::rivet_type_id DropTime_type_id = 0x5ee7b87d;
		constexpr const static std::string_view TargetDropDist_type_name = "TargetDropDist";
		constexpr const static rivet::rivet_type_id TargetDropDist_type_id = 0x5e00865b;
		constexpr const static std::string_view SharedPosUseDelay_type_name = "SharedPosUseDelay";
		constexpr const static rivet::rivet_type_id SharedPosUseDelay_type_id = 0x8982082b;
		constexpr const static std::string_view IdleVision_type_name = "IdleVision";
		constexpr const static rivet::rivet_type_id IdleVision_type_id = 0x721d25d7;
		constexpr const static std::string_view EngagedVision_type_name = "EngagedVision";
		constexpr const static rivet::rivet_type_id EngagedVision_type_id = 0x429e8ec1; 

		explicit SkirmishAwarenessPrius() = default;
		explicit SkirmishAwarenessPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view SourceLocatorName {};
		uint8_t MaxRaycastsPerFrame {};
		float AcquireTimeDistMin {};
		float AcquireTimeDistMax {};
		float AcquireTimeMax {};
		float NoLOSTransitionTime {};
		float ReacquireTimeMax {};
		float HiddenTransitionTime {};
		float DropTime {};
		float TargetDropDist {};
		float SharedPosUseDelay {};
		std::shared_ptr<rivet::ddl::generated::VisionConfig> IdleVision {};
		std::shared_ptr<rivet::ddl::generated::VisionConfig> EngagedVision {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkirmishAwarenessPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
