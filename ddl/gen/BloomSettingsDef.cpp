// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BloomSettingsDef.hpp>

namespace rivet::ddl::generated {
	BloomSettingsDef::BloomSettingsDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id);
		Intensity = serialized->get_float(Intensity_type_id);
		Threshold = serialized->get_float(Threshold_type_id);
		GaussianStrength0 = serialized->get_float(GaussianStrength0_type_id);
		GaussianStrength1 = serialized->get_float(GaussianStrength1_type_id);
		GaussianStrength2 = serialized->get_float(GaussianStrength2_type_id);
		GaussianStrength3 = serialized->get_float(GaussianStrength3_type_id);
		GaussianStrength4 = serialized->get_float(GaussianStrength4_type_id);
		BloomDirtiness = serialized->get_float(BloomDirtiness_type_id);
		BloomDirtinessAsset = serialized->get_string(BloomDirtinessAsset_type_id);
		LensFlareLumMin = serialized->get_float(LensFlareLumMin_type_id);
		LensFlareLumMax = serialized->get_float(LensFlareLumMax_type_id);
		LensFlareLumIntensity = serialized->get_float(LensFlareLumIntensity_type_id);
		LensFlareGhosts = serialized->get_float(LensFlareGhosts_type_id);
		LensFlareFallOff = serialized->get_float(LensFlareFallOff_type_id);
		LensFlareIntensity = serialized->get_float(LensFlareIntensity_type_id);
		LensFlareDistortion = serialized->get_float(LensFlareDistortion_type_id);
		LensFlareHaloRadius = serialized->get_float(LensFlareHaloRadius_type_id);
		LensFlareHaloIntensity = serialized->get_float(LensFlareHaloIntensity_type_id);
		LensFlareGhostDispersal = serialized->get_float(LensFlareGhostDispersal_type_id);
		AnamorphicLensFlareIntensity = serialized->get_float(AnamorphicLensFlareIntensity_type_id);
		AnamorphicLensFlareValueThreshold = serialized->get_float(AnamorphicLensFlareValueThreshold_type_id);
		AnamorphicLensFlareSaturationThreshold = serialized->get_float(AnamorphicLensFlareSaturationThreshold_type_id); 
	}

	[[nodiscard]] auto
	BloomSettingsDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BloomSettingsDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BloomSettingsDef> {
		if (incoming_type_id == BloomSettingsDef::type_id) {
			return std::make_shared<BloomSettingsDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
