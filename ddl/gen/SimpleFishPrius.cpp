// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SimpleFishPrius.hpp>

namespace rivet::ddl::generated {
	SimpleFishPrius::SimpleFishPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): FlockablePrius(serialized) {
		MaxDesireSpeed = serialized->get_float(MaxDesireSpeed_type_id, 1.000000f);
		MinDesireSpeed = serialized->get_float(MinDesireSpeed_type_id, 1.000000f);
		ArriveRange = serialized->get_float(ArriveRange_type_id, 1.000000f);
		MinScale = serialized->get_float(MinScale_type_id, 0.600000f);
		MaxScale = serialized->get_float(MaxScale_type_id, 1.000000f);
		MaxAccelAngle = serialized->get_float(MaxAccelAngle_type_id, 90.000000f); 
	}

	[[nodiscard]] auto
	SimpleFishPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SimpleFishPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleFishPrius> {
		if (incoming_type_id == SimpleFishPrius::type_id) {
			return std::make_shared<SimpleFishPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
