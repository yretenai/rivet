// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AmbientCurveFacingBase : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AmbientCurveFacingBase";
		constexpr static rivet::rivet_type_id type_id = 0x3266f70b;

		constexpr static std::string_view TurnSpeed_type_name = "TurnSpeed";
		constexpr static rivet::rivet_type_id TurnSpeed_type_id = 0x6cc70f48;
		constexpr static std::string_view TurnAccel_type_name = "TurnAccel";
		constexpr static rivet::rivet_type_id TurnAccel_type_id = 0x3e1dc75b;
		constexpr static std::string_view TurnDecel_type_name = "TurnDecel";
		constexpr static rivet::rivet_type_id TurnDecel_type_id = 0xd39617f7;
		constexpr static std::string_view MinSlowDownAngle_type_name = "MinSlowDownAngle";
		constexpr static rivet::rivet_type_id MinSlowDownAngle_type_id = 0x36f58cc4;
		constexpr static std::string_view MaxSlowDownAngle_type_name = "MaxSlowDownAngle";
		constexpr static rivet::rivet_type_id MaxSlowDownAngle_type_id = 0x670c3799; 

		explicit AmbientCurveFacingBase() = default;
		explicit AmbientCurveFacingBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float TurnSpeed {};
		float TurnAccel {};
		float TurnDecel {};
		float MinSlowDownAngle {};
		float MaxSlowDownAngle {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AmbientCurveFacingBase>;
	};
} // namespace rivet::ddl::generated

// clang-format on
