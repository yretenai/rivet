// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector2.hpp>
#include <rivet/ddl/generated/HoudiniHeightFieldScatterPerPointData.hpp> 

#include <rivet/ddl/generated/HoudiniHeightFieldScatterData.hpp>

namespace rivet::ddl::generated {
	HoudiniHeightFieldScatterData::HoudiniHeightFieldScatterData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ScatterMethod = serialized->get_enum<rivet::ddl::generated::x4155b3ed>(ScatterMethod_type_id, rivet::ddl::generated::x4155b3ed_values, rivet::ddl::generated::x4155b3ed::By_Coverage_using_Mask_Layer);
		ParamCoverage = serialized->get_float(ParamCoverage_type_id, 1.000000f);
		ParamDensity = serialized->get_float(ParamDensity_type_id, 1.000000f);
		ParamPerPointData = serialized->unwrap_into<rivet::ddl::generated::HoudiniHeightFieldScatterPerPointData>(ParamPerPointData_type_id);
		ParamTotalPointCount = serialized->get_int32(ParamTotalPointCount_type_id, 100u);
		OuterRadius = serialized->get_float(OuterRadius_type_id, 10.000000f);
		Falloff = serialized->get_float(Falloff_type_id, 0.150000f);
		ScaleRange = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(ScaleRange_type_id);
		RelaxPoints = serialized->get_bool(RelaxPoints_type_id, true);
		RelaxParamIterations = serialized->get_int32(RelaxParamIterations_type_id, 5u);
		RelaxParamAvoidLayerName = serialized->get_string(RelaxParamAvoidLayerName_type_id, {});
		SelfOverlap = serialized->get_bool(SelfOverlap_type_id, false);
		MatchDirectionWithSlope = serialized->get_bool(MatchDirectionWithSlope_type_id, true);
		MatchNormalsWithTerrain = serialized->get_bool(MatchNormalsWithTerrain_type_id, true);
		RandomizeYaw = serialized->get_float(RandomizeYaw_type_id, 180.000000f);
		RandomizeUp = serialized->get_float(RandomizeUp_type_id, 0.000000f); 
	}

	[[nodiscard]] auto
	HoudiniHeightFieldScatterData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HoudiniHeightFieldScatterData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HoudiniHeightFieldScatterData> {
		if (incoming_type_id == HoudiniHeightFieldScatterData::type_id) {
			return std::make_shared<HoudiniHeightFieldScatterData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
