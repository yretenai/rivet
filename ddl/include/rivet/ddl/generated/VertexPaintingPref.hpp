// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x1678ea2f.hpp>
#include <rivet/ddl/generated/enums/xa80d41ff.hpp>
#include <rivet/ddl/generated/enums/x2c6c1f8d.hpp>
#include <rivet/ddl/generated/enums/xff467ac8.hpp> 

namespace rivet::ddl::generated {
	struct TerrainPaintingPref; 

	struct RIVET_DDL_SHARED VertexPaintingPref : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VertexPaintingPref";
		constexpr static rivet::rivet_type_id type_id = 0xa0ee4977;

		constexpr static std::string_view Red_type_name = "Red";
		constexpr static rivet::rivet_type_id Red_type_id = 0xd0347646;
		constexpr static std::string_view Green_type_name = "Green";
		constexpr static rivet::rivet_type_id Green_type_id = 0xc9c922e0;
		constexpr static std::string_view Blue_type_name = "Blue";
		constexpr static rivet::rivet_type_id Blue_type_id = 0xaea60a04;
		constexpr static std::string_view Alpha_type_name = "Alpha";
		constexpr static rivet::rivet_type_id Alpha_type_id = 0xc9b3f5ab;
		constexpr static std::string_view EnableRed_type_name = "EnableRed";
		constexpr static rivet::rivet_type_id EnableRed_type_id = 0xb2cb49c0;
		constexpr static std::string_view EnableGreen_type_name = "EnableGreen";
		constexpr static rivet::rivet_type_id EnableGreen_type_id = 0x127652ef;
		constexpr static std::string_view EnableBlue_type_name = "EnableBlue";
		constexpr static rivet::rivet_type_id EnableBlue_type_id = 0xaa1fd32e;
		constexpr static std::string_view EnableAlpha_type_name = "EnableAlpha";
		constexpr static rivet::rivet_type_id EnableAlpha_type_id = 0x120c85a4;
		constexpr static std::string_view Radius_type_name = "Radius";
		constexpr static rivet::rivet_type_id Radius_type_id = 0x504203d;
		constexpr static std::string_view FallOff_type_name = "FallOff";
		constexpr static rivet::rivet_type_id FallOff_type_id = 0x76ca0920;
		constexpr static std::string_view Pressure_type_name = "Pressure";
		constexpr static rivet::rivet_type_id Pressure_type_id = 0xa5ae1d17;
		constexpr static std::string_view ChannelDebug_type_name = "ChannelDebug";
		constexpr static rivet::rivet_type_id ChannelDebug_type_id = 0xaf9b8346;
		constexpr static std::string_view WheelControl_type_name = "WheelControl";
		constexpr static rivet::rivet_type_id WheelControl_type_id = 0x1bea956b;
		constexpr static std::string_view MiddleClick_type_name = "MiddleClick";
		constexpr static rivet::rivet_type_id MiddleClick_type_id = 0xacfdc81a;
		constexpr static std::string_view Resolution_type_name = "Resolution";
		constexpr static rivet::rivet_type_id Resolution_type_id = 0x26e551b3;
		constexpr static std::string_view TerrainPaintingPref_type_name = "TerrainPaintingPref";
		constexpr static rivet::rivet_type_id TerrainPaintingPref_type_id = 0x17e1e59; 

		explicit VertexPaintingPref() = default;
		explicit VertexPaintingPref([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float Red {};
		float Green {};
		float Blue {};
		float Alpha {};
		bool EnableRed {};
		bool EnableGreen {};
		bool EnableBlue {};
		bool EnableAlpha {};
		float Radius {};
		float FallOff {};
		float Pressure {};
		rivet::ddl::generated::xff467ac8 ChannelDebug {};
		rivet::ddl::generated::x2c6c1f8d WheelControl {};
		rivet::ddl::generated::xa80d41ff MiddleClick {};
		rivet::ddl::generated::x1678ea2f Resolution {};
		std::shared_ptr<rivet::ddl::generated::TerrainPaintingPref> TerrainPaintingPref {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VertexPaintingPref>;
	};
} // namespace rivet::ddl::generated

// clang-format on
