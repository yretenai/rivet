// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VanityBundleConfig.hpp>

namespace rivet::ddl::generated {
	VanityBundleConfig::VanityBundleConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		BundleType = serialized->get_enum<rivet::ddl::generated::xf2db3ee>(BundleType_type_id, rivet::ddl::generated::xf2db3ee_values);
		SaveID = serialized->get_enum<rivet::ddl::generated::xd230f155>(SaveID_type_id, rivet::ddl::generated::xd230f155_values);
		DisplayImage = serialized->get_string(DisplayImage_type_id);
		VanityItems = serialized->get_strings(VanityItems_type_id);
		Accessories = serialized->get_enums<rivet::ddl::generated::x56bca86c>(Accessories_type_id, rivet::ddl::generated::x56bca86c_values);
		CoversVoice = serialized->get_bool(CoversVoice_type_id); 
	}

	[[nodiscard]] auto
	VanityBundleConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VanityBundleConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VanityBundleConfig> {
		if (incoming_type_id == VanityBundleConfig::type_id) {
			return std::make_shared<VanityBundleConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
