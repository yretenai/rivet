// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SoundEventDef.hpp>

namespace rivet::ddl::generated {
	SoundEventDef::SoundEventDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Name = serialized->get_string(Name_type_id);
		WwiseId = serialized->get_uint32(WwiseId_type_id);
		PlatformMask = serialized->get_uint32(PlatformMask_type_id);
		LanguageMask = serialized->get_uint32(LanguageMask_type_id);
		Type = serialized->get_enum<rivet::ddl::generated::x4cedff8f>(Type_type_id, rivet::ddl::generated::x4cedff8f_values);
		Dimension = serialized->get_enum<rivet::ddl::generated::xf44aa9d7>(Dimension_type_id, rivet::ddl::generated::xf44aa9d7_values);
		Playback = serialized->get_enum<rivet::ddl::generated::x6a2f1d70>(Playback_type_id, rivet::ddl::generated::x6a2f1d70_values);
		ExternalSource = serialized->get_bool(ExternalSource_type_id);
		MaxAttenuation = serialized->get_float(MaxAttenuation_type_id);
		MaxDuration = serialized->get_float(MaxDuration_type_id);
		MinDuration = serialized->get_float(MinDuration_type_id); 
	}

	[[nodiscard]] auto
	SoundEventDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SoundEventDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundEventDef> {
		if (incoming_type_id == SoundEventDef::type_id) {
			return std::make_shared<SoundEventDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
