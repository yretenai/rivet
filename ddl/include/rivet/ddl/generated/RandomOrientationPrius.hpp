// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED RandomOrientationPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "RandomOrientationPrius";
		constexpr static rivet::rivet_type_id type_id = 0xf8515e88;

		constexpr static std::string_view StartEnabled_type_name = "StartEnabled";
		constexpr static rivet::rivet_type_id StartEnabled_type_id = 0x6f36ca8b;
		constexpr static std::string_view XAngleMin_type_name = "XAngleMin";
		constexpr static rivet::rivet_type_id XAngleMin_type_id = 0x328d3f19;
		constexpr static std::string_view XAngleMax_type_name = "XAngleMax";
		constexpr static rivet::rivet_type_id XAngleMax_type_id = 0xe800040;
		constexpr static std::string_view YAngleMin_type_name = "YAngleMin";
		constexpr static rivet::rivet_type_id YAngleMin_type_id = 0x25f62b5a;
		constexpr static std::string_view YAngleMax_type_name = "YAngleMax";
		constexpr static rivet::rivet_type_id YAngleMax_type_id = 0x19fb1403;
		constexpr static std::string_view ZAngleMin_type_name = "ZAngleMin";
		constexpr static rivet::rivet_type_id ZAngleMin_type_id = 0x1c7b179f;
		constexpr static std::string_view ZAngleMax_type_name = "ZAngleMax";
		constexpr static rivet::rivet_type_id ZAngleMax_type_id = 0x207628c6; 

		explicit RandomOrientationPrius() = default;
		explicit RandomOrientationPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool StartEnabled {};
		float XAngleMin {};
		float XAngleMax {};
		float YAngleMin {};
		float YAngleMax {};
		float ZAngleMin {};
		float ZAngleMax {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RandomOrientationPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
