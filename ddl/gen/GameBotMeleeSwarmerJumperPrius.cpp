// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameBotMeleeSwarmerJumperPrius.hpp>

namespace rivet::ddl::generated {
	GameBotMeleeSwarmerJumperPrius::GameBotMeleeSwarmerJumperPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): GameBotMeleeSwarmerPrius(serialized) {
		JumpDistMin = serialized->get_float(JumpDistMin_type_id, 6.000000);
		JumpDistMax = serialized->get_float(JumpDistMax_type_id, 12.000000);
		JumpDistVarName = serialized->get_string(JumpDistVarName_type_id, "Distance");
		JumpDistVarMin = serialized->get_float(JumpDistVarMin_type_id, 0.000000);
		JumpDistVarMax = serialized->get_float(JumpDistVarMax_type_id, 3.000000);
		MaxSingleJumpDist = serialized->get_float(MaxSingleJumpDist_type_id, 12.000000); 
	}

	[[nodiscard]] auto
	GameBotMeleeSwarmerJumperPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameBotMeleeSwarmerJumperPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotMeleeSwarmerJumperPrius> {
		if (incoming_type_id == GameBotMeleeSwarmerJumperPrius::type_id) {
			return std::make_shared<GameBotMeleeSwarmerJumperPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
