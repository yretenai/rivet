// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimAssistAutoTargetLocationJoint.hpp>
#include <rivet/ddl/generated/AimAssistAutoTargetLocationTargetLocation.hpp> 

#include <rivet/ddl/generated/AimAssistAutoTargetLocation.hpp>

namespace rivet::ddl::generated {
	AimAssistAutoTargetLocation::AimAssistAutoTargetLocation([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AssistZoneParent = serialized->get_int32(AssistZoneParent_type_id, -1);
		FaceAngle = serialized->get_float(FaceAngle_type_id, 180.000000f);
		OverrideRange = serialized->get_float(OverrideRange_type_id, -1.000000f);
		OverrideAngle = serialized->get_float(OverrideAngle_type_id, -1.000000f);
		RequireBodyVisible = serialized->get_bool(RequireBodyVisible_type_id, false);
		RequireHeadVisible = serialized->get_bool(RequireHeadVisible_type_id, false);
		OnlyAsFallback = serialized->get_bool(OnlyAsFallback_type_id, false);
		LocationType = serialized->get_enum<rivet::ddl::generated::x80286938>(LocationType_type_id, rivet::ddl::generated::x80286938_values, rivet::ddl::generated::x80286938::CenterOfMass); 
	}

	[[nodiscard]] auto
	AimAssistAutoTargetLocation::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AimAssistAutoTargetLocation::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimAssistAutoTargetLocation> {
		if (incoming_type_id == AimAssistAutoTargetLocation::type_id) {
			return std::make_shared<AimAssistAutoTargetLocation>(serialized);
		}

		auto AimAssistAutoTargetLocationTargetLocation_ptr = AimAssistAutoTargetLocationTargetLocation::from_substruct(incoming_type_id, serialized);
		if (AimAssistAutoTargetLocationTargetLocation_ptr != nullptr) {
			return AimAssistAutoTargetLocationTargetLocation_ptr;
		}

		auto AimAssistAutoTargetLocationJoint_ptr = AimAssistAutoTargetLocationJoint::from_substruct(incoming_type_id, serialized);
		if (AimAssistAutoTargetLocationJoint_ptr != nullptr) {
			return AimAssistAutoTargetLocationJoint_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
