// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CameraInputSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CameraInputSettings";
		constexpr static rivet::rivet_type_id type_id = 0xd11a42aa;

		constexpr static std::string_view ZedQuality_type_name = "ZedQuality";
		constexpr static rivet::rivet_type_id ZedQuality_type_id = 0xb5e1a446;
		constexpr static std::string_view ZedResolution_type_name = "ZedResolution";
		constexpr static rivet::rivet_type_id ZedResolution_type_id = 0xb15e243b;
		constexpr static std::string_view ResolutionWidth_type_name = "ResolutionWidth";
		constexpr static rivet::rivet_type_id ResolutionWidth_type_id = 0xc3d8165a;
		constexpr static std::string_view ResolutionHeight_type_name = "ResolutionHeight";
		constexpr static rivet::rivet_type_id ResolutionHeight_type_id = 0x76f4d62;
		constexpr static std::string_view FrameRate_type_name = "FrameRate";
		constexpr static rivet::rivet_type_id FrameRate_type_id = 0x331b0992;
		constexpr static std::string_view CameraName_type_name = "CameraName";
		constexpr static rivet::rivet_type_id CameraName_type_id = 0xe6f936e0;
		constexpr static std::string_view FrameBufferCount_type_name = "FrameBufferCount";
		constexpr static rivet::rivet_type_id FrameBufferCount_type_id = 0x3ba21cbf;
		constexpr static std::string_view FrameDelayMs_type_name = "FrameDelayMs";
		constexpr static rivet::rivet_type_id FrameDelayMs_type_id = 0x32a6fcef;
		constexpr static std::string_view LeftClip_type_name = "LeftClip";
		constexpr static rivet::rivet_type_id LeftClip_type_id = 0x3f407aa2;
		constexpr static std::string_view RightClip_type_name = "RightClip";
		constexpr static rivet::rivet_type_id RightClip_type_id = 0xffb70677;
		constexpr static std::string_view TopClip_type_name = "TopClip";
		constexpr static rivet::rivet_type_id TopClip_type_id = 0xa887717b;
		constexpr static std::string_view BottomClip_type_name = "BottomClip";
		constexpr static rivet::rivet_type_id BottomClip_type_id = 0xea1fad13;
		constexpr static std::string_view ChromaKey_type_name = "ChromaKey";
		constexpr static rivet::rivet_type_id ChromaKey_type_id = 0x2fe5e681;
		constexpr static std::string_view LinearKey_type_name = "LinearKey";
		constexpr static rivet::rivet_type_id LinearKey_type_id = 0xba4fe962;
		constexpr static std::string_view SpillReduction_type_name = "SpillReduction";
		constexpr static rivet::rivet_type_id SpillReduction_type_id = 0x5ee81684;
		constexpr static std::string_view BlueScreen_type_name = "BlueScreen";
		constexpr static rivet::rivet_type_id BlueScreen_type_id = 0x3e5a9a1;
		constexpr static std::string_view DisplayDebugAxes_type_name = "DisplayDebugAxes";
		constexpr static rivet::rivet_type_id DisplayDebugAxes_type_id = 0x314620c3; 

		explicit CameraInputSettings() = default;
		explicit CameraInputSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t ZedQuality {};
		int32_t ZedResolution {};
		int32_t ResolutionWidth {};
		int32_t ResolutionHeight {};
		float FrameRate {};
		std::string_view CameraName {};
		int32_t FrameBufferCount {};
		float FrameDelayMs {};
		float LeftClip {};
		float RightClip {};
		float TopClip {};
		float BottomClip {};
		float ChromaKey {};
		float LinearKey {};
		float SpillReduction {};
		bool BlueScreen {};
		bool DisplayDebugAxes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraInputSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
