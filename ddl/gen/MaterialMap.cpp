// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MaterialMap.hpp>

namespace rivet::ddl::generated {
	MaterialMap::MaterialMap([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MaterialMappingName = serialized->get_string(MaterialMappingName_type_id);
		AssetMaterialName = serialized->get_string(AssetMaterialName_type_id);
		MaterialLodDist = serialized->get_float(MaterialLodDist_type_id);
		FadeOutDist = serialized->get_float(FadeOutDist_type_id);
		TextureStreamBias = serialized->get_float(TextureStreamBias_type_id);
		DoubleSidedType = serialized->get_enum<rivet::ddl::generated::DoubleSidedType>(DoubleSidedType_type_id, rivet::ddl::generated::DoubleSidedType_values);
		ImpostorHQType = serialized->get_enum<rivet::ddl::generated::ImpostorHQType>(ImpostorHQType_type_id, rivet::ddl::generated::ImpostorHQType_values);
		Disable = serialized->get_bool(Disable_type_id);
		PolySort = serialized->get_bool(PolySort_type_id);
		LensFlareOccluder = serialized->get_bool(LensFlareOccluder_type_id);
		OverrideCollisionMtl = serialized->get_bool(OverrideCollisionMtl_type_id);
		SkipRayTracing = serialized->get_bool(SkipRayTracing_type_id);
		NoAvResponse = serialized->get_bool(NoAvResponse_type_id); 
	}

	[[nodiscard]] auto
	MaterialMap::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MaterialMap::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialMap> {
		if (incoming_type_id == MaterialMap::type_id) {
			return std::make_shared<MaterialMap>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
