// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UITutorialStepArrow.hpp>
#include <rivet/ddl/generated/DDLVector2.hpp>
#include <rivet/ddl/generated/UITutorialAllowableInput.hpp>
#include <rivet/ddl/generated/UITutorialModalButton.hpp>
#include <rivet/ddl/generated/UITutorialStepMessage.hpp> 

#include <rivet/ddl/generated/UITutorialStepBase.hpp>

namespace rivet::ddl::generated {
	UITutorialStepBase::UITutorialStepBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Text = serialized->get_string(Text_type_id);
		PostStepVO = serialized->get_string(PostStepVO_type_id);
		AllowableInputs = serialized->unwrap_into_many<rivet::ddl::generated::UITutorialAllowableInput>(AllowableInputs_type_id);
		ModalButton = serialized->unwrap_into<rivet::ddl::generated::UITutorialModalButton>(ModalButton_type_id);
		ElementPosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(ElementPosition_type_id); 
	}

	[[nodiscard]] auto
	UITutorialStepBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UITutorialStepBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UITutorialStepBase> {
		if (incoming_type_id == UITutorialStepBase::type_id) {
			return std::make_shared<UITutorialStepBase>(serialized);
		}

		auto UITutorialStepArrow_ptr = UITutorialStepArrow::from_substruct(incoming_type_id, serialized);
		if (UITutorialStepArrow_ptr != nullptr) {
			return UITutorialStepArrow_ptr;
		}

		auto UITutorialStepMessage_ptr = UITutorialStepMessage::from_substruct(incoming_type_id, serialized);
		if (UITutorialStepMessage_ptr != nullptr) {
			return UITutorialStepMessage_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
