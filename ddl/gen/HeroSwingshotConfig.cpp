// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SwingshotJumpData.hpp> 

#include <rivet/ddl/generated/HeroSwingshotConfig.hpp>

namespace rivet::ddl::generated {
	HeroSwingshotConfig::HeroSwingshotConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MinRange = serialized->get_float(MinRange_type_id, 3.000000f);
		MaxRange = serialized->get_float(MaxRange_type_id, 30.000000f);
		HorizFOV = serialized->get_float(HorizFOV_type_id, 80.000000f);
		VertFOV = serialized->get_float(VertFOV_type_id, 51.000000f);
		MaxDistBelow = serialized->get_float(MaxDistBelow_type_id, 4.000000f);
		GracePeriod = serialized->get_float(GracePeriod_type_id, 0.250000f);
		JumpData = serialized->unwrap_into<rivet::ddl::generated::SwingshotJumpData>(JumpData_type_id); 
	}

	[[nodiscard]] auto
	HeroSwingshotConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroSwingshotConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroSwingshotConfig> {
		if (incoming_type_id == HeroSwingshotConfig::type_id) {
			return std::make_shared<HeroSwingshotConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
