// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PhotomodeCameraInputYawAndPitchPrius.hpp> 

#include <rivet/ddl/generated/CameraInputYawAndPitchPrius.hpp>

namespace rivet::ddl::generated {
	CameraInputYawAndPitchPrius::CameraInputYawAndPitchPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActivateAction = serialized->get_enum<rivet::ddl::generated::xf787d865>(ActivateAction_type_id, rivet::ddl::generated::xf787d865_values, rivet::ddl::generated::xf787d865::Reset_To_Zero);
		YawMin = serialized->get_float(YawMin_type_id, 0.000000);
		YawMax = serialized->get_float(YawMax_type_id, 0.000000);
		PitchMin = serialized->get_float(PitchMin_type_id, 0.000000);
		PitchMax = serialized->get_float(PitchMax_type_id, 0.000000);
		InitialYaw = serialized->get_float(InitialYaw_type_id, 0.000000);
		InitialPitch = serialized->get_float(InitialPitch_type_id, 0.000000);
		YawSoftZone = serialized->get_float(YawSoftZone_type_id, 0.000000);
		PitchSoftZone = serialized->get_float(PitchSoftZone_type_id, 0.000000);
		SettleGain = serialized->get_float(SettleGain_type_id, -0.800000);
		SettleDamp = serialized->get_float(SettleDamp_type_id, -1.600000);
		SettleDelay = serialized->get_float(SettleDelay_type_id, 0.150000);
		ApplySettle = serialized->get_bool(ApplySettle_type_id, false);
		ActorRefMatrix = serialized->get_bool(ActorRefMatrix_type_id, true);
		AllowMoveStickInput = serialized->get_bool(AllowMoveStickInput_type_id, false);
		AllowMenuMoveStickInput = serialized->get_bool(AllowMenuMoveStickInput_type_id, false);
		StickConfig = serialized->get_string(StickConfig_type_id, {});
		JitterMaxPush = serialized->get_float(JitterMaxPush_type_id, 0.000000);
		JitterMinPush = serialized->get_float(JitterMinPush_type_id, 0.000000);
		JitterRate = serialized->get_float(JitterRate_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	CameraInputYawAndPitchPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraInputYawAndPitchPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraInputYawAndPitchPrius> {
		if (incoming_type_id == CameraInputYawAndPitchPrius::type_id) {
			return std::make_shared<CameraInputYawAndPitchPrius>(serialized);
		}

		auto PhotomodeCameraInputYawAndPitchPrius_ptr = PhotomodeCameraInputYawAndPitchPrius::from_substruct(incoming_type_id, serialized);
		if (PhotomodeCameraInputYawAndPitchPrius_ptr != nullptr) {
			return PhotomodeCameraInputYawAndPitchPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
