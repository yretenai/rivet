// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CaptureGridInfo.hpp>
#include <rivet/ddl/generated/CaptureJobInfo.hpp> 

#include <rivet/ddl/generated/LightGridCaptureInfo.hpp>

namespace rivet::ddl::generated {
	LightGridCaptureInfo::LightGridCaptureInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		JobInfo = serialized->unwrap_into<rivet::ddl::generated::CaptureJobInfo>(JobInfo_type_id);
		GridInfo = serialized->unwrap_into_many<rivet::ddl::generated::CaptureGridInfo>(GridInfo_type_id);
		Zones = serialized->get_strings(Zones_type_id);
		Atmosphere = serialized->get_string(Atmosphere_type_id);
		CaptureDirectOnly = serialized->get_bool(CaptureDirectOnly_type_id);
		CaptureGBufferOnly = serialized->get_bool(CaptureGBufferOnly_type_id);
		CaptureFromGBuffer = serialized->get_bool(CaptureFromGBuffer_type_id);
		UseGBufferEmissive = serialized->get_bool(UseGBufferEmissive_type_id);
		DebugEmbeddedSamples = serialized->get_bool(DebugEmbeddedSamples_type_id);
		WriteLightBinsToServer = serialized->get_bool(WriteLightBinsToServer_type_id);
		LightingCondition = serialized->get_enum<rivet::ddl::generated::LightingConditions>(LightingCondition_type_id, rivet::ddl::generated::LightingConditions_values);
		GBufferServerAddress = serialized->get_string(GBufferServerAddress_type_id);
		GBufferServerPort = serialized->get_uint32(GBufferServerPort_type_id);
		LogUrl = serialized->get_string(LogUrl_type_id); 
	}

	[[nodiscard]] auto
	LightGridCaptureInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LightGridCaptureInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LightGridCaptureInfo> {
		if (incoming_type_id == LightGridCaptureInfo::type_id) {
			return std::make_shared<LightGridCaptureInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
