// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TargetedBounceEffectNodeDef.hpp>
#include <rivet/ddl/generated/BounceScaleData.hpp>
#include <rivet/ddl/generated/OutputPlugUInt.hpp>
#include <rivet/ddl/generated/InputPlugUInt.hpp> 

#include <rivet/ddl/generated/BounceEffectNodeDef.hpp>

namespace rivet::ddl::generated {
	BounceEffectNodeDef::BounceEffectNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): NodalShotEffectNodeBaseDef(serialized) {
		BounceCountIn = serialized->unwrap_into<rivet::ddl::generated::InputPlugUInt>(BounceCountIn_type_id);
		BounceCountOut = serialized->unwrap_into<rivet::ddl::generated::OutputPlugUInt>(BounceCountOut_type_id);
		EnvironmentHit = serialized->unwrap_into<rivet::ddl::generated::BounceScaleData>(EnvironmentHit_type_id);
		ActorHit = serialized->unwrap_into<rivet::ddl::generated::BounceScaleData>(ActorHit_type_id); 
	}

	[[nodiscard]] auto
	BounceEffectNodeDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BounceEffectNodeDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BounceEffectNodeDef> {
		if (incoming_type_id == BounceEffectNodeDef::type_id) {
			return std::make_shared<BounceEffectNodeDef>(serialized);
		}

		auto TargetedBounceEffectNodeDef_ptr = TargetedBounceEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (TargetedBounceEffectNodeDef_ptr != nullptr) {
			return TargetedBounceEffectNodeDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
