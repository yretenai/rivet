// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct PortalLoadPrius; 

	struct RIVET_DDL_SHARED PortalPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "PortalPrius";
		constexpr static rivet::rivet_type_id type_id = 0xb94aeb36;

		constexpr static std::string_view TargetPortal_type_name = "TargetPortal";
		constexpr static rivet::rivet_type_id TargetPortal_type_id = 0xf91fd9d6;
		constexpr static std::string_view StartActive_type_name = "StartActive";
		constexpr static rivet::rivet_type_id StartActive_type_id = 0x3e035e82;
		constexpr static std::string_view StartActiveIfLoaded_type_name = "StartActiveIfLoaded";
		constexpr static rivet::rivet_type_id StartActiveIfLoaded_type_id = 0xd92c27af;
		constexpr static std::string_view SyncWithTargetPortal_type_name = "SyncWithTargetPortal";
		constexpr static rivet::rivet_type_id SyncWithTargetPortal_type_id = 0xcf9a9ad3;
		constexpr static std::string_view PortalLoad_type_name = "PortalLoad";
		constexpr static rivet::rivet_type_id PortalLoad_type_id = 0x80674dfb; 

		explicit PortalPrius() = default;
		explicit PortalPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t TargetPortal {};
		bool StartActive {};
		bool StartActiveIfLoaded {};
		bool SyncWithTargetPortal {};
		std::shared_ptr<rivet::ddl::generated::PortalLoadPrius> PortalLoad {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PortalPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
