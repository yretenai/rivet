// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UI_MaterialGraphNodeInput.hpp> 

#include <rivet/ddl/generated/UI_MaterialGraphNode.hpp>

namespace rivet::ddl::generated {
	UI_MaterialGraphNode::UI_MaterialGraphNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		IdLow = serialized->get_int32(IdLow_type_id, 0u);
		Name = serialized->get_string(Name_type_id, {});
		VariableName = serialized->get_string(VariableName_type_id, {});
		MaterialNode = serialized->get_string(MaterialNode_type_id, {});
		PrependNodeName = serialized->get_bool(PrependNodeName_type_id, false);
		SortOrder = serialized->get_int32(SortOrder_type_id, 0u);
		IsSubGraph = serialized->get_bool(IsSubGraph_type_id, false);
		InputList = serialized->unwrap_into_many<rivet::ddl::generated::UI_MaterialGraphNodeInput>(InputList_type_id); 
	}

	[[nodiscard]] auto
	UI_MaterialGraphNode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UI_MaterialGraphNode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UI_MaterialGraphNode> {
		if (incoming_type_id == UI_MaterialGraphNode::type_id) {
			return std::make_shared<UI_MaterialGraphNode>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
