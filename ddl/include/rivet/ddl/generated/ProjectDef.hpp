// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct CodeBranchRef; 

	struct RIVET_DDL_SHARED ProjectDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ProjectDef";
		constexpr static rivet::rivet_type_id type_id = 0x9f932314;

		constexpr static std::string_view Id_type_name = "Id";
		constexpr static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr static std::string_view GameExeName_type_name = "GameExeName";
		constexpr static rivet::rivet_type_id GameExeName_type_id = 0xeb73e785;
		constexpr static std::string_view CodeBranchRef_type_name = "CodeBranchRef";
		constexpr static rivet::rivet_type_id CodeBranchRef_type_id = 0xfc7c2c47;
		constexpr static std::string_view Timestamp_type_name = "Timestamp";
		constexpr static rivet::rivet_type_id Timestamp_type_id = 0x272b7932;
		constexpr static std::string_view GameBuildCacheDir_type_name = "GameBuildCacheDir";
		constexpr static rivet::rivet_type_id GameBuildCacheDir_type_id = 0xae835a98;
		constexpr static std::string_view GameBuildCacheOrigin_type_name = "GameBuildCacheOrigin";
		constexpr static rivet::rivet_type_id GameBuildCacheOrigin_type_id = 0x6ea74978;
		constexpr static std::string_view AssetBranchPath_type_name = "AssetBranchPath";
		constexpr static rivet::rivet_type_id AssetBranchPath_type_id = 0x6e15e0da;
		constexpr static std::string_view AssetBranchChoices_type_name = "AssetBranchChoices";
		constexpr static rivet::rivet_type_id AssetBranchChoices_type_id = 0xf61f7bff; 

		explicit ProjectDef() = default;
		explicit ProjectDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Id {};
		std::string_view GameExeName {};
		std::shared_ptr<rivet::ddl::generated::CodeBranchRef> CodeBranchRef {};
		uint64_t Timestamp {};
		std::string_view GameBuildCacheDir {};
		std::string_view GameBuildCacheOrigin {};
		std::string_view AssetBranchPath {};
		std::vector<std::string_view> AssetBranchChoices {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ProjectDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
