// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SimpleBreakablePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SimpleBreakablePrius";
		constexpr static rivet::rivet_type_id type_id = 0xf8a897bf;

		constexpr static std::string_view SaveDestroyedState_type_name = "SaveDestroyedState";
		constexpr static rivet::rivet_type_id SaveDestroyedState_type_id = 0x97b042c7;
		constexpr static std::string_view MaxHealth_type_name = "MaxHealth";
		constexpr static rivet::rivet_type_id MaxHealth_type_id = 0x72aa54be;
		constexpr static std::string_view DestroyDelay_type_name = "DestroyDelay";
		constexpr static rivet::rivet_type_id DestroyDelay_type_id = 0x86291ca;
		constexpr static std::string_view HideOnDeath_type_name = "HideOnDeath";
		constexpr static rivet::rivet_type_id HideOnDeath_type_id = 0xd823a00a;
		constexpr static std::string_view StumpModel_type_name = "StumpModel";
		constexpr static rivet::rivet_type_id StumpModel_type_id = 0x5d088fdd;
		constexpr static std::string_view StumpCollision_type_name = "StumpCollision";
		constexpr static rivet::rivet_type_id StumpCollision_type_id = 0x8175151f; 

		explicit SimpleBreakablePrius() = default;
		explicit SimpleBreakablePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool SaveDestroyedState {};
		float MaxHealth {};
		float DestroyDelay {};
		bool HideOnDeath {};
		std::string_view StumpModel {};
		bool StumpCollision {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleBreakablePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
