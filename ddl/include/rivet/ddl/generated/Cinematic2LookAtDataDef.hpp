// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED Cinematic2LookAtDataDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "Cinematic2LookAtDataDef";
		constexpr static rivet::rivet_type_id type_id = 0x99c238fd;

		constexpr static std::string_view LookAtHeroCamera_type_name = "LookAtHeroCamera";
		constexpr static rivet::rivet_type_id LookAtHeroCamera_type_id = 0x76488fa6;
		constexpr static std::string_view TargetActorId_type_name = "TargetActorId";
		constexpr static rivet::rivet_type_id TargetActorId_type_id = 0x6d367288;
		constexpr static std::string_view TargetLocatorName_type_name = "TargetLocatorName";
		constexpr static rivet::rivet_type_id TargetLocatorName_type_id = 0x4bd4816e;
		constexpr static std::string_view SourceLocatorName_type_name = "SourceLocatorName";
		constexpr static rivet::rivet_type_id SourceLocatorName_type_id = 0x58c28db;
		constexpr static std::string_view FocusHorizontal_type_name = "FocusHorizontal";
		constexpr static rivet::rivet_type_id FocusHorizontal_type_id = 0xf97162ca;
		constexpr static std::string_view FocusVertical_type_name = "FocusVertical";
		constexpr static rivet::rivet_type_id FocusVertical_type_id = 0xe087dabb;
		constexpr static std::string_view FocusSpeed_type_name = "FocusSpeed";
		constexpr static rivet::rivet_type_id FocusSpeed_type_id = 0x2d80d59; 

		explicit Cinematic2LookAtDataDef() = default;
		explicit Cinematic2LookAtDataDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool LookAtHeroCamera {};
		uint64_t TargetActorId {};
		std::string_view TargetLocatorName {};
		std::string_view SourceLocatorName {};
		float FocusHorizontal {};
		float FocusVertical {};
		float FocusSpeed {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2LookAtDataDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
