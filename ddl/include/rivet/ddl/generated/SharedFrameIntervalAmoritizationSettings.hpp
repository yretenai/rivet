// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SharedFrameIntervalAmoritizationSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SharedFrameIntervalAmoritizationSettings";
		constexpr static rivet::rivet_type_id type_id = 0x5dca882d;

		constexpr static std::string_view PerchHunterUpdateInterval_type_name = "PerchHunterUpdateInterval";
		constexpr static rivet::rivet_type_id PerchHunterUpdateInterval_type_id = 0x720690d6;
		constexpr static std::string_view AwarenessBaseUpdateInterval_type_name = "AwarenessBaseUpdateInterval";
		constexpr static rivet::rivet_type_id AwarenessBaseUpdateInterval_type_id = 0xbc9c79ef;
		constexpr static std::string_view OmniAwarenessUpdateInterval_type_name = "OmniAwarenessUpdateInterval";
		constexpr static rivet::rivet_type_id OmniAwarenessUpdateInterval_type_id = 0x975f4d9b;
		constexpr static std::string_view FlightAreaFirepointHunterUpdateInterval_type_name = "FlightAreaFirepointHunterUpdateInterval";
		constexpr static rivet::rivet_type_id FlightAreaFirepointHunterUpdateInterval_type_id = 0x454c590b;
		constexpr static std::string_view MultiHeuristicTargetingUpdateInterval_type_name = "MultiHeuristicTargetingUpdateInterval";
		constexpr static rivet::rivet_type_id MultiHeuristicTargetingUpdateInterval_type_id = 0xa12e01ef;
		constexpr static std::string_view TargetingBaseUpdateInterval_type_name = "TargetingBaseUpdateInterval";
		constexpr static rivet::rivet_type_id TargetingBaseUpdateInterval_type_id = 0x27490263;
		constexpr static std::string_view TieredAggroTargetingUpdateInterval_type_name = "TieredAggroTargetingUpdateInterval";
		constexpr static rivet::rivet_type_id TieredAggroTargetingUpdateInterval_type_id = 0x3520d3f3;
		constexpr static std::string_view BreakableBusterUpdateInterval_type_name = "BreakableBusterUpdateInterval";
		constexpr static rivet::rivet_type_id BreakableBusterUpdateInterval_type_id = 0x3862faf3;
		constexpr static std::string_view LosBlockerHunterUpdateInterval_type_name = "LosBlockerHunterUpdateInterval";
		constexpr static rivet::rivet_type_id LosBlockerHunterUpdateInterval_type_id = 0xc2a05bea;
		constexpr static std::string_view NavMeshObstructionUpdateInterval_type_name = "NavMeshObstructionUpdateInterval";
		constexpr static rivet::rivet_type_id NavMeshObstructionUpdateInterval_type_id = 0x843dc319;
		constexpr static std::string_view TriggerByDistanceUpdateInterval_type_name = "TriggerByDistanceUpdateInterval";
		constexpr static rivet::rivet_type_id TriggerByDistanceUpdateInterval_type_id = 0x32833762;
		constexpr static std::string_view FirepointHunterUpdateInterval_type_name = "FirepointHunterUpdateInterval";
		constexpr static rivet::rivet_type_id FirepointHunterUpdateInterval_type_id = 0xf8f9a070; 

		explicit SharedFrameIntervalAmoritizationSettings() = default;
		explicit SharedFrameIntervalAmoritizationSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t PerchHunterUpdateInterval {};
		uint32_t AwarenessBaseUpdateInterval {};
		uint32_t OmniAwarenessUpdateInterval {};
		uint32_t FlightAreaFirepointHunterUpdateInterval {};
		uint32_t MultiHeuristicTargetingUpdateInterval {};
		uint32_t TargetingBaseUpdateInterval {};
		uint32_t TieredAggroTargetingUpdateInterval {};
		uint32_t BreakableBusterUpdateInterval {};
		uint32_t LosBlockerHunterUpdateInterval {};
		uint32_t NavMeshObstructionUpdateInterval {};
		uint32_t TriggerByDistanceUpdateInterval {};
		uint32_t FirepointHunterUpdateInterval {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SharedFrameIntervalAmoritizationSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
