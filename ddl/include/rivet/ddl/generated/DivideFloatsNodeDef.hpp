// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/MathNodeBaseDef.hpp> 

namespace rivet::ddl::generated {
	struct OutputPlugFloat;
	struct InputPlugFloat; 

	struct RIVET_DDL_SHARED DivideFloatsNodeDef : MathNodeBaseDef {
		constexpr static std::string_view type_name = "DivideFloatsNodeDef";
		constexpr static rivet::rivet_type_id type_id = 0x336237dc;

		constexpr static std::string_view Numerator_type_name = "Numerator";
		constexpr static rivet::rivet_type_id Numerator_type_id = 0xa9a37991;
		constexpr static std::string_view Denominator_type_name = "Denominator";
		constexpr static rivet::rivet_type_id Denominator_type_id = 0xc366af91;
		constexpr static std::string_view Quotient_type_name = "Quotient";
		constexpr static rivet::rivet_type_id Quotient_type_id = 0x105db555; 

		explicit DivideFloatsNodeDef() = default;
		explicit DivideFloatsNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::InputPlugFloat> Numerator {};
		std::shared_ptr<rivet::ddl::generated::InputPlugFloat> Denominator {};
		std::shared_ptr<rivet::ddl::generated::OutputPlugFloat> Quotient {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DivideFloatsNodeDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
