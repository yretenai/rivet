// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SubtaskDef.hpp>
#include <rivet/ddl/generated/ActivityDef.hpp>
#include <rivet/ddl/generated/TaskDef.hpp>
#include <rivet/ddl/generated/ActivityHintWithId.hpp>
#include <rivet/ddl/generated/ActivityLinkBase.hpp> 

#include <rivet/ddl/generated/ActivityDefBase.hpp>

namespace rivet::ddl::generated {
	ActivityDefBase::ActivityDefBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActivityId = serialized->get_string(ActivityId_type_id, {});
		ActivityLink = serialized->unwrap_into<rivet::ddl::generated::ActivityLinkBase>(ActivityLink_type_id);
		SendLocationOnEnd = serialized->get_bool(SendLocationOnEnd_type_id, false);
		DefaultPlaytimeEstimate = serialized->get_uint32(DefaultPlaytimeEstimate_type_id, 5u);
		Hints = serialized->unwrap_into_many<rivet::ddl::generated::ActivityHintWithId>(Hints_type_id); 
	}

	[[nodiscard]] auto
	ActivityDefBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ActivityDefBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActivityDefBase> {
		if (incoming_type_id == ActivityDefBase::type_id) {
			return std::make_shared<ActivityDefBase>(serialized);
		}

		auto TaskDef_ptr = TaskDef::from_substruct(incoming_type_id, serialized);
		if (TaskDef_ptr != nullptr) {
			return TaskDef_ptr;
		}

		auto ActivityDef_ptr = ActivityDef::from_substruct(incoming_type_id, serialized);
		if (ActivityDef_ptr != nullptr) {
			return ActivityDef_ptr;
		}

		auto SubtaskDef_ptr = SubtaskDef::from_substruct(incoming_type_id, serialized);
		if (SubtaskDef_ptr != nullptr) {
			return SubtaskDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
