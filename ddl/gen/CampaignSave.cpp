// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameCampaignSave.hpp> 

#include <rivet/ddl/generated/CampaignSave.hpp>

namespace rivet::ddl::generated {
	CampaignSave::CampaignSave([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CurrentLevel = serialized->get_int32(CurrentLevel_type_id, -1);
		CurrentCheckpoint = serialized->get_uint32(CurrentCheckpoint_type_id, 0u);
		CurrentCheckpointId = serialized->get_uint64(CurrentCheckpointId_type_id, 0ull);
		CurrentLightingMode = serialized->get_enum<rivet::ddl::generated::LightingMode>(CurrentLightingMode_type_id, rivet::ddl::generated::LightingMode_values, rivet::ddl::generated::LightingMode::Day);
		CurrentLightingModeValid = serialized->get_bool(CurrentLightingModeValid_type_id, false);
		PlaythroughSegmentId = serialized->get_uint32(PlaythroughSegmentId_type_id, 0u); 
	}

	[[nodiscard]] auto
	CampaignSave::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CampaignSave::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CampaignSave> {
		if (incoming_type_id == CampaignSave::type_id) {
			return std::make_shared<CampaignSave>(serialized);
		}

		auto GameCampaignSave_ptr = GameCampaignSave::from_substruct(incoming_type_id, serialized);
		if (GameCampaignSave_ptr != nullptr) {
			return GameCampaignSave_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
