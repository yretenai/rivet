// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SkyDiveVolumePrius.hpp>

namespace rivet::ddl::generated {
	SkyDiveVolumePrius::SkyDiveVolumePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TargetVolume = serialized->get_uint64(TargetVolume_type_id, 0ull);
		DiveTime = serialized->get_float(DiveTime_type_id, 10.000000f);
		CameraDistance = serialized->get_float(CameraDistance_type_id, 8.000000f);
		CameraOrientation = serialized->get_enum<rivet::ddl::generated::xd2417a1c>(CameraOrientation_type_id, rivet::ddl::generated::xd2417a1c_values, rivet::ddl::generated::xd2417a1c::FacingDirection);
		UseDiveCameraOffset = serialized->get_bool(UseDiveCameraOffset_type_id, true); 
	}

	[[nodiscard]] auto
	SkyDiveVolumePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SkyDiveVolumePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkyDiveVolumePrius> {
		if (incoming_type_id == SkyDiveVolumePrius::type_id) {
			return std::make_shared<SkyDiveVolumePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
