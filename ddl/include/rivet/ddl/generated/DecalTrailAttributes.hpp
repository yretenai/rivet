// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/KeyFrameAccessType.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DecalTrailAttributes : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "DecalTrailAttributes";
		constexpr static rivet::rivet_type_id type_id = 0xd5354488;

		constexpr static std::string_view KeyFrameAccessType_type_name = "KeyFrameAccessType";
		constexpr static rivet::rivet_type_id KeyFrameAccessType_type_id = 0x521686a5;
		constexpr static std::string_view DisplayTrailBounds_type_name = "DisplayTrailBounds";
		constexpr static rivet::rivet_type_id DisplayTrailBounds_type_id = 0x788d57a7;
		constexpr static std::string_view SkipSkinnedMeshes_type_name = "SkipSkinnedMeshes";
		constexpr static rivet::rivet_type_id SkipSkinnedMeshes_type_id = 0x7ce75ea6;
		constexpr static std::string_view SegmentLifetime_type_name = "SegmentLifetime";
		constexpr static rivet::rivet_type_id SegmentLifetime_type_id = 0xec4b22cc;
		constexpr static std::string_view SegmentSize_type_name = "SegmentSize";
		constexpr static rivet::rivet_type_id SegmentSize_type_id = 0x542d5dd9;
		constexpr static std::string_view MaxLength_type_name = "MaxLength";
		constexpr static rivet::rivet_type_id MaxLength_type_id = 0xbd0de91f; 

		explicit DecalTrailAttributes() = default;
		explicit DecalTrailAttributes([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::KeyFrameAccessType KeyFrameAccessType {};
		bool DisplayTrailBounds {};
		bool SkipSkinnedMeshes {};
		float SegmentLifetime {};
		float SegmentSize {};
		float MaxLength {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DecalTrailAttributes>;
	};
} // namespace rivet::ddl::generated

// clang-format on
