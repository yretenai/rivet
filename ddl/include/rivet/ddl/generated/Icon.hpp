// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x445aeabc.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED Icon : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "Icon";
		constexpr static rivet::rivet_type_id type_id = 0x5504e96b;

		constexpr static std::string_view IconId_type_name = "IconId";
		constexpr static rivet::rivet_type_id IconId_type_id = 0x34bbecb9;
		constexpr static std::string_view Texture_type_name = "Texture";
		constexpr static rivet::rivet_type_id Texture_type_id = 0x838c6e4a;
		constexpr static std::string_view Width_type_name = "Width";
		constexpr static rivet::rivet_type_id Width_type_id = 0x954989ee;
		constexpr static std::string_view Height_type_name = "Height";
		constexpr static rivet::rivet_type_id Height_type_id = 0xcb35ab68; 

		explicit Icon() = default;
		explicit Icon([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x445aeabc IconId {};
		std::string_view Texture {};
		int32_t Width {};
		int32_t Height {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Icon>;
	};
} // namespace rivet::ddl::generated

// clang-format on
