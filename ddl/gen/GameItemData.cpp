// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VanityItemData.hpp> 

#include <rivet/ddl/generated/GameItemData.hpp>

namespace rivet::ddl::generated {
	GameItemData::GameItemData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Icon = serialized->get_string(Icon_type_id, {});
		Video = serialized->get_string(Video_type_id, {});
		ScrapAmount = serialized->get_uint32(ScrapAmount_type_id, 10);
		MissionUnlock = serialized->get_string(MissionUnlock_type_id, {});
		ChallengeModePrepBehavior = serialized->get_enum<rivet::ddl::generated::xaa9dd5a4>(ChallengeModePrepBehavior_type_id, rivet::ddl::generated::xaa9dd5a4_values, rivet::ddl::generated::xaa9dd5a4::Keep);
		DisplayNameTag = serialized->get_string(DisplayNameTag_type_id, "INVALID");
		DisplayNameUpperTag = serialized->get_string(DisplayNameUpperTag_type_id, "INVALID");
		DisplayDescriptionTag = serialized->get_string(DisplayDescriptionTag_type_id, "INVALID");
		UIDisplayObject = serialized->get_enum<rivet::ddl::generated::xd64fa9b1>(UIDisplayObject_type_id, rivet::ddl::generated::xd64fa9b1_values, rivet::ddl::generated::xd64fa9b1::None);
		IdleAnim = serialized->get_string(IdleAnim_type_id, ""); 
	}

	[[nodiscard]] auto
	GameItemData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameItemData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameItemData> {
		if (incoming_type_id == GameItemData::type_id) {
			return std::make_shared<GameItemData>(serialized);
		}

		auto VanityItemData_ptr = VanityItemData::from_substruct(incoming_type_id, serialized);
		if (VanityItemData_ptr != nullptr) {
			return VanityItemData_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
