// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xee0945fb.hpp>
#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct VehicleCurveGeneratorInfo;
	struct VehicleCurveFollowerPrius;
	struct VehicleCollisionInfo; 

	struct RIVET_DDL_SHARED VehicleSystemConfig : ConfigBase {
		constexpr const static std::string_view type_name = "VehicleSystemConfig";
		constexpr const static rivet::rivet_type_id type_id = 0x521bb66b;

		constexpr const static std::string_view LaneWidth_type_name = "LaneWidth";
		constexpr const static rivet::rivet_type_id LaneWidth_type_id = 0xcaab6d50;
		constexpr const static std::string_view MaxLaneSpacing_type_name = "MaxLaneSpacing";
		constexpr const static rivet::rivet_type_id MaxLaneSpacing_type_id = 0x5c4a29c9;
		constexpr const static std::string_view LaneSwitchPeriod_type_name = "LaneSwitchPeriod";
		constexpr const static rivet::rivet_type_id LaneSwitchPeriod_type_id = 0x1525ae5b;
		constexpr const static std::string_view CurveGeneratorInfo_type_name = "CurveGeneratorInfo";
		constexpr const static rivet::rivet_type_id CurveGeneratorInfo_type_id = 0x81012037;
		constexpr const static std::string_view MotionPrius_type_name = "MotionPrius";
		constexpr const static rivet::rivet_type_id MotionPrius_type_id = 0x557be5dc;
		constexpr const static std::string_view CollisionInfo_type_name = "CollisionInfo";
		constexpr const static rivet::rivet_type_id CollisionInfo_type_id = 0x11899c93;
		constexpr const static std::string_view MaxFxUpdateDistance_type_name = "MaxFxUpdateDistance";
		constexpr const static rivet::rivet_type_id MaxFxUpdateDistance_type_id = 0xe5174b1e;
		constexpr const static std::string_view MaxCulledFxDistance_type_name = "MaxCulledFxDistance";
		constexpr const static rivet::rivet_type_id MaxCulledFxDistance_type_id = 0x930657df;
		constexpr const static std::string_view MaxFxDistance_type_name = "MaxFxDistance";
		constexpr const static rivet::rivet_type_id MaxFxDistance_type_id = 0xd6ddbc72;
		constexpr const static std::string_view MaxCulledLightDistance_type_name = "MaxCulledLightDistance";
		constexpr const static rivet::rivet_type_id MaxCulledLightDistance_type_id = 0xc6faafaf;
		constexpr const static std::string_view MaxLightDistance_type_name = "MaxLightDistance";
		constexpr const static rivet::rivet_type_id MaxLightDistance_type_id = 0xbbd140a2;
		constexpr const static std::string_view SlowSignalDecelCoeff_type_name = "SlowSignalDecelCoeff";
		constexpr const static rivet::rivet_type_id SlowSignalDecelCoeff_type_id = 0x6b17dac5;
		constexpr const static std::string_view LightingModesToUseHeadlights_type_name = "LightingModesToUseHeadlights";
		constexpr const static rivet::rivet_type_id LightingModesToUseHeadlights_type_id = 0xa3f780e1; 

		explicit VehicleSystemConfig() = default;
		explicit VehicleSystemConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float LaneWidth {};
		float MaxLaneSpacing {};
		float LaneSwitchPeriod {};
		std::shared_ptr<rivet::ddl::generated::VehicleCurveGeneratorInfo> CurveGeneratorInfo {};
		std::shared_ptr<rivet::ddl::generated::VehicleCurveFollowerPrius> MotionPrius {};
		std::shared_ptr<rivet::ddl::generated::VehicleCollisionInfo> CollisionInfo {};
		float MaxFxUpdateDistance {};
		float MaxCulledFxDistance {};
		float MaxFxDistance {};
		float MaxCulledLightDistance {};
		float MaxLightDistance {};
		float SlowSignalDecelCoeff {};
		std::vector<rivet::ddl::generated::xee0945fb> LightingModesToUseHeadlights {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VehicleSystemConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
