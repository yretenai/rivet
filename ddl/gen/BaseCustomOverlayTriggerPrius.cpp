// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/NoMissionsActiveTriggerPrius.hpp>
#include <rivet/ddl/generated/DuringMissionObjectivesTriggerPrius.hpp>
#include <rivet/ddl/generated/NotOverlayOperatorPrius.hpp>
#include <rivet/ddl/generated/CheckpointOverlayTriggerPrius.hpp>
#include <rivet/ddl/generated/RegionLoadedTriggerPrius.hpp>
#include <rivet/ddl/generated/MissionObjectiveCompleteTriggerPrius.hpp>
#include <rivet/ddl/generated/AndOverlayOperatorPrius.hpp>
#include <rivet/ddl/generated/PerfSpecOverlayTriggerPrius.hpp>
#include <rivet/ddl/generated/MissionStatesTriggerPrius.hpp>
#include <rivet/ddl/generated/BetweenMissionObjectivesTriggerPrius.hpp>
#include <rivet/ddl/generated/AreaLoadedTriggerPrius.hpp>
#include <rivet/ddl/generated/ObjectiveStatesTriggerPrius.hpp>
#include <rivet/ddl/generated/DemoOverlayTriggerPrius.hpp>
#include <rivet/ddl/generated/GlobalSaveTableTriggerPrius.hpp>
#include <rivet/ddl/generated/LightingModeOverlayTriggerPrius.hpp>
#include <rivet/ddl/generated/MissionCompleteTriggerPrius.hpp>
#include <rivet/ddl/generated/MissionStateTriggerPrius.hpp>
#include <rivet/ddl/generated/OrOverlayOperatorPrius.hpp>
#include <rivet/ddl/generated/DuringObjectivesTriggerPrius.hpp> 

#include <rivet/ddl/generated/BaseCustomOverlayTriggerPrius.hpp>

namespace rivet::ddl::generated {
	BaseCustomOverlayTriggerPrius::BaseCustomOverlayTriggerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	BaseCustomOverlayTriggerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BaseCustomOverlayTriggerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BaseCustomOverlayTriggerPrius> {
		if (incoming_type_id == BaseCustomOverlayTriggerPrius::type_id) {
			return std::make_shared<BaseCustomOverlayTriggerPrius>(serialized);
		}

		auto DemoOverlayTriggerPrius_ptr = DemoOverlayTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (DemoOverlayTriggerPrius_ptr != nullptr) {
			return DemoOverlayTriggerPrius_ptr;
		}

		auto AndOverlayOperatorPrius_ptr = AndOverlayOperatorPrius::from_substruct(incoming_type_id, serialized);
		if (AndOverlayOperatorPrius_ptr != nullptr) {
			return AndOverlayOperatorPrius_ptr;
		}

		auto BetweenMissionObjectivesTriggerPrius_ptr = BetweenMissionObjectivesTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (BetweenMissionObjectivesTriggerPrius_ptr != nullptr) {
			return BetweenMissionObjectivesTriggerPrius_ptr;
		}

		auto ObjectiveStatesTriggerPrius_ptr = ObjectiveStatesTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (ObjectiveStatesTriggerPrius_ptr != nullptr) {
			return ObjectiveStatesTriggerPrius_ptr;
		}

		auto LightingModeOverlayTriggerPrius_ptr = LightingModeOverlayTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (LightingModeOverlayTriggerPrius_ptr != nullptr) {
			return LightingModeOverlayTriggerPrius_ptr;
		}

		auto MissionCompleteTriggerPrius_ptr = MissionCompleteTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (MissionCompleteTriggerPrius_ptr != nullptr) {
			return MissionCompleteTriggerPrius_ptr;
		}

		auto MissionStatesTriggerPrius_ptr = MissionStatesTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (MissionStatesTriggerPrius_ptr != nullptr) {
			return MissionStatesTriggerPrius_ptr;
		}

		auto MissionStateTriggerPrius_ptr = MissionStateTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (MissionStateTriggerPrius_ptr != nullptr) {
			return MissionStateTriggerPrius_ptr;
		}

		auto CheckpointOverlayTriggerPrius_ptr = CheckpointOverlayTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (CheckpointOverlayTriggerPrius_ptr != nullptr) {
			return CheckpointOverlayTriggerPrius_ptr;
		}

		auto OrOverlayOperatorPrius_ptr = OrOverlayOperatorPrius::from_substruct(incoming_type_id, serialized);
		if (OrOverlayOperatorPrius_ptr != nullptr) {
			return OrOverlayOperatorPrius_ptr;
		}

		auto GlobalSaveTableTriggerPrius_ptr = GlobalSaveTableTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (GlobalSaveTableTriggerPrius_ptr != nullptr) {
			return GlobalSaveTableTriggerPrius_ptr;
		}

		auto DuringObjectivesTriggerPrius_ptr = DuringObjectivesTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (DuringObjectivesTriggerPrius_ptr != nullptr) {
			return DuringObjectivesTriggerPrius_ptr;
		}

		auto MissionObjectiveCompleteTriggerPrius_ptr = MissionObjectiveCompleteTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (MissionObjectiveCompleteTriggerPrius_ptr != nullptr) {
			return MissionObjectiveCompleteTriggerPrius_ptr;
		}

		auto NotOverlayOperatorPrius_ptr = NotOverlayOperatorPrius::from_substruct(incoming_type_id, serialized);
		if (NotOverlayOperatorPrius_ptr != nullptr) {
			return NotOverlayOperatorPrius_ptr;
		}

		auto DuringMissionObjectivesTriggerPrius_ptr = DuringMissionObjectivesTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (DuringMissionObjectivesTriggerPrius_ptr != nullptr) {
			return DuringMissionObjectivesTriggerPrius_ptr;
		}

		auto PerfSpecOverlayTriggerPrius_ptr = PerfSpecOverlayTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (PerfSpecOverlayTriggerPrius_ptr != nullptr) {
			return PerfSpecOverlayTriggerPrius_ptr;
		}

		auto AreaLoadedTriggerPrius_ptr = AreaLoadedTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (AreaLoadedTriggerPrius_ptr != nullptr) {
			return AreaLoadedTriggerPrius_ptr;
		}

		auto NoMissionsActiveTriggerPrius_ptr = NoMissionsActiveTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (NoMissionsActiveTriggerPrius_ptr != nullptr) {
			return NoMissionsActiveTriggerPrius_ptr;
		}

		auto RegionLoadedTriggerPrius_ptr = RegionLoadedTriggerPrius::from_substruct(incoming_type_id, serialized);
		if (RegionLoadedTriggerPrius_ptr != nullptr) {
			return RegionLoadedTriggerPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
