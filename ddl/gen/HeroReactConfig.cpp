// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroReactLevelData.hpp> 

#include <rivet/ddl/generated/HeroReactConfig.hpp>

namespace rivet::ddl::generated {
	HeroReactConfig::HeroReactConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AlwaysReactToMelee = serialized->get_bool(AlwaysReactToMelee_type_id, true);
		AlwaysReactToExplosions = serialized->get_bool(AlwaysReactToExplosions_type_id, false);
		TwitchData = serialized->unwrap_into<rivet::ddl::generated::HeroReactLevelData>(TwitchData_type_id);
		KnockbackData = serialized->unwrap_into<rivet::ddl::generated::HeroReactLevelData>(KnockbackData_type_id);
		KnockdownData = serialized->unwrap_into<rivet::ddl::generated::HeroReactLevelData>(KnockdownData_type_id);
		InvulnerabilityPeriod = serialized->get_float(InvulnerabilityPeriod_type_id, 0.000000f); 
	}

	[[nodiscard]] auto
	HeroReactConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroReactConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroReactConfig> {
		if (incoming_type_id == HeroReactConfig::type_id) {
			return std::make_shared<HeroReactConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
