// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ObjectiveSaveDataShared.hpp>
#include <rivet/ddl/generated/RootNodeSaveDataShared.hpp>
#include <rivet/ddl/generated/MissionSaveDataShared.hpp> 

#include <rivet/ddl/generated/ObjSysNodeSaveData.hpp>

namespace rivet::ddl::generated {
	ObjSysNodeSaveData::ObjSysNodeSaveData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SaveHash = serialized->get_uint32(SaveHash_type_id); 
	}

	[[nodiscard]] auto
	ObjSysNodeSaveData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ObjSysNodeSaveData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ObjSysNodeSaveData> {
		if (incoming_type_id == ObjSysNodeSaveData::type_id) {
			return std::make_shared<ObjSysNodeSaveData>(serialized);
		}

		auto MissionSaveDataShared_ptr = MissionSaveDataShared::from_substruct(incoming_type_id, serialized);
		if (MissionSaveDataShared_ptr != nullptr) {
			return MissionSaveDataShared_ptr;
		}

		auto RootNodeSaveDataShared_ptr = RootNodeSaveDataShared::from_substruct(incoming_type_id, serialized);
		if (RootNodeSaveDataShared_ptr != nullptr) {
			return RootNodeSaveDataShared_ptr;
		}

		auto ObjectiveSaveDataShared_ptr = ObjectiveSaveDataShared::from_substruct(incoming_type_id, serialized);
		if (ObjectiveSaveDataShared_ptr != nullptr) {
			return ObjectiveSaveDataShared_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
