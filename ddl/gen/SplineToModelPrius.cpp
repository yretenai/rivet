// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector2.hpp>
#include <rivet/ddl/generated/DynamicInstanceItem.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/SplineToModelPrius.hpp>

namespace rivet::ddl::generated {
	SplineToModelPrius::SplineToModelPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CreatePrefab = serialized->get_bool(CreatePrefab_type_id);
		CurveFidelity = serialized->get_float(CurveFidelity_type_id);
		CrossSection = serialized->get_enum<rivet::ddl::generated::x8492ce7f>(CrossSection_type_id, rivet::ddl::generated::x8492ce7f_values);
		Model = serialized->get_string(Model_type_id);
		PreRotation = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(PreRotation_type_id);
		PreTranslate = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(PreTranslate_type_id);
		CurveProfile = serialized->get_uint64(CurveProfile_type_id);
		Width = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(Width_type_id);
		Height = serialized->get_float(Height_type_id);
		Scale = serialized->get_float(Scale_type_id);
		Taper = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(Taper_type_id);
		Placement = serialized->get_enum<rivet::ddl::generated::xb8c27e2a>(Placement_type_id, rivet::ddl::generated::xb8c27e2a_values);
		Offset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Offset_type_id);
		BankScale = serialized->get_float(BankScale_type_id);
		EndCap = serialized->get_enum<rivet::ddl::generated::x86f6b8ca>(EndCap_type_id, rivet::ddl::generated::x86f6b8ca_values);
		SurfaceNoise = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(SurfaceNoise_type_id);
		ReverseFaces = serialized->get_bool(ReverseFaces_type_id);
		VertexColor = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(VertexColor_type_id);
		VertexAlpha = serialized->get_float(VertexAlpha_type_id);
		VertexSpacing = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(VertexSpacing_type_id);
		ReverseU = serialized->get_bool(ReverseU_type_id);
		ReverseV = serialized->get_bool(ReverseV_type_id);
		UVTilingDistance = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(UVTilingDistance_type_id);
		UVOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(UVOffset_type_id);
		UV2 = serialized->get_bool(UV2_type_id);
		UV2TilingDistance = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(UV2TilingDistance_type_id);
		UV2Offset = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(UV2Offset_type_id);
		Material = serialized->get_string(Material_type_id);
		Collision = serialized->get_bool(Collision_type_id);
		LOD1 = serialized->get_bool(LOD1_type_id);
		GeomLodDist1 = serialized->get_float(GeomLodDist1_type_id);
		GenActor = serialized->get_enum<rivet::ddl::generated::x7e4a5355>(GenActor_type_id, rivet::ddl::generated::x7e4a5355_values);
		Actor = serialized->get_string(Actor_type_id);
		ADDINSTANCES = serialized->get_string(ADDINSTANCES_type_id);
		InstanceList = serialized->unwrap_into_many<rivet::ddl::generated::DynamicInstanceItem>(InstanceList_type_id); 
	}

	[[nodiscard]] auto
	SplineToModelPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SplineToModelPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SplineToModelPrius> {
		if (incoming_type_id == SplineToModelPrius::type_id) {
			return std::make_shared<SplineToModelPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
