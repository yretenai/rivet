// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ObjectiveTaskInfo.hpp>
#include <rivet/ddl/generated/ObjectiveNodeInfoUI.hpp>
#include <rivet/ddl/generated/ObjectiveLoadInfo.hpp> 

#include <rivet/ddl/generated/ObjectiveNodeGameDef.hpp>

namespace rivet::ddl::generated {
	ObjectiveNodeGameDef::ObjectiveNodeGameDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ObjectiveNodeSharedDef(serialized) {
		DebugLoadInfo = serialized->unwrap_into<rivet::ddl::generated::ObjectiveLoadInfo>(DebugLoadInfo_type_id);
		UIMode = serialized->get_enum<rivet::ddl::generated::x41993474>(UIMode_type_id, rivet::ddl::generated::x41993474_values, rivet::ddl::generated::x41993474::Normal);
		InfoUI = serialized->unwrap_into<rivet::ddl::generated::ObjectiveNodeInfoUI>(InfoUI_type_id);
		TaskMode = serialized->get_enum<rivet::ddl::generated::x41993474>(TaskMode_type_id, rivet::ddl::generated::x41993474_values, rivet::ddl::generated::x41993474::Normal);
		TaskInfo = serialized->unwrap_into<rivet::ddl::generated::ObjectiveTaskInfo>(TaskInfo_type_id); 
	}

	[[nodiscard]] auto
	ObjectiveNodeGameDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ObjectiveNodeGameDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ObjectiveNodeGameDef> {
		if (incoming_type_id == ObjectiveNodeGameDef::type_id) {
			return std::make_shared<ObjectiveNodeGameDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
