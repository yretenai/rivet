// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ObjectiveLoadInfo.hpp> 

#include <rivet/ddl/generated/MissionNodeBuiltGame.hpp>

namespace rivet::ddl::generated {
	MissionNodeBuiltGame::MissionNodeBuiltGame([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): MissionNodeBuiltShared(serialized) {
		AvailableDebugLoadInfo = serialized->unwrap_into<rivet::ddl::generated::ObjectiveLoadInfo>(AvailableDebugLoadInfo_type_id);
		MissionType = serialized->get_enum<rivet::ddl::generated::x1953eb86>(MissionType_type_id, rivet::ddl::generated::x1953eb86_values, rivet::ddl::generated::x1953eb86::GoldenPath);
		MissionSaveWeight = serialized->get_float(MissionSaveWeight_type_id, 0.000000f); 
	}

	[[nodiscard]] auto
	MissionNodeBuiltGame::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MissionNodeBuiltGame::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionNodeBuiltGame> {
		if (incoming_type_id == MissionNodeBuiltGame::type_id) {
			return std::make_shared<MissionNodeBuiltGame>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
