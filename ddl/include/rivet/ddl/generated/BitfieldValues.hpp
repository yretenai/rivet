// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/x2c9c3cc7.hpp>
#include <rivet/ddl/generated/bitsets/x1ea7317b.hpp>
#include <rivet/ddl/generated/bitsets/BitsB.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED BitfieldValues : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "BitfieldValues";
		constexpr static rivet::rivet_type_id type_id = 0xb7692b81;

		constexpr static std::string_view NoDefault_type_name = "NoDefault";
		constexpr static rivet::rivet_type_id NoDefault_type_id = 0x481185be;
		constexpr static std::string_view SingleDefault_type_name = "SingleDefault";
		constexpr static rivet::rivet_type_id SingleDefault_type_id = 0x20827aa1;
		constexpr static std::string_view MultiValue_type_name = "MultiValue";
		constexpr static rivet::rivet_type_id MultiValue_type_id = 0xc9da066; 

		explicit BitfieldValues() = default;
		explicit BitfieldValues([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::BitsB NoDefault {};
		rivet::ddl::generated::x1ea7317b SingleDefault {};
		rivet::ddl::generated::x2c9c3cc7 MultiValue {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BitfieldValues>;
	};
} // namespace rivet::ddl::generated

// clang-format on
