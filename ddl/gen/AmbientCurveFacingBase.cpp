// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AmbientCurveFacingOppositeToTangent.hpp>
#include <rivet/ddl/generated/AmbientCurveFacingTangent.hpp>
#include <rivet/ddl/generated/AmbientCurveFacingActor.hpp>
#include <rivet/ddl/generated/AmbientCurveFacingLookAhead.hpp> 

#include <rivet/ddl/generated/AmbientCurveFacingBase.hpp>

namespace rivet::ddl::generated {
	AmbientCurveFacingBase::AmbientCurveFacingBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TurnSpeed = serialized->get_float(TurnSpeed_type_id);
		TurnAccel = serialized->get_float(TurnAccel_type_id);
		TurnDecel = serialized->get_float(TurnDecel_type_id);
		MinSlowDownAngle = serialized->get_float(MinSlowDownAngle_type_id);
		MaxSlowDownAngle = serialized->get_float(MaxSlowDownAngle_type_id); 
	}

	[[nodiscard]] auto
	AmbientCurveFacingBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AmbientCurveFacingBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AmbientCurveFacingBase> {
		if (incoming_type_id == AmbientCurveFacingBase::type_id) {
			return std::make_shared<AmbientCurveFacingBase>(serialized);
		}

		auto AmbientCurveFacingLookAhead_ptr = AmbientCurveFacingLookAhead::from_substruct(incoming_type_id, serialized);
		if (AmbientCurveFacingLookAhead_ptr != nullptr) {
			return AmbientCurveFacingLookAhead_ptr;
		}

		auto AmbientCurveFacingActor_ptr = AmbientCurveFacingActor::from_substruct(incoming_type_id, serialized);
		if (AmbientCurveFacingActor_ptr != nullptr) {
			return AmbientCurveFacingActor_ptr;
		}

		auto AmbientCurveFacingTangent_ptr = AmbientCurveFacingTangent::from_substruct(incoming_type_id, serialized);
		if (AmbientCurveFacingTangent_ptr != nullptr) {
			return AmbientCurveFacingTangent_ptr;
		}

		auto AmbientCurveFacingOppositeToTangent_ptr = AmbientCurveFacingOppositeToTangent::from_substruct(incoming_type_id, serialized);
		if (AmbientCurveFacingOppositeToTangent_ptr != nullptr) {
			return AmbientCurveFacingOppositeToTangent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
