// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ClimbCritterPrius.hpp> 

#include <rivet/ddl/generated/SimpleCritterPrius.hpp>

namespace rivet::ddl::generated {
	SimpleCritterPrius::SimpleCritterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MinSpeed = serialized->get_float(MinSpeed_type_id);
		MaxSpeed = serialized->get_float(MaxSpeed_type_id);
		Accel = serialized->get_float(Accel_type_id);
		Decel = serialized->get_float(Decel_type_id);
		TurnSpeed = serialized->get_float(TurnSpeed_type_id);
		MinTurnAngle = serialized->get_float(MinTurnAngle_type_id);
		MinIdleTime = serialized->get_float(MinIdleTime_type_id);
		MaxIdleTime = serialized->get_float(MaxIdleTime_type_id);
		MaxSurvivableFallDistance = serialized->get_float(MaxSurvivableFallDistance_type_id);
		PanicFeelerForwardOffset = serialized->get_float(PanicFeelerForwardOffset_type_id);
		PanicFeelerStartUpOffset = serialized->get_float(PanicFeelerStartUpOffset_type_id);
		PanicFeelerSideOffset = serialized->get_float(PanicFeelerSideOffset_type_id);
		PanicMaxSurfaceAngle = serialized->get_float(PanicMaxSurfaceAngle_type_id);
		MinPanicMoveSpeedForAnim = serialized->get_float(MinPanicMoveSpeedForAnim_type_id);
		IdleAnim = serialized->get_string(IdleAnim_type_id);
		MoveAnim = serialized->get_string(MoveAnim_type_id);
		TurnRightAnim = serialized->get_string(TurnRightAnim_type_id);
		TurnLeftAnim = serialized->get_string(TurnLeftAnim_type_id); 
	}

	[[nodiscard]] auto
	SimpleCritterPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SimpleCritterPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleCritterPrius> {
		if (incoming_type_id == SimpleCritterPrius::type_id) {
			return std::make_shared<SimpleCritterPrius>(serialized);
		}

		auto ClimbCritterPrius_ptr = ClimbCritterPrius::from_substruct(incoming_type_id, serialized);
		if (ClimbCritterPrius_ptr != nullptr) {
			return ClimbCritterPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
