// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MissionObjectiveArrayData.hpp> 

#include <rivet/ddl/generated/MissionConfig.hpp>

namespace rivet::ddl::generated {
	MissionConfig::MissionConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): RegionGameDataBase(serialized) {
		MissionName = serialized->get_string(MissionName_type_id);
		MissionTitle = serialized->get_string(MissionTitle_type_id);
		Description = serialized->get_string(Description_type_id);
		LocTagMissionTitle = serialized->get_string(LocTagMissionTitle_type_id);
		LocTagDescription = serialized->get_string(LocTagDescription_type_id);
		LocTagDescriptionEnd = serialized->get_string(LocTagDescriptionEnd_type_id);
		OverrideLightingMode = serialized->get_bool(OverrideLightingMode_type_id);
		LightingMode = serialized->get_enum<rivet::ddl::generated::LightingMode>(LightingMode_type_id, rivet::ddl::generated::LightingMode_values);
		VisibleInMissionLog = serialized->get_bool(VisibleInMissionLog_type_id);
		Objectives = serialized->unwrap_into_many<rivet::ddl::generated::MissionObjectiveArrayData>(Objectives_type_id); 
	}

	[[nodiscard]] auto
	MissionConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MissionConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionConfig> {
		if (incoming_type_id == MissionConfig::type_id) {
			return std::make_shared<MissionConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
