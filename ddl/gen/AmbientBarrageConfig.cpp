// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AmbientBarrageConfig.hpp>

namespace rivet::ddl::generated {
	AmbientBarrageConfig::AmbientBarrageConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		MinNumBursts = serialized->get_int32(MinNumBursts_type_id);
		MaxNumBursts = serialized->get_int32(MaxNumBursts_type_id);
		MinBurstDuration = serialized->get_float(MinBurstDuration_type_id);
		MaxBurstDuration = serialized->get_float(MaxBurstDuration_type_id);
		MinBurstDelay = serialized->get_float(MinBurstDelay_type_id);
		MaxBurstDelay = serialized->get_float(MaxBurstDelay_type_id);
		MinCooldownDuration = serialized->get_float(MinCooldownDuration_type_id);
		MaxCooldownDuration = serialized->get_float(MaxCooldownDuration_type_id); 
	}

	[[nodiscard]] auto
	AmbientBarrageConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AmbientBarrageConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AmbientBarrageConfig> {
		if (incoming_type_id == AmbientBarrageConfig::type_id) {
			return std::make_shared<AmbientBarrageConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
