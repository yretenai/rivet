// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SoundSourceComponentPrius.hpp> 

#include <rivet/ddl/generated/LandingBirdTypeConfig.hpp>

namespace rivet::ddl::generated {
	LandingBirdTypeConfig::LandingBirdTypeConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		BirdAsset = serialized->get_string(BirdAsset_type_id, {});
		MinSpawnPeriod = serialized->get_float(MinSpawnPeriod_type_id, 0.250000);
		MaxSpawnPeriod = serialized->get_float(MaxSpawnPeriod_type_id, 2.000000);
		MinBirdSeparation = serialized->get_float(MinBirdSeparation_type_id, 0.150000);
		MaxSpawnCount = serialized->get_int32(MaxSpawnCount_type_id, 25);
		SpawnHeight = serialized->get_float(SpawnHeight_type_id, 20.000000);
		SpawnRadius = serialized->get_float(SpawnRadius_type_id, 5.000000);
		LandPhysicsRadius = serialized->get_float(LandPhysicsRadius_type_id, 0.100000);
		FlockSoundSource = serialized->unwrap_into<rivet::ddl::generated::SoundSourceComponentPrius>(FlockSoundSource_type_id); 
	}

	[[nodiscard]] auto
	LandingBirdTypeConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LandingBirdTypeConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LandingBirdTypeConfig> {
		if (incoming_type_id == LandingBirdTypeConfig::type_id) {
			return std::make_shared<LandingBirdTypeConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
