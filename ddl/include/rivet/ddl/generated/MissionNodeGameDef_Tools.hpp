// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xc1d164ee.hpp>
#include <rivet/ddl/generated/NodeBaseDef.hpp> 

namespace rivet::ddl::generated {
	struct OutputPlugBoolean;
	struct InputPlugBoolean;
	struct AssetReferenceDef; 

	struct RIVET_DDL_SHARED MissionNodeGameDef_Tools : NodeBaseDef {
		constexpr static std::string_view type_name = "MissionNodeGameDef_Tools";
		constexpr static rivet::rivet_type_id type_id = 0xfa5df9b8;

		constexpr static std::string_view MissionName_type_name = "MissionName";
		constexpr static rivet::rivet_type_id MissionName_type_id = 0xa5c30e60;
		constexpr static std::string_view ObjectiveGraph_type_name = "ObjectiveGraph";
		constexpr static rivet::rivet_type_id ObjectiveGraph_type_id = 0x55ff52bd;
		constexpr static std::string_view UnlockBehavior_type_name = "UnlockBehavior";
		constexpr static rivet::rivet_type_id UnlockBehavior_type_id = 0xb4577d57;
		constexpr static std::string_view Inputs_type_name = "Inputs";
		constexpr static rivet::rivet_type_id Inputs_type_id = 0x3d19ee29;
		constexpr static std::string_view Output_type_name = "Output";
		constexpr static rivet::rivet_type_id Output_type_id = 0xf2a65af9; 

		explicit MissionNodeGameDef_Tools() = default;
		explicit MissionNodeGameDef_Tools([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view MissionName {};
		std::shared_ptr<rivet::ddl::generated::AssetReferenceDef> ObjectiveGraph {};
		rivet::ddl::generated::xc1d164ee UnlockBehavior {};
		std::vector<std::shared_ptr<rivet::ddl::generated::InputPlugBoolean>> Inputs {};
		std::shared_ptr<rivet::ddl::generated::OutputPlugBoolean> Output {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionNodeGameDef_Tools>;
	};
} // namespace rivet::ddl::generated

// clang-format on
