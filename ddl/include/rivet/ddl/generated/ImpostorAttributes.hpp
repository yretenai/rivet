// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ImpostorAttributes : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ImpostorAttributes";
		constexpr static rivet::rivet_type_id type_id = 0xfd931cb7;

		constexpr static std::string_view LegacyPixelsPerMeter_type_name = "LegacyPixelsPerMeter";
		constexpr static rivet::rivet_type_id LegacyPixelsPerMeter_type_id = 0x2f87985b;
		constexpr static std::string_view PixelsPerMeter_type_name = "PixelsPerMeter";
		constexpr static rivet::rivet_type_id PixelsPerMeter_type_id = 0x727ad5f7;
		constexpr static std::string_view SkipRayTracing_type_name = "SkipRayTracing";
		constexpr static rivet::rivet_type_id SkipRayTracing_type_id = 0x81f71340;
		constexpr static std::string_view SkipNormals_type_name = "SkipNormals";
		constexpr static rivet::rivet_type_id SkipNormals_type_id = 0x1a9507cd;
		constexpr static std::string_view Skip_type_name = "Skip";
		constexpr static rivet::rivet_type_id Skip_type_id = 0xc8e695cd;
		constexpr static std::string_view Bottom_type_name = "Bottom";
		constexpr static rivet::rivet_type_id Bottom_type_id = 0xb7273cc3; 

		explicit ImpostorAttributes() = default;
		explicit ImpostorAttributes([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t LegacyPixelsPerMeter {};
		uint32_t PixelsPerMeter {};
		bool SkipRayTracing {};
		bool SkipNormals {};
		bool Skip {};
		bool Bottom {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ImpostorAttributes>;
	};
} // namespace rivet::ddl::generated

// clang-format on
