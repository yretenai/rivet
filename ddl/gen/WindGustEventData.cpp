// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/WindGustEventData.hpp>

namespace rivet::ddl::generated {
	WindGustEventData::WindGustEventData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Attack = serialized->get_float(Attack_type_id, 0.000000);
		Sustain = serialized->get_float(Sustain_type_id, 1.000000);
		Decay = serialized->get_float(Decay_type_id, 0.000000);
		Position = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Position_type_id);
		Direction = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Direction_type_id);
		Speed = serialized->get_float(Speed_type_id, 10.000000);
		Drag = serialized->get_float(Drag_type_id, 10.000000);
		Radius = serialized->get_float(Radius_type_id, 1.000000);
		Height = serialized->get_float(Height_type_id, 0.000000);
		RadialFalloff = serialized->get_float(RadialFalloff_type_id, 1.000000);
		HeightFalloff = serialized->get_float(HeightFalloff_type_id, 1.000000);
		Type = serialized->get_uint32(Type_type_id, 2); 
	}

	[[nodiscard]] auto
	WindGustEventData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WindGustEventData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WindGustEventData> {
		if (incoming_type_id == WindGustEventData::type_id) {
			return std::make_shared<WindGustEventData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
