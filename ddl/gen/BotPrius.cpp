// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameBotMountKitPrius.hpp>
#include <rivet/ddl/generated/BossBotUnderwaterBaseJuicePrius.hpp>
#include <rivet/ddl/generated/GameBotPoolSharkPrius.hpp>
#include <rivet/ddl/generated/TestGroundSwarmerPrius.hpp>
#include <rivet/ddl/generated/BossBotZordoomMonsterPrius.hpp>
#include <rivet/ddl/generated/GameBotMeleeBasePrius.hpp>
#include <rivet/ddl/generated/GameBotShooterBasePrius.hpp>
#include <rivet/ddl/generated/GameBotManglerPrius.hpp>
#include <rivet/ddl/generated/GameBotTankBasePrius.hpp>
#include <rivet/ddl/generated/GameBotMountBeetlePrius.hpp>
#include <rivet/ddl/generated/ActorBotData.hpp>
#include <rivet/ddl/generated/SpawnerBotBasePrius.hpp>
#include <rivet/ddl/generated/BossBotCordelionNefariousPrius.hpp>
#include <rivet/ddl/generated/NPCBotPrius.hpp>
#include <rivet/ddl/generated/BossBotNefariousFinalePrius.hpp>
#include <rivet/ddl/generated/BotData.hpp>
#include <rivet/ddl/generated/HelicopterPrius.hpp>
#include <rivet/ddl/generated/BotConfigData.hpp>
#include <rivet/ddl/generated/BotHexapodPrius.hpp>
#include <rivet/ddl/generated/GameBotSargassoCentipedeBossPrius.hpp>
#include <rivet/ddl/generated/BossBotNefariousBlimpPrius.hpp>
#include <rivet/ddl/generated/GameBotClankLemmingPrius.hpp>
#include <rivet/ddl/generated/NestBotBasePrius.hpp>
#include <rivet/ddl/generated/GameBotMountFlyerPrius.hpp>
#include <rivet/ddl/generated/GameBotMountBeastPrius.hpp> 

#include <rivet/ddl/generated/BotPrius.hpp>

namespace rivet::ddl::generated {
	BotPrius::BotPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotBasePrius(serialized) {
		BotConfigData = serialized->unwrap_into<rivet::ddl::generated::BotConfigData>(BotConfigData_type_id);
		BotData = serialized->unwrap_into<rivet::ddl::generated::BotData>(BotData_type_id);
		ActorBotData = serialized->unwrap_into<rivet::ddl::generated::ActorBotData>(ActorBotData_type_id);
		AccessibilityHighlightAllyForNeutralAllegiance = serialized->get_bool(AccessibilityHighlightAllyForNeutralAllegiance_type_id);
		AccessibilityMonitorAllegiance = serialized->get_bool(AccessibilityMonitorAllegiance_type_id); 
	}

	[[nodiscard]] auto
	BotPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotPrius> {
		if (incoming_type_id == BotPrius::type_id) {
			return std::make_shared<BotPrius>(serialized);
		}

		auto BossBotCordelionNefariousPrius_ptr = BossBotCordelionNefariousPrius::from_substruct(incoming_type_id, serialized);
		if (BossBotCordelionNefariousPrius_ptr != nullptr) {
			return BossBotCordelionNefariousPrius_ptr;
		}

		auto HelicopterPrius_ptr = HelicopterPrius::from_substruct(incoming_type_id, serialized);
		if (HelicopterPrius_ptr != nullptr) {
			return HelicopterPrius_ptr;
		}

		auto BotHexapodPrius_ptr = BotHexapodPrius::from_substruct(incoming_type_id, serialized);
		if (BotHexapodPrius_ptr != nullptr) {
			return BotHexapodPrius_ptr;
		}

		auto NPCBotPrius_ptr = NPCBotPrius::from_substruct(incoming_type_id, serialized);
		if (NPCBotPrius_ptr != nullptr) {
			return NPCBotPrius_ptr;
		}

		auto GameBotClankLemmingPrius_ptr = GameBotClankLemmingPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotClankLemmingPrius_ptr != nullptr) {
			return GameBotClankLemmingPrius_ptr;
		}

		auto GameBotMountFlyerPrius_ptr = GameBotMountFlyerPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMountFlyerPrius_ptr != nullptr) {
			return GameBotMountFlyerPrius_ptr;
		}

		auto BossBotNefariousFinalePrius_ptr = BossBotNefariousFinalePrius::from_substruct(incoming_type_id, serialized);
		if (BossBotNefariousFinalePrius_ptr != nullptr) {
			return BossBotNefariousFinalePrius_ptr;
		}

		auto GameBotMountBeastPrius_ptr = GameBotMountBeastPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMountBeastPrius_ptr != nullptr) {
			return GameBotMountBeastPrius_ptr;
		}

		auto GameBotSargassoCentipedeBossPrius_ptr = GameBotSargassoCentipedeBossPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotSargassoCentipedeBossPrius_ptr != nullptr) {
			return GameBotSargassoCentipedeBossPrius_ptr;
		}

		auto BossBotNefariousBlimpPrius_ptr = BossBotNefariousBlimpPrius::from_substruct(incoming_type_id, serialized);
		if (BossBotNefariousBlimpPrius_ptr != nullptr) {
			return BossBotNefariousBlimpPrius_ptr;
		}

		auto GameBotMountBeetlePrius_ptr = GameBotMountBeetlePrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMountBeetlePrius_ptr != nullptr) {
			return GameBotMountBeetlePrius_ptr;
		}

		auto GameBotManglerPrius_ptr = GameBotManglerPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotManglerPrius_ptr != nullptr) {
			return GameBotManglerPrius_ptr;
		}

		auto GameBotShooterBasePrius_ptr = GameBotShooterBasePrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterBasePrius_ptr != nullptr) {
			return GameBotShooterBasePrius_ptr;
		}

		auto TestGroundSwarmerPrius_ptr = TestGroundSwarmerPrius::from_substruct(incoming_type_id, serialized);
		if (TestGroundSwarmerPrius_ptr != nullptr) {
			return TestGroundSwarmerPrius_ptr;
		}

		auto GameBotMeleeBasePrius_ptr = GameBotMeleeBasePrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMeleeBasePrius_ptr != nullptr) {
			return GameBotMeleeBasePrius_ptr;
		}

		auto GameBotPoolSharkPrius_ptr = GameBotPoolSharkPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotPoolSharkPrius_ptr != nullptr) {
			return GameBotPoolSharkPrius_ptr;
		}

		auto SpawnerBotBasePrius_ptr = SpawnerBotBasePrius::from_substruct(incoming_type_id, serialized);
		if (SpawnerBotBasePrius_ptr != nullptr) {
			return SpawnerBotBasePrius_ptr;
		}

		auto BossBotUnderwaterBaseJuicePrius_ptr = BossBotUnderwaterBaseJuicePrius::from_substruct(incoming_type_id, serialized);
		if (BossBotUnderwaterBaseJuicePrius_ptr != nullptr) {
			return BossBotUnderwaterBaseJuicePrius_ptr;
		}

		auto GameBotTankBasePrius_ptr = GameBotTankBasePrius::from_substruct(incoming_type_id, serialized);
		if (GameBotTankBasePrius_ptr != nullptr) {
			return GameBotTankBasePrius_ptr;
		}

		auto BossBotZordoomMonsterPrius_ptr = BossBotZordoomMonsterPrius::from_substruct(incoming_type_id, serialized);
		if (BossBotZordoomMonsterPrius_ptr != nullptr) {
			return BossBotZordoomMonsterPrius_ptr;
		}

		auto NestBotBasePrius_ptr = NestBotBasePrius::from_substruct(incoming_type_id, serialized);
		if (NestBotBasePrius_ptr != nullptr) {
			return NestBotBasePrius_ptr;
		}

		auto GameBotMountKitPrius_ptr = GameBotMountKitPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMountKitPrius_ptr != nullptr) {
			return GameBotMountKitPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
