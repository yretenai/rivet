// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED LightCaptureSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "LightCaptureSettings";
		constexpr static rivet::rivet_type_id type_id = 0xbc35e9d4;

		constexpr static std::string_view PullBackDist_type_name = "PullBackDist";
		constexpr static rivet::rivet_type_id PullBackDist_type_id = 0x44190e58;
		constexpr static std::string_view MaxResampleDist_type_name = "MaxResampleDist";
		constexpr static rivet::rivet_type_id MaxResampleDist_type_id = 0xb5e0822e;
		constexpr static std::string_view ResampleUseClosestThreshold_type_name = "ResampleUseClosestThreshold";
		constexpr static rivet::rivet_type_id ResampleUseClosestThreshold_type_id = 0xdb2c423a;
		constexpr static std::string_view GBufferReadMax_type_name = "GBufferReadMax";
		constexpr static rivet::rivet_type_id GBufferReadMax_type_id = 0x31cde061;
		constexpr static std::string_view EmbeddedModelInstQuerys_type_name = "EmbeddedModelInstQuerys";
		constexpr static rivet::rivet_type_id EmbeddedModelInstQuerys_type_id = 0x7a3b18c8;
		constexpr static std::string_view EmbeddedSampleDebugging_type_name = "EmbeddedSampleDebugging";
		constexpr static rivet::rivet_type_id EmbeddedSampleDebugging_type_id = 0xd4c5777e;
		constexpr static std::string_view AvoidEmbeddedSamples_type_name = "AvoidEmbeddedSamples";
		constexpr static rivet::rivet_type_id AvoidEmbeddedSamples_type_id = 0x44bb063b;
		constexpr static std::string_view IrradianceAdjustmentHack_type_name = "IrradianceAdjustmentHack";
		constexpr static rivet::rivet_type_id IrradianceAdjustmentHack_type_id = 0x45cadbd8; 

		explicit LightCaptureSettings() = default;
		explicit LightCaptureSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float PullBackDist {};
		float MaxResampleDist {};
		float ResampleUseClosestThreshold {};
		int32_t GBufferReadMax {};
		int32_t EmbeddedModelInstQuerys {};
		bool EmbeddedSampleDebugging {};
		bool AvoidEmbeddedSamples {};
		float IrradianceAdjustmentHack {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LightCaptureSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
