// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CameraPerspectiveData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CameraPerspectiveData";
		constexpr static rivet::rivet_type_id type_id = 0xc7c71877;

		constexpr static std::string_view Aspect_type_name = "Aspect";
		constexpr static rivet::rivet_type_id Aspect_type_id = 0xcefb8d32;
		constexpr static std::string_view Near_type_name = "Near";
		constexpr static rivet::rivet_type_id Near_type_id = 0x46dcdca1;
		constexpr static std::string_view Gar_type_name = "Gar";
		constexpr static rivet::rivet_type_id Gar_type_id = 0x5a616788;
		constexpr static std::string_view Fov_type_name = "Fov";
		constexpr static rivet::rivet_type_id Fov_type_id = 0xc24de428; 

		explicit CameraPerspectiveData() = default;
		explicit CameraPerspectiveData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float Aspect {};
		float Near {};
		float Gar {};
		float Fov {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraPerspectiveData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
