// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ECMInputNodeDef.hpp>

namespace rivet::ddl::generated {
	ECMInputNodeDef::ECMInputNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		NodeId = serialized->get_uint64(NodeId_type_id, 0);
		XPos = serialized->get_int32(XPos_type_id, 0);
		YPos = serialized->get_int32(YPos_type_id, 0);
		Collapsed = serialized->get_bool(Collapsed_type_id, false);
		Type = serialized->get_enum<rivet::ddl::generated::xf5eea2a0>(Type_type_id, rivet::ddl::generated::xf5eea2a0_values, rivet::ddl::generated::xf5eea2a0::Triggering_Event);
		Value = serialized->get_string(Value_type_id, {});
		ValueArray = serialized->get_strings(ValueArray_type_id);
		ValueArrayAux = serialized->get_strings(ValueArrayAux_type_id); 
	}

	[[nodiscard]] auto
	ECMInputNodeDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ECMInputNodeDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ECMInputNodeDef> {
		if (incoming_type_id == ECMInputNodeDef::type_id) {
			return std::make_shared<ECMInputNodeDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
