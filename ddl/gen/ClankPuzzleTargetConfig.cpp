// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ClankPuzzleTargetConfig.hpp>

namespace rivet::ddl::generated {
	ClankPuzzleTargetConfig::ClankPuzzleTargetConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ClankPuzzleTargetBaseConfig(serialized) {
		SlowDownMult = serialized->get_float(SlowDownMult_type_id, 0.250000);
		MaxSlowDown = serialized->get_float(MaxSlowDown_type_id, 0.156000);
		SpeedUpMult = serialized->get_float(SpeedUpMult_type_id, 4.000000);
		MaxSpeedUp = serialized->get_float(MaxSpeedUp_type_id, 64.000000);
		WorldTimeManipulationPercent = serialized->get_float(WorldTimeManipulationPercent_type_id, 0.000000);
		HeavyDangerMaterial = serialized->get_enum<rivet::ddl::generated::x10b3c4cf>(HeavyDangerMaterial_type_id, rivet::ddl::generated::x10b3c4cf_values, rivet::ddl::generated::x10b3c4cf::None); 
	}

	[[nodiscard]] auto
	ClankPuzzleTargetConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ClankPuzzleTargetConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ClankPuzzleTargetConfig> {
		if (incoming_type_id == ClankPuzzleTargetConfig::type_id) {
			return std::make_shared<ClankPuzzleTargetConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
