// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SaveSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SaveSettings";
		constexpr static rivet::rivet_type_id type_id = 0xee67c8dd;

		constexpr static std::string_view NumUsers_type_name = "NumUsers";
		constexpr static rivet::rivet_type_id NumUsers_type_id = 0x43184e68;
		constexpr static std::string_view SaveVersion_type_name = "SaveVersion";
		constexpr static rivet::rivet_type_id SaveVersion_type_id = 0x49c19a2a;
		constexpr static std::string_view SaveTypeNames_type_name = "SaveTypeNames";
		constexpr static rivet::rivet_type_id SaveTypeNames_type_id = 0x78bd86e4;
		constexpr static std::string_view SaveTypeSizes_type_name = "SaveTypeSizes";
		constexpr static rivet::rivet_type_id SaveTypeSizes_type_id = 0x3c1048cd;
		constexpr static std::string_view NewTypeSizes_type_name = "NewTypeSizes";
		constexpr static rivet::rivet_type_id NewTypeSizes_type_id = 0xd5a36e11;
		constexpr static std::string_view CRCWriterHeapSize_type_name = "CRCWriterHeapSize";
		constexpr static rivet::rivet_type_id CRCWriterHeapSize_type_id = 0xd1070d8d;
		constexpr static std::string_view SaveTypeSlots_type_name = "SaveTypeSlots";
		constexpr static rivet::rivet_type_id SaveTypeSlots_type_id = 0x42fafa74;
		constexpr static std::string_view Title_type_name = "Title";
		constexpr static rivet::rivet_type_id Title_type_id = 0x3265b4aa;
		constexpr static std::string_view UseCRC_type_name = "UseCRC";
		constexpr static rivet::rivet_type_id UseCRC_type_id = 0x735bf2fd;
		constexpr static std::string_view ShowMessages_type_name = "ShowMessages";
		constexpr static rivet::rivet_type_id ShowMessages_type_id = 0xf2e088de;
		constexpr static std::string_view CaptureSaveIcons_type_name = "CaptureSaveIcons";
		constexpr static rivet::rivet_type_id CaptureSaveIcons_type_id = 0x76224e57;
		constexpr static std::string_view MaxSnapshotsPerSlot_type_name = "MaxSnapshotsPerSlot";
		constexpr static rivet::rivet_type_id MaxSnapshotsPerSlot_type_id = 0xbd2c1b26;
		constexpr static std::string_view MaxSavesPerSlot_type_name = "MaxSavesPerSlot";
		constexpr static rivet::rivet_type_id MaxSavesPerSlot_type_id = 0x5b68d7c4;
		constexpr static std::string_view DebugVerbosity_type_name = "DebugVerbosity";
		constexpr static rivet::rivet_type_id DebugVerbosity_type_id = 0x9d856168;
		constexpr static std::string_view DebugUI_type_name = "DebugUI";
		constexpr static rivet::rivet_type_id DebugUI_type_id = 0x8101b35a;
		constexpr static std::string_view ExtSaveEnable_type_name = "ExtSaveEnable";
		constexpr static rivet::rivet_type_id ExtSaveEnable_type_id = 0xa028247f;
		constexpr static std::string_view ExtLoadEnable_type_name = "ExtLoadEnable";
		constexpr static rivet::rivet_type_id ExtLoadEnable_type_id = 0x6e46160e;
		constexpr static std::string_view ShowSaveIcon_type_name = "ShowSaveIcon";
		constexpr static rivet::rivet_type_id ShowSaveIcon_type_id = 0x2b95d71b;
		constexpr static std::string_view MinSaveIconTime_type_name = "MinSaveIconTime";
		constexpr static rivet::rivet_type_id MinSaveIconTime_type_id = 0x3644a148;
		constexpr static std::string_view FatalAssertOnSaveBufferOverflow_type_name = "FatalAssertOnSaveBufferOverflow";
		constexpr static rivet::rivet_type_id FatalAssertOnSaveBufferOverflow_type_id = 0xcef2cdd4;
		constexpr static std::string_view FatalAssertOnSaveIconDeadlock_type_name = "FatalAssertOnSaveIconDeadlock";
		constexpr static rivet::rivet_type_id FatalAssertOnSaveIconDeadlock_type_id = 0x6a6ec0d5; 

		explicit SaveSettings() = default;
		explicit SaveSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t NumUsers {};
		std::vector<uint32_t> SaveVersion {};
		std::vector<std::string_view> SaveTypeNames {};
		std::vector<uint32_t> SaveTypeSizes {};
		std::vector<uint32_t> NewTypeSizes {};
		uint32_t CRCWriterHeapSize {};
		std::vector<bool> SaveTypeSlots {};
		std::string_view Title {};
		bool UseCRC {};
		bool ShowMessages {};
		bool CaptureSaveIcons {};
		int32_t MaxSnapshotsPerSlot {};
		int32_t MaxSavesPerSlot {};
		int32_t DebugVerbosity {};
		int32_t DebugUI {};
		bool ExtSaveEnable {};
		bool ExtLoadEnable {};
		bool ShowSaveIcon {};
		float MinSaveIconTime {};
		bool FatalAssertOnSaveBufferOverflow {};
		bool FatalAssertOnSaveIconDeadlock {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SaveSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
