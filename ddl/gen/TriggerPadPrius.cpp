// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ToggleTriggerPadPrius.hpp> 

#include <rivet/ddl/generated/TriggerPadPrius.hpp>

namespace rivet::ddl::generated {
	TriggerPadPrius::TriggerPadPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartEnabled = serialized->get_bool(StartEnabled_type_id);
		HeroUseOnly = serialized->get_bool(HeroUseOnly_type_id);
		TriggerTime = serialized->get_float(TriggerTime_type_id); 
	}

	[[nodiscard]] auto
	TriggerPadPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TriggerPadPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerPadPrius> {
		if (incoming_type_id == TriggerPadPrius::type_id) {
			return std::make_shared<TriggerPadPrius>(serialized);
		}

		auto ToggleTriggerPadPrius_ptr = ToggleTriggerPadPrius::from_substruct(incoming_type_id, serialized);
		if (ToggleTriggerPadPrius_ptr != nullptr) {
			return ToggleTriggerPadPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
