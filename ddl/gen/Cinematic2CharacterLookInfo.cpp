// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2MaterialTextureOverrideInfo.hpp>
#include <rivet/ddl/generated/Cinematic2MaterialConstOverrideInfo.hpp>
#include <rivet/ddl/generated/Cinematic2MaterialReplaceInfo.hpp> 

#include <rivet/ddl/generated/Cinematic2CharacterLookInfo.hpp>

namespace rivet::ddl::generated {
	Cinematic2CharacterLookInfo::Cinematic2CharacterLookInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Looks = serialized->get_strings(Looks_type_id);
		MaterialOverrides = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2MaterialReplaceInfo>(MaterialOverrides_type_id);
		MaterialConstOverrides = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2MaterialConstOverrideInfo>(MaterialConstOverrides_type_id);
		MaterialTextureOverrides = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2MaterialTextureOverrideInfo>(MaterialTextureOverrides_type_id); 
	}

	[[nodiscard]] auto
	Cinematic2CharacterLookInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2CharacterLookInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2CharacterLookInfo> {
		if (incoming_type_id == Cinematic2CharacterLookInfo::type_id) {
			return std::make_shared<Cinematic2CharacterLookInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
