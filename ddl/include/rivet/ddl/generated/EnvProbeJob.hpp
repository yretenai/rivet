// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/LightingConditions.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED EnvProbeJob : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "EnvProbeJob";
		constexpr static rivet::rivet_type_id type_id = 0x8fe2878c;

		constexpr static std::string_view Changelist_type_name = "Changelist";
		constexpr static rivet::rivet_type_id Changelist_type_id = 0x3b0ddc6;
		constexpr static std::string_view CaptureDirectOnly_type_name = "CaptureDirectOnly";
		constexpr static rivet::rivet_type_id CaptureDirectOnly_type_id = 0x3fdfd590;
		constexpr static std::string_view UpdateProbeProxy_type_name = "UpdateProbeProxy";
		constexpr static rivet::rivet_type_id UpdateProbeProxy_type_id = 0x10008aa0;
		constexpr static std::string_view ProbeZones_type_name = "ProbeZones";
		constexpr static rivet::rivet_type_id ProbeZones_type_id = 0xdf5240c7;
		constexpr static std::string_view Zones_type_name = "Zones";
		constexpr static rivet::rivet_type_id Zones_type_id = 0x9c997da9;
		constexpr static std::string_view Atmosphere_type_name = "Atmosphere";
		constexpr static rivet::rivet_type_id Atmosphere_type_id = 0x79fd859a;
		constexpr static std::string_view LightingCondition_type_name = "LightingCondition";
		constexpr static rivet::rivet_type_id LightingCondition_type_id = 0xc3b54f69; 

		explicit EnvProbeJob() = default;
		explicit EnvProbeJob([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t Changelist {};
		bool CaptureDirectOnly {};
		bool UpdateProbeProxy {};
		std::vector<std::string_view> ProbeZones {};
		std::vector<std::string_view> Zones {};
		std::string_view Atmosphere {};
		rivet::ddl::generated::LightingConditions LightingCondition {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EnvProbeJob>;
	};
} // namespace rivet::ddl::generated

// clang-format on
