// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FadeMaterialPrius.hpp>

namespace rivet::ddl::generated {
	FadeMaterialPrius::FadeMaterialPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Material = serialized->get_string(Material_type_id, {});
		AddMaterial = serialized->get_bool(AddMaterial_type_id, true);
		FadeInVariableName = serialized->get_string(FadeInVariableName_type_id, {});
		FadeInDuration = serialized->get_float(FadeInDuration_type_id, 1.000000f);
		FadeOutVariableName = serialized->get_string(FadeOutVariableName_type_id, {});
		FadeOutDuration = serialized->get_float(FadeOutDuration_type_id, 1.000000f);
		DestroyActorOnFadeOut = serialized->get_bool(DestroyActorOnFadeOut_type_id, false);
		StartFadedIn = serialized->get_bool(StartFadedIn_type_id, false);
		PreApply = serialized->get_bool(PreApply_type_id, false);
		FadeOutHidesShadows = serialized->get_bool(FadeOutHidesShadows_type_id, false); 
	}

	[[nodiscard]] auto
	FadeMaterialPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FadeMaterialPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FadeMaterialPrius> {
		if (incoming_type_id == FadeMaterialPrius::type_id) {
			return std::make_shared<FadeMaterialPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
