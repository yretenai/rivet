// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimListElement : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimListElement";
		constexpr static rivet::rivet_type_id type_id = 0x542556ab;

		constexpr static std::string_view AnimationName_type_name = "AnimationName";
		constexpr static rivet::rivet_type_id AnimationName_type_id = 0x5052469b;
		constexpr static std::string_view Priority_type_name = "Priority";
		constexpr static rivet::rivet_type_id Priority_type_id = 0x98a76157;
		constexpr static std::string_view PlayOnce_type_name = "PlayOnce";
		constexpr static rivet::rivet_type_id PlayOnce_type_id = 0xba3988ab;
		constexpr static std::string_view OverrideAlways_type_name = "OverrideAlways";
		constexpr static rivet::rivet_type_id OverrideAlways_type_id = 0xca9dd718;
		constexpr static std::string_view OverrideByPriority_type_name = "OverrideByPriority";
		constexpr static rivet::rivet_type_id OverrideByPriority_type_id = 0x48ac47d7;
		constexpr static std::string_view OverrideSameAnim_type_name = "OverrideSameAnim";
		constexpr static rivet::rivet_type_id OverrideSameAnim_type_id = 0x3475e87e;
		constexpr static std::string_view OverrideAnimNotInMap_type_name = "OverrideAnimNotInMap";
		constexpr static rivet::rivet_type_id OverrideAnimNotInMap_type_id = 0xe5039e96; 

		explicit AnimListElement() = default;
		explicit AnimListElement([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view AnimationName {};
		uint32_t Priority {};
		bool PlayOnce {};
		bool OverrideAlways {};
		bool OverrideByPriority {};
		bool OverrideSameAnim {};
		bool OverrideAnimNotInMap {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimListElement>;
	};
} // namespace rivet::ddl::generated

// clang-format on
