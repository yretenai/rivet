// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MaterialGraphDef.hpp>
#include <rivet/ddl/generated/MaterialNodeLibraryList.hpp> 

#include <rivet/ddl/generated/MaterialGraphEngineItem.hpp>

namespace rivet::ddl::generated {
	MaterialGraphEngineItem::MaterialGraphEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AssetPath = serialized->get_string(AssetPath_type_id, {});
		Force = serialized->get_bool(Force_type_id, false);
		ForceCounter = serialized->get_int32(ForceCounter_type_id, 0);
		MaterialNodeLibraryList = serialized->unwrap_into<rivet::ddl::generated::MaterialNodeLibraryList>(MaterialNodeLibraryList_type_id);
		MaterialGraphDef = serialized->unwrap_into<rivet::ddl::generated::MaterialGraphDef>(MaterialGraphDef_type_id); 
	}

	[[nodiscard]] auto
	MaterialGraphEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MaterialGraphEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialGraphEngineItem> {
		if (incoming_type_id == MaterialGraphEngineItem::type_id) {
			return std::make_shared<MaterialGraphEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
