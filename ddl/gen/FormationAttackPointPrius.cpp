// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FormationMotionInfo.hpp> 

#include <rivet/ddl/generated/FormationAttackPointPrius.hpp>

namespace rivet::ddl::generated {
	FormationAttackPointPrius::FormationAttackPointPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): FormationPointBasePrius(serialized) {
		MotionOverridesCoordinator = serialized->get_bool(MotionOverridesCoordinator_type_id);
		MotionInfo = serialized->unwrap_into_many<rivet::ddl::generated::FormationMotionInfo>(MotionInfo_type_id);
		MotionPivotActor = serialized->get_uint64(MotionPivotActor_type_id); 
	}

	[[nodiscard]] auto
	FormationAttackPointPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FormationAttackPointPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FormationAttackPointPrius> {
		if (incoming_type_id == FormationAttackPointPrius::type_id) {
			return std::make_shared<FormationAttackPointPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
