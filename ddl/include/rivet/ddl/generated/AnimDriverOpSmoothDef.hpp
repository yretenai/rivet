// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xfd5aa1cb.hpp>
#include <rivet/ddl/generated/enums/x9f234d85.hpp> 

namespace rivet::ddl::generated {
	struct AnimDriverOpConnection; 

	struct RIVET_DDL_SHARED AnimDriverOpSmoothDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimDriverOpSmoothDef";
		constexpr static rivet::rivet_type_id type_id = 0x36ddfa03;

		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view DisplayName_type_name = "DisplayName";
		constexpr static rivet::rivet_type_id DisplayName_type_id = 0xeaf33243;
		constexpr static std::string_view x_type_name = "x";
		constexpr static rivet::rivet_type_id x_type_id = 0x655d6145;
		constexpr static std::string_view y_type_name = "y";
		constexpr static rivet::rivet_type_id y_type_id = 0x125a51d3;
		constexpr static std::string_view OpType_type_name = "OpType";
		constexpr static rivet::rivet_type_id OpType_type_id = 0x8262958f;
		constexpr static std::string_view Value_type_name = "Value";
		constexpr static rivet::rivet_type_id Value_type_id = 0x42494f5;
		constexpr static std::string_view Connections_type_name = "Connections";
		constexpr static rivet::rivet_type_id Connections_type_id = 0x322aadce;
		constexpr static std::string_view SmoothType_type_name = "SmoothType";
		constexpr static rivet::rivet_type_id SmoothType_type_id = 0xc882b46c; 

		explicit AnimDriverOpSmoothDef() = default;
		explicit AnimDriverOpSmoothDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Name {};
		std::string_view DisplayName {};
		float x {};
		float y {};
		rivet::ddl::generated::x9f234d85 OpType {};
		float Value {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverOpConnection>> Connections {};
		rivet::ddl::generated::xfd5aa1cb SmoothType {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDriverOpSmoothDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
