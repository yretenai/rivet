// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UserProfileDevstatsEvent.hpp>

namespace rivet::ddl::generated {
	UserProfileDevstatsEvent::UserProfileDevstatsEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		psn_account = serialized->get_string(psn_account_type_id, {});
		np_account_id = serialized->get_uint64(np_account_id_type_id, 0);
		language = serialized->get_string(language_type_id, {});
		region = serialized->get_string(region_type_id, {});
		is_guest = serialized->get_bool(is_guest_type_id, false);
		age = serialized->get_int32(age_type_id, 0);
		restrict_chat = serialized->get_bool(restrict_chat_type_id, false);
		restrict_ugm = serialized->get_bool(restrict_ugm_type_id, false); 
	}

	[[nodiscard]] auto
	UserProfileDevstatsEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UserProfileDevstatsEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UserProfileDevstatsEvent> {
		if (incoming_type_id == UserProfileDevstatsEvent::type_id) {
			return std::make_shared<UserProfileDevstatsEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
