// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/OpenUnitLoadedEvent.hpp> 

#include <rivet/ddl/generated/RegionLoadedEvent.hpp>

namespace rivet::ddl::generated {
	RegionLoadedEvent::RegionLoadedEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		RegionIndex = serialized->get_int32(RegionIndex_type_id);
		AlreadyLoaded = serialized->get_bool(AlreadyLoaded_type_id); 
	}

	[[nodiscard]] auto
	RegionLoadedEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RegionLoadedEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RegionLoadedEvent> {
		if (incoming_type_id == RegionLoadedEvent::type_id) {
			return std::make_shared<RegionLoadedEvent>(serialized);
		}

		auto OpenUnitLoadedEvent_ptr = OpenUnitLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (OpenUnitLoadedEvent_ptr != nullptr) {
			return OpenUnitLoadedEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
