// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameBotMeleeSwarmerJumperPrius.hpp>
#include <rivet/ddl/generated/GameBotAmoeboidPrius.hpp>
#include <rivet/ddl/generated/GameBotMeleeSwarmerBurrowerPrius.hpp>
#include <rivet/ddl/generated/GameBotPufferFishPrius.hpp>
#include <rivet/ddl/generated/GameBotMeleeSwarmerGroundFlyerPrius.hpp> 

#include <rivet/ddl/generated/GameBotMeleeSwarmerPrius.hpp>

namespace rivet::ddl::generated {
	GameBotMeleeSwarmerPrius::GameBotMeleeSwarmerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): GameBotMeleeBasePrius(serialized) {

	}

	[[nodiscard]] auto
	GameBotMeleeSwarmerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameBotMeleeSwarmerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotMeleeSwarmerPrius> {
		if (incoming_type_id == GameBotMeleeSwarmerPrius::type_id) {
			return std::make_shared<GameBotMeleeSwarmerPrius>(serialized);
		}

		auto GameBotMeleeSwarmerGroundFlyerPrius_ptr = GameBotMeleeSwarmerGroundFlyerPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMeleeSwarmerGroundFlyerPrius_ptr != nullptr) {
			return GameBotMeleeSwarmerGroundFlyerPrius_ptr;
		}

		auto GameBotPufferFishPrius_ptr = GameBotPufferFishPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotPufferFishPrius_ptr != nullptr) {
			return GameBotPufferFishPrius_ptr;
		}

		auto GameBotMeleeSwarmerBurrowerPrius_ptr = GameBotMeleeSwarmerBurrowerPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMeleeSwarmerBurrowerPrius_ptr != nullptr) {
			return GameBotMeleeSwarmerBurrowerPrius_ptr;
		}

		auto GameBotAmoeboidPrius_ptr = GameBotAmoeboidPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotAmoeboidPrius_ptr != nullptr) {
			return GameBotAmoeboidPrius_ptr;
		}

		auto GameBotMeleeSwarmerJumperPrius_ptr = GameBotMeleeSwarmerJumperPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMeleeSwarmerJumperPrius_ptr != nullptr) {
			return GameBotMeleeSwarmerJumperPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
