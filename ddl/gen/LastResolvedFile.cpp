// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LastResolvedFile.hpp>

namespace rivet::ddl::generated {
	LastResolvedFile::LastResolvedFile([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FileToResolve = serialized->get_string(FileToResolve_type_id);
		BaseRevisionNumber = serialized->get_int32(BaseRevisionNumber_type_id);
		LatestRevisionNumber = serialized->get_int32(LatestRevisionNumber_type_id);
		TheirChanges = serialized->get_field(TheirChanges_type_id);
		YourChanges = serialized->get_field(YourChanges_type_id);
		MergedResult = serialized->get_field(MergedResult_type_id); 
	}

	[[nodiscard]] auto
	LastResolvedFile::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LastResolvedFile::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LastResolvedFile> {
		if (incoming_type_id == LastResolvedFile::type_id) {
			return std::make_shared<LastResolvedFile>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
