// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HexapodSlideData.hpp>

namespace rivet::ddl::generated {
	HexapodSlideData::HexapodSlideData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MaxSpeed = serialized->get_float(MaxSpeed_type_id, 4.000000f);
		GravityAccel = serialized->get_float(GravityAccel_type_id, 10.000000f);
		SlidePastTime = serialized->get_float(SlidePastTime_type_id, 0.250000f);
		WalkSpeedHorizontal = serialized->get_float(WalkSpeedHorizontal_type_id, 1.000000f);
		WalkSpeedVertical = serialized->get_float(WalkSpeedVertical_type_id, 1.000000f);
		DashSpeedHorizontal = serialized->get_float(DashSpeedHorizontal_type_id, 2.000000f);
		DashSpeedVertical = serialized->get_float(DashSpeedVertical_type_id, 2.000000f);
		MoveAccel = serialized->get_float(MoveAccel_type_id, 10.000000f);
		SlopeMinDot = serialized->get_float(SlopeMinDot_type_id, -0.100000f);
		SlopeMaxDot = serialized->get_float(SlopeMaxDot_type_id, 0.707000f); 
	}

	[[nodiscard]] auto
	HexapodSlideData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HexapodSlideData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HexapodSlideData> {
		if (incoming_type_id == HexapodSlideData::type_id) {
			return std::make_shared<HexapodSlideData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
