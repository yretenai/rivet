// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimControllerComponentPrius.hpp>

namespace rivet::ddl::generated {
	AnimControllerComponentPrius::AnimControllerComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AnimSets = serialized->get_strings(AnimSets_type_id);
		PerformanceType = serialized->get_enum<rivet::ddl::generated::x9675aa42>(PerformanceType_type_id, rivet::ddl::generated::x9675aa42_values, rivet::ddl::generated::x9675aa42::TypeStandard);
		PerformanceSet = serialized->get_string(PerformanceSet_type_id, {});
		PerformanceSetOverride = serialized->get_string(PerformanceSetOverride_type_id, {});
		PerformanceSetsAux = serialized->get_strings(PerformanceSetsAux_type_id);
		MaxUpdateDistance = serialized->get_float(MaxUpdateDistance_type_id, 0.000000f);
		AnimDynamicsUpdateMultiplier = serialized->get_float(AnimDynamicsUpdateMultiplier_type_id, 50.000000f);
		NeverCull = serialized->get_bool(NeverCull_type_id, false);
		BindAfterAnimEnd = serialized->get_bool(BindAfterAnimEnd_type_id, false);
		AutoFreezeSkinning = serialized->get_bool(AutoFreezeSkinning_type_id, false);
		MaxAnimTreeSize = serialized->get_uint16(MaxAnimTreeSize_type_id, 4096u); 
	}

	[[nodiscard]] auto
	AnimControllerComponentPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimControllerComponentPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimControllerComponentPrius> {
		if (incoming_type_id == AnimControllerComponentPrius::type_id) {
			return std::make_shared<AnimControllerComponentPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
