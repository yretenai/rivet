// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/POITypeObjectiveOptional.hpp>
#include <rivet/ddl/generated/POITypeObjective.hpp> 

#include <rivet/ddl/generated/POITypeMission.hpp>

namespace rivet::ddl::generated {
	POITypeMission::POITypeMission([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): POIInstanceDataBase(serialized) {
		MissionName = serialized->get_string(MissionName_type_id); 
	}

	[[nodiscard]] auto
	POITypeMission::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	POITypeMission::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<POITypeMission> {
		if (incoming_type_id == POITypeMission::type_id) {
			return std::make_shared<POITypeMission>(serialized);
		}

		auto POITypeObjective_ptr = POITypeObjective::from_substruct(incoming_type_id, serialized);
		if (POITypeObjective_ptr != nullptr) {
			return POITypeObjective_ptr;
		}

		auto POITypeObjectiveOptional_ptr = POITypeObjectiveOptional::from_substruct(incoming_type_id, serialized);
		if (POITypeObjectiveOptional_ptr != nullptr) {
			return POITypeObjectiveOptional_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
