// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xaa15dda.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SharedDebugSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SharedDebugSettings";
		constexpr static rivet::rivet_type_id type_id = 0xba34f601;

		constexpr static std::string_view PadIdxOffset_type_name = "PadIdxOffset";
		constexpr static rivet::rivet_type_id PadIdxOffset_type_id = 0xc33479fd;
		constexpr static std::string_view InvertLook_type_name = "InvertLook";
		constexpr static rivet::rivet_type_id InvertLook_type_id = 0xd2aaf673;
		constexpr static std::string_view DebugFPSEnable_type_name = "DebugFPSEnable";
		constexpr static rivet::rivet_type_id DebugFPSEnable_type_id = 0xd234e4f5;
		constexpr static std::string_view DebugActorDefaultFilter_type_name = "DebugActorDefaultFilter";
		constexpr static rivet::rivet_type_id DebugActorDefaultFilter_type_id = 0xc75cd3c4;
		constexpr static std::string_view DebugActorListDistance_type_name = "DebugActorListDistance";
		constexpr static rivet::rivet_type_id DebugActorListDistance_type_id = 0xbeb506af;
		constexpr static std::string_view DebugActorCamDistDrawLineTo_type_name = "DebugActorCamDistDrawLineTo";
		constexpr static rivet::rivet_type_id DebugActorCamDistDrawLineTo_type_id = 0x776ec68a;
		constexpr static std::string_view HugeSingleFrameMoveDist_type_name = "HugeSingleFrameMoveDist";
		constexpr static rivet::rivet_type_id HugeSingleFrameMoveDist_type_id = 0xc856355f;
		constexpr static std::string_view SimpleAnimatedComplainOnNoDriver_type_name = "SimpleAnimatedComplainOnNoDriver";
		constexpr static rivet::rivet_type_id SimpleAnimatedComplainOnNoDriver_type_id = 0x5e5edfc9;
		constexpr static std::string_view OnEnterWithJustHeroIsError_type_name = "OnEnterWithJustHeroIsError";
		constexpr static rivet::rivet_type_id OnEnterWithJustHeroIsError_type_id = 0xdc2f8777;
		constexpr static std::string_view WatermarkString_type_name = "WatermarkString";
		constexpr static rivet::rivet_type_id WatermarkString_type_id = 0x14500c52; 

		explicit SharedDebugSettings() = default;
		explicit SharedDebugSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t PadIdxOffset {};
		bool InvertLook {};
		bool DebugFPSEnable {};
		rivet::ddl::generated::xaa15dda DebugActorDefaultFilter {};
		int32_t DebugActorListDistance {};
		float DebugActorCamDistDrawLineTo {};
		float HugeSingleFrameMoveDist {};
		bool SimpleAnimatedComplainOnNoDriver {};
		bool OnEnterWithJustHeroIsError {};
		std::string_view WatermarkString {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SharedDebugSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
