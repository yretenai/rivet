// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/EnvelopeColorDef.hpp>
#include <rivet/ddl/generated/DDLVector2.hpp> 

#include <rivet/ddl/generated/TerrainLayer.hpp>

namespace rivet::ddl::generated {
	TerrainLayer::TerrainLayer([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Name = serialized->get_string(Name_type_id, "Unnamed Layer");
		Id = serialized->get_uint8(Id_type_id, 0u);
		Material = serialized->get_string(Material_type_id, {});
		TileSize = serialized->get_float(TileSize_type_id, 2.000000f);
		BlendOpacityThreshold = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(BlendOpacityThreshold_type_id);
		MaxRotationDegrees = serialized->get_float(MaxRotationDegrees_type_id, 180.000000f);
		VistaMapColor = serialized->unwrap_into<rivet::ddl::generated::EnvelopeColorDef>(VistaMapColor_type_id);
		DefaultVistaMapNormalDetail = serialized->unwrap_into_many<rivet::ddl::generated::DDLVector3>(DefaultVistaMapNormalDetail_type_id);
		VistaMapNormalDetail = serialized->get_bool(VistaMapNormalDetail_type_id, true);
		DefaultVistaMapSpecular = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(DefaultVistaMapSpecular_type_id);
		VistaMapSpecular = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(VistaMapSpecular_type_id);
		DefaultVistaMapGlossiness = serialized->get_float(DefaultVistaMapGlossiness_type_id, 0.100000f);
		VistaMapGlossiness = serialized->get_float(VistaMapGlossiness_type_id, 0.000000f);
		VistaMapNoise = serialized->get_float(VistaMapNoise_type_id, 0.250000f);
		VistaMapPeakValleySharpness = serialized->get_float(VistaMapPeakValleySharpness_type_id, 0.500000f);
		VistaMapPeakValleyStrength = serialized->get_float(VistaMapPeakValleyStrength_type_id, 0.000000f); 
	}

	[[nodiscard]] auto
	TerrainLayer::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TerrainLayer::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TerrainLayer> {
		if (incoming_type_id == TerrainLayer::type_id) {
			return std::make_shared<TerrainLayer>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
