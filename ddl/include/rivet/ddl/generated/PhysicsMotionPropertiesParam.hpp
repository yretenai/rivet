// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED PhysicsMotionPropertiesParam : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "PhysicsMotionPropertiesParam";
		constexpr const static rivet::rivet_type_id type_id = 0xb969677a;

		constexpr const static std::string_view UseAggressiveRagdollSettling_type_name = "UseAggressiveRagdollSettling";
		constexpr const static rivet::rivet_type_id UseAggressiveRagdollSettling_type_id = 0x3dd00e5b;
		constexpr const static std::string_view GravityFactor_type_name = "GravityFactor";
		constexpr const static rivet::rivet_type_id GravityFactor_type_id = 0x1b8daea5;
		constexpr const static std::string_view MaxLinearSpeed_type_name = "MaxLinearSpeed";
		constexpr const static rivet::rivet_type_id MaxLinearSpeed_type_id = 0xd7031ecf;
		constexpr const static std::string_view MaxAngularSpeed_type_name = "MaxAngularSpeed";
		constexpr const static rivet::rivet_type_id MaxAngularSpeed_type_id = 0x5fec8281;
		constexpr const static std::string_view LinearDamping_type_name = "LinearDamping";
		constexpr const static rivet::rivet_type_id LinearDamping_type_id = 0x97613ca3;
		constexpr const static std::string_view AngularDamping_type_name = "AngularDamping";
		constexpr const static rivet::rivet_type_id AngularDamping_type_id = 0xcdf27098; 

		explicit PhysicsMotionPropertiesParam() = default;
		explicit PhysicsMotionPropertiesParam([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool UseAggressiveRagdollSettling {};
		float GravityFactor {};
		float MaxLinearSpeed {};
		float MaxAngularSpeed {};
		float LinearDamping {};
		float AngularDamping {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PhysicsMotionPropertiesParam>;
	};
} // namespace rivet::ddl::generated

// clang-format on
