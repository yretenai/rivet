// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x80286938.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AimAssistSnapLocation : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "AimAssistSnapLocation";
		constexpr const static rivet::rivet_type_id type_id = 0xa692b37a;

		constexpr const static std::string_view AngleNear_type_name = "AngleNear";
		constexpr const static rivet::rivet_type_id AngleNear_type_id = 0x7d428588;
		constexpr const static std::string_view AngleFar_type_name = "AngleFar";
		constexpr const static rivet::rivet_type_id AngleFar_type_id = 0xabdaec9f;
		constexpr const static std::string_view DistanceNear_type_name = "DistanceNear";
		constexpr const static rivet::rivet_type_id DistanceNear_type_id = 0xe7e7d300;
		constexpr const static std::string_view DistanceFar_type_name = "DistanceFar";
		constexpr const static rivet::rivet_type_id DistanceFar_type_id = 0xb13fd21e;
		constexpr const static std::string_view FaceAngle_type_name = "FaceAngle";
		constexpr const static rivet::rivet_type_id FaceAngle_type_id = 0xb2c98628;
		constexpr const static std::string_view LocationType_type_name = "LocationType";
		constexpr const static rivet::rivet_type_id LocationType_type_id = 0xc3db52f8; 

		explicit AimAssistSnapLocation() = default;
		explicit AimAssistSnapLocation([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float AngleNear {};
		float AngleFar {};
		float DistanceNear {};
		float DistanceFar {};
		float FaceAngle {};
		rivet::ddl::generated::x80286938 LocationType {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimAssistSnapLocation>;
	};
} // namespace rivet::ddl::generated

// clang-format on
