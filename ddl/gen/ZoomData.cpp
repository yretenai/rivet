// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FireConeData.hpp> 

#include <rivet/ddl/generated/ZoomData.hpp>

namespace rivet::ddl::generated {
	ZoomData::ZoomData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FireCone = serialized->unwrap_into<rivet::ddl::generated::FireConeData>(FireCone_type_id);
		CamAimContext = serialized->get_string(CamAimContext_type_id);
		CamStickOverride = serialized->get_string(CamStickOverride_type_id);
		AimAssistOverride = serialized->get_string(AimAssistOverride_type_id);
		AimAssistOverrideCasual = serialized->get_string(AimAssistOverrideCasual_type_id);
		DisableViewWidth = serialized->get_bool(DisableViewWidth_type_id); 
	}

	[[nodiscard]] auto
	ZoomData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ZoomData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ZoomData> {
		if (incoming_type_id == ZoomData::type_id) {
			return std::make_shared<ZoomData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
