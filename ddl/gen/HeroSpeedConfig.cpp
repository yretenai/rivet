// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroSpeedConfig.hpp>

namespace rivet::ddl::generated {
	HeroSpeedConfig::HeroSpeedConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		WalkRunStickThreshold = serialized->get_float(WalkRunStickThreshold_type_id);
		WalkSpeedMin = serialized->get_float(WalkSpeedMin_type_id);
		WalkSpeedMax = serialized->get_float(WalkSpeedMax_type_id);
		RunSpeedMin = serialized->get_float(RunSpeedMin_type_id);
		RunSpeedMax = serialized->get_float(RunSpeedMax_type_id);
		RunSpeedBackwardMin = serialized->get_float(RunSpeedBackwardMin_type_id);
		RunSpeedBackwardMax = serialized->get_float(RunSpeedBackwardMax_type_id);
		RunSpeedSideMin = serialized->get_float(RunSpeedSideMin_type_id);
		RunSpeedSideMax = serialized->get_float(RunSpeedSideMax_type_id); 
	}

	[[nodiscard]] auto
	HeroSpeedConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroSpeedConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroSpeedConfig> {
		if (incoming_type_id == HeroSpeedConfig::type_id) {
			return std::make_shared<HeroSpeedConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
