// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct NodeGraphLibrarySubGraphData; 

	struct RIVET_DDL_SHARED NodeGraphLibraryMimeData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "NodeGraphLibraryMimeData";
		constexpr static rivet::rivet_type_id type_id = 0xc71ca727;

		constexpr static std::string_view FieldNames_type_name = "FieldNames";
		constexpr static rivet::rivet_type_id FieldNames_type_id = 0xa62d21dc;
		constexpr static std::string_view GraphData_type_name = "GraphData";
		constexpr static rivet::rivet_type_id GraphData_type_id = 0x11a7047f;
		constexpr static std::string_view NodeGraphSymbolName_type_name = "NodeGraphSymbolName";
		constexpr static rivet::rivet_type_id NodeGraphSymbolName_type_id = 0x84d789a3; 

		explicit NodeGraphLibraryMimeData() = default;
		explicit NodeGraphLibraryMimeData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::string_view> FieldNames {};
		std::vector<std::shared_ptr<rivet::ddl::generated::NodeGraphLibrarySubGraphData>> GraphData {};
		std::string_view NodeGraphSymbolName {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodeGraphLibraryMimeData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
