// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PortalIntroDataPrius.hpp>

namespace rivet::ddl::generated {
	PortalIntroDataPrius::PortalIntroDataPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): IntroDataPrius(serialized) {
		PortalAsset = serialized->get_string(PortalAsset_type_id, {});
		DestDist = serialized->get_float(DestDist_type_id, 0.000000);
		WaitAnim = serialized->get_string(WaitAnim_type_id, "Idle");
		JumpAnim = serialized->get_string(JumpAnim_type_id, "Jump");
		InAirAnim = serialized->get_string(InAirAnim_type_id, "Jump_In_Air");
		LandAnim = serialized->get_string(LandAnim_type_id, "Land");
		HoverIntroAnim = serialized->get_string(HoverIntroAnim_type_id, "Hover_Intro");
		HoverAnim = serialized->get_string(HoverAnim_type_id, "Hover_Move");
		HoverYOffset = serialized->get_float(HoverYOffset_type_id, 1.500000);
		PreShader = serialized->get_string(PreShader_type_id, {});
		PostShader = serialized->get_string(PostShader_type_id, {});
		OpenTime = serialized->get_float(OpenTime_type_id, 1.000000);
		CloseTime = serialized->get_float(CloseTime_type_id, 2.000000);
		TimeBetweenIntros = serialized->get_float(TimeBetweenIntros_type_id, 1.000000);
		DropShipBonusDist = serialized->get_float(DropShipBonusDist_type_id, 8.000000); 
	}

	[[nodiscard]] auto
	PortalIntroDataPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PortalIntroDataPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PortalIntroDataPrius> {
		if (incoming_type_id == PortalIntroDataPrius::type_id) {
			return std::make_shared<PortalIntroDataPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
