// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CompoundRotateWhileMoving.hpp>
#include <rivet/ddl/generated/RotateWhileMoving.hpp>
#include <rivet/ddl/generated/StaticOrientation.hpp>
#include <rivet/ddl/generated/FaceVelocityOrientation.hpp> 

#include <rivet/ddl/generated/OrientationMode.hpp>

namespace rivet::ddl::generated {
	OrientationMode::OrientationMode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	OrientationMode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	OrientationMode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OrientationMode> {
		if (incoming_type_id == OrientationMode::type_id) {
			return std::make_shared<OrientationMode>(serialized);
		}

		auto FaceVelocityOrientation_ptr = FaceVelocityOrientation::from_substruct(incoming_type_id, serialized);
		if (FaceVelocityOrientation_ptr != nullptr) {
			return FaceVelocityOrientation_ptr;
		}

		auto StaticOrientation_ptr = StaticOrientation::from_substruct(incoming_type_id, serialized);
		if (StaticOrientation_ptr != nullptr) {
			return StaticOrientation_ptr;
		}

		auto RotateWhileMoving_ptr = RotateWhileMoving::from_substruct(incoming_type_id, serialized);
		if (RotateWhileMoving_ptr != nullptr) {
			return RotateWhileMoving_ptr;
		}

		auto CompoundRotateWhileMoving_ptr = CompoundRotateWhileMoving::from_substruct(incoming_type_id, serialized);
		if (CompoundRotateWhileMoving_ptr != nullptr) {
			return CompoundRotateWhileMoving_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
