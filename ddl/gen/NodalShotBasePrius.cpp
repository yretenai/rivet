// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/NodalShotPrius.hpp> 

#include <rivet/ddl/generated/NodalShotBasePrius.hpp>

namespace rivet::ddl::generated {
	NodalShotBasePrius::NodalShotBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ShotBasePrius(serialized) {
		DelayFirstUpdateInterval = serialized->get_bool(DelayFirstUpdateInterval_type_id);
		UseActorCollision = serialized->get_bool(UseActorCollision_type_id);
		LifetimeExpiredOnMaxRange = serialized->get_bool(LifetimeExpiredOnMaxRange_type_id);
		ShowReticle = serialized->get_bool(ShowReticle_type_id); 
	}

	[[nodiscard]] auto
	NodalShotBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	NodalShotBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodalShotBasePrius> {
		if (incoming_type_id == NodalShotBasePrius::type_id) {
			return std::make_shared<NodalShotBasePrius>(serialized);
		}

		auto NodalShotPrius_ptr = NodalShotPrius::from_substruct(incoming_type_id, serialized);
		if (NodalShotPrius_ptr != nullptr) {
			return NodalShotPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
