// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/NoAccuracyModifierPrius.hpp>
#include <rivet/ddl/generated/PredictiveAccuracyPrius.hpp>
#include <rivet/ddl/generated/NoInaccuracyPrius.hpp> 

#include <rivet/ddl/generated/WeaponAccuracyBasePrius.hpp>

namespace rivet::ddl::generated {
	WeaponAccuracyBasePrius::WeaponAccuracyBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ModifyVelocityForAutoTarget = serialized->get_bool(ModifyVelocityForAutoTarget_type_id); 
	}

	auto
	WeaponAccuracyBasePrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	WeaponAccuracyBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeaponAccuracyBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponAccuracyBasePrius> {
		if (incoming_type_id == WeaponAccuracyBasePrius::type_id) {
			return std::make_shared<WeaponAccuracyBasePrius>(serialized);
		}

		auto NoAccuracyModifierPrius_ptr = NoAccuracyModifierPrius::from_substruct(incoming_type_id, serialized);
		if (NoAccuracyModifierPrius_ptr != nullptr) {
			return NoAccuracyModifierPrius_ptr;
		}

		auto PredictiveAccuracyPrius_ptr = PredictiveAccuracyPrius::from_substruct(incoming_type_id, serialized);
		if (PredictiveAccuracyPrius_ptr != nullptr) {
			return PredictiveAccuracyPrius_ptr;
		}

		auto NoInaccuracyPrius_ptr = NoInaccuracyPrius::from_substruct(incoming_type_id, serialized);
		if (NoInaccuracyPrius_ptr != nullptr) {
			return NoInaccuracyPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
