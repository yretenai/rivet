// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/ListeningMode.hpp> 

namespace rivet::ddl::generated {
	struct MouseControl; 

	struct RIVET_DDL_SHARED PCGamePreferencesSave : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "PCGamePreferencesSave";
		constexpr static rivet::rivet_type_id type_id = 0x9ed17ce1;

		constexpr static std::string_view BootFlowShown_type_name = "BootFlowShown";
		constexpr static rivet::rivet_type_id BootFlowShown_type_id = 0x7121f4ef;
		constexpr static std::string_view PSNAccountLinked_type_name = "PSNAccountLinked";
		constexpr static rivet::rivet_type_id PSNAccountLinked_type_id = 0xf7faf7f6;
		constexpr static std::string_view AcceptedSIEAnalytics_type_name = "AcceptedSIEAnalytics";
		constexpr static rivet::rivet_type_id AcceptedSIEAnalytics_type_id = 0xa5cbfa7b;
		constexpr static std::string_view MouseControlFlying_type_name = "MouseControlFlying";
		constexpr static rivet::rivet_type_id MouseControlFlying_type_id = 0x1c630bdd;
		constexpr static std::string_view SprintToggle_type_name = "SprintToggle";
		constexpr static rivet::rivet_type_id SprintToggle_type_id = 0x5913d2ed;
		constexpr static std::string_view ListeningModePC_type_name = "ListeningModePC";
		constexpr static rivet::rivet_type_id ListeningModePC_type_id = 0x4385c1ae;
		constexpr static std::string_view HudWidescreenScale_type_name = "HudWidescreenScale";
		constexpr static rivet::rivet_type_id HudWidescreenScale_type_id = 0x1894ebaa;
		constexpr static std::string_view EnableAudioHaptics_type_name = "EnableAudioHaptics";
		constexpr static rivet::rivet_type_id EnableAudioHaptics_type_id = 0x526f0506;
		constexpr static std::string_view ScePadAudioPathMode_type_name = "ScePadAudioPathMode";
		constexpr static rivet::rivet_type_id ScePadAudioPathMode_type_id = 0x7f7b23b0;
		constexpr static std::string_view AimInvertX_type_name = "AimInvertX";
		constexpr static rivet::rivet_type_id AimInvertX_type_id = 0x5d264e40;
		constexpr static std::string_view AimInvertY_type_name = "AimInvertY";
		constexpr static rivet::rivet_type_id AimInvertY_type_id = 0x2a217ed6;
		constexpr static std::string_view SoundPerformanceMode_type_name = "SoundPerformanceMode";
		constexpr static rivet::rivet_type_id SoundPerformanceMode_type_id = 0x9b4e3dbb; 

		explicit PCGamePreferencesSave() = default;
		explicit PCGamePreferencesSave([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool BootFlowShown {};
		bool PSNAccountLinked {};
		int32_t AcceptedSIEAnalytics {};
		std::shared_ptr<rivet::ddl::generated::MouseControl> MouseControlFlying {};
		bool SprintToggle {};
		rivet::ddl::generated::ListeningMode ListeningModePC {};
		int32_t HudWidescreenScale {};
		bool EnableAudioHaptics {};
		int32_t ScePadAudioPathMode {};
		bool AimInvertX {};
		bool AimInvertY {};
		uint32_t SoundPerformanceMode {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PCGamePreferencesSave>;
	};
} // namespace rivet::ddl::generated

// clang-format on
