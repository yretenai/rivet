// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AttachedLightData.hpp> 

#include <rivet/ddl/generated/AnimatedSignPrius.hpp>

namespace rivet::ddl::generated {
	AnimatedSignPrius::AnimatedSignPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TriggerVolume = serialized->get_uint64(TriggerVolume_type_id);
		IdleAnim = serialized->get_string(IdleAnim_type_id);
		IdleToTriggeredAnim = serialized->get_string(IdleToTriggeredAnim_type_id);
		TriggeredAnim = serialized->get_string(TriggeredAnim_type_id);
		TriggeredToIdleAnim = serialized->get_string(TriggeredToIdleAnim_type_id);
		AttachedLights = serialized->unwrap_into_many<rivet::ddl::generated::AttachedLightData>(AttachedLights_type_id);
		LightTrack = serialized->get_string(LightTrack_type_id);
		TriggeringTargets = serialized->get_bitset<rivet::ddl::generated::xd86baa4d>(TriggeringTargets_type_id, rivet::ddl::generated::xd86baa4d_values); 
	}

	[[nodiscard]] auto
	AnimatedSignPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimatedSignPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimatedSignPrius> {
		if (incoming_type_id == AnimatedSignPrius::type_id) {
			return std::make_shared<AnimatedSignPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
