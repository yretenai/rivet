// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AmbientFireworkLauncherPrius.hpp>

namespace rivet::ddl::generated {
	AmbientFireworkLauncherPrius::AmbientFireworkLauncherPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MinHeight = serialized->get_float(MinHeight_type_id, 20.000000);
		MaxHeight = serialized->get_float(MaxHeight_type_id, 50.000000);
		AngleDelta = serialized->get_float(AngleDelta_type_id, 0.350000);
		NumFires = serialized->get_uint32(NumFires_type_id, 0);
		MinFireWait = serialized->get_float(MinFireWait_type_id, 0.500000);
		MaxFireWait = serialized->get_float(MaxFireWait_type_id, 3.000000);
		ShotConfig = serialized->get_string(ShotConfig_type_id, "");
		LaunchLoc = serialized->get_string(LaunchLoc_type_id, ""); 
	}

	[[nodiscard]] auto
	AmbientFireworkLauncherPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AmbientFireworkLauncherPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AmbientFireworkLauncherPrius> {
		if (incoming_type_id == AmbientFireworkLauncherPrius::type_id) {
			return std::make_shared<AmbientFireworkLauncherPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
