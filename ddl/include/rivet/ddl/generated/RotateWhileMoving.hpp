// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/OrientationMode.hpp>
#include <rivet/ddl/generated/enums/xea512758.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED RotateWhileMoving : OrientationMode {
		constexpr const static std::string_view type_name = "RotateWhileMoving";
		constexpr const static rivet::rivet_type_id type_id = 0x64449591;

		constexpr const static std::string_view Axis_type_name = "Axis";
		constexpr const static rivet::rivet_type_id Axis_type_id = 0xb59f464a;
		constexpr const static std::string_view RotationalSpeed_type_name = "RotationalSpeed";
		constexpr const static rivet::rivet_type_id RotationalSpeed_type_id = 0x1691e955;
		constexpr const static std::string_view RotationJoint_type_name = "RotationJoint";
		constexpr const static rivet::rivet_type_id RotationJoint_type_id = 0x77400fef;
		constexpr const static std::string_view LocalToVelocity_type_name = "LocalToVelocity";
		constexpr const static rivet::rivet_type_id LocalToVelocity_type_id = 0x4213956b;
		constexpr const static std::string_view TiltWithVelocity_type_name = "TiltWithVelocity";
		constexpr const static rivet::rivet_type_id TiltWithVelocity_type_id = 0x17226367;
		constexpr const static std::string_view AxisIsWorld_type_name = "AxisIsWorld";
		constexpr const static rivet::rivet_type_id AxisIsWorld_type_id = 0x21314bb0; 

		explicit RotateWhileMoving() = default;
		explicit RotateWhileMoving([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xea512758 Axis {};
		float RotationalSpeed {};
		std::string_view RotationJoint {};
		bool LocalToVelocity {};
		bool TiltWithVelocity {};
		bool AxisIsWorld {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RotateWhileMoving>;
	};
} // namespace rivet::ddl::generated

// clang-format on
