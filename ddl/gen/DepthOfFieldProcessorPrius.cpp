// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DepthOfFieldProcessorPrius.hpp>

namespace rivet::ddl::generated {
	DepthOfFieldProcessorPrius::DepthOfFieldProcessorPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ViewportIndex = serialized->get_int32(ViewportIndex_type_id, 0u);
		HUDDOFDistance = serialized->get_float(HUDDOFDistance_type_id, 1.000000f);
		HUDAperatureScale = serialized->get_float(HUDAperatureScale_type_id, 20.500000f);
		HUDBlendTime = serialized->get_float(HUDBlendTime_type_id, 0.010000f);
		DefaultBlendTime = serialized->get_float(DefaultBlendTime_type_id, 0.010000f);
		AimBlendTime = serialized->get_float(AimBlendTime_type_id, 0.200000f);
		DeactivateTime = serialized->get_float(DeactivateTime_type_id, 0.250000f); 
	}

	[[nodiscard]] auto
	DepthOfFieldProcessorPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DepthOfFieldProcessorPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DepthOfFieldProcessorPrius> {
		if (incoming_type_id == DepthOfFieldProcessorPrius::type_id) {
			return std::make_shared<DepthOfFieldProcessorPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
