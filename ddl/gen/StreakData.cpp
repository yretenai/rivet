// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StreakData.hpp>

namespace rivet::ddl::generated {
	StreakData::StreakData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MaterialOverride = serialized->get_string(MaterialOverride_type_id);
		Style = serialized->get_enum<rivet::ddl::generated::x38953afc>(Style_type_id, rivet::ddl::generated::x38953afc_values);
		MeleeWidthMinScale = serialized->get_float(MeleeWidthMinScale_type_id);
		MeleeWidthMaxScale = serialized->get_float(MeleeWidthMaxScale_type_id);
		MeleeOffset = serialized->get_float(MeleeOffset_type_id);
		SmashWidthMinScale = serialized->get_float(SmashWidthMinScale_type_id);
		SmashWidthMaxScale = serialized->get_float(SmashWidthMaxScale_type_id);
		SmashOffset = serialized->get_float(SmashOffset_type_id); 
	}

	[[nodiscard]] auto
	StreakData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StreakData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StreakData> {
		if (incoming_type_id == StreakData::type_id) {
			return std::make_shared<StreakData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
