// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AmbientCurveFacingBase.hpp> 

#include <rivet/ddl/generated/AmbientCurveFollowerPrius.hpp>

namespace rivet::ddl::generated {
	AmbientCurveFollowerPrius::AmbientCurveFollowerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		OpenCurveFollowType = serialized->get_enum<rivet::ddl::generated::xd93fd23f>(OpenCurveFollowType_type_id, rivet::ddl::generated::xd93fd23f_values);
		DoOpenCurveStop = serialized->get_bool(DoOpenCurveStop_type_id);
		Acceleration = serialized->get_float(Acceleration_type_id);
		Deceleration = serialized->get_float(Deceleration_type_id);
		MaxSpeed = serialized->get_float(MaxSpeed_type_id);
		ForceYUp = serialized->get_bool(ForceYUp_type_id);
		IntroCurveMinDistFactor = serialized->get_float(IntroCurveMinDistFactor_type_id);
		IntroCurveMaxDistFactor = serialized->get_float(IntroCurveMaxDistFactor_type_id);
		IntroCurveAngleFactor = serialized->get_float(IntroCurveAngleFactor_type_id);
		IntroCurveMaxTurnRate = serialized->get_float(IntroCurveMaxTurnRate_type_id);
		IntroCurveLockToOrientation = serialized->get_bool(IntroCurveLockToOrientation_type_id);
		SyncUpdate = serialized->get_bool(SyncUpdate_type_id);
		DeleteAtEnd = serialized->get_bool(DeleteAtEnd_type_id);
		ApplyFacing = serialized->get_bool(ApplyFacing_type_id);
		FacingData = serialized->unwrap_into<rivet::ddl::generated::AmbientCurveFacingBase>(FacingData_type_id); 
	}

	[[nodiscard]] auto
	AmbientCurveFollowerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AmbientCurveFollowerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AmbientCurveFollowerPrius> {
		if (incoming_type_id == AmbientCurveFollowerPrius::type_id) {
			return std::make_shared<AmbientCurveFollowerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
