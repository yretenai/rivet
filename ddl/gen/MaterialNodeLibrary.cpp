// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LoadedMaterialNode.hpp> 

#include <rivet/ddl/generated/MaterialNodeLibrary.hpp>

namespace rivet::ddl::generated {
	MaterialNodeLibrary::MaterialNodeLibrary([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		LibraryDirectory = serialized->get_string(LibraryDirectory_type_id, {});
		LibraryFullPath = serialized->get_string(LibraryFullPath_type_id, {});
		Name = serialized->get_string(Name_type_id, {});
		Nodes = serialized->unwrap_into_many<rivet::ddl::generated::LoadedMaterialNode>(Nodes_type_id);
		Color = serialized->get_uint32(Color_type_id, 0);
		FixedWidth = serialized->get_uint32(FixedWidth_type_id, 0);
		TimeStampLow = serialized->get_uint32(TimeStampLow_type_id, 0);
		TimeStampHigh = serialized->get_uint32(TimeStampHigh_type_id, 0);
		Hidden = serialized->get_bool(Hidden_type_id, false); 
	}

	[[nodiscard]] auto
	MaterialNodeLibrary::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MaterialNodeLibrary::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialNodeLibrary> {
		if (incoming_type_id == MaterialNodeLibrary::type_id) {
			return std::make_shared<MaterialNodeLibrary>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
