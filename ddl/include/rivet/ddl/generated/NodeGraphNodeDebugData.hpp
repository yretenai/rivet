// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct NodeGraphDebugDataBase; 

	struct RIVET_DDL_SHARED NodeGraphNodeDebugData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "NodeGraphNodeDebugData";
		constexpr static rivet::rivet_type_id type_id = 0x452ba46d;

		constexpr static std::string_view AssetId_type_name = "AssetId";
		constexpr static rivet::rivet_type_id AssetId_type_id = 0xb6e788d7;
		constexpr static std::string_view FlattenedId_type_name = "FlattenedId";
		constexpr static rivet::rivet_type_id FlattenedId_type_id = 0xb8bdc402;
		constexpr static std::string_view GraphId_type_name = "GraphId";
		constexpr static rivet::rivet_type_id GraphId_type_id = 0x76b05713;
		constexpr static std::string_view Id_type_name = "Id";
		constexpr static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr static std::string_view Data_type_name = "Data";
		constexpr static rivet::rivet_type_id Data_type_id = 0x9d6333d3; 

		explicit NodeGraphNodeDebugData() = default;
		explicit NodeGraphNodeDebugData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t AssetId {};
		uint64_t FlattenedId {};
		uint64_t GraphId {};
		uint64_t Id {};
		std::shared_ptr<rivet::ddl::generated::NodeGraphDebugDataBase> Data {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodeGraphNodeDebugData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
