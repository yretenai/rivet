// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/EventBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CineCameraEnableManualZoomEvent : EventBase {
		constexpr static std::string_view type_name = "CineCameraEnableManualZoomEvent";
		constexpr static rivet::rivet_type_id type_id = 0x18241865;

		constexpr static std::string_view FOVMin_type_name = "FOVMin";
		constexpr static rivet::rivet_type_id FOVMin_type_id = 0x3a51e47;
		constexpr static std::string_view FOVMax_type_name = "FOVMax";
		constexpr static rivet::rivet_type_id FOVMax_type_id = 0x3fa8211e;
		constexpr static std::string_view FOVSpeedAccel_type_name = "FOVSpeedAccel";
		constexpr static rivet::rivet_type_id FOVSpeedAccel_type_id = 0x66980ec1;
		constexpr static std::string_view FOVSpeedMax_type_name = "FOVSpeedMax";
		constexpr static rivet::rivet_type_id FOVSpeedMax_type_id = 0xe0d74768;
		constexpr static std::string_view FOVSpeedSoftZone_type_name = "FOVSpeedSoftZone";
		constexpr static rivet::rivet_type_id FOVSpeedSoftZone_type_id = 0x542441d4; 

		explicit CineCameraEnableManualZoomEvent() = default;
		explicit CineCameraEnableManualZoomEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float FOVMin {};
		float FOVMax {};
		float FOVSpeedAccel {};
		float FOVSpeedMax {};
		float FOVSpeedSoftZone {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CineCameraEnableManualZoomEvent>;
	};
} // namespace rivet::ddl::generated

// clang-format on
