// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/TouchType.hpp>
#include <rivet/ddl/generated/EventBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED TouchedEvent : EventBase {
		constexpr static std::string_view type_name = "TouchedEvent";
		constexpr static rivet::rivet_type_id type_id = 0x5c1d9299;

		constexpr static std::string_view TouchType_type_name = "TouchType";
		constexpr static rivet::rivet_type_id TouchType_type_id = 0x54aa3293;
		constexpr static std::string_view TouchingCount_type_name = "TouchingCount";
		constexpr static rivet::rivet_type_id TouchingCount_type_id = 0xc17e0cb3;
		constexpr static std::string_view AllInside_type_name = "AllInside";
		constexpr static rivet::rivet_type_id AllInside_type_id = 0xe82edb01; 

		explicit TouchedEvent() = default;
		explicit TouchedEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::TouchType TouchType {};
		int32_t TouchingCount {};
		bool AllInside {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TouchedEvent>;
	};
} // namespace rivet::ddl::generated

// clang-format on
