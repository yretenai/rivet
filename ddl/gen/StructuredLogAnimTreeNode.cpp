// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StructuredLogAnimTreeTriBlendNode.hpp>
#include <rivet/ddl/generated/StructuredLogAnimTreeSnapshotNode.hpp>
#include <rivet/ddl/generated/StructuredLogAnimTreeBindPoseNode.hpp>
#include <rivet/ddl/generated/StructuredLogAnimTreeMirrorNode.hpp>
#include <rivet/ddl/generated/StructuredLogAnimTreeBiBlendNode.hpp>
#include <rivet/ddl/generated/StructuredLogAnimTreeClipNode.hpp>
#include <rivet/ddl/generated/StructuredLogAnimTreePerformanceClipNode.hpp> 

#include <rivet/ddl/generated/StructuredLogAnimTreeNode.hpp>

namespace rivet::ddl::generated {
	StructuredLogAnimTreeNode::StructuredLogAnimTreeNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): StructuredLogStatement(serialized) {
		Type = serialized->get_enum<rivet::ddl::generated::xc87cc46b>(Type_type_id, rivet::ddl::generated::xc87cc46b_values);
		LayerId = serialized->get_uint8(LayerId_type_id);
		DebugFlags = serialized->get_bitset<rivet::ddl::generated::xedfe550a>(DebugFlags_type_id, rivet::ddl::generated::xedfe550a_values);
		Flags = serialized->get_bitset<rivet::ddl::generated::x41912c18>(Flags_type_id, rivet::ddl::generated::x41912c18_values); 
	}

	[[nodiscard]] auto
	StructuredLogAnimTreeNode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StructuredLogAnimTreeNode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StructuredLogAnimTreeNode> {
		if (incoming_type_id == StructuredLogAnimTreeNode::type_id) {
			return std::make_shared<StructuredLogAnimTreeNode>(serialized);
		}

		auto StructuredLogAnimTreePerformanceClipNode_ptr = StructuredLogAnimTreePerformanceClipNode::from_substruct(incoming_type_id, serialized);
		if (StructuredLogAnimTreePerformanceClipNode_ptr != nullptr) {
			return StructuredLogAnimTreePerformanceClipNode_ptr;
		}

		auto StructuredLogAnimTreeBiBlendNode_ptr = StructuredLogAnimTreeBiBlendNode::from_substruct(incoming_type_id, serialized);
		if (StructuredLogAnimTreeBiBlendNode_ptr != nullptr) {
			return StructuredLogAnimTreeBiBlendNode_ptr;
		}

		auto StructuredLogAnimTreeClipNode_ptr = StructuredLogAnimTreeClipNode::from_substruct(incoming_type_id, serialized);
		if (StructuredLogAnimTreeClipNode_ptr != nullptr) {
			return StructuredLogAnimTreeClipNode_ptr;
		}

		auto StructuredLogAnimTreeMirrorNode_ptr = StructuredLogAnimTreeMirrorNode::from_substruct(incoming_type_id, serialized);
		if (StructuredLogAnimTreeMirrorNode_ptr != nullptr) {
			return StructuredLogAnimTreeMirrorNode_ptr;
		}

		auto StructuredLogAnimTreeBindPoseNode_ptr = StructuredLogAnimTreeBindPoseNode::from_substruct(incoming_type_id, serialized);
		if (StructuredLogAnimTreeBindPoseNode_ptr != nullptr) {
			return StructuredLogAnimTreeBindPoseNode_ptr;
		}

		auto StructuredLogAnimTreeSnapshotNode_ptr = StructuredLogAnimTreeSnapshotNode::from_substruct(incoming_type_id, serialized);
		if (StructuredLogAnimTreeSnapshotNode_ptr != nullptr) {
			return StructuredLogAnimTreeSnapshotNode_ptr;
		}

		auto StructuredLogAnimTreeTriBlendNode_ptr = StructuredLogAnimTreeTriBlendNode::from_substruct(incoming_type_id, serialized);
		if (StructuredLogAnimTreeTriBlendNode_ptr != nullptr) {
			return StructuredLogAnimTreeTriBlendNode_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
