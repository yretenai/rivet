// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ProjectileLandedEvent.hpp>
#include <rivet/ddl/generated/ProjectileExplodedEvent.hpp>
#include <rivet/ddl/generated/BurstPistolProjectileHitEvent.hpp>
#include <rivet/ddl/generated/ProjectileBouncedEvent.hpp>
#include <rivet/ddl/generated/ProjectileShockwaveEvent.hpp>
#include <rivet/ddl/generated/ProjectileFirstBounceEvent.hpp>
#include <rivet/ddl/generated/LightningRodProjectileHitEvent.hpp>
#include <rivet/ddl/generated/ProjectileAttachedEvent.hpp> 

#include <rivet/ddl/generated/ProjectileHitEvent.hpp>

namespace rivet::ddl::generated {
	ProjectileHitEvent::ProjectileHitEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		HitSpeed = serialized->get_float(HitSpeed_type_id);
		Material = serialized->get_enum<rivet::ddl::generated::x10b3c4cf>(Material_type_id, rivet::ddl::generated::x10b3c4cf_values);
		PerkName = serialized->get_string(PerkName_type_id);
		EdgeImpact = serialized->get_bool(EdgeImpact_type_id); 
	}

	[[nodiscard]] auto
	ProjectileHitEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ProjectileHitEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ProjectileHitEvent> {
		if (incoming_type_id == ProjectileHitEvent::type_id) {
			return std::make_shared<ProjectileHitEvent>(serialized);
		}

		auto ProjectileAttachedEvent_ptr = ProjectileAttachedEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileAttachedEvent_ptr != nullptr) {
			return ProjectileAttachedEvent_ptr;
		}

		auto ProjectileFirstBounceEvent_ptr = ProjectileFirstBounceEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileFirstBounceEvent_ptr != nullptr) {
			return ProjectileFirstBounceEvent_ptr;
		}

		auto ProjectileShockwaveEvent_ptr = ProjectileShockwaveEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileShockwaveEvent_ptr != nullptr) {
			return ProjectileShockwaveEvent_ptr;
		}

		auto LightningRodProjectileHitEvent_ptr = LightningRodProjectileHitEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodProjectileHitEvent_ptr != nullptr) {
			return LightningRodProjectileHitEvent_ptr;
		}

		auto ProjectileBouncedEvent_ptr = ProjectileBouncedEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileBouncedEvent_ptr != nullptr) {
			return ProjectileBouncedEvent_ptr;
		}

		auto BurstPistolProjectileHitEvent_ptr = BurstPistolProjectileHitEvent::from_substruct(incoming_type_id, serialized);
		if (BurstPistolProjectileHitEvent_ptr != nullptr) {
			return BurstPistolProjectileHitEvent_ptr;
		}

		auto ProjectileExplodedEvent_ptr = ProjectileExplodedEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileExplodedEvent_ptr != nullptr) {
			return ProjectileExplodedEvent_ptr;
		}

		auto ProjectileLandedEvent_ptr = ProjectileLandedEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileLandedEvent_ptr != nullptr) {
			return ProjectileLandedEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
