// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TunnelerBombPrius.hpp>
#include <rivet/ddl/generated/DDLTransform.hpp> 

#include <rivet/ddl/generated/TunnelerBombSpawnData.hpp>

namespace rivet::ddl::generated {
	TunnelerBombSpawnData::TunnelerBombSpawnData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ActorSpawnData(serialized) {
		FiredByHandle = serialized->get_uint64(FiredByHandle_type_id, 0ull);
		AttachToHandle = serialized->get_uint64(AttachToHandle_type_id, 0ull);
		UnsyncedAttachToHandle = serialized->get_uint32(UnsyncedAttachToHandle_type_id, 0u);
		AttachToJoint = serialized->get_int32(AttachToJoint_type_id, 0u);
		SpawnMat = serialized->unwrap_into<rivet::ddl::generated::DDLTransform>(SpawnMat_type_id);
		ActorAsset = serialized->get_uint64(ActorAsset_type_id, 0ull);
		HasParentActor = serialized->get_bool(HasParentActor_type_id, false);
		InstantExplode = serialized->get_bool(InstantExplode_type_id, false);
		BombPrius = serialized->unwrap_into<rivet::ddl::generated::TunnelerBombPrius>(BombPrius_type_id); 
	}

	[[nodiscard]] auto
	TunnelerBombSpawnData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TunnelerBombSpawnData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TunnelerBombSpawnData> {
		if (incoming_type_id == TunnelerBombSpawnData::type_id) {
			return std::make_shared<TunnelerBombSpawnData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
