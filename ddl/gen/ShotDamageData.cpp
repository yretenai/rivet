// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CustomDamageContainer.hpp>
#include <rivet/ddl/generated/KnockbackTierData.hpp> 

#include <rivet/ddl/generated/ShotDamageData.hpp>

namespace rivet::ddl::generated {
	ShotDamageData::ShotDamageData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Damage = serialized->get_float(Damage_type_id);
		DamageType = serialized->get_enum<rivet::ddl::generated::DamageTypes>(DamageType_type_id, rivet::ddl::generated::DamageTypes_values);
		KnockbackTiers = serialized->unwrap_into_many<rivet::ddl::generated::KnockbackTierData>(KnockbackTiers_type_id);
		DamageFlags = serialized->get_bitset<rivet::ddl::generated::x65d7dac2>(DamageFlags_type_id, rivet::ddl::generated::x65d7dac2_values);
		HeadshotMod = serialized->get_float(HeadshotMod_type_id);
		AOE = serialized->get_float(AOE_type_id);
		Impulse = serialized->get_float(Impulse_type_id);
		StatusAmount = serialized->get_float(StatusAmount_type_id);
		IgnoreDuration = serialized->get_float(IgnoreDuration_type_id);
		HitPauseDuration = serialized->get_float(HitPauseDuration_type_id);
		DamageHashString = serialized->get_string(DamageHashString_type_id);
		CustomDamageEntries = serialized->unwrap_into_many<rivet::ddl::generated::CustomDamageContainer>(CustomDamageEntries_type_id); 
	}

	[[nodiscard]] auto
	ShotDamageData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShotDamageData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotDamageData> {
		if (incoming_type_id == ShotDamageData::type_id) {
			return std::make_shared<ShotDamageData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
