// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RenderModeEngineItem.hpp>

namespace rivet::ddl::generated {
	RenderModeEngineItem::RenderModeEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BrightnessScale = serialized->get_float(BrightnessScale_type_id, 0.000000f);
		EditorRenderMode = serialized->get_enum<rivet::ddl::generated::EditorRenderMode>(EditorRenderMode_type_id, rivet::ddl::generated::EditorRenderMode_values, rivet::ddl::generated::EditorRenderMode::Full_Lighting);
		PhysicsCollFlags = serialized->get_bitset<rivet::ddl::generated::PhysicsCollFlags>(PhysicsCollFlags_type_id, rivet::ddl::generated::PhysicsCollFlags_values, 1087u);
		EngineAlwaysActive = serialized->get_bool(EngineAlwaysActive_type_id, true); 
	}

	[[nodiscard]] auto
	RenderModeEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RenderModeEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RenderModeEngineItem> {
		if (incoming_type_id == RenderModeEngineItem::type_id) {
			return std::make_shared<RenderModeEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
