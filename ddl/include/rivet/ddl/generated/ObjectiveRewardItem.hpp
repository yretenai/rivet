// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ObjectiveRewardBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ObjectiveRewardItem : ObjectiveRewardBase {
		constexpr static std::string_view type_name = "ObjectiveRewardItem";
		constexpr static rivet::rivet_type_id type_id = 0xd2cef9fe;

		constexpr static std::string_view ItemConfig_type_name = "ItemConfig";
		constexpr static rivet::rivet_type_id ItemConfig_type_id = 0xa88f833f;
		constexpr static std::string_view Count_type_name = "Count";
		constexpr static rivet::rivet_type_id Count_type_id = 0x9c8a88a3;
		constexpr static std::string_view AutoEquip_type_name = "AutoEquip";
		constexpr static rivet::rivet_type_id AutoEquip_type_id = 0xdf49d3af;
		constexpr static std::string_view ShowOnMisisonComplete_type_name = "ShowOnMisisonComplete";
		constexpr static rivet::rivet_type_id ShowOnMisisonComplete_type_id = 0x107e66a3; 

		explicit ObjectiveRewardItem() = default;
		explicit ObjectiveRewardItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view ItemConfig {};
		uint32_t Count {};
		bool AutoEquip {};
		bool ShowOnMisisonComplete {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ObjectiveRewardItem>;
	};
} // namespace rivet::ddl::generated

// clang-format on
