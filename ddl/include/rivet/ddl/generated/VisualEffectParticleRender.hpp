// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct SeparateUVFlips;
	struct VisualEffectMinMax;
	struct VisualEffectFloat3KeyFrames;
	struct VisualEffectFloat2KeyFrames;
	struct VisualEffectRotationKeyFrames;
	struct VisualEffectColorKeyFrames;
	struct VisualEffectFloatKeyFrames; 

	struct RIVET_DDL_SHARED VisualEffectParticleRender : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VisualEffectParticleRender";
		constexpr static rivet::rivet_type_id type_id = 0x7242fa41;

		constexpr static std::string_view FloatKeyFrames_EmissionLifeTime_type_name = "FloatKeyFrames_EmissionLifeTime";
		constexpr static rivet::rivet_type_id FloatKeyFrames_EmissionLifeTime_type_id = 0x6d814ae;
		constexpr static std::string_view ColorKeyFrames_ParticleColor_type_name = "ColorKeyFrames_ParticleColor";
		constexpr static rivet::rivet_type_id ColorKeyFrames_ParticleColor_type_id = 0xe2f0ae0;
		constexpr static std::string_view Float2KeyFrames_ParticleAlpha_type_name = "Float2KeyFrames_ParticleAlpha";
		constexpr static rivet::rivet_type_id Float2KeyFrames_ParticleAlpha_type_id = 0x433c59c0;
		constexpr static std::string_view FloatKeyFrames_ParticleLuminance_type_name = "FloatKeyFrames_ParticleLuminance";
		constexpr static rivet::rivet_type_id FloatKeyFrames_ParticleLuminance_type_id = 0x96b362fd;
		constexpr static std::string_view Float3KeyFrames_ParticleCustom_type_name = "Float3KeyFrames_ParticleCustom";
		constexpr static rivet::rivet_type_id Float3KeyFrames_ParticleCustom_type_id = 0xb49dff8e;
		constexpr static std::string_view Float3KeyFrames_ParticleScales_type_name = "Float3KeyFrames_ParticleScales";
		constexpr static rivet::rivet_type_id Float3KeyFrames_ParticleScales_type_id = 0xb02e2702;
		constexpr static std::string_view InputPort_ParticleLength_type_name = "InputPort_ParticleLength";
		constexpr static rivet::rivet_type_id InputPort_ParticleLength_type_id = 0x74b526;
		constexpr static std::string_view Float3KeyFrames_ParticleRotation_type_name = "Float3KeyFrames_ParticleRotation";
		constexpr static rivet::rivet_type_id Float3KeyFrames_ParticleRotation_type_id = 0x86c677df;
		constexpr static std::string_view UVFlips_type_name = "UVFlips";
		constexpr static rivet::rivet_type_id UVFlips_type_id = 0xff77e4ad; 

		explicit VisualEffectParticleRender() = default;
		explicit VisualEffectParticleRender([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::VisualEffectFloatKeyFrames> FloatKeyFrames_EmissionLifeTime {};
		std::shared_ptr<rivet::ddl::generated::VisualEffectColorKeyFrames> ColorKeyFrames_ParticleColor {};
		std::shared_ptr<rivet::ddl::generated::VisualEffectFloat2KeyFrames> Float2KeyFrames_ParticleAlpha {};
		std::shared_ptr<rivet::ddl::generated::VisualEffectFloatKeyFrames> FloatKeyFrames_ParticleLuminance {};
		std::shared_ptr<rivet::ddl::generated::VisualEffectFloat3KeyFrames> Float3KeyFrames_ParticleCustom {};
		std::shared_ptr<rivet::ddl::generated::VisualEffectFloat3KeyFrames> Float3KeyFrames_ParticleScales {};
		std::shared_ptr<rivet::ddl::generated::VisualEffectMinMax> InputPort_ParticleLength {};
		std::shared_ptr<rivet::ddl::generated::VisualEffectRotationKeyFrames> Float3KeyFrames_ParticleRotation {};
		std::shared_ptr<rivet::ddl::generated::SeparateUVFlips> UVFlips {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectParticleRender>;
	};
} // namespace rivet::ddl::generated

// clang-format on
