// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xead8c4ad.hpp>
#include <rivet/ddl/generated/enums/x26d01116.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED VaultEntry : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VaultEntry";
		constexpr static rivet::rivet_type_id type_id = 0x9c24e5ac;

		constexpr static std::string_view VaultId_type_name = "VaultId";
		constexpr static rivet::rivet_type_id VaultId_type_id = 0xa8c8332d;
		constexpr static std::string_view Path_type_name = "Path";
		constexpr static rivet::rivet_type_id Path_type_id = 0x3bc44bbf;
		constexpr static std::string_view CreatedBy_type_name = "CreatedBy";
		constexpr static rivet::rivet_type_id CreatedBy_type_id = 0x51abd94e;
		constexpr static std::string_view ModifiedBy_type_name = "ModifiedBy";
		constexpr static rivet::rivet_type_id ModifiedBy_type_id = 0x37cf2924;
		constexpr static std::string_view Status_type_name = "Status";
		constexpr static rivet::rivet_type_id Status_type_id = 0x45782b7b;
		constexpr static std::string_view Error_type_name = "Error";
		constexpr static rivet::rivet_type_id Error_type_id = 0x448e70b0; 

		explicit VaultEntry() = default;
		explicit VaultEntry([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t VaultId {};
		std::string_view Path {};
		std::string_view CreatedBy {};
		std::string_view ModifiedBy {};
		rivet::ddl::generated::x26d01116 Status {};
		rivet::ddl::generated::xead8c4ad Error {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VaultEntry>;
	};
} // namespace rivet::ddl::generated

// clang-format on
