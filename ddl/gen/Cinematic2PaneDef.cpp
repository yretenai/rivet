// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2IdMapDef.hpp> 

#include <rivet/ddl/generated/Cinematic2PaneDef.hpp>

namespace rivet::ddl::generated {
	Cinematic2PaneDef::Cinematic2PaneDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id);
		PaneId = serialized->get_enum<rivet::ddl::generated::xe916d2e3>(PaneId_type_id, rivet::ddl::generated::xe916d2e3_values);
		NearClipPlane = serialized->get_float(NearClipPlane_type_id);
		FarClipPlane = serialized->get_float(FarClipPlane_type_id);
		LodScaleMultiplier = serialized->get_float(LodScaleMultiplier_type_id);
		ImpostorHQBaseDistance = serialized->get_float(ImpostorHQBaseDistance_type_id);
		CameraIds = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2IdMapDef>(CameraIds_type_id);
		LightGroupIds = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2IdMapDef>(LightGroupIds_type_id); 
	}

	[[nodiscard]] auto
	Cinematic2PaneDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2PaneDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2PaneDef> {
		if (incoming_type_id == Cinematic2PaneDef::type_id) {
			return std::make_shared<Cinematic2PaneDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
