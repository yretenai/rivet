// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/UI_MaterialNodeInputPortColor.hpp>

namespace rivet::ddl::generated {
	UI_MaterialNodeInputPortColor::UI_MaterialNodeInputPortColor([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DisplayName = serialized->get_string(DisplayName_type_id, {});
		Values = serialized->get_string(Values_type_id, {});
		TestingOnly = serialized->get_bool(TestingOnly_type_id, false);
		IsConnected = serialized->get_bool(IsConnected_type_id, false);
		InternalSortOrder = serialized->get_int32(InternalSortOrder_type_id, 0u);
		UserDefinedLabels = serialized->get_bool(UserDefinedLabels_type_id, false);
		LinearFilter = serialized->get_bool(LinearFilter_type_id, false);
		Exposed = serialized->get_bool(Exposed_type_id, false);
		Global = serialized->get_bool(Global_type_id, false);
		Group = serialized->get_string(Group_type_id, {});
		SortOrder = serialized->get_int32(SortOrder_type_id, 0u);
		Description = serialized->get_string(Description_type_id, {});
		Labels = serialized->get_string(Labels_type_id, {});
		ShowExposed = serialized->get_bool(ShowExposed_type_id, true);
		ShowGlobal = serialized->get_bool(ShowGlobal_type_id, true);
		Color = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Color_type_id); 
	}

	[[nodiscard]] auto
	UI_MaterialNodeInputPortColor::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UI_MaterialNodeInputPortColor::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UI_MaterialNodeInputPortColor> {
		if (incoming_type_id == UI_MaterialNodeInputPortColor::type_id) {
			return std::make_shared<UI_MaterialNodeInputPortColor>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
