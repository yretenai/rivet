// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CineCameraEnableYawPitchEvent.hpp>

namespace rivet::ddl::generated {
	CineCameraEnableYawPitchEvent::CineCameraEnableYawPitchEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		YawMin = serialized->get_float(YawMin_type_id, -10.000000f);
		YawMax = serialized->get_float(YawMax_type_id, 10.000000f);
		YawSoftZone = serialized->get_float(YawSoftZone_type_id, 3.000000f);
		PitchMin = serialized->get_float(PitchMin_type_id, -5.000000f);
		PitchMax = serialized->get_float(PitchMax_type_id, 5.000000f);
		PitchSoftZone = serialized->get_float(PitchSoftZone_type_id, 3.000000f);
		StickConfig = serialized->get_string(StickConfig_type_id, {}); 
	}

	[[nodiscard]] auto
	CineCameraEnableYawPitchEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CineCameraEnableYawPitchEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CineCameraEnableYawPitchEvent> {
		if (incoming_type_id == CineCameraEnableYawPitchEvent::type_id) {
			return std::make_shared<CineCameraEnableYawPitchEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
