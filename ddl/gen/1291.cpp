// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PhotoLightMoveOrbitData.hpp>

namespace rivet::ddl::generated {
	PhotoLightMoveOrbitData::PhotoLightMoveOrbitData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MinDistance = serialized->get_float(MinDistance_type_id);
		MaxDistance = serialized->get_float(MaxDistance_type_id);
		MinHeight = serialized->get_float(MinHeight_type_id);
		MaxHeight = serialized->get_float(MaxHeight_type_id);
		OrbitRateScale = serialized->get_float(OrbitRateScale_type_id);
		UpDownScale = serialized->get_float(UpDownScale_type_id);
		NearFarScale = serialized->get_float(NearFarScale_type_id);
		StartMoveScale = serialized->get_float(StartMoveScale_type_id);
		FinalMoveScale = serialized->get_float(FinalMoveScale_type_id);
		MoveScaleTime = serialized->get_float(MoveScaleTime_type_id); 
	}

	auto
	PhotoLightMoveOrbitData::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	PhotoLightMoveOrbitData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PhotoLightMoveOrbitData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PhotoLightMoveOrbitData> {
		if (incoming_type_id == PhotoLightMoveOrbitData::type_id) {
			return std::make_shared<PhotoLightMoveOrbitData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
