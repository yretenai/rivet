// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/PlacedCameraPrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED FixedCameraPrius : PlacedCameraPrius {
		constexpr const static std::string_view type_name = "FixedCameraPrius";
		constexpr const static rivet::rivet_type_id type_id = 0xcb01aa04;

		constexpr const static std::string_view ZeroSettle_type_name = "ZeroSettle";
		constexpr const static rivet::rivet_type_id ZeroSettle_type_id = 0xc455894b;
		constexpr const static std::string_view LockPosition_type_name = "LockPosition";
		constexpr const static rivet::rivet_type_id LockPosition_type_id = 0x68b14458;
		constexpr const static std::string_view ResetOnActivate_type_name = "ResetOnActivate";
		constexpr const static rivet::rivet_type_id ResetOnActivate_type_id = 0x5a8accb9;
		constexpr const static std::string_view StickConfig_type_name = "StickConfig";
		constexpr const static rivet::rivet_type_id StickConfig_type_id = 0x3bc8f276; 

		explicit FixedCameraPrius() = default;
		explicit FixedCameraPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool ZeroSettle {};
		bool LockPosition {};
		bool ResetOnActivate {};
		std::string_view StickConfig {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FixedCameraPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
