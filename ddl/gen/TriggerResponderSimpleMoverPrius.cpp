// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/TriggerResponderSimpleMoverPrius.hpp>

namespace rivet::ddl::generated {
	TriggerResponderSimpleMoverPrius::TriggerResponderSimpleMoverPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): TriggerResponderBasePrius(serialized) {
		PositionOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(PositionOffset_type_id);
		YawOffset = serialized->get_float(YawOffset_type_id, 0.000000f);
		PitchOffset = serialized->get_float(PitchOffset_type_id, 0.000000f);
		Duration = serialized->get_float(Duration_type_id, 0.000000f);
		PositionActor = serialized->get_uint64(PositionActor_type_id, 0ull);
		OverrideMotionType = serialized->get_enum<rivet::ddl::generated::MotionTypes>(OverrideMotionType_type_id, rivet::ddl::generated::MotionTypes_values, rivet::ddl::generated::MotionTypes::SmoothStep); 
	}

	[[nodiscard]] auto
	TriggerResponderSimpleMoverPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TriggerResponderSimpleMoverPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerResponderSimpleMoverPrius> {
		if (incoming_type_id == TriggerResponderSimpleMoverPrius::type_id) {
			return std::make_shared<TriggerResponderSimpleMoverPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
