// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PickupSpawnerOnBreakPrius.hpp>
#include <rivet/ddl/generated/PickupSpawnerPlacedPrius.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/DropSet.hpp> 

#include <rivet/ddl/generated/PickupSpawnerPrius.hpp>

namespace rivet::ddl::generated {
	PickupSpawnerPrius::PickupSpawnerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DropSetList = serialized->unwrap_into_many<rivet::ddl::generated::DropSet>(DropSetList_type_id);
		DropChance = serialized->get_float(DropChance_type_id);
		FixedSpawn = serialized->get_bool(FixedSpawn_type_id);
		SpawnOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(SpawnOffset_type_id); 
	}

	[[nodiscard]] auto
	PickupSpawnerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PickupSpawnerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PickupSpawnerPrius> {
		if (incoming_type_id == PickupSpawnerPrius::type_id) {
			return std::make_shared<PickupSpawnerPrius>(serialized);
		}

		auto PickupSpawnerPlacedPrius_ptr = PickupSpawnerPlacedPrius::from_substruct(incoming_type_id, serialized);
		if (PickupSpawnerPlacedPrius_ptr != nullptr) {
			return PickupSpawnerPlacedPrius_ptr;
		}

		auto PickupSpawnerOnBreakPrius_ptr = PickupSpawnerOnBreakPrius::from_substruct(incoming_type_id, serialized);
		if (PickupSpawnerOnBreakPrius_ptr != nullptr) {
			return PickupSpawnerOnBreakPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
