// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <string_view>
#include <array>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_keywords.hpp>

namespace rivet::ddl::generated {
	constexpr const static std::string_view xa80df7b6_type_name = "xa80df7b6";
	constexpr const static rivet::rivet_type_id xa80df7b6_type_id = 0xa80df7b6;

	constexpr const static std::array<std::tuple<std::string_view, uint64_t>, 16> xa80df7b6_values = {
		std::make_tuple("kAlwaysAllowFire", 0x1),
		std::make_tuple("kPassiveFire", 0x2),
		std::make_tuple("kNoLockExternal", 0x4),
		std::make_tuple("kRequireAimMode", 0x8),
		std::make_tuple("kRequestAimMode", 0x10),
		std::make_tuple("kOnlyIfAimMode", 0x20),
		std::make_tuple("kNotInAimMode", 0x40),
		std::make_tuple("kAllowReadyingFire", 0x80),
		std::make_tuple("kUniversalRateOfFire", 0x100),
		std::make_tuple("kAllowDeferredFire", 0x200),
		std::make_tuple("kIgnoreNoFireAnim", 0x400),
		std::make_tuple("kFireOnEquip", 0x800),
		std::make_tuple("kNoTargetingData", 0x1000),
		std::make_tuple("kIsFullBodyAnim", 0x2000),
		std::make_tuple("kNoRecoil", 0x4000),
		std::make_tuple("kNone", 0x0), 
	};

	enum class xa80df7b6 : uint64_t {
		AlwaysAllowFire = 0x1,
		PassiveFire = 0x2,
		NoLockExternal = 0x4,
		RequireAimMode = 0x8,
		RequestAimMode = 0x10,
		OnlyIfAimMode = 0x20,
		NotInAimMode = 0x40,
		AllowReadyingFire = 0x80,
		UniversalRateOfFire = 0x100,
		AllowDeferredFire = 0x200,
		IgnoreNoFireAnim = 0x400,
		FireOnEquip = 0x800,
		NoTargetingData = 0x1000,
		IsFullBodyAnim = 0x2000,
		NoRecoil = 0x4000,
		None = 0x0, 
	};
} // namespace rivet::ddl::generated

// clang-format on
