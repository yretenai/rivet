// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HoverbootOmniBoostPadPrius.hpp>

namespace rivet::ddl::generated {
	HoverbootOmniBoostPadPrius::HoverbootOmniBoostPadPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EnabledComponentBasePrius(serialized) {
		RotationJointName = serialized->get_string(RotationJointName_type_id, "inset");
		DetectRangeMin = serialized->get_float(DetectRangeMin_type_id, 3.000000);
		DetectRangeMaxSlow = serialized->get_float(DetectRangeMaxSlow_type_id, 10.000000);
		DetectRangeMaxFast = serialized->get_float(DetectRangeMaxFast_type_id, 20.000000);
		DetectSlowSpeed = serialized->get_float(DetectSlowSpeed_type_id, 10.000000);
		DetectFastSpeed = serialized->get_float(DetectFastSpeed_type_id, 18.000000); 
	}

	[[nodiscard]] auto
	HoverbootOmniBoostPadPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HoverbootOmniBoostPadPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HoverbootOmniBoostPadPrius> {
		if (incoming_type_id == HoverbootOmniBoostPadPrius::type_id) {
			return std::make_shared<HoverbootOmniBoostPadPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
