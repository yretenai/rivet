// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroCinematicTransitionDataAlertedIdle.hpp>
#include <rivet/ddl/generated/HeroCinematicTransitionDataRiftTether.hpp>
#include <rivet/ddl/generated/HeroCinematicTransitionDataMount.hpp>
#include <rivet/ddl/generated/HeroCinematicTransitionDataSwim.hpp>
#include <rivet/ddl/generated/HeroCinematicTransitionDataSkyDive.hpp>
#include <rivet/ddl/generated/HeroCinematicTransitionDataSlide.hpp>
#include <rivet/ddl/generated/HeroCinematicTransitionDataGrindLand.hpp>
#include <rivet/ddl/generated/HeroCinematicTransitionDataGrind.hpp> 

#include <rivet/ddl/generated/HeroCinematicTransitionDataBase.hpp>

namespace rivet::ddl::generated {
	HeroCinematicTransitionDataBase::HeroCinematicTransitionDataBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	HeroCinematicTransitionDataBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroCinematicTransitionDataBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroCinematicTransitionDataBase> {
		if (incoming_type_id == HeroCinematicTransitionDataBase::type_id) {
			return std::make_shared<HeroCinematicTransitionDataBase>(serialized);
		}

		auto HeroCinematicTransitionDataGrind_ptr = HeroCinematicTransitionDataGrind::from_substruct(incoming_type_id, serialized);
		if (HeroCinematicTransitionDataGrind_ptr != nullptr) {
			return HeroCinematicTransitionDataGrind_ptr;
		}

		auto HeroCinematicTransitionDataGrindLand_ptr = HeroCinematicTransitionDataGrindLand::from_substruct(incoming_type_id, serialized);
		if (HeroCinematicTransitionDataGrindLand_ptr != nullptr) {
			return HeroCinematicTransitionDataGrindLand_ptr;
		}

		auto HeroCinematicTransitionDataSkyDive_ptr = HeroCinematicTransitionDataSkyDive::from_substruct(incoming_type_id, serialized);
		if (HeroCinematicTransitionDataSkyDive_ptr != nullptr) {
			return HeroCinematicTransitionDataSkyDive_ptr;
		}

		auto HeroCinematicTransitionDataRiftTether_ptr = HeroCinematicTransitionDataRiftTether::from_substruct(incoming_type_id, serialized);
		if (HeroCinematicTransitionDataRiftTether_ptr != nullptr) {
			return HeroCinematicTransitionDataRiftTether_ptr;
		}

		auto HeroCinematicTransitionDataSwim_ptr = HeroCinematicTransitionDataSwim::from_substruct(incoming_type_id, serialized);
		if (HeroCinematicTransitionDataSwim_ptr != nullptr) {
			return HeroCinematicTransitionDataSwim_ptr;
		}

		auto HeroCinematicTransitionDataAlertedIdle_ptr = HeroCinematicTransitionDataAlertedIdle::from_substruct(incoming_type_id, serialized);
		if (HeroCinematicTransitionDataAlertedIdle_ptr != nullptr) {
			return HeroCinematicTransitionDataAlertedIdle_ptr;
		}

		auto HeroCinematicTransitionDataSlide_ptr = HeroCinematicTransitionDataSlide::from_substruct(incoming_type_id, serialized);
		if (HeroCinematicTransitionDataSlide_ptr != nullptr) {
			return HeroCinematicTransitionDataSlide_ptr;
		}

		auto HeroCinematicTransitionDataMount_ptr = HeroCinematicTransitionDataMount::from_substruct(incoming_type_id, serialized);
		if (HeroCinematicTransitionDataMount_ptr != nullptr) {
			return HeroCinematicTransitionDataMount_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
