// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/EmergentVOManagerRoboMuttPrius.hpp>
#include <rivet/ddl/generated/EmergentVOManagerVoiceSwitches.hpp>
#include <rivet/ddl/generated/LookGroupVoiceOverrideData.hpp> 

#include <rivet/ddl/generated/EmergentVOManagerBotPrius.hpp>

namespace rivet::ddl::generated {
	EmergentVOManagerBotPrius::EmergentVOManagerBotPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EmergentVOManagerGamePrius(serialized) {
		LookGroupVoiceOverrideData = serialized->unwrap_into<rivet::ddl::generated::LookGroupVoiceOverrideData>(LookGroupVoiceOverrideData_type_id);
		VoiceSwitches = serialized->unwrap_into_many<rivet::ddl::generated::EmergentVOManagerVoiceSwitches>(VoiceSwitches_type_id);
		MaxDistance = serialized->get_float(MaxDistance_type_id);
		OffScreenApproachingTaunt = serialized->get_float(OffScreenApproachingTaunt_type_id); 
	}

	[[nodiscard]] auto
	EmergentVOManagerBotPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	EmergentVOManagerBotPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EmergentVOManagerBotPrius> {
		if (incoming_type_id == EmergentVOManagerBotPrius::type_id) {
			return std::make_shared<EmergentVOManagerBotPrius>(serialized);
		}

		auto EmergentVOManagerRoboMuttPrius_ptr = EmergentVOManagerRoboMuttPrius::from_substruct(incoming_type_id, serialized);
		if (EmergentVOManagerRoboMuttPrius_ptr != nullptr) {
			return EmergentVOManagerRoboMuttPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
