// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BirdAnimItem.hpp> 

#include <rivet/ddl/generated/BirdPrius.hpp>

namespace rivet::ddl::generated {
	BirdPrius::BirdPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): FlockablePrius(serialized) {
		MinSpeed = serialized->get_float(MinSpeed_type_id);
		MaxSpeed = serialized->get_float(MaxSpeed_type_id);
		MinAccel = serialized->get_float(MinAccel_type_id);
		MaxAccel = serialized->get_float(MaxAccel_type_id);
		MinScale = serialized->get_float(MinScale_type_id);
		MaxScale = serialized->get_float(MaxScale_type_id);
		MinAnimRate = serialized->get_float(MinAnimRate_type_id);
		MaxAnimRate = serialized->get_float(MaxAnimRate_type_id);
		FlutterRange = serialized->get_float(FlutterRange_type_id);
		MaxFlutterRate = serialized->get_float(MaxFlutterRate_type_id);
		MinFleeReactionTime = serialized->get_float(MinFleeReactionTime_type_id);
		FleeReactionTime = serialized->get_float(FleeReactionTime_type_id);
		FleeDesperationTime = serialized->get_float(FleeDesperationTime_type_id);
		FleeFailureTime = serialized->get_float(FleeFailureTime_type_id);
		FleeAngle = serialized->get_float(FleeAngle_type_id);
		MinFleeDistance = serialized->get_float(MinFleeDistance_type_id);
		FleeFadeDelay = serialized->get_float(FleeFadeDelay_type_id);
		FlyAnims = serialized->unwrap_into_many<rivet::ddl::generated::BirdAnimItem>(FlyAnims_type_id);
		LandedAnims = serialized->unwrap_into_many<rivet::ddl::generated::BirdAnimItem>(LandedAnims_type_id);
		TakeOffAnim = serialized->get_string(TakeOffAnim_type_id); 
	}

	[[nodiscard]] auto
	BirdPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BirdPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BirdPrius> {
		if (incoming_type_id == BirdPrius::type_id) {
			return std::make_shared<BirdPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
