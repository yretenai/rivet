// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PrereqNodeBaseDef.hpp>
#include <rivet/ddl/generated/ObjectiveNodeSharedDef.hpp>
#include <rivet/ddl/generated/MissionSystemLogicNodeDef.hpp>
#include <rivet/ddl/generated/MissionNodeSharedDef.hpp>
#include <rivet/ddl/generated/OutputPlugBoolean.hpp>
#include <rivet/ddl/generated/InputPlugBoolean.hpp> 

#include <rivet/ddl/generated/MissionSystemDefaultNodeBaseDef.hpp>

namespace rivet::ddl::generated {
	MissionSystemDefaultNodeBaseDef::MissionSystemDefaultNodeBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): MissionSystemNodeBaseDef(serialized) {
		Inputs = serialized->unwrap_into_many<rivet::ddl::generated::InputPlugBoolean>(Inputs_type_id);
		Output = serialized->unwrap_into<rivet::ddl::generated::OutputPlugBoolean>(Output_type_id); 
	}

	[[nodiscard]] auto
	MissionSystemDefaultNodeBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MissionSystemDefaultNodeBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionSystemDefaultNodeBaseDef> {
		if (incoming_type_id == MissionSystemDefaultNodeBaseDef::type_id) {
			return std::make_shared<MissionSystemDefaultNodeBaseDef>(serialized);
		}

		auto MissionNodeSharedDef_ptr = MissionNodeSharedDef::from_substruct(incoming_type_id, serialized);
		if (MissionNodeSharedDef_ptr != nullptr) {
			return MissionNodeSharedDef_ptr;
		}

		auto MissionSystemLogicNodeDef_ptr = MissionSystemLogicNodeDef::from_substruct(incoming_type_id, serialized);
		if (MissionSystemLogicNodeDef_ptr != nullptr) {
			return MissionSystemLogicNodeDef_ptr;
		}

		auto ObjectiveNodeSharedDef_ptr = ObjectiveNodeSharedDef::from_substruct(incoming_type_id, serialized);
		if (ObjectiveNodeSharedDef_ptr != nullptr) {
			return ObjectiveNodeSharedDef_ptr;
		}

		auto PrereqNodeBaseDef_ptr = PrereqNodeBaseDef::from_substruct(incoming_type_id, serialized);
		if (PrereqNodeBaseDef_ptr != nullptr) {
			return PrereqNodeBaseDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
