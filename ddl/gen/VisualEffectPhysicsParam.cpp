// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector2.hpp> 

#include <rivet/ddl/generated/VisualEffectPhysicsParam.hpp>

namespace rivet::ddl::generated {
	VisualEffectPhysicsParam::VisualEffectPhysicsParam([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CollisionRotationSpeedDecay = serialized->get_float(CollisionRotationSpeedDecay_type_id);
		CollisionBeamClamp = serialized->get_float(CollisionBeamClamp_type_id);
		CollisionBeamScale = serialized->get_float(CollisionBeamScale_type_id);
		CollisionLifeScale = serialized->get_float(CollisionLifeScale_type_id);
		CollisionDistance = serialized->get_float(CollisionDistance_type_id);
		CollisionRadius = serialized->get_float(CollisionRadius_type_id);
		CollisionMass = serialized->get_float(CollisionMass_type_id);
		CollisionRestitution = serialized->get_float(CollisionRestitution_type_id);
		CollisionFriction = serialized->get_float(CollisionFriction_type_id);
		CollisionLinearDamping = serialized->get_float(CollisionLinearDamping_type_id);
		CollisionGravityMultiplier = serialized->get_float(CollisionGravityMultiplier_type_id);
		CollisionStartTime = serialized->get_float(CollisionStartTime_type_id);
		CollisionModel = serialized->get_string(CollisionModel_type_id);
		CollisionAngularVelocity = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(CollisionAngularVelocity_type_id); 
	}

	[[nodiscard]] auto
	VisualEffectPhysicsParam::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VisualEffectPhysicsParam::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectPhysicsParam> {
		if (incoming_type_id == VisualEffectPhysicsParam::type_id) {
			return std::make_shared<VisualEffectPhysicsParam>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
