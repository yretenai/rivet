// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SoundPortalingSettings.hpp> 

#include <rivet/ddl/generated/SoundSettings.hpp>

namespace rivet::ddl::generated {
	SoundSettings::SoundSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id, true);
		DefaultPoolSize = serialized->get_uint32(DefaultPoolSize_type_id, 10485760u);
		LowerEnginePoolSize = serialized->get_uint32(LowerEnginePoolSize_type_id, 10485760u);
		MonitorPoolSize = serialized->get_uint32(MonitorPoolSize_type_id, 524288u);
		CommunicationPoolSize = serialized->get_uint32(CommunicationPoolSize_type_id, 524288u);
		PlayingItemPoolSize = serialized->get_uint32(PlayingItemPoolSize_type_id, 524288u);
		StreamingBufferSize = serialized->get_uint32(StreamingBufferSize_type_id, 2097152u);
		MonitorQueuePoolSize = serialized->get_uint32(MonitorQueuePoolSize_type_id, 524288u);
		CommandQueueSize = serialized->get_uint32(CommandQueueSize_type_id, 524288u);
		EnableSoundStreaming = serialized->get_bool(EnableSoundStreaming_type_id, true);
		MaxMemPoolCount = serialized->get_uint32(MaxMemPoolCount_type_id, 96u);
		MaxConcurrentIO = serialized->get_uint32(MaxConcurrentIO_type_id, 384u);
		StreamGranularity = serialized->get_uint32(StreamGranularity_type_id, 131072u);
		StreamBufferDurationTarget = serialized->get_float(StreamBufferDurationTarget_type_id, 220.000000f);
		DiscoveryPort = serialized->get_uint16(DiscoveryPort_type_id, 65535u);
		CommandPort = serialized->get_uint16(CommandPort_type_id, 0u);
		NotificationPort = serialized->get_uint16(NotificationPort_type_id, 0u);
		AppName = serialized->get_string(AppName_type_id, "Unknown (NAME ME!)");
		MotionBusName = serialized->get_string(MotionBusName_type_id, "MASTER_MOTION_BUS");
		ControllerSpeakerBusName = serialized->get_string(ControllerSpeakerBusName_type_id, "Master Controller Speaker Bus");
		ControllerBusName = serialized->get_string(ControllerBusName_type_id, "MASTER_PCW_BUS");
		ControllerSharesetName = serialized->get_string(ControllerSharesetName_type_id, "PPR_Controller_Win");
		SceAudio3DSharesetName = serialized->get_string(SceAudio3DSharesetName_type_id, "SCE_Audio3d_Bed_Output");
		SceChannelSharesetName = serialized->get_string(SceChannelSharesetName_type_id, "SCE_Audio3d_Bed_Output_71");
		HeadphonesWwiseStateName = serialized->get_string(HeadphonesWwiseStateName_type_id, "Headphones_PluggedIn_STATE");
		HeadphonesWwiseStateTrueString = serialized->get_string(HeadphonesWwiseStateTrueString_type_id, "Headphones_PluggedIn_STATE_True");
		HeadphonesWwiseStateFalseString = serialized->get_string(HeadphonesWwiseStateFalseString_type_id, "Headphones_PluggedIn_STATE_False");
		HeadphonesPluggedInRTPCName = serialized->get_string(HeadphonesPluggedInRTPCName_type_id, "Headphones_PluggedIn_RTPC");
		Audio3DWwiseStateName = serialized->get_string(Audio3DWwiseStateName_type_id, "OUTPUT_3D");
		Audio3DWwiseStateOn = serialized->get_string(Audio3DWwiseStateOn_type_id, "ON");
		Audio3DWwiseStateOff = serialized->get_string(Audio3DWwiseStateOff_type_id, "OFF");
		Audio3DWwiseRtpcName = serialized->get_string(Audio3DWwiseRtpcName_type_id, "OUTPUT_3D");
		MonoEnabledRTPCName = serialized->get_string(MonoEnabledRTPCName_type_id, "Mono_Mode");
		MonoEnabledStateGroupName = serialized->get_string(MonoEnabledStateGroupName_type_id, "Mono_Mode");
		MonoEnabledStateGroupTrueName = serialized->get_string(MonoEnabledStateGroupTrueName_type_id, "Mono_Mode_True");
		MonoEnabledStateGroupFalseName = serialized->get_string(MonoEnabledStateGroupFalseName_type_id, "Mono_Mode_False");
		MaxAllocations = serialized->get_uint32(MaxAllocations_type_id, 128u);
		MaxSources = serialized->get_uint32(MaxSources_type_id, 4096u);
		MaxActiveSources = serialized->get_uint32(MaxActiveSources_type_id, 2048u);
		MaxQueuedSoundSourcesToUnregisterCount = serialized->get_uint32(MaxQueuedSoundSourcesToUnregisterCount_type_id, 256u);
		MaxEvents = serialized->get_uint32(MaxEvents_type_id, 2048u);
		MaxCallbacks = serialized->get_uint32(MaxCallbacks_type_id, 256u);
		MaxLoadingEvents = serialized->get_uint32(MaxLoadingEvents_type_id, 1024u);
		MaxStopsForLoadingEvents = serialized->get_uint32(MaxStopsForLoadingEvents_type_id, 8u);
		MaxMusicCues = serialized->get_uint32(MaxMusicCues_type_id, 64u);
		MaxActiveMusicEvents = serialized->get_uint32(MaxActiveMusicEvents_type_id, 4u);
		MaxSubscribableMusicCues = serialized->get_uint32(MaxSubscribableMusicCues_type_id, 8u);
		MaxEnvironments = serialized->get_uint32(MaxEnvironments_type_id, 1024u);
		MaxActiveEnvironments = serialized->get_uint32(MaxActiveEnvironments_type_id, 16u);
		MaxWwiseErrors = serialized->get_uint32(MaxWwiseErrors_type_id, 256u);
		MaxOrpahnedEvents = serialized->get_uint32(MaxOrpahnedEvents_type_id, 256u);
		OrphanedEventTimeout = serialized->get_float(OrphanedEventTimeout_type_id, 10.000000f);
		EnableExternalSources = serialized->get_bool(EnableExternalSources_type_id, true);
		ExternalSourceEventName = serialized->get_string(ExternalSourceEventName_type_id, "Play_ExternalSound");
		ExternalSourceSourceName = serialized->get_string(ExternalSourceSourceName_type_id, "ExternalSoundSource");
		AudioSyncBank = serialized->get_string(AudioSyncBank_type_id, "sound\\banks\\cinematic_framelock.soundbank");
		AudioSyncEventName = serialized->get_string(AudioSyncEventName_type_id, "Play_CIN_Framelock_Loop_10Sec");
		AudioSyncEventDuration = serialized->get_float(AudioSyncEventDuration_type_id, 10.000000f);
		PerSourceInstanceWarningThreshold = serialized->get_uint16(PerSourceInstanceWarningThreshold_type_id, 10u);
		GlobalInstanceWarningThreshold = serialized->get_uint16(GlobalInstanceWarningThreshold_type_id, 200u);
		ActiveSourceWarningThreshold = serialized->get_uint16(ActiveSourceWarningThreshold_type_id, 200u);
		ListeningMode = serialized->get_enum<rivet::ddl::generated::ListeningMode>(ListeningMode_type_id, rivet::ddl::generated::ListeningMode_values, rivet::ddl::generated::ListeningMode::ListeningModeSpeakers);
		ForceListeningMode = serialized->get_bool(ForceListeningMode_type_id, false);
		DelayLoadForVOSwap = serialized->get_bool(DelayLoadForVOSwap_type_id, false);
		MaxPersistentStateGroups = serialized->get_uint32(MaxPersistentStateGroups_type_id, 8u);
		DopplerRTPC = serialized->get_string(DopplerRTPC_type_id, "DopplerShift");
		SoundSpeed = serialized->get_float(SoundSpeed_type_id, 343.216003f);
		DopplerFilter = serialized->get_float(DopplerFilter_type_id, 0.100000f);
		Propagation2Enabled = serialized->get_bool(Propagation2Enabled_type_id, false);
		EnableDirectPathPropagation = serialized->get_bool(EnableDirectPathPropagation_type_id, false);
		EnableSourceDependentReverb = serialized->get_bool(EnableSourceDependentReverb_type_id, false);
		PortalingConfig = serialized->unwrap_into<rivet::ddl::generated::SoundPortalingSettings>(PortalingConfig_type_id);
		DebugDeactivateSound = serialized->get_bool(DebugDeactivateSound_type_id, false);
		ShowDebugStatsHud = serialized->get_bool(ShowDebugStatsHud_type_id, false);
		SoundLogChannels = serialized->get_enum<rivet::ddl::generated::SoundLogChannels>(SoundLogChannels_type_id, rivet::ddl::generated::SoundLogChannels_values, rivet::ddl::generated::SoundLogChannels::SoundLogChannelWwise);
		RTPCLoggingMode = serialized->get_enum<rivet::ddl::generated::x620d9719>(RTPCLoggingMode_type_id, rivet::ddl::generated::x620d9719_values, rivet::ddl::generated::x620d9719::RTPCLogModeOff);
		AssertWwiseErrors = serialized->get_bool(AssertWwiseErrors_type_id, true);
		PrintWwiseErrors = serialized->get_bool(PrintWwiseErrors_type_id, true);
		ShowWwiseNoErrorErrors = serialized->get_bool(ShowWwiseNoErrorErrors_type_id, false);
		SoundDebugViewSoundSources = serialized->get_bool(SoundDebugViewSoundSources_type_id, false);
		SoundDebugViewListener = serialized->get_bool(SoundDebugViewListener_type_id, false);
		DelayThresholdDisplaySoundbankMessage = serialized->get_float(DelayThresholdDisplaySoundbankMessage_type_id, 0.500000f);
		DebugOutOfRangeCheckEnabled = serialized->get_bool(DebugOutOfRangeCheckEnabled_type_id, false);
		WwiseProfileCaptureOnBoot = serialized->get_bool(WwiseProfileCaptureOnBoot_type_id, false);
		SoundEngineConfig = serialized->get_string(SoundEngineConfig_type_id, "configs\\SoundConfig\\SoundEngineConfig.config");
		SoundListenerConfig = serialized->get_string(SoundListenerConfig_type_id, "configs\\SoundConfig\\SoundListenerConfig.config");
		EarlyReflectionsConfig = serialized->get_string(EarlyReflectionsConfig_type_id, "configs\\SoundConfig\\EarlyReflections.config"); 
	}

	[[nodiscard]] auto
	SoundSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SoundSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundSettings> {
		if (incoming_type_id == SoundSettings::type_id) {
			return std::make_shared<SoundSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
