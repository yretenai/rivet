// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ScriptedShotEffectBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct ScriptedShotEffectListElement; 

	struct RIVET_DDL_SHARED CreateAOEPrius : ScriptedShotEffectBasePrius {
		constexpr const static std::string_view type_name = "CreateAOEPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x4c8cfecd;

		constexpr const static std::string_view Radius_type_name = "Radius";
		constexpr const static rivet::rivet_type_id Radius_type_id = 0x504203d;
		constexpr const static std::string_view LOS_type_name = "LOS";
		constexpr const static rivet::rivet_type_id LOS_type_id = 0x115a911b;
		constexpr const static std::string_view TriggerExplode_type_name = "TriggerExplode";
		constexpr const static rivet::rivet_type_id TriggerExplode_type_id = 0xab842fb0;
		constexpr const static std::string_view IgnoreHitActor_type_name = "IgnoreHitActor";
		constexpr const static rivet::rivet_type_id IgnoreHitActor_type_id = 0x39c79f3;
		constexpr const static std::string_view AOESubEffects_type_name = "AOESubEffects";
		constexpr const static rivet::rivet_type_id AOESubEffects_type_id = 0x6683fcbf; 

		explicit CreateAOEPrius() = default;
		explicit CreateAOEPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float Radius {};
		bool LOS {};
		bool TriggerExplode {};
		bool IgnoreHitActor {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ScriptedShotEffectListElement>> AOESubEffects {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CreateAOEPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
