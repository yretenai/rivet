// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DamageEvent.hpp>
#include <rivet/ddl/generated/HealDealtEvent.hpp>
#include <rivet/ddl/generated/DamageDealtIgnoredEvent.hpp>
#include <rivet/ddl/generated/ProjectileBlockedEvent.hpp>
#include <rivet/ddl/generated/IgnoreInvulnerableEvent.hpp>
#include <rivet/ddl/generated/HealEvent.hpp>
#include <rivet/ddl/generated/DamageDealtEvent.hpp>
#include <rivet/ddl/generated/BlockEvent.hpp>
#include <rivet/ddl/generated/BlockDealtEvent.hpp>
#include <rivet/ddl/generated/DamageIgnoredEvent.hpp> 

#include <rivet/ddl/generated/DamageEventBase.hpp>

namespace rivet::ddl::generated {
	DamageEventBase::DamageEventBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): DamagePacket(serialized) {
		FollowAttachActor = serialized->get_bool(FollowAttachActor_type_id, false);
		Continuous = serialized->get_bool(Continuous_type_id, false); 
	}

	[[nodiscard]] auto
	DamageEventBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DamageEventBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DamageEventBase> {
		if (incoming_type_id == DamageEventBase::type_id) {
			return std::make_shared<DamageEventBase>(serialized);
		}

		auto DamageIgnoredEvent_ptr = DamageIgnoredEvent::from_substruct(incoming_type_id, serialized);
		if (DamageIgnoredEvent_ptr != nullptr) {
			return DamageIgnoredEvent_ptr;
		}

		auto BlockDealtEvent_ptr = BlockDealtEvent::from_substruct(incoming_type_id, serialized);
		if (BlockDealtEvent_ptr != nullptr) {
			return BlockDealtEvent_ptr;
		}

		auto BlockEvent_ptr = BlockEvent::from_substruct(incoming_type_id, serialized);
		if (BlockEvent_ptr != nullptr) {
			return BlockEvent_ptr;
		}

		auto DamageDealtEvent_ptr = DamageDealtEvent::from_substruct(incoming_type_id, serialized);
		if (DamageDealtEvent_ptr != nullptr) {
			return DamageDealtEvent_ptr;
		}

		auto IgnoreInvulnerableEvent_ptr = IgnoreInvulnerableEvent::from_substruct(incoming_type_id, serialized);
		if (IgnoreInvulnerableEvent_ptr != nullptr) {
			return IgnoreInvulnerableEvent_ptr;
		}

		auto ProjectileBlockedEvent_ptr = ProjectileBlockedEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileBlockedEvent_ptr != nullptr) {
			return ProjectileBlockedEvent_ptr;
		}

		auto DamageDealtIgnoredEvent_ptr = DamageDealtIgnoredEvent::from_substruct(incoming_type_id, serialized);
		if (DamageDealtIgnoredEvent_ptr != nullptr) {
			return DamageDealtIgnoredEvent_ptr;
		}

		auto HealDealtEvent_ptr = HealDealtEvent::from_substruct(incoming_type_id, serialized);
		if (HealDealtEvent_ptr != nullptr) {
			return HealDealtEvent_ptr;
		}

		auto DamageEvent_ptr = DamageEvent::from_substruct(incoming_type_id, serialized);
		if (DamageEvent_ptr != nullptr) {
			return DamageEvent_ptr;
		}

		auto HealEvent_ptr = HealEvent::from_substruct(incoming_type_id, serialized);
		if (HealEvent_ptr != nullptr) {
			return HealEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
