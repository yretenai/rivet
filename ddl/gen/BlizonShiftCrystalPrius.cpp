// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BlizonShiftCrystalPrius.hpp>

namespace rivet::ddl::generated {
	BlizonShiftCrystalPrius::BlizonShiftCrystalPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CheckpointA = serialized->get_string(CheckpointA_type_id);
		CheckpointB = serialized->get_string(CheckpointB_type_id);
		VisibilityMode = serialized->get_enum<rivet::ddl::generated::x2bbd4e7a>(VisibilityMode_type_id, rivet::ddl::generated::x2bbd4e7a_values);
		AllowMeleeThrowTrigger = serialized->get_bool(AllowMeleeThrowTrigger_type_id); 
	}

	[[nodiscard]] auto
	BlizonShiftCrystalPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BlizonShiftCrystalPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BlizonShiftCrystalPrius> {
		if (incoming_type_id == BlizonShiftCrystalPrius::type_id) {
			return std::make_shared<BlizonShiftCrystalPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
