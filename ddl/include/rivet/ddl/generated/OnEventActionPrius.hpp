// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x10228b34.hpp> 

namespace rivet::ddl::generated {
	struct EventFilter;
	struct EventBase; 

	struct RIVET_DDL_SHARED OnEventActionPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "OnEventActionPrius";
		constexpr static rivet::rivet_type_id type_id = 0x6a1ef326;

		constexpr static std::string_view ActionType_type_name = "ActionType";
		constexpr static rivet::rivet_type_id ActionType_type_id = 0x874b2194;
		constexpr static std::string_view InitListening_type_name = "InitListening";
		constexpr static rivet::rivet_type_id InitListening_type_id = 0xf387b27a;
		constexpr static std::string_view SignalMax_type_name = "SignalMax";
		constexpr static rivet::rivet_type_id SignalMax_type_id = 0x9149785e;
		constexpr static std::string_view ResetSignalMaxOnListen_type_name = "ResetSignalMaxOnListen";
		constexpr static rivet::rivet_type_id ResetSignalMaxOnListen_type_id = 0xf5d5d7fc;
		constexpr static std::string_view ListenEvent_type_name = "ListenEvent";
		constexpr static rivet::rivet_type_id ListenEvent_type_id = 0xa76e74de;
		constexpr static std::string_view TrackBroadcast_type_name = "TrackBroadcast";
		constexpr static rivet::rivet_type_id TrackBroadcast_type_id = 0x647b8d3;
		constexpr static std::string_view FieldFilters_type_name = "FieldFilters";
		constexpr static rivet::rivet_type_id FieldFilters_type_id = 0xa7330d10; 

		explicit OnEventActionPrius() = default;
		explicit OnEventActionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x10228b34 ActionType {};
		bool InitListening {};
		int32_t SignalMax {};
		bool ResetSignalMaxOnListen {};
		std::shared_ptr<rivet::ddl::generated::EventBase> ListenEvent {};
		bool TrackBroadcast {};
		std::vector<std::shared_ptr<rivet::ddl::generated::EventFilter>> FieldFilters {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OnEventActionPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
