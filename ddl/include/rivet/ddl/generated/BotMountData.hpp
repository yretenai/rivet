// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct BotMountDamageData;
	struct BotMovementBase; 

	struct RIVET_DDL_SHARED BotMountData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "BotMountData";
		constexpr static rivet::rivet_type_id type_id = 0xcad349cb;

		constexpr static std::string_view LocatorAttachName_type_name = "LocatorAttachName";
		constexpr static rivet::rivet_type_id LocatorAttachName_type_id = 0x34512725;
		constexpr static std::string_view RiderAttachAnimName_type_name = "RiderAttachAnimName";
		constexpr static rivet::rivet_type_id RiderAttachAnimName_type_id = 0xd1dc7387;
		constexpr static std::string_view MountMovementData_type_name = "MountMovementData";
		constexpr static rivet::rivet_type_id MountMovementData_type_id = 0x5ee2fade;
		constexpr static std::string_view TouchDamageData_type_name = "TouchDamageData";
		constexpr static rivet::rivet_type_id TouchDamageData_type_id = 0x4291d5f0; 

		explicit BotMountData() = default;
		explicit BotMountData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view LocatorAttachName {};
		std::string_view RiderAttachAnimName {};
		std::shared_ptr<rivet::ddl::generated::BotMovementBase> MountMovementData {};
		std::shared_ptr<rivet::ddl::generated::BotMountDamageData> TouchDamageData {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotMountData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
