// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ItemPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ItemPrius";
		constexpr static rivet::rivet_type_id type_id = 0xf4ada6b7;

		constexpr static std::string_view ItemGuid_type_name = "ItemGuid";
		constexpr static rivet::rivet_type_id ItemGuid_type_id = 0xdb22bf34;
		constexpr static std::string_view ItemConfigHash_type_name = "ItemConfigHash";
		constexpr static rivet::rivet_type_id ItemConfigHash_type_id = 0x7fe3f0ea;
		constexpr static std::string_view ItemCount_type_name = "ItemCount";
		constexpr static rivet::rivet_type_id ItemCount_type_id = 0x53f0c08a;
		constexpr static std::string_view ItemId_type_name = "ItemId";
		constexpr static rivet::rivet_type_id ItemId_type_id = 0x8b80f916; 

		explicit ItemPrius() = default;
		explicit ItemPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t ItemGuid {};
		uint64_t ItemConfigHash {};
		uint32_t ItemCount {};
		uint16_t ItemId {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ItemPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
