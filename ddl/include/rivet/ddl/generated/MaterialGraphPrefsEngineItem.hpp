// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED MaterialGraphPrefsEngineItem : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "MaterialGraphPrefsEngineItem";
		constexpr static rivet::rivet_type_id type_id = 0x9aaf625a;

		constexpr static std::string_view AssetPath_type_name = "AssetPath";
		constexpr static rivet::rivet_type_id AssetPath_type_id = 0xefa614b;
		constexpr static std::string_view AlphaSim_type_name = "AlphaSim";
		constexpr static rivet::rivet_type_id AlphaSim_type_id = 0x7481864;
		constexpr static std::string_view AlphaSort_type_name = "AlphaSort";
		constexpr static rivet::rivet_type_id AlphaSort_type_id = 0xd4672a50;
		constexpr static std::string_view AnimateLod_type_name = "AnimateLod";
		constexpr static rivet::rivet_type_id AnimateLod_type_id = 0xa5c5aece;
		constexpr static std::string_view ColorPicker_type_name = "ColorPicker";
		constexpr static rivet::rivet_type_id ColorPicker_type_id = 0x94d6a043;
		constexpr static std::string_view DoubleSided_type_name = "DoubleSided";
		constexpr static rivet::rivet_type_id DoubleSided_type_id = 0x3e799799;
		constexpr static std::string_view PreviewSrgb_type_name = "PreviewSrgb";
		constexpr static rivet::rivet_type_id PreviewSrgb_type_id = 0x9c26f1fb; 

		explicit MaterialGraphPrefsEngineItem() = default;
		explicit MaterialGraphPrefsEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view AssetPath {};
		double AlphaSim {};
		bool AlphaSort {};
		bool AnimateLod {};
		bool ColorPicker {};
		bool DoubleSided {};
		bool PreviewSrgb {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialGraphPrefsEngineItem>;
	};
} // namespace rivet::ddl::generated

// clang-format on
