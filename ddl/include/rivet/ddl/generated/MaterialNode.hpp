// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct MaterialNodeOutputPort;
	struct MaterialNodeInputPort; 

	struct RIVET_DDL_SHARED MaterialNode : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "MaterialNode";
		constexpr static rivet::rivet_type_id type_id = 0x1d927af7;

		constexpr static std::string_view Inputs_type_name = "Inputs";
		constexpr static rivet::rivet_type_id Inputs_type_id = 0x3d19ee29;
		constexpr static std::string_view Outputs_type_name = "Outputs";
		constexpr static rivet::rivet_type_id Outputs_type_id = 0xd9fcc64;
		constexpr static std::string_view ShaderGBufferEntry_type_name = "ShaderGBufferEntry";
		constexpr static rivet::rivet_type_id ShaderGBufferEntry_type_id = 0xac154eb9;
		constexpr static std::string_view ShaderColorEntry_type_name = "ShaderColorEntry";
		constexpr static rivet::rivet_type_id ShaderColorEntry_type_id = 0x7948822a;
		constexpr static std::string_view ShaderGlobalDecl_type_name = "ShaderGlobalDecl";
		constexpr static rivet::rivet_type_id ShaderGlobalDecl_type_id = 0x38a0410;
		constexpr static std::string_view ForceVelocityPass_type_name = "ForceVelocityPass";
		constexpr static rivet::rivet_type_id ForceVelocityPass_type_id = 0x7ff1de5e;
		constexpr static std::string_view ForceForwardPass_type_name = "ForceForwardPass";
		constexpr static rivet::rivet_type_id ForceForwardPass_type_id = 0xf7526973;
		constexpr static std::string_view ForceHQFrameGrab_type_name = "ForceHQFrameGrab";
		constexpr static rivet::rivet_type_id ForceHQFrameGrab_type_id = 0xe629d494;
		constexpr static std::string_view TestingOnly_type_name = "TestingOnly";
		constexpr static rivet::rivet_type_id TestingOnly_type_id = 0x1837e13b;
		constexpr static std::string_view NoPreview_type_name = "NoPreview";
		constexpr static rivet::rivet_type_id NoPreview_type_id = 0x12caaa51;
		constexpr static std::string_view CustomBRDF_type_name = "CustomBRDF";
		constexpr static rivet::rivet_type_id CustomBRDF_type_id = 0x4f2f6752;
		constexpr static std::string_view ShaderLoD_type_name = "ShaderLoD";
		constexpr static rivet::rivet_type_id ShaderLoD_type_id = 0x6ac0d3ce;
		constexpr static std::string_view Code_type_name = "Code";
		constexpr static rivet::rivet_type_id Code_type_id = 0x4785f028;
		constexpr static std::string_view Description_type_name = "Description";
		constexpr static rivet::rivet_type_id Description_type_id = 0xe03811fd;
		constexpr static std::string_view DisplayName_type_name = "DisplayName";
		constexpr static rivet::rivet_type_id DisplayName_type_id = 0xeaf33243;
		constexpr static std::string_view Documentation_type_name = "Documentation";
		constexpr static rivet::rivet_type_id Documentation_type_id = 0x4cac4bae;
		constexpr static std::string_view TexturePriority_type_name = "TexturePriority";
		constexpr static rivet::rivet_type_id TexturePriority_type_id = 0x2129664;
		constexpr static std::string_view Hidden_type_name = "Hidden";
		constexpr static rivet::rivet_type_id Hidden_type_id = 0xb625a7da; 

		explicit MaterialNode() = default;
		explicit MaterialNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::MaterialNodeInputPort>> Inputs {};
		std::vector<std::shared_ptr<rivet::ddl::generated::MaterialNodeOutputPort>> Outputs {};
		std::string_view ShaderGBufferEntry {};
		std::string_view ShaderColorEntry {};
		std::string_view ShaderGlobalDecl {};
		bool ForceVelocityPass {};
		bool ForceForwardPass {};
		bool ForceHQFrameGrab {};
		bool TestingOnly {};
		bool NoPreview {};
		std::string_view CustomBRDF {};
		uint32_t ShaderLoD {};
		std::string_view Code {};
		std::string_view Description {};
		std::string_view DisplayName {};
		std::string_view Documentation {};
		uint8_t TexturePriority {};
		bool Hidden {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialNode>;
	};
} // namespace rivet::ddl::generated

// clang-format on
