// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LungeAttackData.hpp>

namespace rivet::ddl::generated {
	LungeAttackData::LungeAttackData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DoTell = serialized->get_bool(DoTell_type_id, true);
		TellTime = serialized->get_float(TellTime_type_id, -1.000000f);
		TellPredictiveT = serialized->get_float(TellPredictiveT_type_id, 0.000000f);
		TellMaxRotationSpeed = serialized->get_float(TellMaxRotationSpeed_type_id, 2000.000000f);
		LungeDistance = serialized->get_float(LungeDistance_type_id, -1.000000f);
		LungeTime = serialized->get_float(LungeTime_type_id, -1.000000f);
		LungeLandingOffset = serialized->get_float(LungeLandingOffset_type_id, 0.000000f);
		DoRecover = serialized->get_bool(DoRecover_type_id, true);
		RecoveryTime = serialized->get_float(RecoveryTime_type_id, -1.000000f);
		StickToPlayer = serialized->get_bool(StickToPlayer_type_id, false);
		DisableFriendlyCVC = serialized->get_bool(DisableFriendlyCVC_type_id, true);
		BailIfOffscreenAfterTell = serialized->get_bool(BailIfOffscreenAfterTell_type_id, false);
		BailIfCloserThanAfterTell = serialized->get_float(BailIfCloserThanAfterTell_type_id, 1.500000f);
		NumLungeVariations = serialized->get_int32(NumLungeVariations_type_id, 1u); 
	}

	[[nodiscard]] auto
	LungeAttackData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LungeAttackData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LungeAttackData> {
		if (incoming_type_id == LungeAttackData::type_id) {
			return std::make_shared<LungeAttackData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
