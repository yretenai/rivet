// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/x596823a1.hpp>
#include <rivet/ddl/generated/StructuredLogAnimTreeClipNode.hpp> 

namespace rivet::ddl::generated {
	struct StructuredLogMatrix; 

	struct RIVET_DDL_SHARED StructuredLogAnimTreeCinematicClipNode : StructuredLogAnimTreeClipNode {
		constexpr static std::string_view type_name = "StructuredLogAnimTreeCinematicClipNode";
		constexpr static rivet::rivet_type_id type_id = 0x336fb103;

		constexpr static std::string_view CineNodeFlags_type_name = "CineNodeFlags";
		constexpr static rivet::rivet_type_id CineNodeFlags_type_id = 0x371e332a;
		constexpr static std::string_view ObjSpaceOriginLocatorMat_type_name = "ObjSpaceOriginLocatorMat";
		constexpr static rivet::rivet_type_id ObjSpaceOriginLocatorMat_type_id = 0xefe7a873; 

		explicit StructuredLogAnimTreeCinematicClipNode() = default;
		explicit StructuredLogAnimTreeCinematicClipNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x596823a1 CineNodeFlags {};
		std::shared_ptr<rivet::ddl::generated::StructuredLogMatrix> ObjSpaceOriginLocatorMat {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StructuredLogAnimTreeCinematicClipNode>;
	};
} // namespace rivet::ddl::generated

// clang-format on
