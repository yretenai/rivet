// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x3c7c71d2.hpp>
#include <rivet/ddl/generated/enums/x97f06575.hpp> 

namespace rivet::ddl::generated {
	struct ECMResponse;
	struct ECMSelector; 

	struct RIVET_DDL_SHARED ECMFilter : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ECMFilter";
		constexpr static rivet::rivet_type_id type_id = 0x39646576;

		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view ContinueType_type_name = "ContinueType";
		constexpr static rivet::rivet_type_id ContinueType_type_id = 0x55624b9f;
		constexpr static std::string_view Scope_type_name = "Scope";
		constexpr static rivet::rivet_type_id Scope_type_id = 0x19fc9912;
		constexpr static std::string_view Selector_type_name = "Selector";
		constexpr static rivet::rivet_type_id Selector_type_id = 0x6c935f2d;
		constexpr static std::string_view Response_type_name = "Response";
		constexpr static rivet::rivet_type_id Response_type_id = 0xc47ab68b;
		constexpr static std::string_view IsValid_type_name = "IsValid";
		constexpr static rivet::rivet_type_id IsValid_type_id = 0x84fa27f9; 

		explicit ECMFilter() = default;
		explicit ECMFilter([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Name {};
		rivet::ddl::generated::x97f06575 ContinueType {};
		rivet::ddl::generated::x3c7c71d2 Scope {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ECMSelector>> Selector {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ECMResponse>> Response {};
		bool IsValid {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ECMFilter>;
	};
} // namespace rivet::ddl::generated

// clang-format on
