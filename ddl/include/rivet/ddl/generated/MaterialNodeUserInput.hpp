// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED MaterialNodeUserInput : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "MaterialNodeUserInput";
		constexpr static rivet::rivet_type_id type_id = 0x52ade257;

		constexpr static std::string_view Id_type_name = "Id";
		constexpr static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr static std::string_view Values_type_name = "Values";
		constexpr static rivet::rivet_type_id Values_type_id = 0x4df0281;
		constexpr static std::string_view Minimums_type_name = "Minimums";
		constexpr static rivet::rivet_type_id Minimums_type_id = 0xee16155a;
		constexpr static std::string_view Maximums_type_name = "Maximums";
		constexpr static rivet::rivet_type_id Maximums_type_id = 0x876babb;
		constexpr static std::string_view Description_type_name = "Description";
		constexpr static rivet::rivet_type_id Description_type_id = 0xe03811fd;
		constexpr static std::string_view Group_type_name = "Group";
		constexpr static rivet::rivet_type_id Group_type_id = 0x74938804;
		constexpr static std::string_view SortOrder_type_name = "SortOrder";
		constexpr static rivet::rivet_type_id SortOrder_type_id = 0xbd9f03f1;
		constexpr static std::string_view SubGraphAncestors_type_name = "SubGraphAncestors";
		constexpr static rivet::rivet_type_id SubGraphAncestors_type_id = 0xaa160e78;
		constexpr static std::string_view Labels_type_name = "Labels";
		constexpr static rivet::rivet_type_id Labels_type_id = 0x8ba94c76; 

		explicit MaterialNodeUserInput() = default;
		explicit MaterialNodeUserInput([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Id {};
		std::string_view Values {};
		std::string_view Minimums {};
		std::string_view Maximums {};
		std::string_view Description {};
		std::string_view Group {};
		std::string_view SortOrder {};
		std::string_view SubGraphAncestors {};
		std::string_view Labels {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialNodeUserInput>;
	};
} // namespace rivet::ddl::generated

// clang-format on
