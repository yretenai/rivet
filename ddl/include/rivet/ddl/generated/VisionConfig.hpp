// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED VisionConfig : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VisionConfig";
		constexpr static rivet::rivet_type_id type_id = 0x5ad7564;

		constexpr static std::string_view SphereRadius_type_name = "SphereRadius";
		constexpr static rivet::rivet_type_id SphereRadius_type_id = 0x7b804017;
		constexpr static std::string_view WedgeRadius_type_name = "WedgeRadius";
		constexpr static rivet::rivet_type_id WedgeRadius_type_id = 0x89b1b8f4;
		constexpr static std::string_view WedgeHalfAngle_type_name = "WedgeHalfAngle";
		constexpr static rivet::rivet_type_id WedgeHalfAngle_type_id = 0x963ab5af;
		constexpr static std::string_view WedgeHeightUp_type_name = "WedgeHeightUp";
		constexpr static rivet::rivet_type_id WedgeHeightUp_type_id = 0x9f057313;
		constexpr static std::string_view WedgeHeightDown_type_name = "WedgeHeightDown";
		constexpr static rivet::rivet_type_id WedgeHeightDown_type_id = 0x9d4889c8;
		constexpr static std::string_view ConeRadius_type_name = "ConeRadius";
		constexpr static rivet::rivet_type_id ConeRadius_type_id = 0x104bdc4d;
		constexpr static std::string_view ConeHalfAngle_type_name = "ConeHalfAngle";
		constexpr static rivet::rivet_type_id ConeHalfAngle_type_id = 0x4cc508; 

		explicit VisionConfig() = default;
		explicit VisionConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float SphereRadius {};
		float WedgeRadius {};
		float WedgeHalfAngle {};
		float WedgeHeightUp {};
		float WedgeHeightDown {};
		float ConeRadius {};
		float ConeHalfAngle {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisionConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
