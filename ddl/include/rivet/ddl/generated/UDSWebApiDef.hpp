// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xefe0cd8b.hpp> 

namespace rivet::ddl::generated {
	struct UDSWebApiStatRule;
	struct UDSWebApiStatDef;
	struct UDSWebApiObject; 

	struct RIVET_DDL_SHARED UDSWebApiDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "UDSWebApiDef";
		constexpr static rivet::rivet_type_id type_id = 0x12217f9d;

		constexpr static std::string_view Objects_type_name = "Objects";
		constexpr static rivet::rivet_type_id Objects_type_id = 0xb3f0afcb;
		constexpr static std::string_view ObjectIdTypes_type_name = "ObjectIdTypes";
		constexpr static rivet::rivet_type_id ObjectIdTypes_type_id = 0x98356a7;
		constexpr static std::string_view TrophyStatDefinitions_type_name = "TrophyStatDefinitions";
		constexpr static rivet::rivet_type_id TrophyStatDefinitions_type_id = 0x77f59a8c;
		constexpr static std::string_view TrophyStatExtractions_type_name = "TrophyStatExtractions";
		constexpr static rivet::rivet_type_id TrophyStatExtractions_type_id = 0x901f5b11; 

		explicit UDSWebApiDef() = default;
		explicit UDSWebApiDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::UDSWebApiObject>> Objects {};
		std::vector<rivet::ddl::generated::xefe0cd8b> ObjectIdTypes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::UDSWebApiStatDef>> TrophyStatDefinitions {};
		std::vector<std::shared_ptr<rivet::ddl::generated::UDSWebApiStatRule>> TrophyStatExtractions {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UDSWebApiDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
