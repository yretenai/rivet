// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotData.hpp> 

#include <rivet/ddl/generated/BotSetupData.hpp>

namespace rivet::ddl::generated {
	BotSetupData::BotSetupData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SpawnEngagedWithHero = serialized->get_bool(SpawnEngagedWithHero_type_id);
		ForceHoverPathIntro = serialized->get_bool(ForceHoverPathIntro_type_id);
		IntroIsInterruptibleByDamage = serialized->get_bool(IntroIsInterruptibleByDamage_type_id);
		IntroIsInterruptibleByDamageOnLand = serialized->get_bool(IntroIsInterruptibleByDamageOnLand_type_id);
		IntroIsInterruptibleByMeleeRange = serialized->get_bool(IntroIsInterruptibleByMeleeRange_type_id);
		IntroIsInterruptibleByAwareness = serialized->get_bool(IntroIsInterruptibleByAwareness_type_id);
		IntroIsInterruptibleByModeControl = serialized->get_bool(IntroIsInterruptibleByModeControl_type_id);
		InterruptedIntroCanBeResumed = serialized->get_bool(InterruptedIntroCanBeResumed_type_id);
		IntroSpeed = serialized->get_enum<rivet::ddl::generated::MovementStyle>(IntroSpeed_type_id, rivet::ddl::generated::MovementStyle_values);
		SkipAlertAnim = serialized->get_bool(SkipAlertAnim_type_id);
		DisableIdleWander = serialized->get_bool(DisableIdleWander_type_id);
		AllowRetaliation = serialized->get_bool(AllowRetaliation_type_id);
		IdleWanderMinCooldown = serialized->get_float(IdleWanderMinCooldown_type_id);
		IdleWanderMaxCooldown = serialized->get_float(IdleWanderMaxCooldown_type_id);
		AllowHibernationBasedOnLoadedRegion = serialized->get_bool(AllowHibernationBasedOnLoadedRegion_type_id);
		HomeContainerRegion = serialized->get_string(HomeContainerRegion_type_id); 
	}

	[[nodiscard]] auto
	BotSetupData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotSetupData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotSetupData> {
		if (incoming_type_id == BotSetupData::type_id) {
			return std::make_shared<BotSetupData>(serialized);
		}

		auto BotData_ptr = BotData::from_substruct(incoming_type_id, serialized);
		if (BotData_ptr != nullptr) {
			return BotData_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
