// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimAssistTargetZoneGroundRelative.hpp>
#include <rivet/ddl/generated/AimAssistTargetZoneJoint.hpp>
#include <rivet/ddl/generated/AimAssistTargetZoneOBB.hpp> 

#include <rivet/ddl/generated/AimAssistTargetZone.hpp>

namespace rivet::ddl::generated {
	AimAssistTargetZone::AimAssistTargetZone([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AimAssistFactor = serialized->get_float(AimAssistFactor_type_id); 
	}

	[[nodiscard]] auto
	AimAssistTargetZone::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AimAssistTargetZone::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimAssistTargetZone> {
		if (incoming_type_id == AimAssistTargetZone::type_id) {
			return std::make_shared<AimAssistTargetZone>(serialized);
		}

		auto AimAssistTargetZoneOBB_ptr = AimAssistTargetZoneOBB::from_substruct(incoming_type_id, serialized);
		if (AimAssistTargetZoneOBB_ptr != nullptr) {
			return AimAssistTargetZoneOBB_ptr;
		}

		auto AimAssistTargetZoneJoint_ptr = AimAssistTargetZoneJoint::from_substruct(incoming_type_id, serialized);
		if (AimAssistTargetZoneJoint_ptr != nullptr) {
			return AimAssistTargetZoneJoint_ptr;
		}

		auto AimAssistTargetZoneGroundRelative_ptr = AimAssistTargetZoneGroundRelative::from_substruct(incoming_type_id, serialized);
		if (AimAssistTargetZoneGroundRelative_ptr != nullptr) {
			return AimAssistTargetZoneGroundRelative_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
