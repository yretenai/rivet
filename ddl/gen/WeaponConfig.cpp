// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WeaponLevelDataListItem.hpp>
#include <rivet/ddl/generated/WeaponObstructionBase.hpp>
#include <rivet/ddl/generated/WeaponTargetingInfo.hpp>
#include <rivet/ddl/generated/WeaponEarnedXPData.hpp>
#include <rivet/ddl/generated/WeaponReticleInfo.hpp> 

#include <rivet/ddl/generated/WeaponConfig.hpp>

namespace rivet::ddl::generated {
	WeaponConfig::WeaponConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): WeaponConfigBase(serialized) {
		LevelList = serialized->unwrap_into_many<rivet::ddl::generated::WeaponLevelDataListItem>(LevelList_type_id);
		XPSourceList = serialized->unwrap_into_many<rivet::ddl::generated::WeaponEarnedXPData>(XPSourceList_type_id);
		GripStyle = serialized->get_enum<rivet::ddl::generated::x8c1c9e5c>(GripStyle_type_id, rivet::ddl::generated::x8c1c9e5c_values);
		HolsterType = serialized->get_enum<rivet::ddl::generated::xc968d790>(HolsterType_type_id, rivet::ddl::generated::xc968d790_values);
		SlotType = serialized->get_enum<rivet::ddl::generated::xc533d93f>(SlotType_type_id, rivet::ddl::generated::xc533d93f_values);
		FireStyle = serialized->get_enum<rivet::ddl::generated::x597cb7da>(FireStyle_type_id, rivet::ddl::generated::x597cb7da_values);
		ReloadStyle = serialized->get_enum<rivet::ddl::generated::xd3dac94>(ReloadStyle_type_id, rivet::ddl::generated::xd3dac94_values);
		OffsetStyle = serialized->get_enum<rivet::ddl::generated::xb82a951f>(OffsetStyle_type_id, rivet::ddl::generated::xb82a951f_values);
		HudWeaponTypeEnum = serialized->get_enum<rivet::ddl::generated::xd5643d7e>(HudWeaponTypeEnum_type_id, rivet::ddl::generated::xd5643d7e_values);
		ZoomConfig = serialized->get_string(ZoomConfig_type_id);
		BeamInConfig = serialized->get_string(BeamInConfig_type_id);
		AimTriggerEffectConfigOverride = serialized->get_string(AimTriggerEffectConfigOverride_type_id);
		LightAimTriggerEffectConfigOverride = serialized->get_string(LightAimTriggerEffectConfigOverride_type_id);
		FireTriggerEffectConfigOverride = serialized->get_string(FireTriggerEffectConfigOverride_type_id);
		LightFireTriggerEffectConfigOverride = serialized->get_string(LightFireTriggerEffectConfigOverride_type_id);
		TargetingInfo = serialized->unwrap_into<rivet::ddl::generated::WeaponTargetingInfo>(TargetingInfo_type_id);
		ReticleInfo = serialized->unwrap_into<rivet::ddl::generated::WeaponReticleInfo>(ReticleInfo_type_id);
		ModConfig = serialized->get_string(ModConfig_type_id);
		GridConfig = serialized->get_string(GridConfig_type_id);
		GloveModelOverride = serialized->get_string(GloveModelOverride_type_id);
		AmmoCost = serialized->get_int32(AmmoCost_type_id);
		BarrelObstruction = serialized->unwrap_into<rivet::ddl::generated::WeaponObstructionBase>(BarrelObstruction_type_id);
		WantsTargetLOS = serialized->get_bool(WantsTargetLOS_type_id);
		UseBeamInEquip = serialized->get_bool(UseBeamInEquip_type_id);
		ForHeroSkipObstructionChecks = serialized->get_bool(ForHeroSkipObstructionChecks_type_id); 
	}

	[[nodiscard]] auto
	WeaponConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeaponConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponConfig> {
		if (incoming_type_id == WeaponConfig::type_id) {
			return std::make_shared<WeaponConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
