// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x86f6b8ca.hpp>
#include <rivet/ddl/generated/enums/xb8c27e2a.hpp> 

namespace rivet::ddl::generated {
	struct DDLVector3;
	struct DDLVector2;
	struct CrossSectionChoice; 

	struct RIVET_DDL_SHARED CrossSectionBase : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CrossSectionBase";
		constexpr static rivet::rivet_type_id type_id = 0x86693f80;

		constexpr static std::string_view CrossSection_type_name = "CrossSection";
		constexpr static rivet::rivet_type_id CrossSection_type_id = 0xf56601b6;
		constexpr static std::string_view Width_type_name = "Width";
		constexpr static rivet::rivet_type_id Width_type_id = 0x954989ee;
		constexpr static std::string_view Height_type_name = "Height";
		constexpr static rivet::rivet_type_id Height_type_id = 0xcb35ab68;
		constexpr static std::string_view Scale_type_name = "Scale";
		constexpr static rivet::rivet_type_id Scale_type_id = 0xf515e945;
		constexpr static std::string_view Taper_type_name = "Taper";
		constexpr static rivet::rivet_type_id Taper_type_id = 0xa2c90a17;
		constexpr static std::string_view Placement_type_name = "Placement";
		constexpr static rivet::rivet_type_id Placement_type_id = 0xca26ea02;
		constexpr static std::string_view Offset_type_name = "Offset";
		constexpr static rivet::rivet_type_id Offset_type_id = 0x677284b7;
		constexpr static std::string_view PathNoise_type_name = "PathNoise";
		constexpr static rivet::rivet_type_id PathNoise_type_id = 0x8edcdf6d;
		constexpr static std::string_view BankScale_type_name = "BankScale";
		constexpr static rivet::rivet_type_id BankScale_type_id = 0x583fb719;
		constexpr static std::string_view EndCap_type_name = "EndCap";
		constexpr static rivet::rivet_type_id EndCap_type_id = 0x1bfac016;
		constexpr static std::string_view ReverseFaces_type_name = "ReverseFaces";
		constexpr static rivet::rivet_type_id ReverseFaces_type_id = 0x18f8dfea; 

		explicit CrossSectionBase() = default;
		explicit CrossSectionBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::CrossSectionChoice> CrossSection {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> Width {};
		float Height {};
		float Scale {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> Taper {};
		rivet::ddl::generated::xb8c27e2a Placement {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> Offset {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> PathNoise {};
		float BankScale {};
		rivet::ddl::generated::x86f6b8ca EndCap {};
		bool ReverseFaces {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CrossSectionBase>;
	};
} // namespace rivet::ddl::generated

// clang-format on
