// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/BotComboMoveBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED BotComboMoveFinaleAimCalibration : BotComboMoveBase {
		constexpr static std::string_view type_name = "BotComboMoveFinaleAimCalibration";
		constexpr static rivet::rivet_type_id type_id = 0xf67fe0f5;

		constexpr static std::string_view PortalActorAsset_type_name = "PortalActorAsset";
		constexpr static rivet::rivet_type_id PortalActorAsset_type_id = 0xfec29c86;
		constexpr static std::string_view WeaponActorAsset_type_name = "WeaponActorAsset";
		constexpr static rivet::rivet_type_id WeaponActorAsset_type_id = 0xf03001b;
		constexpr static std::string_view WeaponActorVol_type_name = "WeaponActorVol";
		constexpr static rivet::rivet_type_id WeaponActorVol_type_id = 0x3ddbd4ba; 

		explicit BotComboMoveFinaleAimCalibration() = default;
		explicit BotComboMoveFinaleAimCalibration([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view PortalActorAsset {};
		std::string_view WeaponActorAsset {};
		uint64_t WeaponActorVol {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboMoveFinaleAimCalibration>;
	};
} // namespace rivet::ddl::generated

// clang-format on
