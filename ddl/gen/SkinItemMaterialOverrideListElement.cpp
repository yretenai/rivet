// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AssetReferenceDef.hpp>
#include <rivet/ddl/generated/SkinItemMaterialOverrideListEntry.hpp> 

#include <rivet/ddl/generated/SkinItemMaterialOverrideListElement.hpp>

namespace rivet::ddl::generated {
	SkinItemMaterialOverrideListElement::SkinItemMaterialOverrideListElement([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Available = serialized->get_enum<rivet::ddl::generated::x7ecfc969>(Available_type_id, rivet::ddl::generated::x7ecfc969_values);
		OriginalMaterial = serialized->unwrap_into<rivet::ddl::generated::AssetReferenceDef>(OriginalMaterial_type_id);
		SecondaryOriginalMaterial = serialized->unwrap_into<rivet::ddl::generated::AssetReferenceDef>(SecondaryOriginalMaterial_type_id);
		OverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemMaterialOverrideListEntry>(OverrideList_type_id); 
	}

	[[nodiscard]] auto
	SkinItemMaterialOverrideListElement::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SkinItemMaterialOverrideListElement::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkinItemMaterialOverrideListElement> {
		if (incoming_type_id == SkinItemMaterialOverrideListElement::type_id) {
			return std::make_shared<SkinItemMaterialOverrideListElement>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
