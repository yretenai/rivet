// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraTargetTrackData.hpp>

namespace rivet::ddl::generated {
	CameraTargetTrackData::CameraTargetTrackData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TrackForwardGain = serialized->get_float(TrackForwardGain_type_id, -7.000000);
		TrackForwardDamp = serialized->get_float(TrackForwardDamp_type_id, -11.000000);
		TrackBackGain = serialized->get_float(TrackBackGain_type_id, -80.000000);
		TrackBackDamp = serialized->get_float(TrackBackDamp_type_id, -45.000000);
		TrackLeftGain = serialized->get_float(TrackLeftGain_type_id, -50.000000);
		TrackLeftDamp = serialized->get_float(TrackLeftDamp_type_id, -30.000000);
		TrackUpGain = serialized->get_float(TrackUpGain_type_id, -5.000000);
		TrackUpDamp = serialized->get_float(TrackUpDamp_type_id, -3.000000);
		SafeZoneLeftEnabled = serialized->get_bool(SafeZoneLeftEnabled_type_id, false);
		SafeZoneLeftAngleMin = serialized->get_float(SafeZoneLeftAngleMin_type_id, 0.000000);
		SafeZoneLeftAngleMax = serialized->get_float(SafeZoneLeftAngleMax_type_id, 0.000000);
		SafeZoneForwardEnabled = serialized->get_bool(SafeZoneForwardEnabled_type_id, false);
		SafeZoneForwardDistMin = serialized->get_float(SafeZoneForwardDistMin_type_id, 0.000000);
		SafeZoneForwardDistMax = serialized->get_float(SafeZoneForwardDistMax_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	CameraTargetTrackData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraTargetTrackData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraTargetTrackData> {
		if (incoming_type_id == CameraTargetTrackData::type_id) {
			return std::make_shared<CameraTargetTrackData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
