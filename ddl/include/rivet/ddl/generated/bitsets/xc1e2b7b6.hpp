// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <string_view>
#include <array>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_keywords.hpp>

namespace rivet::ddl::generated {
	constexpr static std::string_view xc1e2b7b6_type_name = "xc1e2b7b6";
	constexpr static rivet::rivet_type_id xc1e2b7b6_type_id = 0xc1e2b7b6;

	constexpr static std::array<std::tuple<std::string_view, uint64_t>, 11> xc1e2b7b6_values = {
		std::make_tuple("kHeroInputLock", 0x1),
		std::make_tuple("kHeroNotTargatable", 0x2),
		std::make_tuple("kHeroNotAttackable", 0x4),
		std::make_tuple("kHeroInvulnerable", 0x8),
		std::make_tuple("kHUDHidden", 0x10),
		std::make_tuple("kDisableEmergentVO", 0x20),
		std::make_tuple("kHealHero", 0x40),
		std::make_tuple("kDisablePause", 0x80),
		std::make_tuple("kDestroyShots", 0x100),
		std::make_tuple("kCollectCurrency", 0x200),
		std::make_tuple("kDisableReloadLastCheckpoint", 0x400), 
	};

	enum class xc1e2b7b6 : uint64_t {
		HeroInputLock = 0x1,
		HeroNotTargatable = 0x2,
		HeroNotAttackable = 0x4,
		HeroInvulnerable = 0x8,
		HUDHidden = 0x10,
		DisableEmergentVO = 0x20,
		HealHero = 0x40,
		DisablePause = 0x80,
		DestroyShots = 0x100,
		CollectCurrency = 0x200,
		DisableReloadLastCheckpoint = 0x400, 
	};
} // namespace rivet::ddl::generated

// clang-format on
