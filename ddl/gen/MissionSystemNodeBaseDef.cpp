// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BranchStartNodeBaseDef.hpp>
#include <rivet/ddl/generated/NotMissionSystemNodeDef.hpp>
#include <rivet/ddl/generated/MissionSystemRootNodeBaseDef.hpp>
#include <rivet/ddl/generated/SyncOutputNodeSharedDef.hpp>
#include <rivet/ddl/generated/XOrStartGroupNodeDef.hpp>
#include <rivet/ddl/generated/MissionCompleteObjectiveNodeSharedDef.hpp>
#include <rivet/ddl/generated/MissionSystemDefaultNodeBaseDef.hpp> 

#include <rivet/ddl/generated/MissionSystemNodeBaseDef.hpp>

namespace rivet::ddl::generated {
	MissionSystemNodeBaseDef::MissionSystemNodeBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): NodeBaseDef(serialized) {
		DebugName = serialized->get_string(DebugName_type_id, {}); 
	}

	[[nodiscard]] auto
	MissionSystemNodeBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MissionSystemNodeBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionSystemNodeBaseDef> {
		if (incoming_type_id == MissionSystemNodeBaseDef::type_id) {
			return std::make_shared<MissionSystemNodeBaseDef>(serialized);
		}

		auto MissionSystemDefaultNodeBaseDef_ptr = MissionSystemDefaultNodeBaseDef::from_substruct(incoming_type_id, serialized);
		if (MissionSystemDefaultNodeBaseDef_ptr != nullptr) {
			return MissionSystemDefaultNodeBaseDef_ptr;
		}

		auto MissionCompleteObjectiveNodeSharedDef_ptr = MissionCompleteObjectiveNodeSharedDef::from_substruct(incoming_type_id, serialized);
		if (MissionCompleteObjectiveNodeSharedDef_ptr != nullptr) {
			return MissionCompleteObjectiveNodeSharedDef_ptr;
		}

		auto XOrStartGroupNodeDef_ptr = XOrStartGroupNodeDef::from_substruct(incoming_type_id, serialized);
		if (XOrStartGroupNodeDef_ptr != nullptr) {
			return XOrStartGroupNodeDef_ptr;
		}

		auto SyncOutputNodeSharedDef_ptr = SyncOutputNodeSharedDef::from_substruct(incoming_type_id, serialized);
		if (SyncOutputNodeSharedDef_ptr != nullptr) {
			return SyncOutputNodeSharedDef_ptr;
		}

		auto NotMissionSystemNodeDef_ptr = NotMissionSystemNodeDef::from_substruct(incoming_type_id, serialized);
		if (NotMissionSystemNodeDef_ptr != nullptr) {
			return NotMissionSystemNodeDef_ptr;
		}

		auto BranchStartNodeBaseDef_ptr = BranchStartNodeBaseDef::from_substruct(incoming_type_id, serialized);
		if (BranchStartNodeBaseDef_ptr != nullptr) {
			return BranchStartNodeBaseDef_ptr;
		}

		auto MissionSystemRootNodeBaseDef_ptr = MissionSystemRootNodeBaseDef::from_substruct(incoming_type_id, serialized);
		if (MissionSystemRootNodeBaseDef_ptr != nullptr) {
			return MissionSystemRootNodeBaseDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
