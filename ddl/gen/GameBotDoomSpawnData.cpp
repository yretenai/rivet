// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/GameBotDoomSpawnData.hpp>

namespace rivet::ddl::generated {
	GameBotDoomSpawnData::GameBotDoomSpawnData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ActorSpawnData(serialized) {
		OwnerHandle = serialized->get_uint32(OwnerHandle_type_id, 0u);
		ShotHandle = serialized->get_uint32(ShotHandle_type_id, 0u);
		AssetId = serialized->get_uint64(AssetId_type_id, 0ull);
		ZoneIndex = serialized->get_int32(ZoneIndex_type_id, 0u);
		WeaponId = serialized->get_uint32(WeaponId_type_id, 0u);
		Lifetime = serialized->get_float(Lifetime_type_id, 0.000000f);
		MeleeDamage = serialized->get_float(MeleeDamage_type_id, 0.000000f);
		MaxMeleeDamage = serialized->get_float(MaxMeleeDamage_type_id, 0.000000f);
		ExplodeDamage = serialized->get_float(ExplodeDamage_type_id, 0.000000f);
		ExplodeRadius = serialized->get_float(ExplodeRadius_type_id, 0.000000f);
		Speed = serialized->get_float(Speed_type_id, 0.000000f);
		AwarenessRange = serialized->get_float(AwarenessRange_type_id, 0.000000f);
		SpawnPos = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(SpawnPos_type_id);
		Facing = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Facing_type_id);
		Up = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Up_type_id);
		LandPos = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(LandPos_type_id);
		MaxDistanceMod = serialized->get_float(MaxDistanceMod_type_id, 0.000000f);
		MaxHeightMod = serialized->get_float(MaxHeightMod_type_id, 0.000000f);
		IsUpgraded = serialized->get_bool(IsUpgraded_type_id, false); 
	}

	[[nodiscard]] auto
	GameBotDoomSpawnData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameBotDoomSpawnData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotDoomSpawnData> {
		if (incoming_type_id == GameBotDoomSpawnData::type_id) {
			return std::make_shared<GameBotDoomSpawnData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
