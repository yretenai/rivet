// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AssetReferenceDef.hpp> 

#include <rivet/ddl/generated/FilterData.hpp>

namespace rivet::ddl::generated {
	FilterData::FilterData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Name = serialized->get_string(Name_type_id);
		FilterRef = serialized->unwrap_into<rivet::ddl::generated::AssetReferenceDef>(FilterRef_type_id);
		FXFilterRef = serialized->unwrap_into<rivet::ddl::generated::AssetReferenceDef>(FXFilterRef_type_id);
		FilterActorRef = serialized->unwrap_into<rivet::ddl::generated::AssetReferenceDef>(FilterActorRef_type_id);
		DisableAaMode = serialized->get_bool(DisableAaMode_type_id);
		ComputeLuminanceEarly = serialized->get_bool(ComputeLuminanceEarly_type_id);
		BlendMin = serialized->get_float(BlendMin_type_id);
		BlendMax = serialized->get_float(BlendMax_type_id);
		ExcludeIndoors = serialized->get_bool(ExcludeIndoors_type_id);
		ExcludeInGame = serialized->get_bool(ExcludeInGame_type_id); 
	}

	auto
	FilterData::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	FilterData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FilterData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FilterData> {
		if (incoming_type_id == FilterData::type_id) {
			return std::make_shared<FilterData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
