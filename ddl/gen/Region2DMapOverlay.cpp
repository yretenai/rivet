// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Region2DMapOverlayLayer.hpp> 

#include <rivet/ddl/generated/Region2DMapOverlay.hpp>

namespace rivet::ddl::generated {
	Region2DMapOverlay::Region2DMapOverlay([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MapImage = serialized->get_string(MapImage_type_id, {});
		OptionalMapLayers = serialized->unwrap_into_many<rivet::ddl::generated::Region2DMapOverlayLayer>(OptionalMapLayers_type_id);
		Left = serialized->get_float(Left_type_id, 0.000000f);
		Top = serialized->get_float(Top_type_id, 0.000000f);
		Width = serialized->get_float(Width_type_id, 0.000000f);
		Height = serialized->get_float(Height_type_id, 0.000000f);
		AutoGenerateMap = serialized->get_bool(AutoGenerateMap_type_id, false);
		AutoMapCameraY = serialized->get_float(AutoMapCameraY_type_id, 500.000000f);
		AutoMapMinX = serialized->get_float(AutoMapMinX_type_id, -1000.000000f);
		AutoMapMaxX = serialized->get_float(AutoMapMaxX_type_id, 1000.000000f);
		AutoMapMinZ = serialized->get_float(AutoMapMinZ_type_id, -1000.000000f);
		AutoMapMaxZ = serialized->get_float(AutoMapMaxZ_type_id, 1000.000000f); 
	}

	[[nodiscard]] auto
	Region2DMapOverlay::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Region2DMapOverlay::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Region2DMapOverlay> {
		if (incoming_type_id == Region2DMapOverlay::type_id) {
			return std::make_shared<Region2DMapOverlay>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
