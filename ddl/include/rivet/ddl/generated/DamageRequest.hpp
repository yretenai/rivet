// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/KnockbackLevels.hpp>
#include <rivet/ddl/generated/bitsets/x65d7dac2.hpp>
#include <rivet/ddl/generated/enums/DamageTypes.hpp>
#include <rivet/ddl/generated/EventBase.hpp> 

namespace rivet::ddl::generated {
	struct CustomDamageData;
	struct DamageStatusData; 

	struct RIVET_DDL_SHARED DamageRequest : EventBase {
		constexpr static std::string_view type_name = "DamageRequest";
		constexpr static rivet::rivet_type_id type_id = 0x219aab06;

		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view Category_type_name = "Category";
		constexpr static rivet::rivet_type_id Category_type_id = 0xfc4da4b1;
		constexpr static std::string_view Amount_type_name = "Amount";
		constexpr static rivet::rivet_type_id Amount_type_id = 0xb0d93e25;
		constexpr static std::string_view Duration_type_name = "Duration";
		constexpr static rivet::rivet_type_id Duration_type_id = 0x7c5e3db0;
		constexpr static std::string_view TickInterval_type_name = "TickInterval";
		constexpr static rivet::rivet_type_id TickInterval_type_id = 0xd5fa1e27;
		constexpr static std::string_view Knockback_type_name = "Knockback";
		constexpr static rivet::rivet_type_id Knockback_type_id = 0x2e553fdd;
		constexpr static std::string_view KnockbackAmount_type_name = "KnockbackAmount";
		constexpr static rivet::rivet_type_id KnockbackAmount_type_id = 0x7b1e600b;
		constexpr static std::string_view KineticMultiplier_type_name = "KineticMultiplier";
		constexpr static rivet::rivet_type_id KineticMultiplier_type_id = 0xb63daab;
		constexpr static std::string_view ConditionDuration_type_name = "ConditionDuration";
		constexpr static rivet::rivet_type_id ConditionDuration_type_id = 0x6d5955c;
		constexpr static std::string_view RequestFlags_type_name = "RequestFlags";
		constexpr static rivet::rivet_type_id RequestFlags_type_id = 0x2bc801df;
		constexpr static std::string_view IgnoreDuration_type_name = "IgnoreDuration";
		constexpr static rivet::rivet_type_id IgnoreDuration_type_id = 0x2ee45555;
		constexpr static std::string_view StatusData_type_name = "StatusData";
		constexpr static rivet::rivet_type_id StatusData_type_id = 0x45f34b3c;
		constexpr static std::string_view CustomData_type_name = "CustomData";
		constexpr static rivet::rivet_type_id CustomData_type_id = 0x3625e0df;
		constexpr static std::string_view ImpactImpulse_type_name = "ImpactImpulse";
		constexpr static rivet::rivet_type_id ImpactImpulse_type_id = 0x3aa81718;
		constexpr static std::string_view ImpactVelocity_type_name = "ImpactVelocity";
		constexpr static rivet::rivet_type_id ImpactVelocity_type_id = 0xe8b4cc1a;
		constexpr static std::string_view Weapon_type_name = "Weapon";
		constexpr static rivet::rivet_type_id Weapon_type_id = 0x574be981; 

		explicit DamageRequest() = default;
		explicit DamageRequest([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::DamageTypes Type {};
		rivet::ddl::generated::DamageTypes Category {};
		float Amount {};
		float Duration {};
		float TickInterval {};
		rivet::ddl::generated::KnockbackLevels Knockback {};
		float KnockbackAmount {};
		float KineticMultiplier {};
		float ConditionDuration {};
		rivet::ddl::generated::x65d7dac2 RequestFlags {};
		float IgnoreDuration {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DamageStatusData>> StatusData {};
		std::vector<std::shared_ptr<rivet::ddl::generated::CustomDamageData>> CustomData {};
		float ImpactImpulse {};
		float ImpactVelocity {};
		uint16_t Weapon {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DamageRequest>;
	};
} // namespace rivet::ddl::generated

// clang-format on
