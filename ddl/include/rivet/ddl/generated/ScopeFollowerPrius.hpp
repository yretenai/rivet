// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ScopeFollowerPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ScopeFollowerPrius";
		constexpr static rivet::rivet_type_id type_id = 0x34b84aa9;

		constexpr static std::string_view Distance_type_name = "Distance";
		constexpr static rivet::rivet_type_id Distance_type_id = 0xe69327f1;
		constexpr static std::string_view ZoomDistance_type_name = "ZoomDistance";
		constexpr static rivet::rivet_type_id ZoomDistance_type_id = 0xb80ceb34;
		constexpr static std::string_view ZScale_type_name = "ZScale";
		constexpr static rivet::rivet_type_id ZScale_type_id = 0xcea63cfe;
		constexpr static std::string_view ModelHeight_type_name = "ModelHeight";
		constexpr static rivet::rivet_type_id ModelHeight_type_id = 0xcb467d89;
		constexpr static std::string_view XRotationDistance_type_name = "XRotationDistance";
		constexpr static rivet::rivet_type_id XRotationDistance_type_id = 0x43db3129;
		constexpr static std::string_view YRotationDistance_type_name = "YRotationDistance";
		constexpr static rivet::rivet_type_id YRotationDistance_type_id = 0xc47dfa6a;
		constexpr static std::string_view TweenSpeed_type_name = "TweenSpeed";
		constexpr static rivet::rivet_type_id TweenSpeed_type_id = 0x286238e9; 

		explicit ScopeFollowerPrius() = default;
		explicit ScopeFollowerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float Distance {};
		float ZoomDistance {};
		float ZScale {};
		float ModelHeight {};
		float XRotationDistance {};
		float YRotationDistance {};
		float TweenSpeed {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ScopeFollowerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
