// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/TargetLocationData.hpp>

namespace rivet::ddl::generated {
	TargetLocationData::TargetLocationData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		LocationType = serialized->get_enum<rivet::ddl::generated::x61afe359>(LocationType_type_id, rivet::ddl::generated::x61afe359_values, rivet::ddl::generated::x61afe359::BSphere);
		NameHash = serialized->get_string(NameHash_type_id, "");
		Position = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Position_type_id);
		BodyPart = serialized->get_enum<rivet::ddl::generated::x457f748b>(BodyPart_type_id, rivet::ddl::generated::x457f748b_values, rivet::ddl::generated::x457f748b::Unknown);
		BodyPartName = serialized->get_string(BodyPartName_type_id, ""); 
	}

	[[nodiscard]] auto
	TargetLocationData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TargetLocationData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TargetLocationData> {
		if (incoming_type_id == TargetLocationData::type_id) {
			return std::make_shared<TargetLocationData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
