// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BreakableComponentPrius.hpp>
#include <rivet/ddl/generated/BreakableStagesComponentPrius.hpp>
#include <rivet/ddl/generated/PhysicsCustomizationProperties.hpp> 

#include <rivet/ddl/generated/BreakableBasePrius.hpp>

namespace rivet::ddl::generated {
	BreakableBasePrius::BreakableBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SaveDestroyedState = serialized->get_bool(SaveDestroyedState_type_id, false);
		StartDestroyed = serialized->get_bool(StartDestroyed_type_id, false);
		ExtraProp = serialized->get_bool(ExtraProp_type_id, false);
		MaxHealth = serialized->get_float(MaxHealth_type_id, 100.000000);
		ManualBreak = serialized->get_bool(ManualBreak_type_id, false);
		ChunkExitVelocity = serialized->get_float(ChunkExitVelocity_type_id, 5.000000);
		RandomChunkVelocity = serialized->get_bool(RandomChunkVelocity_type_id, false);
		ChunkVelocityUpOnly = serialized->get_bool(ChunkVelocityUpOnly_type_id, true);
		ChunkLifeTimeMin = serialized->get_float(ChunkLifeTimeMin_type_id, 4.000000);
		ChunkLifeTimeMax = serialized->get_float(ChunkLifeTimeMax_type_id, 8.000000);
		CullChunksOffscreen = serialized->get_bool(CullChunksOffscreen_type_id, false);
		ChunkCollisionStartDelay = serialized->get_float(ChunkCollisionStartDelay_type_id, 0.000000);
		ChunksFallForward = serialized->get_bool(ChunksFallForward_type_id, false);
		SpawnPos = serialized->get_enum<rivet::ddl::generated::x65c63950>(SpawnPos_type_id, rivet::ddl::generated::x65c63950_values, rivet::ddl::generated::x65c63950::Locators);
		SpawnChunksAtOffsetPositions = serialized->get_bool(SpawnChunksAtOffsetPositions_type_id, false);
		DebrisExitVelocity = serialized->get_float(DebrisExitVelocity_type_id, 10.000000);
		DebrisAngularVel = serialized->get_float(DebrisAngularVel_type_id, 3.000000);
		DebrisAngularDirection = serialized->get_enum<rivet::ddl::generated::x29cc5733>(DebrisAngularDirection_type_id, rivet::ddl::generated::x29cc5733_values, rivet::ddl::generated::x29cc5733::Random);
		DebrisPerChunk = serialized->get_uint32(DebrisPerChunk_type_id, 3);
		FastCollision = serialized->get_bool(FastCollision_type_id, true);
		DebrisFastCollision = serialized->get_bool(DebrisFastCollision_type_id, true);
		CullBySize = serialized->get_bool(CullBySize_type_id, true);
		BlendFromHitDirection = serialized->get_float(BlendFromHitDirection_type_id, 0.500000);
		ChunkPhysicsCustomizations = serialized->unwrap_into<rivet::ddl::generated::PhysicsCustomizationProperties>(ChunkPhysicsCustomizations_type_id);
		UseContactEvents = serialized->get_bool(UseContactEvents_type_id, false);
		BreaksAtImpactMomentum = serialized->get_float(BreaksAtImpactMomentum_type_id, 0.000000);
		TakeImpactDamage = serialized->get_bool(TakeImpactDamage_type_id, false);
		ScriptDamageOnly = serialized->get_bool(ScriptDamageOnly_type_id, false);
		AreaDamage = serialized->get_float(AreaDamage_type_id, 0.000000);
		AreaDamageType = serialized->get_enum<rivet::ddl::generated::DamageTypes>(AreaDamageType_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::Explosion);
		AreaDamageRadius = serialized->get_float(AreaDamageRadius_type_id, 0.000000);
		AreaDamageKnockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(AreaDamageKnockback_type_id, rivet::ddl::generated::KnockbackLevels_values, rivet::ddl::generated::KnockbackLevels::None);
		AreaStatusType = serialized->get_enum<rivet::ddl::generated::DamageTypes>(AreaStatusType_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::None);
		AreaStatusAmount = serialized->get_float(AreaStatusAmount_type_id, 0.000000);
		DamageAttacker = serialized->get_bool(DamageAttacker_type_id, true);
		DamageIsPercent = serialized->get_bool(DamageIsPercent_type_id, false);
		OnDestroyedAnimation = serialized->get_string(OnDestroyedAnimation_type_id, "");
		StartDestroyedAnimation = serialized->get_string(StartDestroyedAnimation_type_id, "");
		DamageReactAnimation = serialized->get_string(DamageReactAnimation_type_id, "");
		SnapToEndOfAnimation = serialized->get_bool(SnapToEndOfAnimation_type_id, false);
		DoExplosionOnSwitchState = serialized->get_bool(DoExplosionOnSwitchState_type_id, true);
		DeleteOnDestroy = serialized->get_bool(DeleteOnDestroy_type_id, false);
		RemoveCollision = serialized->get_bool(RemoveCollision_type_id, false);
		RemoveAnimClues = serialized->get_bool(RemoveAnimClues_type_id, false);
		StumpLifeTime = serialized->get_float(StumpLifeTime_type_id, 0.000000);
		ShedAttachmentsOnDeath = serialized->get_bool(ShedAttachmentsOnDeath_type_id, true);
		DependentBreakables = serialized->get_uint64s(DependentBreakables_type_id);
		DependentDelay = serialized->get_float(DependentDelay_type_id, 0.000000);
		VolumeActors = serialized->get_uint64s(VolumeActors_type_id);
		DeactivateActors = serialized->get_uint64s(DeactivateActors_type_id);
		LocatorsInPrev = serialized->get_bool(LocatorsInPrev_type_id, false); 
	}

	[[nodiscard]] auto
	BreakableBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BreakableBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BreakableBasePrius> {
		if (incoming_type_id == BreakableBasePrius::type_id) {
			return std::make_shared<BreakableBasePrius>(serialized);
		}

		auto BreakableStagesComponentPrius_ptr = BreakableStagesComponentPrius::from_substruct(incoming_type_id, serialized);
		if (BreakableStagesComponentPrius_ptr != nullptr) {
			return BreakableStagesComponentPrius_ptr;
		}

		auto BreakableComponentPrius_ptr = BreakableComponentPrius::from_substruct(incoming_type_id, serialized);
		if (BreakableComponentPrius_ptr != nullptr) {
			return BreakableComponentPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
