// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HomingScriptMotionPrius.hpp>

namespace rivet::ddl::generated {
	HomingScriptMotionPrius::HomingScriptMotionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ScriptMotionBasePrius(serialized) {
		InitialSpeed = serialized->get_float(InitialSpeed_type_id, 10.000000f);
		FlightSpeed = serialized->get_float(FlightSpeed_type_id, 10.000000f);
		FlightAcceleration = serialized->get_float(FlightAcceleration_type_id, 0.000000f);
		HomingSpeed = serialized->get_float(HomingSpeed_type_id, 45.000000f);
		BreakoffAngle = serialized->get_float(BreakoffAngle_type_id, 30.000000f);
		HomingSpeedScaleFactor = serialized->get_float(HomingSpeedScaleFactor_type_id, 1.000000f);
		HomingSpeedScaleTimeStart = serialized->get_float(HomingSpeedScaleTimeStart_type_id, 0.000000f);
		HomingSpeedScaleTimeFull = serialized->get_float(HomingSpeedScaleTimeFull_type_id, -1.000000f);
		HomingSpeedScaleDistStart = serialized->get_float(HomingSpeedScaleDistStart_type_id, 0.000000f);
		HomingSpeedScaleDistFull = serialized->get_float(HomingSpeedScaleDistFull_type_id, -1.000000f);
		InitialArcPitchMin = serialized->get_float(InitialArcPitchMin_type_id, 0.000000f);
		InitialArcPitchMax = serialized->get_float(InitialArcPitchMax_type_id, 0.000000f);
		InitialArcYawMin = serialized->get_float(InitialArcYawMin_type_id, 0.000000f);
		InitialArcYawMax = serialized->get_float(InitialArcYawMax_type_id, 0.000000f);
		ScaleHomingRange = serialized->get_bool(ScaleHomingRange_type_id, false);
		StopHomingOnReachDest = serialized->get_bool(StopHomingOnReachDest_type_id, true); 
	}

	[[nodiscard]] auto
	HomingScriptMotionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HomingScriptMotionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HomingScriptMotionPrius> {
		if (incoming_type_id == HomingScriptMotionPrius::type_id) {
			return std::make_shared<HomingScriptMotionPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
