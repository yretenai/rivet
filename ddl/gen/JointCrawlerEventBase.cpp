// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/IncinerateJointEvent.hpp>
#include <rivet/ddl/generated/FossilizeJointEvent.hpp> 

#include <rivet/ddl/generated/JointCrawlerEventBase.hpp>

namespace rivet::ddl::generated {
	JointCrawlerEventBase::JointCrawlerEventBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		Locator = serialized->get_string(Locator_type_id, {});
		Stop = serialized->get_bool(Stop_type_id, false); 
	}

	[[nodiscard]] auto
	JointCrawlerEventBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	JointCrawlerEventBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<JointCrawlerEventBase> {
		if (incoming_type_id == JointCrawlerEventBase::type_id) {
			return std::make_shared<JointCrawlerEventBase>(serialized);
		}

		auto FossilizeJointEvent_ptr = FossilizeJointEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeJointEvent_ptr != nullptr) {
			return FossilizeJointEvent_ptr;
		}

		auto IncinerateJointEvent_ptr = IncinerateJointEvent::from_substruct(incoming_type_id, serialized);
		if (IncinerateJointEvent_ptr != nullptr) {
			return IncinerateJointEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
