// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimModWrapper.hpp> 

#include <rivet/ddl/generated/LaserShotTypeAnimEventDriven.hpp>

namespace rivet::ddl::generated {
	LaserShotTypeAnimEventDriven::LaserShotTypeAnimEventDriven([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotComboLaserShotType(serialized) {
		AllowUseWhileMoving = serialized->get_bool(AllowUseWhileMoving_type_id);
		StrafeShootPartialAnim = serialized->get_string(StrafeShootPartialAnim_type_id);
		ScaleTellTime = serialized->get_float(ScaleTellTime_type_id);
		ScaleShootTime = serialized->get_float(ScaleShootTime_type_id);
		ScaleRecoveryTime = serialized->get_float(ScaleRecoveryTime_type_id);
		TweakHeadingTowardsTarget = serialized->get_bool(TweakHeadingTowardsTarget_type_id);
		TweakHeadingTime = serialized->get_float(TweakHeadingTime_type_id);
		UseAimingComponent = serialized->get_bool(UseAimingComponent_type_id);
		StartAimModOnStateStart = serialized->get_bool(StartAimModOnStateStart_type_id);
		EndAimModsOnShootEnd = serialized->get_bool(EndAimModsOnShootEnd_type_id);
		MimicShotRate = serialized->get_float(MimicShotRate_type_id);
		LimitRange = serialized->get_bool(LimitRange_type_id);
		MinRange = serialized->get_float(MinRange_type_id);
		MaxRange = serialized->get_float(MaxRange_type_id);
		AimMods = serialized->unwrap_into_many<rivet::ddl::generated::AimModWrapper>(AimMods_type_id); 
	}

	[[nodiscard]] auto
	LaserShotTypeAnimEventDriven::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LaserShotTypeAnimEventDriven::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LaserShotTypeAnimEventDriven> {
		if (incoming_type_id == LaserShotTypeAnimEventDriven::type_id) {
			return std::make_shared<LaserShotTypeAnimEventDriven>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
