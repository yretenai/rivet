// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UI_Cinematic2ComponentPrius.hpp>

namespace rivet::ddl::generated {
	UI_Cinematic2ComponentPrius::UI_Cinematic2ComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CinematicAsset = serialized->get_string(CinematicAsset_type_id);
		CinematicAssetId = serialized->get_uint64(CinematicAssetId_type_id);
		PlayBackShot = serialized->get_string(PlayBackShot_type_id);
		ScriptDriven = serialized->get_bool(ScriptDriven_type_id);
		CodeDriven = serialized->get_bool(CodeDriven_type_id);
		IsWorldSpaceCinematic = serialized->get_bool(IsWorldSpaceCinematic_type_id);
		EditorSpawned = serialized->get_bool(EditorSpawned_type_id);
		ViewerSpawned = serialized->get_bool(ViewerSpawned_type_id); 
	}

	[[nodiscard]] auto
	UI_Cinematic2ComponentPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UI_Cinematic2ComponentPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UI_Cinematic2ComponentPrius> {
		if (incoming_type_id == UI_Cinematic2ComponentPrius::type_id) {
			return std::make_shared<UI_Cinematic2ComponentPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
