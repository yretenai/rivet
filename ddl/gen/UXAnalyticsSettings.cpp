// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UXAnalyticsSettings.hpp>

namespace rivet::ddl::generated {
	UXAnalyticsSettings::UXAnalyticsSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id);
		TitleName = serialized->get_string(TitleName_type_id);
		IssuerId = serialized->get_string(IssuerId_type_id);
		AppId = serialized->get_string(AppId_type_id);
		ApiKey = serialized->get_string(ApiKey_type_id);
		SecretKey = serialized->get_string(SecretKey_type_id);
		ServerName = serialized->get_string(ServerName_type_id);
		ConfigServerName = serialized->get_string(ConfigServerName_type_id);
		DebugEventMode = serialized->get_enum<rivet::ddl::generated::x9c7f04c6>(DebugEventMode_type_id, rivet::ddl::generated::x9c7f04c6_values); 
	}

	[[nodiscard]] auto
	UXAnalyticsSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UXAnalyticsSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UXAnalyticsSettings> {
		if (incoming_type_id == UXAnalyticsSettings::type_id) {
			return std::make_shared<UXAnalyticsSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
