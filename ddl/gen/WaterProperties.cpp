// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/WaterProperties.hpp>

namespace rivet::ddl::generated {
	WaterProperties::WaterProperties([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		WaterColor = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(WaterColor_type_id);
		WaterColorScale = serialized->get_float(WaterColorScale_type_id);
		WaterScale = serialized->get_float(WaterScale_type_id);
		FoamColor = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(FoamColor_type_id);
		FoamAmp = serialized->get_float(FoamAmp_type_id);
		FoamPower = serialized->get_float(FoamPower_type_id);
		WaterDepth = serialized->get_float(WaterDepth_type_id);
		WaterGloss = serialized->get_float(WaterGloss_type_id);
		Darkening = serialized->get_float(Darkening_type_id);
		FlowRate = serialized->get_float(FlowRate_type_id);
		FlowPhase = serialized->get_float(FlowPhase_type_id);
		FlowNoise = serialized->get_float(FlowNoise_type_id);
		CausticsIntensity = serialized->get_float(CausticsIntensity_type_id);
		CausticsDepthBias = serialized->get_float(CausticsDepthBias_type_id);
		FlowMapPath = serialized->get_string(FlowMapPath_type_id); 
	}

	[[nodiscard]] auto
	WaterProperties::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WaterProperties::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WaterProperties> {
		if (incoming_type_id == WaterProperties::type_id) {
			return std::make_shared<WaterProperties>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
