// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UIViewBaseData.hpp> 

#include <rivet/ddl/generated/UIViewRTTPrius.hpp>

namespace rivet::ddl::generated {
	UIViewRTTPrius::UIViewRTTPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ViewType = serialized->unwrap_into<rivet::ddl::generated::UIViewBaseData>(ViewType_type_id);
		AutoLoadViewOnActivate = serialized->get_bool(AutoLoadViewOnActivate_type_id, true);
		Material = serialized->get_string(Material_type_id, "lambert1");
		TextureToReplace = serialized->get_string(TextureToReplace_type_id, "scaleform_Texture");
		MaintainAspectRatio = serialized->get_bool(MaintainAspectRatio_type_id, false);
		MaterialScaleVar = serialized->get_string(MaterialScaleVar_type_id, "uv_scale");
		MaterialOffsetXVar = serialized->get_string(MaterialOffsetXVar_type_id, "offset_u");
		MaterialOffsetYVar = serialized->get_string(MaterialOffsetYVar_type_id, "offset_v");
		Apply3DUIElementFlag = serialized->get_bool(Apply3DUIElementFlag_type_id, true);
		DrawInDebugCam = serialized->get_bool(DrawInDebugCam_type_id, false); 
	}

	[[nodiscard]] auto
	UIViewRTTPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UIViewRTTPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIViewRTTPrius> {
		if (incoming_type_id == UIViewRTTPrius::type_id) {
			return std::make_shared<UIViewRTTPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
