// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/DamageTypes.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED GrindMinePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "GrindMinePrius";
		constexpr static rivet::rivet_type_id type_id = 0x99a0273f;

		constexpr static std::string_view ActivateVolume_type_name = "ActivateVolume";
		constexpr static rivet::rivet_type_id ActivateVolume_type_id = 0x63f2b7c1;
		constexpr static std::string_view IntroCurve_type_name = "IntroCurve";
		constexpr static rivet::rivet_type_id IntroCurve_type_id = 0x7bda258a;
		constexpr static std::string_view IntroTime_type_name = "IntroTime";
		constexpr static rivet::rivet_type_id IntroTime_type_id = 0xfa185edd;
		constexpr static std::string_view TransitionPercent_type_name = "TransitionPercent";
		constexpr static rivet::rivet_type_id TransitionPercent_type_id = 0xd7213d20;
		constexpr static std::string_view OscillateCurve_type_name = "OscillateCurve";
		constexpr static rivet::rivet_type_id OscillateCurve_type_id = 0x57686ca7;
		constexpr static std::string_view OscillationRate_type_name = "OscillationRate";
		constexpr static rivet::rivet_type_id OscillationRate_type_id = 0x3f41fb81;
		constexpr static std::string_view Range_type_name = "Range";
		constexpr static rivet::rivet_type_id Range_type_id = 0x8ad49688;
		constexpr static std::string_view DamagePercent_type_name = "DamagePercent";
		constexpr static rivet::rivet_type_id DamagePercent_type_id = 0x7bbba4a0;
		constexpr static std::string_view DamageType_type_name = "DamageType";
		constexpr static rivet::rivet_type_id DamageType_type_id = 0x840c154d;
		constexpr static std::string_view SingleUse_type_name = "SingleUse";
		constexpr static rivet::rivet_type_id SingleUse_type_id = 0xaf8109bc;
		constexpr static std::string_view ExplodeWhenHit_type_name = "ExplodeWhenHit";
		constexpr static rivet::rivet_type_id ExplodeWhenHit_type_id = 0xb9a6f9ff;
		constexpr static std::string_view HitReactVolume_type_name = "HitReactVolume";
		constexpr static rivet::rivet_type_id HitReactVolume_type_id = 0x87fe775c;
		constexpr static std::string_view BobFrequencyMin_type_name = "BobFrequencyMin";
		constexpr static rivet::rivet_type_id BobFrequencyMin_type_id = 0x82726067;
		constexpr static std::string_view BobFrequencyMax_type_name = "BobFrequencyMax";
		constexpr static rivet::rivet_type_id BobFrequencyMax_type_id = 0xbe7f5f3e;
		constexpr static std::string_view BobAmplitudeMin_type_name = "BobAmplitudeMin";
		constexpr static rivet::rivet_type_id BobAmplitudeMin_type_id = 0x7caf231e;
		constexpr static std::string_view BobAmplitudeMax_type_name = "BobAmplitudeMax";
		constexpr static rivet::rivet_type_id BobAmplitudeMax_type_id = 0x40a21c47; 

		explicit GrindMinePrius() = default;
		explicit GrindMinePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t ActivateVolume {};
		uint64_t IntroCurve {};
		float IntroTime {};
		float TransitionPercent {};
		uint64_t OscillateCurve {};
		float OscillationRate {};
		float Range {};
		float DamagePercent {};
		rivet::ddl::generated::DamageTypes DamageType {};
		bool SingleUse {};
		bool ExplodeWhenHit {};
		uint64_t HitReactVolume {};
		float BobFrequencyMin {};
		float BobFrequencyMax {};
		float BobAmplitudeMin {};
		float BobAmplitudeMax {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GrindMinePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
