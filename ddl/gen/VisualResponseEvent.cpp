// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VisualFxSpawnEvent.hpp> 

#include <rivet/ddl/generated/VisualResponseEvent.hpp>

namespace rivet::ddl::generated {
	VisualResponseEvent::VisualResponseEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ResponseEvent(serialized) {
		AttachLocJoint = serialized->get_string(AttachLocJoint_type_id);
		FollowLocJoint = serialized->get_bool(FollowLocJoint_type_id);
		FollowActor = serialized->get_bool(FollowActor_type_id);
		FXPackage = serialized->get_string(FXPackage_type_id);
		StartEffect = serialized->get_int8(StartEffect_type_id);
		OnConduitDelete = serialized->get_int8(OnConduitDelete_type_id);
		StartDelay = serialized->get_float(StartDelay_type_id);
		FadeOut = serialized->get_float(FadeOut_type_id);
		FadeIn = serialized->get_float(FadeIn_type_id);
		RefLocator = serialized->get_string(RefLocator_type_id);
		SingleViewport = serialized->get_int8(SingleViewport_type_id);
		ExcludeViewport = serialized->get_int8(ExcludeViewport_type_id);
		ApplyParentInfluence = serialized->get_bool(ApplyParentInfluence_type_id);
		TargetModelMaterialMappingHashes = serialized->get_string(TargetModelMaterialMappingHashes_type_id);
		ExcludeModelMaterialMappingHashes = serialized->get_string(ExcludeModelMaterialMappingHashes_type_id); 
	}

	[[nodiscard]] auto
	VisualResponseEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VisualResponseEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualResponseEvent> {
		if (incoming_type_id == VisualResponseEvent::type_id) {
			return std::make_shared<VisualResponseEvent>(serialized);
		}

		auto VisualFxSpawnEvent_ptr = VisualFxSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (VisualFxSpawnEvent_ptr != nullptr) {
			return VisualFxSpawnEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
