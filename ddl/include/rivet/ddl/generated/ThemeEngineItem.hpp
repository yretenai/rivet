// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ThemeEngineItem : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ThemeEngineItem";
		constexpr static rivet::rivet_type_id type_id = 0xb64d3606;

		constexpr static std::string_view ColorBase_type_name = "ColorBase";
		constexpr static rivet::rivet_type_id ColorBase_type_id = 0x7fb52226;
		constexpr static std::string_view ColorHighlight_type_name = "ColorHighlight";
		constexpr static rivet::rivet_type_id ColorHighlight_type_id = 0xeb747511;
		constexpr static std::string_view ColorText_type_name = "ColorText";
		constexpr static rivet::rivet_type_id ColorText_type_id = 0x848a7b80;
		constexpr static std::string_view IsHighContrast_type_name = "IsHighContrast";
		constexpr static rivet::rivet_type_id IsHighContrast_type_id = 0x50393a71; 

		explicit ThemeEngineItem() = default;
		explicit ThemeEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t ColorBase {};
		uint32_t ColorHighlight {};
		uint32_t ColorText {};
		bool IsHighContrast {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ThemeEngineItem>;
	};
} // namespace rivet::ddl::generated

// clang-format on
