// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Prims.hpp> 

#include <rivet/ddl/generated/Proof2.hpp>

namespace rivet::ddl::generated {
	Proof2::Proof2([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		p = serialized->unwrap_into<rivet::ddl::generated::Prims>(p_type_id);
		FArr = serialized->get_int32s(FArr_type_id);
		DArr = serialized->get_int32s(DArr_type_id);
		Str = serialized->get_string(Str_type_id, "asd");
		S = serialized->get_enum<rivet::ddl::generated::x758aa4a7>(S_type_id, rivet::ddl::generated::x758aa4a7_values, rivet::ddl::generated::x758aa4a7::C);
		B = serialized->get_bitset<rivet::ddl::generated::x1ea7317b>(B_type_id, rivet::ddl::generated::x1ea7317b_values, 3u);
		PrimArray = serialized->unwrap_into_many<rivet::ddl::generated::Prims>(PrimArray_type_id);
		PrimFixedArray = serialized->unwrap_into_many<rivet::ddl::generated::Prims>(PrimFixedArray_type_id);
		HM = serialized->get_int32s(HM_type_id);
		SHM = serialized->get_strings(SHM_type_id);
		FHM = serialized->get_int32s(FHM_type_id); 
	}

	[[nodiscard]] auto
	Proof2::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Proof2::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Proof2> {
		if (incoming_type_id == Proof2::type_id) {
			return std::make_shared<Proof2>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
