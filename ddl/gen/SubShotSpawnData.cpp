// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/SubShotSpawnData.hpp>

namespace rivet::ddl::generated {
	SubShotSpawnData::SubShotSpawnData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ActorSpawnData(serialized) {
		AssetId = serialized->get_uint64(AssetId_type_id, 0);
		ZoneIndex = serialized->get_int32(ZoneIndex_type_id, 0);
		Position = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Position_type_id);
		Facing = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Facing_type_id);
		Up = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Up_type_id);
		Scale = serialized->get_float(Scale_type_id, 1.000000);
		ParentHandle = serialized->get_uint32(ParentHandle_type_id, 0);
		ParentAttackId = serialized->get_uint32(ParentAttackId_type_id, 0);
		AttackId = serialized->get_uint32(AttackId_type_id, 0); 
	}

	[[nodiscard]] auto
	SubShotSpawnData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SubShotSpawnData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SubShotSpawnData> {
		if (incoming_type_id == SubShotSpawnData::type_id) {
			return std::make_shared<SubShotSpawnData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
