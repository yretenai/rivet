// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StructuredLogAnimTreeBiBlendNode.hpp>

namespace rivet::ddl::generated {
	StructuredLogAnimTreeBiBlendNode::StructuredLogAnimTreeBiBlendNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): StructuredLogAnimTreeNode(serialized) {
		BlendEventsType = serialized->get_enum<rivet::ddl::generated::x8dc10932>(BlendEventsType_type_id, rivet::ddl::generated::x8dc10932_values, rivet::ddl::generated::x8dc10932::AnimBlendAuxTypeDominant);
		BlendCustomTrackType = serialized->get_enum<rivet::ddl::generated::x8dc10932>(BlendCustomTrackType_type_id, rivet::ddl::generated::x8dc10932_values, rivet::ddl::generated::x8dc10932::AnimBlendAuxTypeDominant);
		BlendMorphType = serialized->get_enum<rivet::ddl::generated::x8dc10932>(BlendMorphType_type_id, rivet::ddl::generated::x8dc10932_values, rivet::ddl::generated::x8dc10932::AnimBlendAuxTypeDominant);
		Factor = serialized->get_float(Factor_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	StructuredLogAnimTreeBiBlendNode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StructuredLogAnimTreeBiBlendNode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StructuredLogAnimTreeBiBlendNode> {
		if (incoming_type_id == StructuredLogAnimTreeBiBlendNode::type_id) {
			return std::make_shared<StructuredLogAnimTreeBiBlendNode>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
