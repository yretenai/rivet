// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimModMissTargetGamePrius.hpp>

namespace rivet::ddl::generated {
	AimModMissTargetGamePrius::AimModMissTargetGamePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): AimModifierPrius(serialized) {
		MissOffsetXZMin = serialized->get_float(MissOffsetXZMin_type_id);
		MissOffsetXZMax = serialized->get_float(MissOffsetXZMax_type_id);
		MissOffsetYMin = serialized->get_float(MissOffsetYMin_type_id);
		MissOffsetYMax = serialized->get_float(MissOffsetYMax_type_id);
		MissOffsetXZMinFromScreen = serialized->get_float(MissOffsetXZMinFromScreen_type_id);
		MissOffsetXZMaxFromScreen = serialized->get_float(MissOffsetXZMaxFromScreen_type_id);
		MissWhenOffScreen = serialized->get_bool(MissWhenOffScreen_type_id);
		AttacksUntilAccurate_OffScreen = serialized->get_int32(AttacksUntilAccurate_OffScreen_type_id);
		MissAtRange = serialized->get_bool(MissAtRange_type_id);
		MissRange = serialized->get_float(MissRange_type_id);
		AttacksUntilAccurate_Range = serialized->get_int32(AttacksUntilAccurate_Range_type_id); 
	}

	auto
	AimModMissTargetGamePrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	AimModMissTargetGamePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AimModMissTargetGamePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimModMissTargetGamePrius> {
		if (incoming_type_id == AimModMissTargetGamePrius::type_id) {
			return std::make_shared<AimModMissTargetGamePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
