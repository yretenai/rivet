// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CurveAttachPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CurveAttachPrius";
		constexpr static rivet::rivet_type_id type_id = 0xbf4d256;

		constexpr static std::string_view StartAttachActor_type_name = "StartAttachActor";
		constexpr static rivet::rivet_type_id StartAttachActor_type_id = 0x7f0e9134;
		constexpr static std::string_view StartAttachRelative_type_name = "StartAttachRelative";
		constexpr static rivet::rivet_type_id StartAttachRelative_type_id = 0x4b0102de;
		constexpr static std::string_view EndAttachActor_type_name = "EndAttachActor";
		constexpr static rivet::rivet_type_id EndAttachActor_type_id = 0x10d96c20;
		constexpr static std::string_view EndAttachRelative_type_name = "EndAttachRelative";
		constexpr static rivet::rivet_type_id EndAttachRelative_type_id = 0xe98bd19a;
		constexpr static std::string_view CurveLength_type_name = "CurveLength";
		constexpr static rivet::rivet_type_id CurveLength_type_id = 0xe5fa74f3;
		constexpr static std::string_view SwayMaxAngle_type_name = "SwayMaxAngle";
		constexpr static rivet::rivet_type_id SwayMaxAngle_type_id = 0x21f9728a;
		constexpr static std::string_view SwayFrequency_type_name = "SwayFrequency";
		constexpr static rivet::rivet_type_id SwayFrequency_type_id = 0xbe601592;
		constexpr static std::string_view StretchMaxDistance_type_name = "StretchMaxDistance";
		constexpr static rivet::rivet_type_id StretchMaxDistance_type_id = 0x5c9a4009;
		constexpr static std::string_view StretchFrequency_type_name = "StretchFrequency";
		constexpr static rivet::rivet_type_id StretchFrequency_type_id = 0xa12d363c;
		constexpr static std::string_view CurveModel_type_name = "CurveModel";
		constexpr static rivet::rivet_type_id CurveModel_type_id = 0x51da4873;
		constexpr static std::string_view CurveStartJoint_type_name = "CurveStartJoint";
		constexpr static rivet::rivet_type_id CurveStartJoint_type_id = 0x4b94d305;
		constexpr static std::string_view CurveEndJoint_type_name = "CurveEndJoint";
		constexpr static rivet::rivet_type_id CurveEndJoint_type_id = 0xc7b72c06;
		constexpr static std::string_view CurveModelVerticalOffset_type_name = "CurveModelVerticalOffset";
		constexpr static rivet::rivet_type_id CurveModelVerticalOffset_type_id = 0xc38ba667;
		constexpr static std::string_view CurveModelHorizontalOffset_type_name = "CurveModelHorizontalOffset";
		constexpr static rivet::rivet_type_id CurveModelHorizontalOffset_type_id = 0x4830ad14;
		constexpr static std::string_view UseLinearCurveSegments_type_name = "UseLinearCurveSegments";
		constexpr static rivet::rivet_type_id UseLinearCurveSegments_type_id = 0xa34f98b; 

		explicit CurveAttachPrius() = default;
		explicit CurveAttachPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t StartAttachActor {};
		bool StartAttachRelative {};
		uint64_t EndAttachActor {};
		bool EndAttachRelative {};
		float CurveLength {};
		float SwayMaxAngle {};
		float SwayFrequency {};
		float StretchMaxDistance {};
		float StretchFrequency {};
		std::string_view CurveModel {};
		std::string_view CurveStartJoint {};
		std::string_view CurveEndJoint {};
		float CurveModelVerticalOffset {};
		float CurveModelHorizontalOffset {};
		bool UseLinearCurveSegments {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CurveAttachPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
