// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DebugWarningMessageActionPrius.hpp> 

#include <rivet/ddl/generated/DebugMessageActionPrius.hpp>

namespace rivet::ddl::generated {
	DebugMessageActionPrius::DebugMessageActionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActionType = serialized->get_enum<rivet::ddl::generated::x10228b34>(ActionType_type_id, rivet::ddl::generated::x10228b34_values, rivet::ddl::generated::x10228b34::Debug);
		MessageText = serialized->get_string(MessageText_type_id, {});
		Duration = serialized->get_float(Duration_type_id, 6.000000f);
		ClearAllMsgs = serialized->get_bool(ClearAllMsgs_type_id, false);
		PosX = serialized->get_int32(PosX_type_id, 715u);
		PosY = serialized->get_int32(PosY_type_id, 60u);
		ColorPick = serialized->get_enum<rivet::ddl::generated::x3604158a>(ColorPick_type_id, rivet::ddl::generated::x3604158a_values, rivet::ddl::generated::x3604158a::White);
		FormatAsInt = serialized->get_bool(FormatAsInt_type_id, false); 
	}

	[[nodiscard]] auto
	DebugMessageActionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DebugMessageActionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DebugMessageActionPrius> {
		if (incoming_type_id == DebugMessageActionPrius::type_id) {
			return std::make_shared<DebugMessageActionPrius>(serialized);
		}

		auto DebugWarningMessageActionPrius_ptr = DebugWarningMessageActionPrius::from_substruct(incoming_type_id, serialized);
		if (DebugWarningMessageActionPrius_ptr != nullptr) {
			return DebugWarningMessageActionPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
