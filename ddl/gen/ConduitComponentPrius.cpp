// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ConduitComponentPrius.hpp>

namespace rivet::ddl::generated {
	ConduitComponentPrius::ConduitComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DestroyBehavior = serialized->get_enum<rivet::ddl::generated::xa54ee12b>(DestroyBehavior_type_id, rivet::ddl::generated::xa54ee12b_values, rivet::ddl::generated::xa54ee12b::Stop_Effects);
		StopAllSoundsOnDestroy = serialized->get_bool(StopAllSoundsOnDestroy_type_id, false);
		SkipDeactivateOnDestroy = serialized->get_bool(SkipDeactivateOnDestroy_type_id, false);
		ShareSoundSource = serialized->get_bool(ShareSoundSource_type_id, false);
		SoundSourceLocator = serialized->get_string(SoundSourceLocator_type_id, {});
		MaxActivateEventDelay = serialized->get_uint32(MaxActivateEventDelay_type_id, 0u);
		Mappings = serialized->get_strings(Mappings_type_id); 
	}

	[[nodiscard]] auto
	ConduitComponentPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ConduitComponentPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ConduitComponentPrius> {
		if (incoming_type_id == ConduitComponentPrius::type_id) {
			return std::make_shared<ConduitComponentPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
