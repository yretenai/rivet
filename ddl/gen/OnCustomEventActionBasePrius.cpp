// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/OnStringMessageActionPrius.hpp>
#include <rivet/ddl/generated/OnChildSpawnedActionPrius.hpp> 

#include <rivet/ddl/generated/OnCustomEventActionBasePrius.hpp>

namespace rivet::ddl::generated {
	OnCustomEventActionBasePrius::OnCustomEventActionBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartListeningOnInit = serialized->get_bool(StartListeningOnInit_type_id, true);
		RefireMax = serialized->get_int32(RefireMax_type_id, -1); 
	}

	[[nodiscard]] auto
	OnCustomEventActionBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	OnCustomEventActionBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OnCustomEventActionBasePrius> {
		if (incoming_type_id == OnCustomEventActionBasePrius::type_id) {
			return std::make_shared<OnCustomEventActionBasePrius>(serialized);
		}

		auto OnChildSpawnedActionPrius_ptr = OnChildSpawnedActionPrius::from_substruct(incoming_type_id, serialized);
		if (OnChildSpawnedActionPrius_ptr != nullptr) {
			return OnChildSpawnedActionPrius_ptr;
		}

		auto OnStringMessageActionPrius_ptr = OnStringMessageActionPrius::from_substruct(incoming_type_id, serialized);
		if (OnStringMessageActionPrius_ptr != nullptr) {
			return OnStringMessageActionPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
