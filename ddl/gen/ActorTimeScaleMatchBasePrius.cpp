// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ActorTimeScaleMatchActorPrius.hpp>
#include <rivet/ddl/generated/ActorTimeScaleMatchRealTimePrius.hpp> 

#include <rivet/ddl/generated/ActorTimeScaleMatchBasePrius.hpp>

namespace rivet::ddl::generated {
	ActorTimeScaleMatchBasePrius::ActorTimeScaleMatchBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MaxTime = serialized->get_float(MaxTime_type_id, -1.000000);
		BlendOutTime = serialized->get_float(BlendOutTime_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	ActorTimeScaleMatchBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ActorTimeScaleMatchBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActorTimeScaleMatchBasePrius> {
		if (incoming_type_id == ActorTimeScaleMatchBasePrius::type_id) {
			return std::make_shared<ActorTimeScaleMatchBasePrius>(serialized);
		}

		auto ActorTimeScaleMatchRealTimePrius_ptr = ActorTimeScaleMatchRealTimePrius::from_substruct(incoming_type_id, serialized);
		if (ActorTimeScaleMatchRealTimePrius_ptr != nullptr) {
			return ActorTimeScaleMatchRealTimePrius_ptr;
		}

		auto ActorTimeScaleMatchActorPrius_ptr = ActorTimeScaleMatchActorPrius::from_substruct(incoming_type_id, serialized);
		if (ActorTimeScaleMatchActorPrius_ptr != nullptr) {
			return ActorTimeScaleMatchActorPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
