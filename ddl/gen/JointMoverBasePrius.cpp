// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/JointMoveToPointPrius.hpp>
#include <rivet/ddl/generated/JointMoveSequencerPrius.hpp>
#include <rivet/ddl/generated/JointFollowTargetPrius.hpp> 

#include <rivet/ddl/generated/JointMoverBasePrius.hpp>

namespace rivet::ddl::generated {
	JointMoverBasePrius::JointMoverBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartEnabled = serialized->get_bool(StartEnabled_type_id);
		CreateJointMover = serialized->get_bool(CreateJointMover_type_id);
		Locator = serialized->get_string(Locator_type_id);
		Accel = serialized->get_float(Accel_type_id);
		Decel = serialized->get_float(Decel_type_id);
		Speed = serialized->get_float(Speed_type_id); 
	}

	[[nodiscard]] auto
	JointMoverBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	JointMoverBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<JointMoverBasePrius> {
		if (incoming_type_id == JointMoverBasePrius::type_id) {
			return std::make_shared<JointMoverBasePrius>(serialized);
		}

		auto JointFollowTargetPrius_ptr = JointFollowTargetPrius::from_substruct(incoming_type_id, serialized);
		if (JointFollowTargetPrius_ptr != nullptr) {
			return JointFollowTargetPrius_ptr;
		}

		auto JointMoveSequencerPrius_ptr = JointMoveSequencerPrius::from_substruct(incoming_type_id, serialized);
		if (JointMoveSequencerPrius_ptr != nullptr) {
			return JointMoveSequencerPrius_ptr;
		}

		auto JointMoveToPointPrius_ptr = JointMoveToPointPrius::from_substruct(incoming_type_id, serialized);
		if (JointMoveToPointPrius_ptr != nullptr) {
			return JointMoveToPointPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
