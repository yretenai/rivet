// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/CameraProjectionType.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CameraEngineItem : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CameraEngineItem";
		constexpr static rivet::rivet_type_id type_id = 0xe25c222a;

		constexpr static std::string_view CamLodScale_type_name = "CamLodScale";
		constexpr static rivet::rivet_type_id CamLodScale_type_id = 0xc76842cc;
		constexpr static std::string_view NearClipDistance_type_name = "NearClipDistance";
		constexpr static rivet::rivet_type_id NearClipDistance_type_id = 0x4e173d6f;
		constexpr static std::string_view FarClipDistance_type_name = "FarClipDistance";
		constexpr static rivet::rivet_type_id FarClipDistance_type_id = 0x3f224fc5;
		constexpr static std::string_view FieldOfViewDegrees_type_name = "FieldOfViewDegrees";
		constexpr static rivet::rivet_type_id FieldOfViewDegrees_type_id = 0x20d8286d;
		constexpr static std::string_view Projection_type_name = "Projection";
		constexpr static rivet::rivet_type_id Projection_type_id = 0x5b32961f; 

		explicit CameraEngineItem() = default;
		explicit CameraEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float CamLodScale {};
		float NearClipDistance {};
		float FarClipDistance {};
		float FieldOfViewDegrees {};
		rivet::ddl::generated::CameraProjectionType Projection {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraEngineItem>;
	};
} // namespace rivet::ddl::generated

// clang-format on
