// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MagShieldWeaponFiredEvent.hpp>
#include <rivet/ddl/generated/WeaponEmptiedEvent.hpp>
#include <rivet/ddl/generated/ProtoShotgunWeaponFiredEvent.hpp>
#include <rivet/ddl/generated/LightningRodWeaponFiredEvent.hpp>
#include <rivet/ddl/generated/WeaponCooldownEndEvent.hpp>
#include <rivet/ddl/generated/WeaponFiringStartEvent.hpp>
#include <rivet/ddl/generated/BurstPistolWeaponFiredEvent.hpp>
#include <rivet/ddl/generated/WeaponFiredEvent.hpp>
#include <rivet/ddl/generated/WeaponFiringCancelEvent.hpp>
#include <rivet/ddl/generated/WeaponPrefiredEvent.hpp>
#include <rivet/ddl/generated/WeaponFiringEndEvent.hpp> 

#include <rivet/ddl/generated/WeaponTriggeredEvent.hpp>

namespace rivet::ddl::generated {
	WeaponTriggeredEvent::WeaponTriggeredEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		ZoomLevel = serialized->get_int8(ZoomLevel_type_id, 0);
		SoundRange = serialized->get_float(SoundRange_type_id, 0.000000);
		FiredFromMovingSurface = serialized->get_bool(FiredFromMovingSurface_type_id, false);
		OwnerIsHero = serialized->get_bool(OwnerIsHero_type_id, false);
		OwnerIsLocal = serialized->get_bool(OwnerIsLocal_type_id, false); 
	}

	[[nodiscard]] auto
	WeaponTriggeredEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeaponTriggeredEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponTriggeredEvent> {
		if (incoming_type_id == WeaponTriggeredEvent::type_id) {
			return std::make_shared<WeaponTriggeredEvent>(serialized);
		}

		auto WeaponFiringEndEvent_ptr = WeaponFiringEndEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponFiringEndEvent_ptr != nullptr) {
			return WeaponFiringEndEvent_ptr;
		}

		auto WeaponPrefiredEvent_ptr = WeaponPrefiredEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponPrefiredEvent_ptr != nullptr) {
			return WeaponPrefiredEvent_ptr;
		}

		auto WeaponFiringCancelEvent_ptr = WeaponFiringCancelEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponFiringCancelEvent_ptr != nullptr) {
			return WeaponFiringCancelEvent_ptr;
		}

		auto BurstPistolWeaponFiredEvent_ptr = BurstPistolWeaponFiredEvent::from_substruct(incoming_type_id, serialized);
		if (BurstPistolWeaponFiredEvent_ptr != nullptr) {
			return BurstPistolWeaponFiredEvent_ptr;
		}

		auto WeaponFiringStartEvent_ptr = WeaponFiringStartEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponFiringStartEvent_ptr != nullptr) {
			return WeaponFiringStartEvent_ptr;
		}

		auto WeaponCooldownEndEvent_ptr = WeaponCooldownEndEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponCooldownEndEvent_ptr != nullptr) {
			return WeaponCooldownEndEvent_ptr;
		}

		auto WeaponFiredEvent_ptr = WeaponFiredEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponFiredEvent_ptr != nullptr) {
			return WeaponFiredEvent_ptr;
		}

		auto ProtoShotgunWeaponFiredEvent_ptr = ProtoShotgunWeaponFiredEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoShotgunWeaponFiredEvent_ptr != nullptr) {
			return ProtoShotgunWeaponFiredEvent_ptr;
		}

		auto WeaponEmptiedEvent_ptr = WeaponEmptiedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponEmptiedEvent_ptr != nullptr) {
			return WeaponEmptiedEvent_ptr;
		}

		auto LightningRodWeaponFiredEvent_ptr = LightningRodWeaponFiredEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodWeaponFiredEvent_ptr != nullptr) {
			return LightningRodWeaponFiredEvent_ptr;
		}

		auto MagShieldWeaponFiredEvent_ptr = MagShieldWeaponFiredEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldWeaponFiredEvent_ptr != nullptr) {
			return MagShieldWeaponFiredEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
