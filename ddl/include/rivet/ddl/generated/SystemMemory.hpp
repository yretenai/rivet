// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct AllocationLimit; 

	struct RIVET_DDL_SHARED SystemMemory : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SystemMemory";
		constexpr static rivet::rivet_type_id type_id = 0xf0b87e85;

		constexpr static std::string_view Limits_type_name = "Limits";
		constexpr static rivet::rivet_type_id Limits_type_id = 0x68bb76dc;
		constexpr static std::string_view SystemMemorySize_type_name = "SystemMemorySize";
		constexpr static rivet::rivet_type_id SystemMemorySize_type_id = 0x63ff81b7;
		constexpr static std::string_view ExtraFlexibleMemory_type_name = "ExtraFlexibleMemory";
		constexpr static rivet::rivet_type_id ExtraFlexibleMemory_type_id = 0xf6794df5;
		constexpr static std::string_view EnforceLimits_type_name = "EnforceLimits";
		constexpr static rivet::rivet_type_id EnforceLimits_type_id = 0xc32dc2ad;
		constexpr static std::string_view TrackThreadStackSizes_type_name = "TrackThreadStackSizes";
		constexpr static rivet::rivet_type_id TrackThreadStackSizes_type_id = 0xc0945446; 

		explicit SystemMemory() = default;
		explicit SystemMemory([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::AllocationLimit>> Limits {};
		uint64_t SystemMemorySize {};
		uint64_t ExtraFlexibleMemory {};
		bool EnforceLimits {};
		bool TrackThreadStackSizes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SystemMemory>;
	};
} // namespace rivet::ddl::generated

// clang-format on
