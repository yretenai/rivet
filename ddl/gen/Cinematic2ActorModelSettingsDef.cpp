// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2ActorModelSettingsDef.hpp>

namespace rivet::ddl::generated {
	Cinematic2ActorModelSettingsDef::Cinematic2ActorModelSettingsDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		GeomLodDist1 = serialized->get_uint16(GeomLodDist1_type_id, 0u);
		GeomLodDist2 = serialized->get_uint16(GeomLodDist2_type_id, 0u);
		GeomLodDist3 = serialized->get_uint16(GeomLodDist3_type_id, 0u);
		GeomLodDist4 = serialized->get_uint16(GeomLodDist4_type_id, 0u);
		GeomLodDist5 = serialized->get_uint16(GeomLodDist5_type_id, 0u);
		EnableAlphaSortBias = serialized->get_bool(EnableAlphaSortBias_type_id, false);
		AlphaSortBias = serialized->get_float(AlphaSortBias_type_id, 0.000000f); 
	}

	[[nodiscard]] auto
	Cinematic2ActorModelSettingsDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2ActorModelSettingsDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2ActorModelSettingsDef> {
		if (incoming_type_id == Cinematic2ActorModelSettingsDef::type_id) {
			return std::make_shared<Cinematic2ActorModelSettingsDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
