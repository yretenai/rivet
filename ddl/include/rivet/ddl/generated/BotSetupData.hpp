// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/MovementStyle.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED BotSetupData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "BotSetupData";
		constexpr static rivet::rivet_type_id type_id = 0x5f793cc;

		constexpr static std::string_view SpawnEngagedWithHero_type_name = "SpawnEngagedWithHero";
		constexpr static rivet::rivet_type_id SpawnEngagedWithHero_type_id = 0xfcf12cc6;
		constexpr static std::string_view ForceHoverPathIntro_type_name = "ForceHoverPathIntro";
		constexpr static rivet::rivet_type_id ForceHoverPathIntro_type_id = 0xb7777f84;
		constexpr static std::string_view IntroIsInterruptibleByDamage_type_name = "IntroIsInterruptibleByDamage";
		constexpr static rivet::rivet_type_id IntroIsInterruptibleByDamage_type_id = 0xe1fbf750;
		constexpr static std::string_view IntroIsInterruptibleByDamageOnLand_type_name = "IntroIsInterruptibleByDamageOnLand";
		constexpr static rivet::rivet_type_id IntroIsInterruptibleByDamageOnLand_type_id = 0xfea77be4;
		constexpr static std::string_view IntroIsInterruptibleByMeleeRange_type_name = "IntroIsInterruptibleByMeleeRange";
		constexpr static rivet::rivet_type_id IntroIsInterruptibleByMeleeRange_type_id = 0x4aa10542;
		constexpr static std::string_view IntroIsInterruptibleByAwareness_type_name = "IntroIsInterruptibleByAwareness";
		constexpr static rivet::rivet_type_id IntroIsInterruptibleByAwareness_type_id = 0x814cc204;
		constexpr static std::string_view IntroIsInterruptibleByModeControl_type_name = "IntroIsInterruptibleByModeControl";
		constexpr static rivet::rivet_type_id IntroIsInterruptibleByModeControl_type_id = 0x39192ff5;
		constexpr static std::string_view InterruptedIntroCanBeResumed_type_name = "InterruptedIntroCanBeResumed";
		constexpr static rivet::rivet_type_id InterruptedIntroCanBeResumed_type_id = 0xb11e7b36;
		constexpr static std::string_view IntroSpeed_type_name = "IntroSpeed";
		constexpr static rivet::rivet_type_id IntroSpeed_type_id = 0x236586cb;
		constexpr static std::string_view SkipAlertAnim_type_name = "SkipAlertAnim";
		constexpr static rivet::rivet_type_id SkipAlertAnim_type_id = 0x88656e30;
		constexpr static std::string_view DisableIdleWander_type_name = "DisableIdleWander";
		constexpr static rivet::rivet_type_id DisableIdleWander_type_id = 0xba0dad77;
		constexpr static std::string_view AllowRetaliation_type_name = "AllowRetaliation";
		constexpr static rivet::rivet_type_id AllowRetaliation_type_id = 0x68b17a10;
		constexpr static std::string_view IdleWanderMinCooldown_type_name = "IdleWanderMinCooldown";
		constexpr static rivet::rivet_type_id IdleWanderMinCooldown_type_id = 0x123cb9aa;
		constexpr static std::string_view IdleWanderMaxCooldown_type_name = "IdleWanderMaxCooldown";
		constexpr static rivet::rivet_type_id IdleWanderMaxCooldown_type_id = 0xde31c2a5;
		constexpr static std::string_view AllowHibernationBasedOnLoadedRegion_type_name = "AllowHibernationBasedOnLoadedRegion";
		constexpr static rivet::rivet_type_id AllowHibernationBasedOnLoadedRegion_type_id = 0xc7e3238b;
		constexpr static std::string_view HomeContainerRegion_type_name = "HomeContainerRegion";
		constexpr static rivet::rivet_type_id HomeContainerRegion_type_id = 0xbcc039c0; 

		explicit BotSetupData() = default;
		explicit BotSetupData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool SpawnEngagedWithHero {};
		bool ForceHoverPathIntro {};
		bool IntroIsInterruptibleByDamage {};
		bool IntroIsInterruptibleByDamageOnLand {};
		bool IntroIsInterruptibleByMeleeRange {};
		bool IntroIsInterruptibleByAwareness {};
		bool IntroIsInterruptibleByModeControl {};
		bool InterruptedIntroCanBeResumed {};
		rivet::ddl::generated::MovementStyle IntroSpeed {};
		bool SkipAlertAnim {};
		bool DisableIdleWander {};
		bool AllowRetaliation {};
		float IdleWanderMinCooldown {};
		float IdleWanderMaxCooldown {};
		bool AllowHibernationBasedOnLoadedRegion {};
		std::string_view HomeContainerRegion {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotSetupData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
