// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UpdaterPackageStateFile.hpp>

namespace rivet::ddl::generated {
	UpdaterPackageStateFile::UpdaterPackageStateFile([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PackageRootDir = serialized->get_string(PackageRootDir_type_id, "");
		PackageFolder = serialized->get_string(PackageFolder_type_id, "");
		PackageConfigFile = serialized->get_string(PackageConfigFile_type_id, "");
		MainPackageFile = serialized->get_string(MainPackageFile_type_id, "");
		IsCodeFolder = serialized->get_bool(IsCodeFolder_type_id, false);
		IsConfigDownloaded = serialized->get_bool(IsConfigDownloaded_type_id, false);
		IsPackageDownloaded = serialized->get_bool(IsPackageDownloaded_type_id, false);
		IsPackageUnpacked = serialized->get_bool(IsPackageUnpacked_type_id, false); 
	}

	[[nodiscard]] auto
	UpdaterPackageStateFile::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UpdaterPackageStateFile::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UpdaterPackageStateFile> {
		if (incoming_type_id == UpdaterPackageStateFile::type_id) {
			return std::make_shared<UpdaterPackageStateFile>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
