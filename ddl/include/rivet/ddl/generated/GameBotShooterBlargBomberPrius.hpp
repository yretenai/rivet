// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/GameBotShooterPrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED GameBotShooterBlargBomberPrius : GameBotShooterPrius {
		constexpr static std::string_view type_name = "GameBotShooterBlargBomberPrius";
		constexpr static rivet::rivet_type_id type_id = 0x35b3544;

		constexpr static std::string_view MinTimeBetweenHiding_type_name = "MinTimeBetweenHiding";
		constexpr static rivet::rivet_type_id MinTimeBetweenHiding_type_id = 0x5fa30a64;
		constexpr static std::string_view MinHideTime_type_name = "MinHideTime";
		constexpr static rivet::rivet_type_id MinHideTime_type_id = 0xc4bc3fc;
		constexpr static std::string_view MaxHideTime_type_name = "MaxHideTime";
		constexpr static rivet::rivet_type_id MaxHideTime_type_id = 0xc046b8f3;
		constexpr static std::string_view MinUnhideTargetDist_type_name = "MinUnhideTargetDist";
		constexpr static rivet::rivet_type_id MinUnhideTargetDist_type_id = 0x1241083e; 

		explicit GameBotShooterBlargBomberPrius() = default;
		explicit GameBotShooterBlargBomberPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MinTimeBetweenHiding {};
		float MinHideTime {};
		float MaxHideTime {};
		float MinUnhideTargetDist {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotShooterBlargBomberPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
