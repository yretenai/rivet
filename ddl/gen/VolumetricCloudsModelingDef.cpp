// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VolumetricCloudsModelingDef.hpp>

namespace rivet::ddl::generated {
	VolumetricCloudsModelingDef::VolumetricCloudsModelingDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CloudsLayerStart = serialized->get_float(CloudsLayerStart_type_id, 15000.000000);
		LayerThickness = serialized->get_float(LayerThickness_type_id, 85000.000000);
		BaseTile = serialized->get_float(BaseTile_type_id, 0.621000);
		DetailTile = serialized->get_float(DetailTile_type_id, 5.781000);
		DetailStrength = serialized->get_float(DetailStrength_type_id, 0.250000);
		CurlNoiseTexture = serialized->get_string(CurlNoiseTexture_type_id, "textures\\volumetricCloudsNoises\\CurlNoiseFBM.texture");
		CurlTile = serialized->get_float(CurlTile_type_id, 0.100000);
		CurlStrength = serialized->get_float(CurlStrength_type_id, 2000.000000);
		CloudTopOffset = serialized->get_float(CloudTopOffset_type_id, 500.000000);
		CloudSize = serialized->get_float(CloudSize_type_id, 100000.000000);
		CloudDensity = serialized->get_float(CloudDensity_type_id, 3.000000);
		CloudCoverageModifier = serialized->get_float(CloudCoverageModifier_type_id, 0.000000);
		CloudTypeModifier = serialized->get_float(CloudTypeModifier_type_id, 0.000000);
		AnvilBias = serialized->get_float(AnvilBias_type_id, 1.000000);
		WeatherTexSize = serialized->get_float(WeatherTexSize_type_id, 1000000.000000);
		WeatherTexOffsetAzimuth = serialized->get_float(WeatherTexOffsetAzimuth_type_id, 0.000000);
		WeatherTexOffsetDistance = serialized->get_float(WeatherTexOffsetDistance_type_id, 0.000000);
		WeatherMap = serialized->get_string(WeatherMap_type_id, "textures\\volumetricCloudsNoises\\WeatherMap.texture"); 
	}

	[[nodiscard]] auto
	VolumetricCloudsModelingDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VolumetricCloudsModelingDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VolumetricCloudsModelingDef> {
		if (incoming_type_id == VolumetricCloudsModelingDef::type_id) {
			return std::make_shared<VolumetricCloudsModelingDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
