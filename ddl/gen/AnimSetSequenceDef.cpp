// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimSetSequenceTransformDef.hpp>
#include <rivet/ddl/generated/AnimSetSequenceDriverDef.hpp>
#include <rivet/ddl/generated/AnimSetSequenceFilterDef.hpp>
#include <rivet/ddl/generated/AnimSetSequenceVarDef.hpp> 

#include <rivet/ddl/generated/AnimSetSequenceDef.hpp>

namespace rivet::ddl::generated {
	AnimSetSequenceDef::AnimSetSequenceDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id, 0ull);
		Name = serialized->get_string(Name_type_id, {});
		StartTime = serialized->get_float(StartTime_type_id, 0.000000f);
		EndTime = serialized->get_float(EndTime_type_id, 0.000000f);
		InitialRandSeed = serialized->get_uint32s(InitialRandSeed_type_id);
		InitialVars = serialized->unwrap_into_many<rivet::ddl::generated::AnimSetSequenceVarDef>(InitialVars_type_id);
		InitialFilters = serialized->unwrap_into_many<rivet::ddl::generated::AnimSetSequenceFilterDef>(InitialFilters_type_id);
		InitialDrivers = serialized->get_strings(InitialDrivers_type_id);
		Vars = serialized->unwrap_into_many<rivet::ddl::generated::AnimSetSequenceVarDef>(Vars_type_id);
		Filters = serialized->unwrap_into_many<rivet::ddl::generated::AnimSetSequenceFilterDef>(Filters_type_id);
		Drivers = serialized->unwrap_into_many<rivet::ddl::generated::AnimSetSequenceDriverDef>(Drivers_type_id);
		Transforms = serialized->unwrap_into_many<rivet::ddl::generated::AnimSetSequenceTransformDef>(Transforms_type_id); 
	}

	[[nodiscard]] auto
	AnimSetSequenceDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimSetSequenceDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimSetSequenceDef> {
		if (incoming_type_id == AnimSetSequenceDef::type_id) {
			return std::make_shared<AnimSetSequenceDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
