// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2FolderDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalVfxModifierTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalSyncTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalZoneTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalTransitionTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalMusicTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalAudioFaderTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalAudioGameSyncGroupTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalAudioListenerTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalAtmosphereTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalMovieTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2RunGameOptions.hpp>
#include <rivet/ddl/generated/Cinematic2AspectBlurDef.hpp>
#include <rivet/ddl/generated/Cinematic2ToTextureDef.hpp>
#include <rivet/ddl/generated/Cinematic2FromTextureDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalEventTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2UserRegionDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalOrphanTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2ShotDef.hpp>
#include <rivet/ddl/generated/Cinematic2CameraTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2LightGroupDef.hpp>
#include <rivet/ddl/generated/VaultMetaData.hpp>
#include <rivet/ddl/generated/Cinematic2LightDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalRateTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2ActorDef.hpp>
#include <rivet/ddl/generated/Cinematic2GlobalTagTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2TagsDef.hpp>
#include <rivet/ddl/generated/Cinematic2LocatorDef.hpp> 

#include <rivet/ddl/generated/Cinematic2Def.hpp>

namespace rivet::ddl::generated {
	Cinematic2Def::Cinematic2Def([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VaultMetaData = serialized->unwrap_into<rivet::ddl::generated::VaultMetaData>(VaultMetaData_type_id);
		IconPath = serialized->get_string(IconPath_type_id, "");
		AtmospherePath = serialized->get_string(AtmospherePath_type_id, {});
		PreviewLightingZonePath = serialized->get_string(PreviewLightingZonePath_type_id, {});
		PreviewLightingCondition = serialized->get_enum<rivet::ddl::generated::LightingConditions>(PreviewLightingCondition_type_id, rivet::ddl::generated::LightingConditions_values, rivet::ddl::generated::LightingConditions::Day);
		Looping = serialized->get_bool(Looping_type_id, false);
		Letterboxed = serialized->get_bool(Letterboxed_type_id, false);
		EnableStreaming = serialized->get_bool(EnableStreaming_type_id, false);
		IsQte = serialized->get_bool(IsQte_type_id, false);
		Skippable = serialized->get_bool(Skippable_type_id, false);
		ResetOnFinished = serialized->get_bool(ResetOnFinished_type_id, true);
		MayaPlayBackCompensate = serialized->get_bool(MayaPlayBackCompensate_type_id, false);
		OnEnterCameraTransitionDuration = serialized->get_float(OnEnterCameraTransitionDuration_type_id, 0.000000f);
		OnExitCameraTransitionDuration = serialized->get_float(OnExitCameraTransitionDuration_type_id, 0.000000f);
		AspectBlur = serialized->unwrap_into<rivet::ddl::generated::Cinematic2AspectBlurDef>(AspectBlur_type_id);
		Tags = serialized->unwrap_into<rivet::ddl::generated::Cinematic2TagsDef>(Tags_type_id);
		RunGameOptions = serialized->unwrap_into<rivet::ddl::generated::Cinematic2RunGameOptions>(RunGameOptions_type_id);
		ToTexture = serialized->unwrap_into<rivet::ddl::generated::Cinematic2ToTextureDef>(ToTexture_type_id);
		FromTexture = serialized->unwrap_into<rivet::ddl::generated::Cinematic2FromTextureDef>(FromTexture_type_id);
		ActorCustomizationConfig = serialized->get_string(ActorCustomizationConfig_type_id, "configs\\Cinematic2ActorCustomization\\Cinematic2ActorCustomization.config");
		PreviewRegions = serialized->get_strings(PreviewRegions_type_id);
		UserRegions = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2UserRegionDef>(UserRegions_type_id);
		Cameras = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2CameraTrackDef>(Cameras_type_id);
		LightGroups = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2LightGroupDef>(LightGroups_type_id);
		ShotOrder = serialized->get_uint64s(ShotOrder_type_id);
		Shots = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2ShotDef>(Shots_type_id);
		Actors = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2ActorDef>(Actors_type_id);
		Lights = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2LightDef>(Lights_type_id);
		Locators = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2LocatorDef>(Locators_type_id);
		AtmosphereTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalAtmosphereTrackDef>(AtmosphereTrack_type_id);
		AudioListenerTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalAudioListenerTrackDef>(AudioListenerTrack_type_id);
		AudioStateGroupTracks = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2GlobalAudioGameSyncGroupTrackDef>(AudioStateGroupTracks_type_id);
		EventTracks = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2GlobalEventTrackDef>(EventTracks_type_id);
		MovieTracks = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2GlobalMovieTrackDef>(MovieTracks_type_id);
		MasterFaderTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalAudioFaderTrackDef>(MasterFaderTrack_type_id);
		MusicTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalMusicTrackDef>(MusicTrack_type_id);
		RateTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalRateTrackDef>(RateTrack_type_id);
		SyncTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalSyncTrackDef>(SyncTrack_type_id);
		TransitionTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalTransitionTrackDef>(TransitionTrack_type_id);
		VfxModifierTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalVfxModifierTrackDef>(VfxModifierTrack_type_id);
		ZoneTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalZoneTrackDef>(ZoneTrack_type_id);
		TagTrack = serialized->unwrap_into<rivet::ddl::generated::Cinematic2GlobalTagTrackDef>(TagTrack_type_id);
		Folders = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2FolderDef>(Folders_type_id);
		OrphanTracks = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2GlobalOrphanTrackDef>(OrphanTracks_type_id); 
	}

	[[nodiscard]] auto
	Cinematic2Def::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2Def::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2Def> {
		if (incoming_type_id == Cinematic2Def::type_id) {
			return std::make_shared<Cinematic2Def>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
