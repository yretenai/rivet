// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FireConeData.hpp>

namespace rivet::ddl::generated {
	FireConeData::FireConeData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SizeMin = serialized->get_float(SizeMin_type_id, 0.000000f);
		SizeMax = serialized->get_float(SizeMax_type_id, 0.000000f);
		MinShotsToBump = serialized->get_float(MinShotsToBump_type_id, 0.000000f);
		ShotBumpAngle = serialized->get_float(ShotBumpAngle_type_id, 0.000000f);
		ShotBumpSpeed = serialized->get_float(ShotBumpSpeed_type_id, 0.000000f);
		ShotBumpAccel = serialized->get_float(ShotBumpAccel_type_id, 0.000000f);
		ShotBumpDecel = serialized->get_float(ShotBumpDecel_type_id, 0.000000f);
		SettleDelay = serialized->get_float(SettleDelay_type_id, 0.150000f);
		SettleSpeed = serialized->get_float(SettleSpeed_type_id, 0.000000f);
		SettleAccel = serialized->get_float(SettleAccel_type_id, 0.000000f);
		SettleDecel = serialized->get_float(SettleDecel_type_id, 0.000000f);
		AutoHitAngle = serialized->get_float(AutoHitAngle_type_id, 0.750000f);
		AutoHitRange = serialized->get_float(AutoHitRange_type_id, 30.000000f); 
	}

	[[nodiscard]] auto
	FireConeData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FireConeData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FireConeData> {
		if (incoming_type_id == FireConeData::type_id) {
			return std::make_shared<FireConeData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
