// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED VisualEffectLensFlare : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VisualEffectLensFlare";
		constexpr static rivet::rivet_type_id type_id = 0xd142001b;

		constexpr static std::string_view Enable_type_name = "Enable";
		constexpr static rivet::rivet_type_id Enable_type_id = 0xcdd88655;
		constexpr static std::string_view IgnoreZ_type_name = "IgnoreZ";
		constexpr static rivet::rivet_type_id IgnoreZ_type_id = 0x165f3fdd;
		constexpr static std::string_view AngleFade_type_name = "AngleFade";
		constexpr static rivet::rivet_type_id AngleFade_type_id = 0x415b7439;
		constexpr static std::string_view FadePower_type_name = "FadePower";
		constexpr static rivet::rivet_type_id FadePower_type_id = 0xdc65fc0f;
		constexpr static std::string_view ScalePower_type_name = "ScalePower";
		constexpr static rivet::rivet_type_id ScalePower_type_id = 0xe42b7451;
		constexpr static std::string_view Radius_type_name = "Radius";
		constexpr static rivet::rivet_type_id Radius_type_id = 0x504203d; 

		explicit VisualEffectLensFlare() = default;
		explicit VisualEffectLensFlare([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool Enable {};
		bool IgnoreZ {};
		float AngleFade {};
		float FadePower {};
		float ScalePower {};
		float Radius {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectLensFlare>;
	};
} // namespace rivet::ddl::generated

// clang-format on
