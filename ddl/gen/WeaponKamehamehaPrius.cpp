// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/KamehamehaChargeLevel.hpp> 

#include <rivet/ddl/generated/WeaponKamehamehaPrius.hpp>

namespace rivet::ddl::generated {
	WeaponKamehamehaPrius::WeaponKamehamehaPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): WeaponGamePrius(serialized) {
		ChargeLevels = serialized->unwrap_into_many<rivet::ddl::generated::KamehamehaChargeLevel>(ChargeLevels_type_id);
		FiringAllowedKnockbacks = serialized->get_bitset<rivet::ddl::generated::x8b303a8b>(FiringAllowedKnockbacks_type_id, rivet::ddl::generated::x8b303a8b_values, 1u); 
	}

	[[nodiscard]] auto
	WeaponKamehamehaPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeaponKamehamehaPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponKamehamehaPrius> {
		if (incoming_type_id == WeaponKamehamehaPrius::type_id) {
			return std::make_shared<WeaponKamehamehaPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
