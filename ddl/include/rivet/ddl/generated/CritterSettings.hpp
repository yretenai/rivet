// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CritterSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CritterSettings";
		constexpr static rivet::rivet_type_id type_id = 0xfc21f9c9;

		constexpr static std::string_view MaxDisableVolumes_type_name = "MaxDisableVolumes";
		constexpr static rivet::rivet_type_id MaxDisableVolumes_type_id = 0x73d1dc2f;
		constexpr static std::string_view MaxRegisteredVolumes_type_name = "MaxRegisteredVolumes";
		constexpr static rivet::rivet_type_id MaxRegisteredVolumes_type_id = 0x6cdffe34;
		constexpr static std::string_view MaxTrackedPanicAreas_type_name = "MaxTrackedPanicAreas";
		constexpr static rivet::rivet_type_id MaxTrackedPanicAreas_type_id = 0xf85b4603; 

		explicit CritterSettings() = default;
		explicit CritterSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t MaxDisableVolumes {};
		uint32_t MaxRegisteredVolumes {};
		int32_t MaxTrackedPanicAreas {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CritterSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
