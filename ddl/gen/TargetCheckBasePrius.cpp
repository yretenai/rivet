// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TargetCheckValidPODPerchPrius.hpp>
#include <rivet/ddl/generated/TargetCheckProjectileArcPrius.hpp>
#include <rivet/ddl/generated/TargetCheckNavDistancePrius.hpp>
#include <rivet/ddl/generated/TargetCheckSphereSweepPrius.hpp>
#include <rivet/ddl/generated/TargetCheckDistancePrius.hpp>
#include <rivet/ddl/generated/TargetCheckOwnerPrius.hpp>
#include <rivet/ddl/generated/TargetCheckHunterPerchPrius.hpp> 

#include <rivet/ddl/generated/TargetCheckBasePrius.hpp>

namespace rivet::ddl::generated {
	TargetCheckBasePrius::TargetCheckBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	TargetCheckBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TargetCheckBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TargetCheckBasePrius> {
		if (incoming_type_id == TargetCheckBasePrius::type_id) {
			return std::make_shared<TargetCheckBasePrius>(serialized);
		}

		auto TargetCheckHunterPerchPrius_ptr = TargetCheckHunterPerchPrius::from_substruct(incoming_type_id, serialized);
		if (TargetCheckHunterPerchPrius_ptr != nullptr) {
			return TargetCheckHunterPerchPrius_ptr;
		}

		auto TargetCheckOwnerPrius_ptr = TargetCheckOwnerPrius::from_substruct(incoming_type_id, serialized);
		if (TargetCheckOwnerPrius_ptr != nullptr) {
			return TargetCheckOwnerPrius_ptr;
		}

		auto TargetCheckDistancePrius_ptr = TargetCheckDistancePrius::from_substruct(incoming_type_id, serialized);
		if (TargetCheckDistancePrius_ptr != nullptr) {
			return TargetCheckDistancePrius_ptr;
		}

		auto TargetCheckNavDistancePrius_ptr = TargetCheckNavDistancePrius::from_substruct(incoming_type_id, serialized);
		if (TargetCheckNavDistancePrius_ptr != nullptr) {
			return TargetCheckNavDistancePrius_ptr;
		}

		auto TargetCheckProjectileArcPrius_ptr = TargetCheckProjectileArcPrius::from_substruct(incoming_type_id, serialized);
		if (TargetCheckProjectileArcPrius_ptr != nullptr) {
			return TargetCheckProjectileArcPrius_ptr;
		}

		auto TargetCheckSphereSweepPrius_ptr = TargetCheckSphereSweepPrius::from_substruct(incoming_type_id, serialized);
		if (TargetCheckSphereSweepPrius_ptr != nullptr) {
			return TargetCheckSphereSweepPrius_ptr;
		}

		auto TargetCheckValidPODPerchPrius_ptr = TargetCheckValidPODPerchPrius::from_substruct(incoming_type_id, serialized);
		if (TargetCheckValidPODPerchPrius_ptr != nullptr) {
			return TargetCheckValidPODPerchPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
