// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ActorFadePrius.hpp>

namespace rivet::ddl::generated {
	ActorFadePrius::ActorFadePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FadeInTime = serialized->get_float(FadeInTime_type_id, 1.000000f);
		FadeOutTime = serialized->get_float(FadeOutTime_type_id, 1.000000f);
		DestroyWhenFadedOut = serialized->get_bool(DestroyWhenFadedOut_type_id, true);
		SkipWhenOccluded = serialized->get_bool(SkipWhenOccluded_type_id, true);
		MaxVisiblePixelPercent = serialized->get_float(MaxVisiblePixelPercent_type_id, 0.050000f);
		FadeEffect = serialized->get_enum<rivet::ddl::generated::xc19f3ae>(FadeEffect_type_id, rivet::ddl::generated::xc19f3ae_values, rivet::ddl::generated::xc19f3ae::Alpha); 
	}

	[[nodiscard]] auto
	ActorFadePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ActorFadePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActorFadePrius> {
		if (incoming_type_id == ActorFadePrius::type_id) {
			return std::make_shared<ActorFadePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
