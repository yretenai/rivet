// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TargetAttackShapeWedge.hpp>
#include <rivet/ddl/generated/TargetAttackShapeCone.hpp>
#include <rivet/ddl/generated/TargetAttackShapeOBB.hpp>
#include <rivet/ddl/generated/TargetAttackShapeSphere.hpp> 

#include <rivet/ddl/generated/TargetedAttackShape.hpp>

namespace rivet::ddl::generated {
	TargetedAttackShape::TargetedAttackShape([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	TargetedAttackShape::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TargetedAttackShape::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TargetedAttackShape> {
		if (incoming_type_id == TargetedAttackShape::type_id) {
			return std::make_shared<TargetedAttackShape>(serialized);
		}

		auto TargetAttackShapeSphere_ptr = TargetAttackShapeSphere::from_substruct(incoming_type_id, serialized);
		if (TargetAttackShapeSphere_ptr != nullptr) {
			return TargetAttackShapeSphere_ptr;
		}

		auto TargetAttackShapeOBB_ptr = TargetAttackShapeOBB::from_substruct(incoming_type_id, serialized);
		if (TargetAttackShapeOBB_ptr != nullptr) {
			return TargetAttackShapeOBB_ptr;
		}

		auto TargetAttackShapeCone_ptr = TargetAttackShapeCone::from_substruct(incoming_type_id, serialized);
		if (TargetAttackShapeCone_ptr != nullptr) {
			return TargetAttackShapeCone_ptr;
		}

		auto TargetAttackShapeWedge_ptr = TargetAttackShapeWedge::from_substruct(incoming_type_id, serialized);
		if (TargetAttackShapeWedge_ptr != nullptr) {
			return TargetAttackShapeWedge_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
