// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct HeroPortalZipLineData; 

	struct RIVET_DDL_SHARED HeroPortalZipConfig : ConfigBase {
		constexpr static std::string_view type_name = "HeroPortalZipConfig";
		constexpr static rivet::rivet_type_id type_id = 0x7eab862a;

		constexpr static std::string_view MinTargetDistance_type_name = "MinTargetDistance";
		constexpr static rivet::rivet_type_id MinTargetDistance_type_id = 0xecff5f76;
		constexpr static std::string_view MaxTargetDistance_type_name = "MaxTargetDistance";
		constexpr static rivet::rivet_type_id MaxTargetDistance_type_id = 0xf9748b84;
		constexpr static std::string_view MaxAngleStartAutoTarget_type_name = "MaxAngleStartAutoTarget";
		constexpr static rivet::rivet_type_id MaxAngleStartAutoTarget_type_id = 0xd02cb593;
		constexpr static std::string_view MinAngleEndAutoTarget_type_name = "MinAngleEndAutoTarget";
		constexpr static rivet::rivet_type_id MinAngleEndAutoTarget_type_id = 0x78e2b899;
		constexpr static std::string_view CombatMaxAngleStartAutoTarget_type_name = "CombatMaxAngleStartAutoTarget";
		constexpr static rivet::rivet_type_id CombatMaxAngleStartAutoTarget_type_id = 0xc06661c1;
		constexpr static std::string_view CombatMinAngleEndAutoTarget_type_name = "CombatMinAngleEndAutoTarget";
		constexpr static rivet::rivet_type_id CombatMinAngleEndAutoTarget_type_id = 0x69f7b396;
		constexpr static std::string_view StopMomentumTime_type_name = "StopMomentumTime";
		constexpr static rivet::rivet_type_id StopMomentumTime_type_id = 0xe1645179;
		constexpr static std::string_view MaxMomentumDistance_type_name = "MaxMomentumDistance";
		constexpr static rivet::rivet_type_id MaxMomentumDistance_type_id = 0x3084f673;
		constexpr static std::string_view PortalInitialScale_type_name = "PortalInitialScale";
		constexpr static rivet::rivet_type_id PortalInitialScale_type_id = 0xb306f7fd;
		constexpr static std::string_view PortalPreReturnScale_type_name = "PortalPreReturnScale";
		constexpr static rivet::rivet_type_id PortalPreReturnScale_type_id = 0x35619107;
		constexpr static std::string_view PortalPostReturnScale_type_name = "PortalPostReturnScale";
		constexpr static rivet::rivet_type_id PortalPostReturnScale_type_id = 0x8f043900;
		constexpr static std::string_view PortalFinalScale_type_name = "PortalFinalScale";
		constexpr static rivet::rivet_type_id PortalFinalScale_type_id = 0xe34147ec;
		constexpr static std::string_view PreWarpTime_type_name = "PreWarpTime";
		constexpr static rivet::rivet_type_id PreWarpTime_type_id = 0xdfc93a66;
		constexpr static std::string_view LineData_type_name = "LineData";
		constexpr static rivet::rivet_type_id LineData_type_id = 0x49e0cb8d;
		constexpr static std::string_view PortalActor_type_name = "PortalActor";
		constexpr static rivet::rivet_type_id PortalActor_type_id = 0xdfbb9f90;
		constexpr static std::string_view PortalVFXActor_type_name = "PortalVFXActor";
		constexpr static rivet::rivet_type_id PortalVFXActor_type_id = 0x552ea9d1;
		constexpr static std::string_view CameraAimContext_type_name = "CameraAimContext";
		constexpr static rivet::rivet_type_id CameraAimContext_type_id = 0x4df55ad0;
		constexpr static std::string_view PortalRightAimContext_type_name = "PortalRightAimContext";
		constexpr static rivet::rivet_type_id PortalRightAimContext_type_id = 0x6a82f7b9;
		constexpr static std::string_view PortalLeftAimContext_type_name = "PortalLeftAimContext";
		constexpr static rivet::rivet_type_id PortalLeftAimContext_type_id = 0xfa2169b;
		constexpr static std::string_view MaxPortalSpeed_type_name = "MaxPortalSpeed";
		constexpr static rivet::rivet_type_id MaxPortalSpeed_type_id = 0xbdc8dbbf;
		constexpr static std::string_view PortalAccel_type_name = "PortalAccel";
		constexpr static rivet::rivet_type_id PortalAccel_type_id = 0xc632ff8c; 

		explicit HeroPortalZipConfig() = default;
		explicit HeroPortalZipConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MinTargetDistance {};
		float MaxTargetDistance {};
		float MaxAngleStartAutoTarget {};
		float MinAngleEndAutoTarget {};
		float CombatMaxAngleStartAutoTarget {};
		float CombatMinAngleEndAutoTarget {};
		float StopMomentumTime {};
		float MaxMomentumDistance {};
		float PortalInitialScale {};
		float PortalPreReturnScale {};
		float PortalPostReturnScale {};
		float PortalFinalScale {};
		float PreWarpTime {};
		std::shared_ptr<rivet::ddl::generated::HeroPortalZipLineData> LineData {};
		std::string_view PortalActor {};
		std::string_view PortalVFXActor {};
		std::string_view CameraAimContext {};
		std::string_view PortalRightAimContext {};
		std::string_view PortalLeftAimContext {};
		float MaxPortalSpeed {};
		float PortalAccel {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroPortalZipConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
