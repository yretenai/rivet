// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ReplayBranchEndNodeDef.hpp>
#include <rivet/ddl/generated/DemoBranchEndNodeDef.hpp> 

#include <rivet/ddl/generated/BranchEndNodeBaseDef.hpp>

namespace rivet::ddl::generated {
	BranchEndNodeBaseDef::BranchEndNodeBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): OrMissionSystemNodeDef(serialized) {

	}

	[[nodiscard]] auto
	BranchEndNodeBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BranchEndNodeBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BranchEndNodeBaseDef> {
		if (incoming_type_id == BranchEndNodeBaseDef::type_id) {
			return std::make_shared<BranchEndNodeBaseDef>(serialized);
		}

		auto DemoBranchEndNodeDef_ptr = DemoBranchEndNodeDef::from_substruct(incoming_type_id, serialized);
		if (DemoBranchEndNodeDef_ptr != nullptr) {
			return DemoBranchEndNodeDef_ptr;
		}

		auto ReplayBranchEndNodeDef_ptr = ReplayBranchEndNodeDef::from_substruct(incoming_type_id, serialized);
		if (ReplayBranchEndNodeDef_ptr != nullptr) {
			return ReplayBranchEndNodeDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
