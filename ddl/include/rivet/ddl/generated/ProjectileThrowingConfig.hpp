// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ProjectileThrowingConfig : ConfigBase {
		constexpr const static std::string_view type_name = "ProjectileThrowingConfig";
		constexpr const static rivet::rivet_type_id type_id = 0xbcd4e648;

		constexpr const static std::string_view DesiredFlightTime_type_name = "DesiredFlightTime";
		constexpr const static rivet::rivet_type_id DesiredFlightTime_type_id = 0xd292ec09;
		constexpr const static std::string_view MinSpeed_type_name = "MinSpeed";
		constexpr const static rivet::rivet_type_id MinSpeed_type_id = 0xf0d89680;
		constexpr const static std::string_view MaxSpeed_type_name = "MaxSpeed";
		constexpr const static rivet::rivet_type_id MaxSpeed_type_id = 0x16b83961;
		constexpr const static std::string_view ArcHeights_type_name = "ArcHeights";
		constexpr const static rivet::rivet_type_id ArcHeights_type_id = 0x5f3d6c97;
		constexpr const static std::string_view CollCheckWidth_type_name = "CollCheckWidth";
		constexpr const static rivet::rivet_type_id CollCheckWidth_type_id = 0x74e30d9b;
		constexpr const static std::string_view MaxPredictionSpeed_type_name = "MaxPredictionSpeed";
		constexpr const static rivet::rivet_type_id MaxPredictionSpeed_type_id = 0x276306e;
		constexpr const static std::string_view MaxPredictionSpeedTraversal_type_name = "MaxPredictionSpeedTraversal";
		constexpr const static rivet::rivet_type_id MaxPredictionSpeedTraversal_type_id = 0x1cdc53fd;
		constexpr const static std::string_view CameraFacingOffset_type_name = "CameraFacingOffset";
		constexpr const static rivet::rivet_type_id CameraFacingOffset_type_id = 0x478fd459; 

		explicit ProjectileThrowingConfig() = default;
		explicit ProjectileThrowingConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float DesiredFlightTime {};
		float MinSpeed {};
		float MaxSpeed {};
		std::vector<float> ArcHeights {};
		float CollCheckWidth {};
		float MaxPredictionSpeed {};
		float MaxPredictionSpeedTraversal {};
		float CameraFacingOffset {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ProjectileThrowingConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
