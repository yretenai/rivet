// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DamageEmitterMovingPrius.hpp>
#include <rivet/ddl/generated/DamageEmitterVelocityPrius.hpp> 

#include <rivet/ddl/generated/DamageEmitterPrius.hpp>

namespace rivet::ddl::generated {
	DamageEmitterPrius::DamageEmitterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DamageHash = serialized->get_string(DamageHash_type_id, "");
		StartActive = serialized->get_bool(StartActive_type_id, true);
		DamagePerSecond = serialized->get_float(DamagePerSecond_type_id, 1.000000);
		Type = serialized->get_enum<rivet::ddl::generated::DamageTypes>(Type_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::None);
		StatusAmount = serialized->get_float(StatusAmount_type_id, 0.000000);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values, rivet::ddl::generated::KnockbackLevels::None);
		KnockbackAmount = serialized->get_float(KnockbackAmount_type_id, 0.000000);
		Radius = serialized->get_float(Radius_type_id, 1.000000);
		DamageFriends = serialized->get_bool(DamageFriends_type_id, false);
		SingleShotDamage = serialized->get_bool(SingleShotDamage_type_id, false);
		ExcludeHeroes = serialized->get_bool(ExcludeHeroes_type_id, false);
		ExcludeAttachments = serialized->get_bool(ExcludeAttachments_type_id, false);
		NoIgnore = serialized->get_bool(NoIgnore_type_id, false);
		UseSweptSphere = serialized->get_bool(UseSweptSphere_type_id, false);
		StartLocator = serialized->get_string(StartLocator_type_id, "");
		SweptSphereRange = serialized->get_float(SweptSphereRange_type_id, 5.000000);
		DebugDraw = serialized->get_bool(DebugDraw_type_id, false); 
	}

	[[nodiscard]] auto
	DamageEmitterPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DamageEmitterPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DamageEmitterPrius> {
		if (incoming_type_id == DamageEmitterPrius::type_id) {
			return std::make_shared<DamageEmitterPrius>(serialized);
		}

		auto DamageEmitterVelocityPrius_ptr = DamageEmitterVelocityPrius::from_substruct(incoming_type_id, serialized);
		if (DamageEmitterVelocityPrius_ptr != nullptr) {
			return DamageEmitterVelocityPrius_ptr;
		}

		auto DamageEmitterMovingPrius_ptr = DamageEmitterMovingPrius::from_substruct(incoming_type_id, serialized);
		if (DamageEmitterMovingPrius_ptr != nullptr) {
			return DamageEmitterMovingPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
