// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct WwiseState;
	struct UIJukeboxSong; 

	struct RIVET_DDL_SHARED UIJukeboxConfig : ConfigBase {
		constexpr const static std::string_view type_name = "UIJukeboxConfig";
		constexpr const static rivet::rivet_type_id type_id = 0xb7316e4d;

		constexpr const static std::string_view WwiseStateZurkies_type_name = "WwiseStateZurkies";
		constexpr const static rivet::rivet_type_id WwiseStateZurkies_type_id = 0x7c6fdc58;
		constexpr const static std::string_view WwiseStateJukebox_type_name = "WwiseStateJukebox";
		constexpr const static rivet::rivet_type_id WwiseStateJukebox_type_id = 0xf7f61cb5;
		constexpr const static std::string_view Songs_type_name = "Songs";
		constexpr const static rivet::rivet_type_id Songs_type_id = 0xa3bf7d5a; 

		explicit UIJukeboxConfig() = default;
		explicit UIJukeboxConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::WwiseState> WwiseStateZurkies {};
		std::shared_ptr<rivet::ddl::generated::WwiseState> WwiseStateJukebox {};
		std::vector<std::shared_ptr<rivet::ddl::generated::UIJukeboxSong>> Songs {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIJukeboxConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
