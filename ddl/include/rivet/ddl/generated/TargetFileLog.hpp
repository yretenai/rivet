// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct TargetFileBuildOutput;
	struct TargetFileSessionLog; 

	struct RIVET_DDL_SHARED TargetFileLog : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "TargetFileLog";
		constexpr static rivet::rivet_type_id type_id = 0x42054943;

		constexpr static std::string_view Logs_type_name = "Logs";
		constexpr static rivet::rivet_type_id Logs_type_id = 0xc01f06ec;
		constexpr static std::string_view BuilderOut_type_name = "BuilderOut";
		constexpr static rivet::rivet_type_id BuilderOut_type_id = 0xa94fd694;
		constexpr static std::string_view IsTargetFromCache_type_name = "IsTargetFromCache";
		constexpr static rivet::rivet_type_id IsTargetFromCache_type_id = 0xe58cc38b; 

		explicit TargetFileLog() = default;
		explicit TargetFileLog([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::TargetFileSessionLog>> Logs {};
		std::vector<std::shared_ptr<rivet::ddl::generated::TargetFileBuildOutput>> BuilderOut {};
		bool IsTargetFromCache {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TargetFileLog>;
	};
} // namespace rivet::ddl::generated

// clang-format on
