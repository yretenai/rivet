// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GraphIOMeta.hpp>
#include <rivet/ddl/generated/GraphConnection.hpp>
#include <rivet/ddl/generated/GraphNode.hpp> 

#include <rivet/ddl/generated/NodeGraphContents.hpp>

namespace rivet::ddl::generated {
	NodeGraphContents::NodeGraphContents([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Name = serialized->get_string(Name_type_id, {});
		Id = serialized->get_uint64(Id_type_id, 0);
		Nodes = serialized->unwrap_into_many<rivet::ddl::generated::GraphNode>(Nodes_type_id);
		Connections = serialized->unwrap_into_many<rivet::ddl::generated::GraphConnection>(Connections_type_id);
		IO = serialized->unwrap_into_many<rivet::ddl::generated::GraphIOMeta>(IO_type_id);
		GlobalNotes = serialized->get_strings(GlobalNotes_type_id); 
	}

	[[nodiscard]] auto
	NodeGraphContents::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	NodeGraphContents::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodeGraphContents> {
		if (incoming_type_id == NodeGraphContents::type_id) {
			return std::make_shared<NodeGraphContents>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
