// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SelfieDefaultsData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SelfieDefaultsData";
		constexpr static rivet::rivet_type_id type_id = 0x83e7fc7b;

		constexpr static std::string_view Driver_type_name = "Driver";
		constexpr static rivet::rivet_type_id Driver_type_id = 0x2f1e32be;
		constexpr static std::string_view DriverCat_type_name = "DriverCat";
		constexpr static rivet::rivet_type_id DriverCat_type_id = 0x81ed667d;
		constexpr static std::string_view FOV_type_name = "FOV";
		constexpr static rivet::rivet_type_id FOV_type_id = 0x6ca7e042;
		constexpr static std::string_view RangeNear_type_name = "RangeNear";
		constexpr static rivet::rivet_type_id RangeNear_type_id = 0xce705c80;
		constexpr static std::string_view APNear_type_name = "APNear";
		constexpr static rivet::rivet_type_id APNear_type_id = 0x833b90c3;
		constexpr static std::string_view RangeFar_type_name = "RangeFar";
		constexpr static rivet::rivet_type_id RangeFar_type_id = 0xff79ca67;
		constexpr static std::string_view APFar_type_name = "APFar";
		constexpr static rivet::rivet_type_id APFar_type_id = 0x6d4d107; 

		explicit SelfieDefaultsData() = default;
		explicit SelfieDefaultsData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Driver {};
		std::string_view DriverCat {};
		float FOV {};
		float RangeNear {};
		float APNear {};
		float RangeFar {};
		float APFar {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SelfieDefaultsData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
