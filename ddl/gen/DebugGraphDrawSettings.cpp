// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DebugGraphDrawSettings.hpp>

namespace rivet::ddl::generated {
	DebugGraphDrawSettings::DebugGraphDrawSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ScrollSpeedVertical = serialized->get_float(ScrollSpeedVertical_type_id, 600.000000);
		ScrollSpeedHorizontal = serialized->get_float(ScrollSpeedHorizontal_type_id, 1200.000000);
		NodeSpacingVertical = serialized->get_float(NodeSpacingVertical_type_id, 100.000000);
		NodeSpacingHorizontal = serialized->get_float(NodeSpacingHorizontal_type_id, 400.000000);
		VerticalSpacingMode = serialized->get_enum<rivet::ddl::generated::VerticalSpacingMode>(VerticalSpacingMode_type_id, rivet::ddl::generated::VerticalSpacingMode_values, rivet::ddl::generated::VerticalSpacingMode::BalancedSpacing); 
	}

	[[nodiscard]] auto
	DebugGraphDrawSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DebugGraphDrawSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DebugGraphDrawSettings> {
		if (incoming_type_id == DebugGraphDrawSettings::type_id) {
			return std::make_shared<DebugGraphDrawSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
