// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VariableSpeedShotMotionPriusModDef.hpp>
#include <rivet/ddl/generated/VariableSpeedShotMotionGamePrius.hpp>
#include <rivet/ddl/generated/HomingShotMotionPrius.hpp> 

#include <rivet/ddl/generated/VariableSpeedShotMotionPrius.hpp>

namespace rivet::ddl::generated {
	VariableSpeedShotMotionPrius::VariableSpeedShotMotionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BasicShotMotionPrius(serialized) {
		ConfigModDefs = serialized->unwrap_into_many<rivet::ddl::generated::VariableSpeedShotMotionPriusModDef>(ConfigModDefs_type_id); 
	}

	auto
	VariableSpeedShotMotionPrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	VariableSpeedShotMotionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VariableSpeedShotMotionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VariableSpeedShotMotionPrius> {
		if (incoming_type_id == VariableSpeedShotMotionPrius::type_id) {
			return std::make_shared<VariableSpeedShotMotionPrius>(serialized);
		}

		auto VariableSpeedShotMotionGamePrius_ptr = VariableSpeedShotMotionGamePrius::from_substruct(incoming_type_id, serialized);
		if (VariableSpeedShotMotionGamePrius_ptr != nullptr) {
			return VariableSpeedShotMotionGamePrius_ptr;
		}

		auto HomingShotMotionPrius_ptr = HomingShotMotionPrius::from_substruct(incoming_type_id, serialized);
		if (HomingShotMotionPrius_ptr != nullptr) {
			return HomingShotMotionPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
