// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MissionGraphSharedDef.hpp>
#include <rivet/ddl/generated/StandardNodesDef.hpp>
#include <rivet/ddl/generated/TestGraphDef.hpp>
#include <rivet/ddl/generated/NodalShotBaseGraphDef.hpp>
#include <rivet/ddl/generated/MissionGraphGameDef_Tools.hpp>
#include <rivet/ddl/generated/ObjectiveGraphSharedDef.hpp>
#include <rivet/ddl/generated/ConnectionTuidDef.hpp>
#include <rivet/ddl/generated/CommentBaseDef.hpp>
#include <rivet/ddl/generated/ReferencedGraphNodeBaseDef.hpp>
#include <rivet/ddl/generated/EmbeddedGraphNodeBaseDef.hpp> 

#include <rivet/ddl/generated/GameplayNodeGraphBaseDef.hpp>

namespace rivet::ddl::generated {
	GameplayNodeGraphBaseDef::GameplayNodeGraphBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): NodeGraphBaseDef(serialized) {
		EmbeddedSubGraphs = serialized->unwrap_into_many<rivet::ddl::generated::EmbeddedGraphNodeBaseDef>(EmbeddedSubGraphs_type_id);
		SubGraphs = serialized->unwrap_into_many<rivet::ddl::generated::ReferencedGraphNodeBaseDef>(SubGraphs_type_id);
		Connections = serialized->unwrap_into_many<rivet::ddl::generated::ConnectionTuidDef>(Connections_type_id);
		Comments = serialized->unwrap_into_many<rivet::ddl::generated::CommentBaseDef>(Comments_type_id); 
	}

	[[nodiscard]] auto
	GameplayNodeGraphBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameplayNodeGraphBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameplayNodeGraphBaseDef> {
		if (incoming_type_id == GameplayNodeGraphBaseDef::type_id) {
			return std::make_shared<GameplayNodeGraphBaseDef>(serialized);
		}

		auto ObjectiveGraphSharedDef_ptr = ObjectiveGraphSharedDef::from_substruct(incoming_type_id, serialized);
		if (ObjectiveGraphSharedDef_ptr != nullptr) {
			return ObjectiveGraphSharedDef_ptr;
		}

		auto MissionGraphGameDef_Tools_ptr = MissionGraphGameDef_Tools::from_substruct(incoming_type_id, serialized);
		if (MissionGraphGameDef_Tools_ptr != nullptr) {
			return MissionGraphGameDef_Tools_ptr;
		}

		auto NodalShotBaseGraphDef_ptr = NodalShotBaseGraphDef::from_substruct(incoming_type_id, serialized);
		if (NodalShotBaseGraphDef_ptr != nullptr) {
			return NodalShotBaseGraphDef_ptr;
		}

		auto TestGraphDef_ptr = TestGraphDef::from_substruct(incoming_type_id, serialized);
		if (TestGraphDef_ptr != nullptr) {
			return TestGraphDef_ptr;
		}

		auto MissionGraphSharedDef_ptr = MissionGraphSharedDef::from_substruct(incoming_type_id, serialized);
		if (MissionGraphSharedDef_ptr != nullptr) {
			return MissionGraphSharedDef_ptr;
		}

		auto StandardNodesDef_ptr = StandardNodesDef::from_substruct(incoming_type_id, serialized);
		if (StandardNodesDef_ptr != nullptr) {
			return StandardNodesDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
