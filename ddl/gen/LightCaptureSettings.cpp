// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LightCaptureSettings.hpp>

namespace rivet::ddl::generated {
	LightCaptureSettings::LightCaptureSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PullBackDist = serialized->get_float(PullBackDist_type_id, 0.200000);
		MaxResampleDist = serialized->get_float(MaxResampleDist_type_id, 0.600000);
		ResampleUseClosestThreshold = serialized->get_float(ResampleUseClosestThreshold_type_id, 0.600000);
		GBufferReadMax = serialized->get_int32(GBufferReadMax_type_id, 134217728);
		EmbeddedModelInstQuerys = serialized->get_int32(EmbeddedModelInstQuerys_type_id, 16000);
		EmbeddedSampleDebugging = serialized->get_bool(EmbeddedSampleDebugging_type_id, false);
		AvoidEmbeddedSamples = serialized->get_bool(AvoidEmbeddedSamples_type_id, false);
		IrradianceAdjustmentHack = serialized->get_float(IrradianceAdjustmentHack_type_id, 1.000000); 
	}

	[[nodiscard]] auto
	LightCaptureSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LightCaptureSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LightCaptureSettings> {
		if (incoming_type_id == LightCaptureSettings::type_id) {
			return std::make_shared<LightCaptureSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
