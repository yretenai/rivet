// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MaterialAlpha.hpp>

namespace rivet::ddl::generated {
	MaterialAlpha::MaterialAlpha([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BlendType = serialized->get_enum<rivet::ddl::generated::BlendType>(BlendType_type_id, rivet::ddl::generated::BlendType_values, rivet::ddl::generated::BlendType::Opaque);
		Alpha = serialized->get_float(Alpha_type_id, 1.000000f);
		AlphaTest = serialized->get_float(AlphaTest_type_id, 0.000000f);
		Lit = serialized->get_bool(Lit_type_id, true);
		DepthPass = serialized->get_bool(DepthPass_type_id, false);
		ForceOpaqueLoDs = serialized->get_bool(ForceOpaqueLoDs_type_id, false);
		UseRayTracedShadowsAlphaTest = serialized->get_bool(UseRayTracedShadowsAlphaTest_type_id, false);
		RayTracedShadowsAlphaTest = serialized->get_float(RayTracedShadowsAlphaTest_type_id, 0.000000f);
		TemporalAA = serialized->get_enum<rivet::ddl::generated::xb87f7049>(TemporalAA_type_id, rivet::ddl::generated::xb87f7049_values, rivet::ddl::generated::xb87f7049::NonResponsive); 
	}

	[[nodiscard]] auto
	MaterialAlpha::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MaterialAlpha::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialAlpha> {
		if (incoming_type_id == MaterialAlpha::type_id) {
			return std::make_shared<MaterialAlpha>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
