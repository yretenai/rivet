// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UIJukeboxSelectEvent.hpp>
#include <rivet/ddl/generated/CameraProximityOffEvent.hpp>
#include <rivet/ddl/generated/AwardVanityBundleStatusEvent.hpp>
#include <rivet/ddl/generated/ClankPackHydropackActiveEndEvent.hpp>
#include <rivet/ddl/generated/EndMissionDevstatsEvent.hpp>
#include <rivet/ddl/generated/ActivityClueRequestOutroEvent.hpp>
#include <rivet/ddl/generated/RefuelPadGaveFuelEvent.hpp>
#include <rivet/ddl/generated/UIObjectivePingEvent.hpp>
#include <rivet/ddl/generated/FocusTrackingAddSolverByNameEvent.hpp>
#include <rivet/ddl/generated/AnimDamageIdealFrameEvent.hpp>
#include <rivet/ddl/generated/AnimAttachHolsterEvent.hpp>
#include <rivet/ddl/generated/BotComboStartedEvent.hpp>
#include <rivet/ddl/generated/ProjectileFlyingStopEvent.hpp>
#include <rivet/ddl/generated/DevstatsSetColorblindFilterEvent.hpp>
#include <rivet/ddl/generated/CineActorVoiceCoveredEvent.hpp>
#include <rivet/ddl/generated/ZurkonSpawnEvent.hpp>
#include <rivet/ddl/generated/WepHarpoonTurretFireFlashEvent.hpp>
#include <rivet/ddl/generated/LoadStateChangedEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorChainUpEvent.hpp>
#include <rivet/ddl/generated/ConduitAnimEvent.hpp>
#include <rivet/ddl/generated/HoverbootKickHighSpeedStartEvent.hpp>
#include <rivet/ddl/generated/InteractUnlockedEvent.hpp>
#include <rivet/ddl/generated/MissionSystemLoaded.hpp>
#include <rivet/ddl/generated/StopMovingEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserEndSweepAnimEvent.hpp>
#include <rivet/ddl/generated/ClankWeaponLockReleaseEvent.hpp>
#include <rivet/ddl/generated/PlatformApproachStopEvent.hpp>
#include <rivet/ddl/generated/UIWeaponLevelUpOpenEvent.hpp>
#include <rivet/ddl/generated/FrozenShatterEvent.hpp>
#include <rivet/ddl/generated/BeamImpactEvent.hpp>
#include <rivet/ddl/generated/ModelSelectedEvent.hpp>
#include <rivet/ddl/generated/TraversalInvincibilityStoppedEvent.hpp>
#include <rivet/ddl/generated/GlobalSaveTableChangedEvent.hpp>
#include <rivet/ddl/generated/AnimPrepareToFireWeaponEvent.hpp>
#include <rivet/ddl/generated/DialogDebugRequestEvent.hpp>
#include <rivet/ddl/generated/DirectPathPropagationEvent.hpp>
#include <rivet/ddl/generated/ActivityClueActivityStoppedEvent.hpp>
#include <rivet/ddl/generated/FrozenReactStartEvent.hpp>
#include <rivet/ddl/generated/InteractModelSwapEvent.hpp>
#include <rivet/ddl/generated/ReachedEndEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorPurchaseTabOpenEvent.hpp>
#include <rivet/ddl/generated/JointCrawlerEventBase.hpp>
#include <rivet/ddl/generated/BotShootLaserStateFinishedEvent.hpp>
#include <rivet/ddl/generated/UIExitFinaleEvent.hpp>
#include <rivet/ddl/generated/PossibleTargetOffEvent.hpp>
#include <rivet/ddl/generated/ChunkingRejectedEvent.hpp>
#include <rivet/ddl/generated/RotationStartEvent.hpp>
#include <rivet/ddl/generated/UIJukeboxOpenEvent.hpp>
#include <rivet/ddl/generated/StartObjectiveDevstatsEvent.hpp>
#include <rivet/ddl/generated/MultiAttachActivatedEvent.hpp>
#include <rivet/ddl/generated/UnloadRequestedEvent.hpp>
#include <rivet/ddl/generated/BoltCrankTargetReseting.hpp>
#include <rivet/ddl/generated/AnimHeadAimBlendInEvent.hpp>
#include <rivet/ddl/generated/ShipReticleNeutralEvent.hpp>
#include <rivet/ddl/generated/PauseGalleryPanStopEvent.hpp>
#include <rivet/ddl/generated/Cinematic2BotReadyEvent.hpp>
#include <rivet/ddl/generated/UIMenuScrollTextStartEvent.hpp>
#include <rivet/ddl/generated/ThrusterOffEvent.hpp>
#include <rivet/ddl/generated/DashEndEvent.hpp>
#include <rivet/ddl/generated/PredatorTargetAcquiredEvent.hpp>
#include <rivet/ddl/generated/AnimMountFlyLandEvent.hpp>
#include <rivet/ddl/generated/MovieAlmostDoneEvent.hpp>
#include <rivet/ddl/generated/TunnelerLockOnStartedEvent.hpp>
#include <rivet/ddl/generated/MagbootLaunchTakeOffEvent.hpp>
#include <rivet/ddl/generated/WeaponCaughtEvent.hpp>
#include <rivet/ddl/generated/BehaviorMeleeGotoStartEvent.hpp>
#include <rivet/ddl/generated/TargetedOffEvent.hpp>
#include <rivet/ddl/generated/CanceledEvent.hpp>
#include <rivet/ddl/generated/IdlingEvent.hpp>
#include <rivet/ddl/generated/TriggerPadBlinkEvent.hpp>
#include <rivet/ddl/generated/FinaleHeartLaserPhaseHasStartedEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndPressContinueEvent.hpp>
#include <rivet/ddl/generated/UIJukeboxCloseEvent.hpp>
#include <rivet/ddl/generated/BossPhaseChangeEvent.hpp>
#include <rivet/ddl/generated/GroupAlertedEvent.hpp>
#include <rivet/ddl/generated/SoundEvent.hpp>
#include <rivet/ddl/generated/ChargeAttackIntroFinishedEvent.hpp>
#include <rivet/ddl/generated/CombatStateChangedEvent.hpp>
#include <rivet/ddl/generated/CameraAutoDeactivateTriggeredEvent.hpp>
#include <rivet/ddl/generated/InteractOnOutroCompleteEvent.hpp>
#include <rivet/ddl/generated/PortalZipShowTargetEvent.hpp>
#include <rivet/ddl/generated/BotOnTranslationCancelEvent.hpp>
#include <rivet/ddl/generated/VendorCancelEvent.hpp>
#include <rivet/ddl/generated/MissionCompletedPopUpClosedEvent.hpp>
#include <rivet/ddl/generated/ManglerTellTrailActivateEvent.hpp>
#include <rivet/ddl/generated/BounceEvent.hpp>
#include <rivet/ddl/generated/UnsyncedDeathEvent.hpp>
#include <rivet/ddl/generated/VolcanicEruptorBurstOffEvent.hpp>
#include <rivet/ddl/generated/TriggerPadInvalidStandEvent.hpp>
#include <rivet/ddl/generated/JumpTakeoffEvent.hpp>
#include <rivet/ddl/generated/ArmorBrokenEvent.hpp>
#include <rivet/ddl/generated/FocusTrackingAddSolverEvent.hpp>
#include <rivet/ddl/generated/ClankPackHydropackStartEvent.hpp>
#include <rivet/ddl/generated/WeaponThrownEvent.hpp>
#include <rivet/ddl/generated/TopiarySprinklerChangeDirectionEvent.hpp>
#include <rivet/ddl/generated/BotDetachingEvent.hpp>
#include <rivet/ddl/generated/HeroJumpDodgeEndedEvent.hpp>
#include <rivet/ddl/generated/UIPhotoModeCloseEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeEndCompleteEvent.hpp>
#include <rivet/ddl/generated/AnimDamageIdealFrameVictimEvent.hpp>
#include <rivet/ddl/generated/ZurkieJukeboxSelectEvent.hpp>
#include <rivet/ddl/generated/ReviveBarShowEvent.hpp>
#include <rivet/ddl/generated/RainDropEvent.hpp>
#include <rivet/ddl/generated/RotationStopEvent.hpp>
#include <rivet/ddl/generated/DevstatsHighContrastBackgroundEnabledEvent.hpp>
#include <rivet/ddl/generated/AllowEarlyTransitionEvent.hpp>
#include <rivet/ddl/generated/BotDismountEvent.hpp>
#include <rivet/ddl/generated/BlendInEvent.hpp>
#include <rivet/ddl/generated/TimeScaleChannelStopEvent.hpp>
#include <rivet/ddl/generated/UILeaveDisplayGraphicsMenuEvent.hpp>
#include <rivet/ddl/generated/MagShieldCanceledEvent.hpp>
#include <rivet/ddl/generated/PixelizerBlastLineEvent.hpp>
#include <rivet/ddl/generated/DestroyedEvent.hpp>
#include <rivet/ddl/generated/AccessibilityHighContrastBackgroundDisableEvent.hpp>
#include <rivet/ddl/generated/MissionObjectiveStartedEvent.hpp>
#include <rivet/ddl/generated/VolumeFitToSpaceEvent.hpp>
#include <rivet/ddl/generated/WeaponLaserChargeEndEvent.hpp>
#include <rivet/ddl/generated/OnEnabledEvent.hpp>
#include <rivet/ddl/generated/ServerChangedEvent.hpp>
#include <rivet/ddl/generated/RYNOPortalObjectLandPlayedEvent.hpp>
#include <rivet/ddl/generated/DamageRequest.hpp>
#include <rivet/ddl/generated/ShockwaveStopEvent.hpp>
#include <rivet/ddl/generated/BotComboMoveStartedEvent.hpp>
#include <rivet/ddl/generated/WeaponAcquiredAmmoEvent.hpp>
#include <rivet/ddl/generated/DisplayInteractIconEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserEndAnimEvent.hpp>
#include <rivet/ddl/generated/ShotSpawnerAttachArtEvent.hpp>
#include <rivet/ddl/generated/DimensionPortalRemoveHighlightEvent.hpp>
#include <rivet/ddl/generated/WWiseEvent.hpp>
#include <rivet/ddl/generated/HazardNestSpawnEvent.hpp>
#include <rivet/ddl/generated/DestroyDamageModifierIncomingEvent.hpp>
#include <rivet/ddl/generated/PhotomodeDeactivateEvent.hpp>
#include <rivet/ddl/generated/PauseArmorUnequipEvent.hpp>
#include <rivet/ddl/generated/PlanetChangedEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserStopTrackingAnimEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndPressStartEvent.hpp>
#include <rivet/ddl/generated/SargassoCentipedeLaserChargeStart.hpp>
#include <rivet/ddl/generated/ProtonSeekerAttackActiveEndEvent.hpp>
#include <rivet/ddl/generated/DevstatsAccessibilityUseShortcutEvent.hpp>
#include <rivet/ddl/generated/EndObjectiveDevstatsEvent.hpp>
#include <rivet/ddl/generated/FinaleBodyArmPortalSyncAnimEvent.hpp>
#include <rivet/ddl/generated/BotTrappedInBoxEvent.hpp>
#include <rivet/ddl/generated/ScriptedDevstatsEvent.hpp>
#include <rivet/ddl/generated/HideMagbootLaunchReticleEvent.hpp>
#include <rivet/ddl/generated/MagShieldDeployingEvent.hpp>
#include <rivet/ddl/generated/ProximitySpawnerSpawnEvent.hpp>
#include <rivet/ddl/generated/HeroUnlockControlsEvent.hpp>
#include <rivet/ddl/generated/MeleeTriggeredEvent.hpp>
#include <rivet/ddl/generated/RefireChargeStopEvent.hpp>
#include <rivet/ddl/generated/DevstatsHighContrastBackgroundDisabledEvent.hpp>
#include <rivet/ddl/generated/CineCameraEnableManualZoomEvent.hpp>
#include <rivet/ddl/generated/WallRunOnEvent.hpp>
#include <rivet/ddl/generated/VaultBeginEvent.hpp>
#include <rivet/ddl/generated/RYNORocketFiredEvent.hpp>
#include <rivet/ddl/generated/StopCommandEvent.hpp>
#include <rivet/ddl/generated/TakedownVictimEvent.hpp>
#include <rivet/ddl/generated/SargassoCentipedeLaserChargeEnd.hpp>
#include <rivet/ddl/generated/MovieDoneEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimSetAnchorTypeEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimStartEvent.hpp>
#include <rivet/ddl/generated/DimensionalBarrageAttackBeginEvent.hpp>
#include <rivet/ddl/generated/ExplosionWarningEvent.hpp>
#include <rivet/ddl/generated/DevstatsPlayerDeathDealtEvent.hpp>
#include <rivet/ddl/generated/BotDashChargeOnMissedOutroEvent.hpp>
#include <rivet/ddl/generated/NailGunPlantedShotImpactEvent.hpp>
#include <rivet/ddl/generated/ExplosionDecalEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidDashStopEvent.hpp>
#include <rivet/ddl/generated/DoomBotJumpEndEvent.hpp>
#include <rivet/ddl/generated/HeadAnimationBeginEvent.hpp>
#include <rivet/ddl/generated/WeaponWarpRifleSpinUpCancelledEvent.hpp>
#include <rivet/ddl/generated/ZurkonDestroyedEvent.hpp>
#include <rivet/ddl/generated/DifficultyEndEvent.hpp>
#include <rivet/ddl/generated/PortalZipHeroWarpEvent.hpp>
#include <rivet/ddl/generated/TunnelerLockOnInstantEvent.hpp>
#include <rivet/ddl/generated/Cinematic2BehaviorPlayAnimEvent.hpp>
#include <rivet/ddl/generated/BurrowMoveStartEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorChainAcceptEvent.hpp>
#include <rivet/ddl/generated/MoverBodyContactEvent.hpp>
#include <rivet/ddl/generated/PortalZipAddHighlightEvent.hpp>
#include <rivet/ddl/generated/HazardNestTargetLostEvent.hpp>
#include <rivet/ddl/generated/InteractDetachPropEvent.hpp>
#include <rivet/ddl/generated/BlizonShiftFadeOutEvent.hpp>
#include <rivet/ddl/generated/AnimPortalZipReturnEndEvent.hpp>
#include <rivet/ddl/generated/AnimInvulnerabilityEvent.hpp>
#include <rivet/ddl/generated/CinematicPortalTransitionEnableEvent.hpp>
#include <rivet/ddl/generated/HammerCrankTargetReset.hpp>
#include <rivet/ddl/generated/FinaleHeartPartReactTriggeredEvent.hpp>
#include <rivet/ddl/generated/ProjectileLockedOnEvent.hpp>
#include <rivet/ddl/generated/Beam2JointStartEvent.hpp>
#include <rivet/ddl/generated/OnArriveEvent.hpp>
#include <rivet/ddl/generated/DestroyScriptedFlockEvent.hpp>
#include <rivet/ddl/generated/ProximityBreachedEvent.hpp>
#include <rivet/ddl/generated/FossilizeDeathEvent.hpp>
#include <rivet/ddl/generated/JointShrinkStartEvent.hpp>
#include <rivet/ddl/generated/PortalZipTargetInRange.hpp>
#include <rivet/ddl/generated/WepHarpoonTurretFireDistantEvent.hpp>
#include <rivet/ddl/generated/UserEquippedWeaponEvent.hpp>
#include <rivet/ddl/generated/BotImpactedEvent.hpp>
#include <rivet/ddl/generated/HeroNewAvailableOfferEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorMoveEvent.hpp>
#include <rivet/ddl/generated/OnCompleteEvent.hpp>
#include <rivet/ddl/generated/BotForceMoveBaseEvent.hpp>
#include <rivet/ddl/generated/KamehamehaChargeUpCompletedEvent.hpp>
#include <rivet/ddl/generated/LeaveViewEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorCellUnlockEvent.hpp>
#include <rivet/ddl/generated/PickupDetachedEvent.hpp>
#include <rivet/ddl/generated/VanityHelmetForceOnEvent.hpp>
#include <rivet/ddl/generated/UIEnterDisplayGraphicsMenuEvent.hpp>
#include <rivet/ddl/generated/PortalZipHideTargetEvent.hpp>
#include <rivet/ddl/generated/PhotoModeRemoveStickerEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidPulseEvent.hpp>
#include <rivet/ddl/generated/CheckpointEventBase.hpp>
#include <rivet/ddl/generated/PeriodicCleanupEvent.hpp>
#include <rivet/ddl/generated/HeroLockControlsEvent.hpp>
#include <rivet/ddl/generated/UICreditsMusicEvent.hpp>
#include <rivet/ddl/generated/GainRaritaniumEvent.hpp>
#include <rivet/ddl/generated/RuinPlayPickedUpEvent.hpp>
#include <rivet/ddl/generated/HandBeamStopEvent.hpp>
#include <rivet/ddl/generated/MeleeComboEndEvent.hpp>
#include <rivet/ddl/generated/PhaseDashBarrierOutOfRangeEvent.hpp>
#include <rivet/ddl/generated/UIControllerDisconnectShowEvent.hpp>
#include <rivet/ddl/generated/BotShotIntroStartEvent.hpp>
#include <rivet/ddl/generated/EnableBirdsCineEvent.hpp>
#include <rivet/ddl/generated/RYNOPortalObjectCreateEvent.hpp>
#include <rivet/ddl/generated/HeroFinishedRespawnEvent.hpp>
#include <rivet/ddl/generated/ProtonSeekerAttackEndEvent.hpp>
#include <rivet/ddl/generated/BotHoverMoveStartedEvent.hpp>
#include <rivet/ddl/generated/CinePortalZipLineStart.hpp>
#include <rivet/ddl/generated/BotTelekinesisReadyObjectEvent.hpp>
#include <rivet/ddl/generated/ShipLowOnAmmoEvent.hpp>
#include <rivet/ddl/generated/PassiveShiftTranstionEndEvent.hpp>
#include <rivet/ddl/generated/AnimMotionQueryStartEvent.hpp>
#include <rivet/ddl/generated/BotDodgedEvent.hpp>
#include <rivet/ddl/generated/TriggerPadTimedOutEvent.hpp>
#include <rivet/ddl/generated/WeaponBurstStartedEvent.hpp>
#include <rivet/ddl/generated/BotReSpawnedEvent.hpp>
#include <rivet/ddl/generated/ActivatedEvent.hpp>
#include <rivet/ddl/generated/StartTriggeredEvent.hpp>
#include <rivet/ddl/generated/FrozenSlideBumpEvent.hpp>
#include <rivet/ddl/generated/PlatformStopAscentEvent.hpp>
#include <rivet/ddl/generated/CurveIntroEndEvent.hpp>
#include <rivet/ddl/generated/MacroSegmentCompleteEvent.hpp>
#include <rivet/ddl/generated/GroovitronDancePartyStartEvent.hpp>
#include <rivet/ddl/generated/PortalOpeningEvent.hpp>
#include <rivet/ddl/generated/ShieldWithHealthDestoryedEvent.hpp>
#include <rivet/ddl/generated/OfferAcceptedEvent.hpp>
#include <rivet/ddl/generated/EnergyDeathEvent.hpp>
#include <rivet/ddl/generated/BotStateLungeStopEvent.hpp>
#include <rivet/ddl/generated/RallyOnEvent.hpp>
#include <rivet/ddl/generated/BotStartSleepEvent.hpp>
#include <rivet/ddl/generated/PauseMenuDeselectEvent.hpp>
#include <rivet/ddl/generated/PredatorFireEvent.hpp>
#include <rivet/ddl/generated/UIControllerDisconnectHideEvent.hpp>
#include <rivet/ddl/generated/BotShootMortarEndEvent.hpp>
#include <rivet/ddl/generated/AttachmentRemovedEvent.hpp>
#include <rivet/ddl/generated/BotAimSteadyStartEvent.hpp>
#include <rivet/ddl/generated/BotRelativeAnimSetInterruptTypeEvent.hpp>
#include <rivet/ddl/generated/AnimAimOffEvent.hpp>
#include <rivet/ddl/generated/HeroGrindMacroStateOnEvent.hpp>
#include <rivet/ddl/generated/HoverEffectChangedEvent.hpp>
#include <rivet/ddl/generated/UIOptionsChangeControllerSpeakerEvent.hpp>
#include <rivet/ddl/generated/PlayDialogFinishedEvent.hpp>
#include <rivet/ddl/generated/ManualBreakEvent.hpp>
#include <rivet/ddl/generated/ClankPackHydropackExtendEvent.hpp>
#include <rivet/ddl/generated/DeathEraseStartedEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidMissilesCancelled.hpp>
#include <rivet/ddl/generated/BotDetectedHostileEvent.hpp>
#include <rivet/ddl/generated/PickupStartFlyingEvent.hpp>
#include <rivet/ddl/generated/TimeScaleFXStopEvent.hpp>
#include <rivet/ddl/generated/PhaseDashBarrierInRangeEvent.hpp>
#include <rivet/ddl/generated/PickupBounceEvent.hpp>
#include <rivet/ddl/generated/BotInvestigateStartEvent.hpp>
#include <rivet/ddl/generated/HeroDamageScreenFXEvent.hpp>
#include <rivet/ddl/generated/ChunkedEvent.hpp>
#include <rivet/ddl/generated/Cinematic2CameraBlendOutEvent.hpp>
#include <rivet/ddl/generated/ShipLowHealthEvent.hpp>
#include <rivet/ddl/generated/MeleeStreakEndEvent.hpp>
#include <rivet/ddl/generated/SwingshotDescendEvent.hpp>
#include <rivet/ddl/generated/InteractFlickerEvent.hpp>
#include <rivet/ddl/generated/BotShotIntroEndEvent.hpp>
#include <rivet/ddl/generated/WarpRifleOverheatedFailedToShootEvent.hpp>
#include <rivet/ddl/generated/CameraUnderwaterStartEvent.hpp>
#include <rivet/ddl/generated/SlingshotSpinEndEvent.hpp>
#include <rivet/ddl/generated/StatusEmitterStartEvent.hpp>
#include <rivet/ddl/generated/GrenadeHazardStartEvent.hpp>
#include <rivet/ddl/generated/StatusEffectExplosionEvent.hpp>
#include <rivet/ddl/generated/FinaleNefMechDamageStage3Event.hpp>
#include <rivet/ddl/generated/BotShootLaserStartPerfectTweakHeadingAnimEvent.hpp>
#include <rivet/ddl/generated/AnimIKFootDownEvent.hpp>
#include <rivet/ddl/generated/AlertEvent.hpp>
#include <rivet/ddl/generated/ChainLightningExplosionEvent.hpp>
#include <rivet/ddl/generated/HeroSpawnedEvent.hpp>
#include <rivet/ddl/generated/BounceSplosionTriggeredEvent.hpp>
#include <rivet/ddl/generated/OnStartTriggerEvent.hpp>
#include <rivet/ddl/generated/SkinFullyUpdatedEvent.hpp>
#include <rivet/ddl/generated/FinaleNefWeakspotDamagedStage2Event.hpp>
#include <rivet/ddl/generated/DevstatsSetRumbleStyleEvent.hpp>
#include <rivet/ddl/generated/PauseGalleryPanStartEvent.hpp>
#include <rivet/ddl/generated/LevelLoadedEvent.hpp>
#include <rivet/ddl/generated/TriggerOffEvent.hpp>
#include <rivet/ddl/generated/JumpLandingParamWarnEvent.hpp>
#include <rivet/ddl/generated/FrozenReactStopEvent.hpp>
#include <rivet/ddl/generated/InteractOnCompleteEvent.hpp>
#include <rivet/ddl/generated/UICreditsLongMusicEvent.hpp>
#include <rivet/ddl/generated/FossilizeZoomChangeEvent.hpp>
#include <rivet/ddl/generated/PhaseDashStartEvent.hpp>
#include <rivet/ddl/generated/UIWeaponSelectCloseEvent.hpp>
#include <rivet/ddl/generated/BotIntroCompletedEvent.hpp>
#include <rivet/ddl/generated/VinylGunShatterEvent.hpp>
#include <rivet/ddl/generated/LightningRodElectrifiedEndEvent.hpp>
#include <rivet/ddl/generated/VanityOverrideEvent.hpp>
#include <rivet/ddl/generated/RefuelPadRefillEvent.hpp>
#include <rivet/ddl/generated/BotOnTranslationDieEvent.hpp>
#include <rivet/ddl/generated/BlizonShiftCrystalShowEvent.hpp>
#include <rivet/ddl/generated/ClankPackHeliExtendEvent.hpp>
#include <rivet/ddl/generated/StatusEffectDamageStartEvent.hpp>
#include <rivet/ddl/generated/UnderwaterBaseJuiceDistractionSpottedEvent.hpp>
#include <rivet/ddl/generated/HealthRestoredEvent.hpp>
#include <rivet/ddl/generated/HammerCrankTargetCranking.hpp>
#include <rivet/ddl/generated/MagbootLaunchLandedEvent.hpp>
#include <rivet/ddl/generated/PauseArmorEquipFailedEvent.hpp>
#include <rivet/ddl/generated/FinalizeMotionEvent.hpp>
#include <rivet/ddl/generated/MeleeWeakEvent.hpp>
#include <rivet/ddl/generated/FormationFinishedEvent.hpp>
#include <rivet/ddl/generated/DrNefariousForceDeactivateShieldEvent.hpp>
#include <rivet/ddl/generated/WaterSplashEvent.hpp>
#include <rivet/ddl/generated/ChunkSpawnedEvent.hpp>
#include <rivet/ddl/generated/HeroBeginRespawnEvent.hpp>
#include <rivet/ddl/generated/FlyerLandStartEvent.hpp>
#include <rivet/ddl/generated/AnimRateKeyEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidDashStartEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndColorPickerMoveEvent.hpp>
#include <rivet/ddl/generated/MagShieldShotImpactEvent.hpp>
#include <rivet/ddl/generated/BurrowMoveEndEvent.hpp>
#include <rivet/ddl/generated/UIPhotoModeCycleEditModes.hpp>
#include <rivet/ddl/generated/AnimClueAllowNextSpawnEvent.hpp>
#include <rivet/ddl/generated/VendorPurchaseEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidDamageEvent.hpp>
#include <rivet/ddl/generated/PurchaseWeaponEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserEndPerfectTweakHeadingAnimEvent.hpp>
#include <rivet/ddl/generated/WeaponLaserHittingStopEvent.hpp>
#include <rivet/ddl/generated/FrozenSlideStopEvent.hpp>
#include <rivet/ddl/generated/TargetMarkedUnreachableEvent.hpp>
#include <rivet/ddl/generated/VehicleThrustersOffEvent.hpp>
#include <rivet/ddl/generated/DestroyedStateEvent.hpp>
#include <rivet/ddl/generated/SkateEndEvent.hpp>
#include <rivet/ddl/generated/UICountdownOnFinishedEvent.hpp>
#include <rivet/ddl/generated/TeleporterEnabledEvent.hpp>
#include <rivet/ddl/generated/GameStartedEvent.hpp>
#include <rivet/ddl/generated/ProtonSeekerShardLandEvent.hpp>
#include <rivet/ddl/generated/PickupContinuousStoppedEvent.hpp>
#include <rivet/ddl/generated/ToggleEvent.hpp>
#include <rivet/ddl/generated/UIStartNewGameEvent.hpp>
#include <rivet/ddl/generated/AnimMotionStoppedEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleEndTargetAddEvent.hpp>
#include <rivet/ddl/generated/FormationLeaveEvent.hpp>
#include <rivet/ddl/generated/DrNefariousShieldActivationAnimEndEvent.hpp>
#include <rivet/ddl/generated/FocusTrackingOverrideInstanceEvent.hpp>
#include <rivet/ddl/generated/PortalGravityWellActivatedEvent.hpp>
#include <rivet/ddl/generated/CentipedeChaseMineFireEvent.hpp>
#include <rivet/ddl/generated/BloodPooledEvent.hpp>
#include <rivet/ddl/generated/StageTransitionStartEvent.hpp>
#include <rivet/ddl/generated/PhysicsStateActionEvent.hpp>
#include <rivet/ddl/generated/PixelizerChargeUpEndEvent.hpp>
#include <rivet/ddl/generated/VehicleSoundOnEvent.hpp>
#include <rivet/ddl/generated/ProtoShotgunSecondShotWindowStartEvent.hpp>
#include <rivet/ddl/generated/CantripDisabledEvent.hpp>
#include <rivet/ddl/generated/ItemModifiedEvent.hpp>
#include <rivet/ddl/generated/PortalStartDeactivatingEvent.hpp>
#include <rivet/ddl/generated/ChargeStartEvent.hpp>
#include <rivet/ddl/generated/PortalZipLineStartEvent.hpp>
#include <rivet/ddl/generated/PoisonReactStopEvent.hpp>
#include <rivet/ddl/generated/ParachuteOffEvent.hpp>
#include <rivet/ddl/generated/WeaponLevelUpEvent.hpp>
#include <rivet/ddl/generated/AboutToLandLongFallEvent.hpp>
#include <rivet/ddl/generated/EnemyWaveCompleteEvent.hpp>
#include <rivet/ddl/generated/BotPartialAnimsManagerStopAnimsEvent.hpp>
#include <rivet/ddl/generated/AnimDropEvent.hpp>
#include <rivet/ddl/generated/IntroTransitionOnEngagedEvent.hpp>
#include <rivet/ddl/generated/PauseMenuRotateStopEvent.hpp>
#include <rivet/ddl/generated/OnWarpEvent.hpp>
#include <rivet/ddl/generated/RYNOPortalCreateEvent.hpp>
#include <rivet/ddl/generated/ManglerMovingStartEvent.hpp>
#include <rivet/ddl/generated/MovingLevelAnimLoopedEvent.hpp>
#include <rivet/ddl/generated/MissionCompleteEvent.hpp>
#include <rivet/ddl/generated/FossilizeWalkEndEvent.hpp>
#include <rivet/ddl/generated/ClankWeaponHideInHandEvent.hpp>
#include <rivet/ddl/generated/EmergentVOLineCompletedEvent.hpp>
#include <rivet/ddl/generated/BotStopAimingEvent.hpp>
#include <rivet/ddl/generated/ProjectileIdlingStopEvent.hpp>
#include <rivet/ddl/generated/DevstatsAccessibilitySwingCameraBlendEvent.hpp>
#include <rivet/ddl/generated/TimeScaleStartEvent.hpp>
#include <rivet/ddl/generated/PSNLinkDevstatsEvent.hpp>
#include <rivet/ddl/generated/Cinematic2SkipDestinationEvent.hpp>
#include <rivet/ddl/generated/DropshipDropoffCompleteEvent.hpp>
#include <rivet/ddl/generated/RYNOShotPreLargePortalCreateEvent.hpp>
#include <rivet/ddl/generated/BoltCrankTargetCranking.hpp>
#include <rivet/ddl/generated/BotStartFollowPatrolPathEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeThrown.hpp>
#include <rivet/ddl/generated/DropEvent.hpp>
#include <rivet/ddl/generated/BotDashChargeIntroEndedEvent.hpp>
#include <rivet/ddl/generated/TargetNowReachableEvent.hpp>
#include <rivet/ddl/generated/ClankPackHeliStartEvent.hpp>
#include <rivet/ddl/generated/DisableDamageVolumeEvent.hpp>
#include <rivet/ddl/generated/MissionObjectiveCompleteEvent.hpp>
#include <rivet/ddl/generated/ExplodedDealtEvent.hpp>
#include <rivet/ddl/generated/CrowdTypeChangedEvent.hpp>
#include <rivet/ddl/generated/ConnectEvent.hpp>
#include <rivet/ddl/generated/ShieldWithHealthDamageEvent.hpp>
#include <rivet/ddl/generated/BoltCrankAttachEvent.hpp>
#include <rivet/ddl/generated/ShotgunPumpEvent.hpp>
#include <rivet/ddl/generated/StatusEffectResurrectingEvent.hpp>
#include <rivet/ddl/generated/AnimFootUpEvent.hpp>
#include <rivet/ddl/generated/TeleportTrailStartEvent.hpp>
#include <rivet/ddl/generated/RevivingStopEvent.hpp>
#include <rivet/ddl/generated/ClankPackEnableCineAttachEvent.hpp>
#include <rivet/ddl/generated/TraversalInvincibilityStartedEvent.hpp>
#include <rivet/ddl/generated/LaserBeamSpawnerDestroyShotEvent.hpp>
#include <rivet/ddl/generated/MeleeHitEvent.hpp>
#include <rivet/ddl/generated/CinematicContextSnapBlend.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeEndAddEntryEvent.hpp>
#include <rivet/ddl/generated/Cinematic2EnterEvent.hpp>
#include <rivet/ddl/generated/WeaponEmptyFireEvent.hpp>
#include <rivet/ddl/generated/RallyFullEvent.hpp>
#include <rivet/ddl/generated/BotTriggerToEquippedEvent.hpp>
#include <rivet/ddl/generated/BeetleTrailEndEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimConnectRotEvent.hpp>
#include <rivet/ddl/generated/UIOptionsChangeEvent.hpp>
#include <rivet/ddl/generated/TriggerSwitchDelayedEvent.hpp>
#include <rivet/ddl/generated/GameAudioStateChangedEvent.hpp>
#include <rivet/ddl/generated/ProximitySpawnerDamagedEvent.hpp>
#include <rivet/ddl/generated/ShipMagnetTransCollectEvent.hpp>
#include <rivet/ddl/generated/FlyerHomingMineExplodeEvent.hpp>
#include <rivet/ddl/generated/ProjectileHitMarkerStopTrackingEvent.hpp>
#include <rivet/ddl/generated/ActivityInterplanetaryTravelEvent.hpp>
#include <rivet/ddl/generated/HexapodWeaponChargeUpStartedEvent.hpp>
#include <rivet/ddl/generated/HeroJumpDodgeStartedEvent.hpp>
#include <rivet/ddl/generated/UIPhotoModeTabEvent.hpp>
#include <rivet/ddl/generated/PoleSwingEndEvent.hpp>
#include <rivet/ddl/generated/BotCurveIntroDataFollowStartEvent.hpp>
#include <rivet/ddl/generated/AwardHeroHoverbootDoubleJumpedEvent.hpp>
#include <rivet/ddl/generated/DropshipBotBeamInStartedEvent.hpp>
#include <rivet/ddl/generated/LightingModeTransitionFinishedEvent.hpp>
#include <rivet/ddl/generated/EyeBeamLockTargetEvent.hpp>
#include <rivet/ddl/generated/HoverbootStartEvent.hpp>
#include <rivet/ddl/generated/MultiAttachDeactivatedEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidMissileCooldownEvent.hpp>
#include <rivet/ddl/generated/AnimGrenadeReleaseEvent.hpp>
#include <rivet/ddl/generated/AirDashBeginEvent.hpp>
#include <rivet/ddl/generated/MountBrakeEndEvent.hpp>
#include <rivet/ddl/generated/BotTelekinesisEndedEvent.hpp>
#include <rivet/ddl/generated/HUDMessageArenaWaveCompletedEvent.hpp>
#include <rivet/ddl/generated/UIMenuOpenEvent.hpp>
#include <rivet/ddl/generated/ToggleTeamEvent.hpp>
#include <rivet/ddl/generated/ChargeEndEvent.hpp>
#include <rivet/ddl/generated/ClothChangeDampingEvent.hpp>
#include <rivet/ddl/generated/RYNOScriptPickupEvent.hpp>
#include <rivet/ddl/generated/MeleeDamageEndEvent.hpp>
#include <rivet/ddl/generated/AnimFireWeaponEvent.hpp>
#include <rivet/ddl/generated/ActorReinitEvent.hpp>
#include <rivet/ddl/generated/WeaponOverheatedEvent.hpp>
#include <rivet/ddl/generated/ActivateCameraEvent.hpp>
#include <rivet/ddl/generated/StartSimpleLocatorFXCrawlEvent.hpp>
#include <rivet/ddl/generated/StreamingVideoStopEvent.hpp>
#include <rivet/ddl/generated/BoltCrankFinishedEvent.hpp>
#include <rivet/ddl/generated/ContainerRegionChangedEvent.hpp>
#include <rivet/ddl/generated/HazardAlarmStopEvent.hpp>
#include <rivet/ddl/generated/UnTriggerByGroupEvent.hpp>
#include <rivet/ddl/generated/BoltCrankLoadFinishedEvent.hpp>
#include <rivet/ddl/generated/OfferStopAcceptingEvent.hpp>
#include <rivet/ddl/generated/HeroPingDevstatsEvent.hpp>
#include <rivet/ddl/generated/BotDropIntroStartEvent.hpp>
#include <rivet/ddl/generated/InteractBrokenStopEvent.hpp>
#include <rivet/ddl/generated/BotDashChargeOnHitOutroEvent.hpp>
#include <rivet/ddl/generated/ChainLightningStopMainEvent.hpp>
#include <rivet/ddl/generated/BurstPistolHighHeatEvent.hpp>
#include <rivet/ddl/generated/MusicIntensityMediumEvent.hpp>
#include <rivet/ddl/generated/ShieldDamagedEvent.hpp>
#include <rivet/ddl/generated/BaseMountGroundMoveEvent.hpp>
#include <rivet/ddl/generated/AnimVarDescendingEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserStartIntroEvent.hpp>
#include <rivet/ddl/generated/AnimReReactEvent.hpp>
#include <rivet/ddl/generated/HUDMessageTutorialDisplayEvent.hpp>
#include <rivet/ddl/generated/VanityHelmetForceOffEvent.hpp>
#include <rivet/ddl/generated/CustomDesignEvent.hpp>
#include <rivet/ddl/generated/ShieldDeactivatedEvent.hpp>
#include <rivet/ddl/generated/SpawnerStartedEvent.hpp>
#include <rivet/ddl/generated/DevstatsPlayerDeathEvent.hpp>
#include <rivet/ddl/generated/FrozenL1Event.hpp>
#include <rivet/ddl/generated/ValueChangedEvent.hpp>
#include <rivet/ddl/generated/BotMoveReachedDestEvent.hpp>
#include <rivet/ddl/generated/ProjectileLockOnCompleteEvent.hpp>
#include <rivet/ddl/generated/GrappleGenerationFinishedEvent.hpp>
#include <rivet/ddl/generated/ChargeAttackMissEvent.hpp>
#include <rivet/ddl/generated/BaseTransformationEvent.hpp>
#include <rivet/ddl/generated/HeroMovedEvent.hpp>
#include <rivet/ddl/generated/StatusEffectDamageStopEvent.hpp>
#include <rivet/ddl/generated/AnimDamageClearEvent.hpp>
#include <rivet/ddl/generated/GrindPathFollowerMoveStopEvent.hpp>
#include <rivet/ddl/generated/HazardNestTargetBeamStartEvent.hpp>
#include <rivet/ddl/generated/SwappableTAASwapTAAEvent.hpp>
#include <rivet/ddl/generated/ShipFiredMissileEvent.hpp>
#include <rivet/ddl/generated/HeroRevivingStartEvent.hpp>
#include <rivet/ddl/generated/MineExplodedEvent.hpp>
#include <rivet/ddl/generated/WarpRifleEnterHighTempTierEvent.hpp>
#include <rivet/ddl/generated/ClothToggleEvent.hpp>
#include <rivet/ddl/generated/UIPlanetMenuOpenEvent.hpp>
#include <rivet/ddl/generated/BotAimSteadyEndEvent.hpp>
#include <rivet/ddl/generated/SwimDeepUnderwaterStopEvent.hpp>
#include <rivet/ddl/generated/HeroXPAddedEvent.hpp>
#include <rivet/ddl/generated/StatusEmitterAuraActivatedEvent.hpp>
#include <rivet/ddl/generated/SwingshotExtendingEndEvent.hpp>
#include <rivet/ddl/generated/PressurePlateResetEvent.hpp>
#include <rivet/ddl/generated/HeadAnimationEndEvent.hpp>
#include <rivet/ddl/generated/PressurePlateCompletedEvent.hpp>
#include <rivet/ddl/generated/MagbootLaunchEndEvent.hpp>
#include <rivet/ddl/generated/BeamStartEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndOpenEvent.hpp>
#include <rivet/ddl/generated/StatusEffectStartEvent.hpp>
#include <rivet/ddl/generated/AccessibilityHighContrastMaterialAppliedEvent.hpp>
#include <rivet/ddl/generated/CameraUnderwaterStopEvent.hpp>
#include <rivet/ddl/generated/FadeOutEvent.hpp>
#include <rivet/ddl/generated/ShotSpawnerAutomaticFireStartEvent.hpp>
#include <rivet/ddl/generated/ConfettiWeakSpotHitEvent.hpp>
#include <rivet/ddl/generated/MagShieldShotSuspendedEvent.hpp>
#include <rivet/ddl/generated/ManglerBreakDownEvent.hpp>
#include <rivet/ddl/generated/StreamingVideoSoundStopStreamEvent.hpp>
#include <rivet/ddl/generated/ObjectiveGraphLoadedEvent.hpp>
#include <rivet/ddl/generated/AirlockInterruptedEvent.hpp>
#include <rivet/ddl/generated/MountImpactEvent.hpp>
#include <rivet/ddl/generated/BlizonShiftFadeInEvent.hpp>
#include <rivet/ddl/generated/PressurePlateStandEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndOptionsMoveEvent.hpp>
#include <rivet/ddl/generated/PickupEvent.hpp>
#include <rivet/ddl/generated/UISkipPuzzleEvent.hpp>
#include <rivet/ddl/generated/WasFiredEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndSaveSlotsDeleteSlotEvent.hpp>
#include <rivet/ddl/generated/UnderGrindOffEvent.hpp>
#include <rivet/ddl/generated/GameStartDevstatsEvent.hpp>
#include <rivet/ddl/generated/KamehamehaImpactPassThroughEvent.hpp>
#include <rivet/ddl/generated/BotTopiaryBreakOutEvent.hpp>
#include <rivet/ddl/generated/ProjectileHitEvent.hpp>
#include <rivet/ddl/generated/ActorDestroyEvent.hpp>
#include <rivet/ddl/generated/CurveLoopedEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleEndTargetRemoveEvent.hpp>
#include <rivet/ddl/generated/RecoveryLedgeRightHandDetachIKEvent.hpp>
#include <rivet/ddl/generated/PickupSplashEvent.hpp>
#include <rivet/ddl/generated/LetterEffectKillEvent.hpp>
#include <rivet/ddl/generated/VanityHelmetOffEvent.hpp>
#include <rivet/ddl/generated/PauseWeaponsBackEvent.hpp>
#include <rivet/ddl/generated/TimeScaleChannelStartEvent.hpp>
#include <rivet/ddl/generated/HandBeamStartEvent.hpp>
#include <rivet/ddl/generated/MountBoostLaunchEndEvent.hpp>
#include <rivet/ddl/generated/BouncyActiveFXOnEvent.hpp>
#include <rivet/ddl/generated/BlizonShiftEndedEvent.hpp>
#include <rivet/ddl/generated/PixelizerChargedStartEvent.hpp>
#include <rivet/ddl/generated/PlanetMenuCancelEvent.hpp>
#include <rivet/ddl/generated/BouncyActivatingEvent.hpp>
#include <rivet/ddl/generated/HeroGlideStartEvent.hpp>
#include <rivet/ddl/generated/BeamHitEvent.hpp>
#include <rivet/ddl/generated/GameModeEvent.hpp>
#include <rivet/ddl/generated/MagShieldShatteringEvent.hpp>
#include <rivet/ddl/generated/GroundResponseOffEvent.hpp>
#include <rivet/ddl/generated/MeshGeneratorQueryCompleteEvent.hpp>
#include <rivet/ddl/generated/ProjectileBeamImpactOnEvent.hpp>
#include <rivet/ddl/generated/FinaleNefBossOnStunLoopEvent.hpp>
#include <rivet/ddl/generated/MountBoostEvent.hpp>
#include <rivet/ddl/generated/CreateDamageModifierIncomingEvent.hpp>
#include <rivet/ddl/generated/MagShieldLaserImpactEvent.hpp>
#include <rivet/ddl/generated/AudioHordeStartEvent.hpp>
#include <rivet/ddl/generated/MountImpactExplodeEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorInStockEvent.hpp>
#include <rivet/ddl/generated/MrFunGuyAppearEvent.hpp>
#include <rivet/ddl/generated/LightningRodStopEffectsEvent.hpp>
#include <rivet/ddl/generated/WeaponWarpRifleImplosionActivatedEvent.hpp>
#include <rivet/ddl/generated/MeleeStormSkillCastPowerEvent.hpp>
#include <rivet/ddl/generated/HeroFallingRespawnEvent.hpp>
#include <rivet/ddl/generated/StartUnTriggeredEvent.hpp>
#include <rivet/ddl/generated/DisplayEnemyHealthBarsOn.hpp>
#include <rivet/ddl/generated/LaserSightImpactOffEvent.hpp>
#include <rivet/ddl/generated/AnimEquipBeamEndEvent.hpp>
#include <rivet/ddl/generated/VendorTabClosedDevstatsEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorStartEvent.hpp>
#include <rivet/ddl/generated/PyrocitorFiringEndEvent.hpp>
#include <rivet/ddl/generated/JumpLandEvent.hpp>
#include <rivet/ddl/generated/ClankPackHydropackRetractEvent.hpp>
#include <rivet/ddl/generated/PlayerTradingCardsRetrievedEvent.hpp>
#include <rivet/ddl/generated/ProjectilePassedMaxRangeEvent.hpp>
#include <rivet/ddl/generated/UIPlanetMenuTravelEvent.hpp>
#include <rivet/ddl/generated/GrenadeHazardStopEvent.hpp>
#include <rivet/ddl/generated/StatusEmitterStopEvent.hpp>
#include <rivet/ddl/generated/HoverbootBoostStartEvent.hpp>
#include <rivet/ddl/generated/MoviePracticallyDoneEvent.hpp>
#include <rivet/ddl/generated/HazardNestTargetInRangeEvent.hpp>
#include <rivet/ddl/generated/AnimAimOnEvent.hpp>
#include <rivet/ddl/generated/OnUnPoweredEvent.hpp>
#include <rivet/ddl/generated/ProtoShotgunTendrilRepositionEvent.hpp>
#include <rivet/ddl/generated/BeamInFinishedEvent.hpp>
#include <rivet/ddl/generated/HUDObjectiveShowNewEvent.hpp>
#include <rivet/ddl/generated/SetEmergentVOEnabledEvent.hpp>
#include <rivet/ddl/generated/PauseArmorEquipEvent.hpp>
#include <rivet/ddl/generated/ChargeAttackStartEvent.hpp>
#include <rivet/ddl/generated/SpawnShieldEvent.hpp>
#include <rivet/ddl/generated/ChangeShotTargetEvent.hpp>
#include <rivet/ddl/generated/HitReactEndEvent.hpp>
#include <rivet/ddl/generated/SlingshotStartEvent.hpp>
#include <rivet/ddl/generated/GlobalCooldownSetEvent.hpp>
#include <rivet/ddl/generated/OnEnterTurretEvent.hpp>
#include <rivet/ddl/generated/BouncyActiveEvent.hpp>
#include <rivet/ddl/generated/CinematicExitFreezeCameraEvent.hpp>
#include <rivet/ddl/generated/CommandFailedEvent.hpp>
#include <rivet/ddl/generated/LightningRodChargeUpReleaseEvent.hpp>
#include <rivet/ddl/generated/FinaleNefMechDamageStageFinalEvent.hpp>
#include <rivet/ddl/generated/StatusEffectAppliedEvent.hpp>
#include <rivet/ddl/generated/InteractNotifyPropEvent.hpp>
#include <rivet/ddl/generated/AOEWaterHazardStartTellEvent.hpp>
#include <rivet/ddl/generated/StopEvent.hpp>
#include <rivet/ddl/generated/BotCinematicEnterEvent.hpp>
#include <rivet/ddl/generated/ClankWeaponLockFullEvent.hpp>
#include <rivet/ddl/generated/UIWeaponSelectTabEvent.hpp>
#include <rivet/ddl/generated/AnimSpawnChunkEvent.hpp>
#include <rivet/ddl/generated/BotSprungEvent.hpp>
#include <rivet/ddl/generated/DialogStartedEvent.hpp>
#include <rivet/ddl/generated/PortalActivatedEvent.hpp>
#include <rivet/ddl/generated/ShipTargetLostEvent.hpp>
#include <rivet/ddl/generated/CarpetBomberDropEvent.hpp>
#include <rivet/ddl/generated/DevstatsPlayerWeaponFiredEvent.hpp>
#include <rivet/ddl/generated/SargassoCentipedeAODEndEvent.hpp>
#include <rivet/ddl/generated/FiringDesiredAimPosChangedEvent.hpp>
#include <rivet/ddl/generated/DevstatsRumbleAccessibilityDisabledEvent.hpp>
#include <rivet/ddl/generated/TopiarySprinklerPlantedEvent.hpp>
#include <rivet/ddl/generated/AnimUnburrowEvent.hpp>
#include <rivet/ddl/generated/DifficultyChangeEvent.hpp>
#include <rivet/ddl/generated/PounceDamageEvent.hpp>
#include <rivet/ddl/generated/PukeEndEvent.hpp>
#include <rivet/ddl/generated/DrNefariousTriggerShieldAnimEvent.hpp>
#include <rivet/ddl/generated/MovingLevelStartEvent.hpp>
#include <rivet/ddl/generated/GadgetPortDisabledUseEvent.hpp>
#include <rivet/ddl/generated/DamageStateEvent.hpp>
#include <rivet/ddl/generated/PyrocitorFiredEvent.hpp>
#include <rivet/ddl/generated/BotDodgeTriggeredEvent.hpp>
#include <rivet/ddl/generated/PauseGalleryZoomStopEvent.hpp>
#include <rivet/ddl/generated/MagnetRingFullyChargedEvent.hpp>
#include <rivet/ddl/generated/StatusEffectPreExplodeEvent.hpp>
#include <rivet/ddl/generated/LightningRodChargeUpBeginEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorPurchaseAmmoEvent.hpp>
#include <rivet/ddl/generated/RocketFiredEvent.hpp>
#include <rivet/ddl/generated/ShipMagnetTurnedOffEvent.hpp>
#include <rivet/ddl/generated/CinematicEquipWeaponOnExitEvent.hpp>
#include <rivet/ddl/generated/RequestCritterLocationRegistrationEvent.hpp>
#include <rivet/ddl/generated/HUDLowHealthShowEvent.hpp>
#include <rivet/ddl/generated/ConditionStartEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorVideoCancelEvent.hpp>
#include <rivet/ddl/generated/SetHomeAreaEvent.hpp>
#include <rivet/ddl/generated/RYNOPortalShotDeactivatedEvent.hpp>
#include <rivet/ddl/generated/EnableDamageVolumeEvent.hpp>
#include <rivet/ddl/generated/BurningOffEvent.hpp>
#include <rivet/ddl/generated/LaserSightSourceOffEvent.hpp>
#include <rivet/ddl/generated/AnimTriggerEmergentVOEvent.hpp>
#include <rivet/ddl/generated/PartialDeactivationEvent.hpp>
#include <rivet/ddl/generated/HammerCrankTargetIdle.hpp>
#include <rivet/ddl/generated/BoltCrankQuitEvent.hpp>
#include <rivet/ddl/generated/SwingingMotionHitEvent.hpp>
#include <rivet/ddl/generated/GroundTriggerInvalidUserEvent.hpp>
#include <rivet/ddl/generated/EnteredVendorEvent.hpp>
#include <rivet/ddl/generated/AllowStagedBlockEarlyTransitionEvent.hpp>
#include <rivet/ddl/generated/GadgetPortDetachEvent.hpp>
#include <rivet/ddl/generated/AnimPortalZipIntroEvent.hpp>
#include <rivet/ddl/generated/CineCameraDisableYawPitchEvent.hpp>
#include <rivet/ddl/generated/DisplayHealthValuesOff.hpp>
#include <rivet/ddl/generated/PortalZipRemoveHighlightEvent.hpp>
#include <rivet/ddl/generated/FlameStartEvent.hpp>
#include <rivet/ddl/generated/TunnelerLockOnCompletedEvent.hpp>
#include <rivet/ddl/generated/HeroSprungEvent.hpp>
#include <rivet/ddl/generated/HeroGlideEndEvent.hpp>
#include <rivet/ddl/generated/TouchedByBeamStopEvent.hpp>
#include <rivet/ddl/generated/SlingshotSpinStartEvent.hpp>
#include <rivet/ddl/generated/PortalZipFinishedEvent.hpp>
#include <rivet/ddl/generated/GrindLeanStopEvent.hpp>
#include <rivet/ddl/generated/AllowInputStartEvent.hpp>
#include <rivet/ddl/generated/HandRetractEvent.hpp>
#include <rivet/ddl/generated/OnLeaveTurretEvent.hpp>
#include <rivet/ddl/generated/ShieldHitEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndForwardEvent.hpp>
#include <rivet/ddl/generated/LaserSightOffEvent.hpp>
#include <rivet/ddl/generated/WeaponTriggerDeactivateEvent.hpp>
#include <rivet/ddl/generated/Cinematic2TransformUpdatedEvent.hpp>
#include <rivet/ddl/generated/VehicleMovingEvent.hpp>
#include <rivet/ddl/generated/ActivityClueUserDataStartedEvent.hpp>
#include <rivet/ddl/generated/MoverBumpEvent.hpp>
#include <rivet/ddl/generated/BotFlungStartEvent.hpp>
#include <rivet/ddl/generated/GrindLandEvent.hpp>
#include <rivet/ddl/generated/WeaponWarpRifleSpinUpFinishedEvent.hpp>
#include <rivet/ddl/generated/LaserSweepAttackBeginEvent.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetFlockFleeEvent.hpp>
#include <rivet/ddl/generated/HeroQuickSandExitedEvent.hpp>
#include <rivet/ddl/generated/HeroPassiveShiftTransitionBeginEvent.hpp>
#include <rivet/ddl/generated/RagdollSettledEvent.hpp>
#include <rivet/ddl/generated/BotDeathStartEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimStartRotEvent.hpp>
#include <rivet/ddl/generated/CinematicCameraOutOptionsEvent.hpp>
#include <rivet/ddl/generated/PickupCollectStartEvent.hpp>
#include <rivet/ddl/generated/GadgetPortAttachEvent.hpp>
#include <rivet/ddl/generated/CoverZoneUnloadedEvent.hpp>
#include <rivet/ddl/generated/ImpHarpoonTurretWhaleEvent.hpp>
#include <rivet/ddl/generated/BouncyInactiveEvent.hpp>
#include <rivet/ddl/generated/FinaleNefMechDamageStage2Event.hpp>
#include <rivet/ddl/generated/WarpRifleFinishedCoolingOffEvent.hpp>
#include <rivet/ddl/generated/ShotSpawnerFireEvent.hpp>
#include <rivet/ddl/generated/TrajectoryHighlightOffEvent.hpp>
#include <rivet/ddl/generated/TriggerPadInvalidLeaveEvent.hpp>
#include <rivet/ddl/generated/SlopeSlideEndEvent.hpp>
#include <rivet/ddl/generated/CurveFollowerResumingFromStopEvent.hpp>
#include <rivet/ddl/generated/Cinematic2CompletedEvent.hpp>
#include <rivet/ddl/generated/AllowLavaBounceTransitionEvent.hpp>
#include <rivet/ddl/generated/KickableAlertEnemiesEvent.hpp>
#include <rivet/ddl/generated/AttackStartEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorTreeOpenEvent.hpp>
#include <rivet/ddl/generated/SargassoCentipedeFlyOver.hpp>
#include <rivet/ddl/generated/FinalizeChunkActorEvent.hpp>
#include <rivet/ddl/generated/WeaponBurstShotCountedEvent.hpp>
#include <rivet/ddl/generated/HUDLowHealthHideEvent.hpp>
#include <rivet/ddl/generated/HammerCrankLightOffEvent.hpp>
#include <rivet/ddl/generated/SweepChaseBeginEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserStartAnimLoopEvent.hpp>
#include <rivet/ddl/generated/TimeScaleActivatedEvent.hpp>
#include <rivet/ddl/generated/PhysicsContactEvent.hpp>
#include <rivet/ddl/generated/UICreditsLongMusicStopEvent.hpp>
#include <rivet/ddl/generated/PauseMapIconHoverEvent.hpp>
#include <rivet/ddl/generated/MissionObjectiveDevstatsEventBase.hpp>
#include <rivet/ddl/generated/WepHarpoonTurretRotateStartEvent.hpp>
#include <rivet/ddl/generated/AllowNewNavClueUserEvent.hpp>
#include <rivet/ddl/generated/StartJumpEvent.hpp>
#include <rivet/ddl/generated/HUDObjectiveShowActiveEvent.hpp>
#include <rivet/ddl/generated/DisengageEvent.hpp>
#include <rivet/ddl/generated/DisplayHeroHealthBarOff.hpp>
#include <rivet/ddl/generated/ProjectileDamagedEvent.hpp>
#include <rivet/ddl/generated/DisplayHeroHealthBarOn.hpp>
#include <rivet/ddl/generated/WeaponWarpRifleImplosionFinishedEvent.hpp>
#include <rivet/ddl/generated/HealthBarShowEvent.hpp>
#include <rivet/ddl/generated/AllowInputEndEvent.hpp>
#include <rivet/ddl/generated/Cinematic2ExitEvent.hpp>
#include <rivet/ddl/generated/ShockReactStopEvent.hpp>
#include <rivet/ddl/generated/DifficultyStartEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeTrackerEnterEvent.hpp>
#include <rivet/ddl/generated/DevstatsEnvironmentInteractKillEvent.hpp>
#include <rivet/ddl/generated/FlyerHomingMineActivatedEvent.hpp>
#include <rivet/ddl/generated/UIArenaMenuAcceptEvent.hpp>
#include <rivet/ddl/generated/TriggerEvent.hpp>
#include <rivet/ddl/generated/ShieldImpactReactionEvent.hpp>
#include <rivet/ddl/generated/KamehamehaChargeUpCanceledEvent.hpp>
#include <rivet/ddl/generated/UnderwaterBaseJuiceDistractionUseStartEvent.hpp>
#include <rivet/ddl/generated/MissionStateChangeEvent.hpp>
#include <rivet/ddl/generated/VehicleNearEndEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndUpgradeToDeluxeEvent.hpp>
#include <rivet/ddl/generated/UIHudMessageTutorialInputPressedEvent.hpp>
#include <rivet/ddl/generated/BeginMotionEvent.hpp>
#include <rivet/ddl/generated/AwarenessLevelChangedEvent.hpp>
#include <rivet/ddl/generated/HeroDamageFlashbangEvent.hpp>
#include <rivet/ddl/generated/AnimScaleTranslationOnEvent.hpp>
#include <rivet/ddl/generated/FossilizeSlowStartEvent.hpp>
#include <rivet/ddl/generated/LoadSetUnloadedEvent.hpp>
#include <rivet/ddl/generated/ActorReplacedEvent.hpp>
#include <rivet/ddl/generated/HeroFootIKOffEvent.hpp>
#include <rivet/ddl/generated/EyeBeamFireEvent.hpp>
#include <rivet/ddl/generated/TunnelerExitGroundEvent.hpp>
#include <rivet/ddl/generated/AnimBodyMoveBaseEvent.hpp>
#include <rivet/ddl/generated/HazardNestExplosionEvent.hpp>
#include <rivet/ddl/generated/NestDestroyedFromSaveEvent.hpp>
#include <rivet/ddl/generated/DimensionCheckpointChangedEvent.hpp>
#include <rivet/ddl/generated/DialogDurationEvent.hpp>
#include <rivet/ddl/generated/VendorMenuClosedDevstatsEvent.hpp>
#include <rivet/ddl/generated/WeaponEquippedFXOnEvent.hpp>
#include <rivet/ddl/generated/GrindBoostStopEvent.hpp>
#include <rivet/ddl/generated/DrawOnEvent.hpp>
#include <rivet/ddl/generated/PreExplodeHideEvent.hpp>
#include <rivet/ddl/generated/OnFireReactStartEvent.hpp>
#include <rivet/ddl/generated/AnimMountFlyGrabStartEvent.hpp>
#include <rivet/ddl/generated/ClearEmergentVOCooldownOverrideEvent.hpp>
#include <rivet/ddl/generated/StackableCrateLandEvent.hpp>
#include <rivet/ddl/generated/ShipMagnetFireNoAmmoEvent.hpp>
#include <rivet/ddl/generated/HeroLavaBounceEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorVideoStopEvent.hpp>
#include <rivet/ddl/generated/MagnaMissileMagnetActorEnteredEvent.hpp>
#include <rivet/ddl/generated/HeroGrindTransferStartEvent.hpp>
#include <rivet/ddl/generated/FlyerTrailsOffEvent.hpp>
#include <rivet/ddl/generated/SetEmergentVOCooldownOverrideEvent.hpp>
#include <rivet/ddl/generated/AnimPortalZipLineAttachEvent.hpp>
#include <rivet/ddl/generated/ShipReticleSwitchTargetEvent.hpp>
#include <rivet/ddl/generated/AnimExplodeEvent.hpp>
#include <rivet/ddl/generated/SwingshotRetractedEvent.hpp>
#include <rivet/ddl/generated/HideInteractIconEvent.hpp>
#include <rivet/ddl/generated/HammerCrankStopCrankingEvent.hpp>
#include <rivet/ddl/generated/HeroFrozeToDeathEvent.hpp>
#include <rivet/ddl/generated/BataliaTurretUnchargedEvent.hpp>
#include <rivet/ddl/generated/DashBeginEvent.hpp>
#include <rivet/ddl/generated/FormationStartedEvent.hpp>
#include <rivet/ddl/generated/ProjectileExplodeWarningReticleEndEvent.hpp>
#include <rivet/ddl/generated/MeleeDamageImpactEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleRecallOrbEndEvent.hpp>
#include <rivet/ddl/generated/OscillatingMotionStopAllEvent.hpp>
#include <rivet/ddl/generated/WeaponLevelUpStartEvent.hpp>
#include <rivet/ddl/generated/PauseTabClosedDevstatsEvent.hpp>
#include <rivet/ddl/generated/MagbootLaunchStartEvent.hpp>
#include <rivet/ddl/generated/EnemySetupCompleteEvent.hpp>
#include <rivet/ddl/generated/GrindPathFollowerMoveStartEvent.hpp>
#include <rivet/ddl/generated/OnTriggerEvent.hpp>
#include <rivet/ddl/generated/LaserSightImpactOnEvent.hpp>
#include <rivet/ddl/generated/MeleeChargeReadyEvent.hpp>
#include <rivet/ddl/generated/IncinerateStartEvent.hpp>
#include <rivet/ddl/generated/ThrowHeldActorEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeTargetEnterEvent.hpp>
#include <rivet/ddl/generated/BeamImpactStartEvent.hpp>
#include <rivet/ddl/generated/GadgetBotBridgeRemovedEvent.hpp>
#include <rivet/ddl/generated/DevstatsPlayerFailedSpiderSenseDodgeEvent.hpp>
#include <rivet/ddl/generated/CustomOverlayRegisteredEvent.hpp>
#include <rivet/ddl/generated/CritterQueryMaxExceededDevstatsEvent.hpp>
#include <rivet/ddl/generated/AttackTransitionEvent.hpp>
#include <rivet/ddl/generated/UIWeaponSelectStickHideEvent.hpp>
#include <rivet/ddl/generated/ConfigModEvent.hpp>
#include <rivet/ddl/generated/AnimCompleteAutoEvent.hpp>
#include <rivet/ddl/generated/AnimRagdollEvent.hpp>
#include <rivet/ddl/generated/BotTranslationEvent.hpp>
#include <rivet/ddl/generated/HeroBounceEarlyTransitionEvent.hpp>
#include <rivet/ddl/generated/UIHeroOfferDeactivateControlGroupEvent.hpp>
#include <rivet/ddl/generated/BotRelativeAnimInvulnerableEvent.hpp>
#include <rivet/ddl/generated/DialogDebugWarningMessageEvent.hpp>
#include <rivet/ddl/generated/UIMenuCloseEvent.hpp>
#include <rivet/ddl/generated/RYNOPortalShotActivatedEvent.hpp>
#include <rivet/ddl/generated/PauseMenuSelectEvent.hpp>
#include <rivet/ddl/generated/BotTriggerToUnequippedEvent.hpp>
#include <rivet/ddl/generated/FinaleNefWeakspotDamagedStage3Event.hpp>
#include <rivet/ddl/generated/ProtonSeekerAccelerateEvent.hpp>
#include <rivet/ddl/generated/HitReactBeginEvent.hpp>
#include <rivet/ddl/generated/TimeScaleChannelBlendOutEvent.hpp>
#include <rivet/ddl/generated/BotDashChargeChargeStartedEvent.hpp>
#include <rivet/ddl/generated/LaserSweepAttackEndEvent.hpp>
#include <rivet/ddl/generated/ChainLightningStopChainEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndSaveSlotsCreateChallengeEvent.hpp>
#include <rivet/ddl/generated/BurningDamageOnEvent.hpp>
#include <rivet/ddl/generated/UIArenaMenuBackEvent.hpp>
#include <rivet/ddl/generated/DimensionPortalTargetAddedEvent.hpp>
#include <rivet/ddl/generated/DismountEvent.hpp>
#include <rivet/ddl/generated/AnimBreakableDamageEvent.hpp>
#include <rivet/ddl/generated/BotLandedOnEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndSaveSlotsSelectEvent.hpp>
#include <rivet/ddl/generated/WeaponEquippedEvent.hpp>
#include <rivet/ddl/generated/BotTargetVisibleEvent.hpp>
#include <rivet/ddl/generated/MeleeStormSkillCastPowerEndEvent.hpp>
#include <rivet/ddl/generated/WasDisconnectedEvent.hpp>
#include <rivet/ddl/generated/ShotSpawnedEvent.hpp>
#include <rivet/ddl/generated/ShardAttackTellEndEvent.hpp>
#include <rivet/ddl/generated/AnimInvulnerabilityClearEvent.hpp>
#include <rivet/ddl/generated/AnimVarAscendingEvent.hpp>
#include <rivet/ddl/generated/ProjectileBeamImpactOffEvent.hpp>
#include <rivet/ddl/generated/ShieldDestroyedEvent.hpp>
#include <rivet/ddl/generated/EyeBeamChargedStartEvent.hpp>
#include <rivet/ddl/generated/GadgetBotBridgeMadeEvent.hpp>
#include <rivet/ddl/generated/ProjectileFlyingStartEvent.hpp>
#include <rivet/ddl/generated/DoomBotExplodeEvent.hpp>
#include <rivet/ddl/generated/ClankWeaponShowInHandEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleWireRideEndEvent.hpp>
#include <rivet/ddl/generated/PlasmaSpherePrepareToFireEvent.hpp>
#include <rivet/ddl/generated/ShipTargetDetectedEvent.hpp>
#include <rivet/ddl/generated/PoisonReactStartEvent.hpp>
#include <rivet/ddl/generated/ActivityClueUserDataStoppedEvent.hpp>
#include <rivet/ddl/generated/AirDashEndEvent.hpp>
#include <rivet/ddl/generated/StartEvent.hpp>
#include <rivet/ddl/generated/HammerCrankTargetPaused.hpp>
#include <rivet/ddl/generated/AnimDriverTransitionEvent.hpp>
#include <rivet/ddl/generated/IceBlockDestroyedEvent.hpp>
#include <rivet/ddl/generated/DamageRollTriggeredEvent.hpp>
#include <rivet/ddl/generated/StatusEffectRefreshedEvent.hpp>
#include <rivet/ddl/generated/PressurePlateLeaveEvent.hpp>
#include <rivet/ddl/generated/RaycastStateChangedEvent.hpp>
#include <rivet/ddl/generated/JumpCycleEndEvent.hpp>
#include <rivet/ddl/generated/StateUpdateCameraCallbackEvent.hpp>
#include <rivet/ddl/generated/PyrocitorEquippedFXOnEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleWireRideStartEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserStartTargetingEvent.hpp>
#include <rivet/ddl/generated/MovingLevelStopEvent.hpp>
#include <rivet/ddl/generated/CommandDoneEvent.hpp>
#include <rivet/ddl/generated/HeroFallingRespawnEndEvent.hpp>
#include <rivet/ddl/generated/HeroCompletePerfTestEvent.hpp>
#include <rivet/ddl/generated/UnderGrindOnEvent.hpp>
#include <rivet/ddl/generated/WeaponSubBurstCompleteEvent.hpp>
#include <rivet/ddl/generated/HoverbootEndEvent.hpp>
#include <rivet/ddl/generated/PauseMenuClosedDevstatsEvent.hpp>
#include <rivet/ddl/generated/PickupContinuousStartedEvent.hpp>
#include <rivet/ddl/generated/FormationChangeTimeOutEvent.hpp>
#include <rivet/ddl/generated/OnElapsedEvent.hpp>
#include <rivet/ddl/generated/HealedEvent.hpp>
#include <rivet/ddl/generated/GadgetItemAddedEvent.hpp>
#include <rivet/ddl/generated/Cinematic2CameraPosessionChangeEvent.hpp>
#include <rivet/ddl/generated/BehaviorGotoNavQuerySucceededEvent.hpp>
#include <rivet/ddl/generated/HeroPassiveShiftTransitionEndEvent.hpp>
#include <rivet/ddl/generated/UDSEventBase.hpp>
#include <rivet/ddl/generated/DestroyPlantedShotEvent.hpp>
#include <rivet/ddl/generated/GroundTriggerOffEvent.hpp>
#include <rivet/ddl/generated/AllowCoverTransitionEvent.hpp>
#include <rivet/ddl/generated/ProjectileHitMarkerSpawnEvent.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetHitEvent.hpp>
#include <rivet/ddl/generated/HoverbootOmniBoostPadTriggeredEvent.hpp>
#include <rivet/ddl/generated/OnStartUntriggerEvent.hpp>
#include <rivet/ddl/generated/TopiarySprinklerDestroyFlowerEvent.hpp>
#include <rivet/ddl/generated/WeaponXPEvent.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetEndEvent.hpp>
#include <rivet/ddl/generated/MeleeActiveEndEvent.hpp>
#include <rivet/ddl/generated/ValidMagbootSurfaceFoundEvent.hpp>
#include <rivet/ddl/generated/ReloadRequestedEvent.hpp>
#include <rivet/ddl/generated/UIMenuBackEvent.hpp>
#include <rivet/ddl/generated/GadgetItemRemovedEvent.hpp>
#include <rivet/ddl/generated/KamehamehaTargetFirstImpactEvent.hpp>
#include <rivet/ddl/generated/DevstatsAccessibilitySetShortcutEvent.hpp>
#include <rivet/ddl/generated/PauseArmorSlotSelectEvent.hpp>
#include <rivet/ddl/generated/BotWeaponChargeEnd.hpp>
#include <rivet/ddl/generated/EarlyTransitionOnMissEvent.hpp>
#include <rivet/ddl/generated/ManglerMoveTellEvent.hpp>
#include <rivet/ddl/generated/HeroStartHeroOpenWorldTravelEvent.hpp>
#include <rivet/ddl/generated/HostMigratedEvent.hpp>
#include <rivet/ddl/generated/AnimScaleTranslationOffEvent.hpp>
#include <rivet/ddl/generated/FrozenHeroDiedEvent.hpp>
#include <rivet/ddl/generated/DeathFinishedEvent.hpp>
#include <rivet/ddl/generated/AnimReplayFrameEvent.hpp>
#include <rivet/ddl/generated/QuicksandDeathEvent.hpp>
#include <rivet/ddl/generated/ShipPickedUpMissileEvent.hpp>
#include <rivet/ddl/generated/UpgradeWeaponEvent.hpp>
#include <rivet/ddl/generated/HeroCinematicFurSettingsEvent.hpp>
#include <rivet/ddl/generated/MountBrakeEvent.hpp>
#include <rivet/ddl/generated/DeactivateCameraEvent.hpp>
#include <rivet/ddl/generated/HUDLowHealthFirstPulseEvent.hpp>
#include <rivet/ddl/generated/ConduitScriptEvent.hpp>
#include <rivet/ddl/generated/SwingshotActiveEndEvent.hpp>
#include <rivet/ddl/generated/UIStartLogoPressedEvent.hpp>
#include <rivet/ddl/generated/InteractAttachPropEvent.hpp>
#include <rivet/ddl/generated/BotRelativeAnimGroundSnapEvent.hpp>
#include <rivet/ddl/generated/DisplayHealthValuesOn.hpp>
#include <rivet/ddl/generated/DisableBirdsCineEvent.hpp>
#include <rivet/ddl/generated/PlatformStopDescentEvent.hpp>
#include <rivet/ddl/generated/BotRagdollSettledEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleRecallOrbStartEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserStartSweepAnimEvent.hpp>
#include <rivet/ddl/generated/BotGuideDestChangedEvent.hpp>
#include <rivet/ddl/generated/SwingshotActiveStartEvent.hpp>
#include <rivet/ddl/generated/AnimAdditiveBlendEvent.hpp>
#include <rivet/ddl/generated/InventoryChangedEvent.hpp>
#include <rivet/ddl/generated/StatusEffectStopEvent.hpp>
#include <rivet/ddl/generated/UIMenuScrollTextStopEvent.hpp>
#include <rivet/ddl/generated/EngageEvent.hpp>
#include <rivet/ddl/generated/BeamStopEvent.hpp>
#include <rivet/ddl/generated/ProtonSeekerAttackActiveEvent.hpp>
#include <rivet/ddl/generated/ClankPackHydropackStopEvent.hpp>
#include <rivet/ddl/generated/AnimAllowHitReactEvent.hpp>
#include <rivet/ddl/generated/CameraShakeAnimEvent.hpp>
#include <rivet/ddl/generated/ResetActorEvent.hpp>
#include <rivet/ddl/generated/LODLimiterSetMinLodEvent.hpp>
#include <rivet/ddl/generated/VanityHelmetOnEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidMissilesReady.hpp>
#include <rivet/ddl/generated/PlanetMenuAcceptEvent.hpp>
#include <rivet/ddl/generated/PauseArmorEquipSetEvent.hpp>
#include <rivet/ddl/generated/GasMaskUnequippedEvent.hpp>
#include <rivet/ddl/generated/EndMountSpeedEvent.hpp>
#include <rivet/ddl/generated/PauseMenuHideEvent.hpp>
#include <rivet/ddl/generated/ObjZipLineProjectileLoopEvent.hpp>
#include <rivet/ddl/generated/CineActorVoiceEnableEvent.hpp>
#include <rivet/ddl/generated/HeroStateTransitionEvent.hpp>
#include <rivet/ddl/generated/AnimGrenadeDropEvent.hpp>
#include <rivet/ddl/generated/ClankPackHydropackActiveBeginEvent.hpp>
#include <rivet/ddl/generated/BotSpawnedWithNoAnimEvent.hpp>
#include <rivet/ddl/generated/DevstatsHighContrastMaterialsDisabledEvent.hpp>
#include <rivet/ddl/generated/OnOpenEvent.hpp>
#include <rivet/ddl/generated/UISkipMovieEvent.hpp>
#include <rivet/ddl/generated/MeleeComboBeginEvent.hpp>
#include <rivet/ddl/generated/VolcanicEruptorBurstOnEvent.hpp>
#include <rivet/ddl/generated/GrowthOnEvent.hpp>
#include <rivet/ddl/generated/VaultEndEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorChainCancelEvent.hpp>
#include <rivet/ddl/generated/AnimDismountEvent.hpp>
#include <rivet/ddl/generated/EyeBeamChargedEndEvent.hpp>
#include <rivet/ddl/generated/OnDoneEvent.hpp>
#include <rivet/ddl/generated/FallingDeathEvent.hpp>
#include <rivet/ddl/generated/TunnelerBombExplodeEvent.hpp>
#include <rivet/ddl/generated/PauseMapZoomStopEvent.hpp>
#include <rivet/ddl/generated/GrindOnEvent.hpp>
#include <rivet/ddl/generated/ChildDiedEvent.hpp>
#include <rivet/ddl/generated/MoverLandedEvent.hpp>
#include <rivet/ddl/generated/TurningStopEvent.hpp>
#include <rivet/ddl/generated/StatusEffectBuildupEvent.hpp>
#include <rivet/ddl/generated/UserAttachPropEvent.hpp>
#include <rivet/ddl/generated/BotGuideArrivedAtEndEvent.hpp>
#include <rivet/ddl/generated/PortalTransitionEvent.hpp>
#include <rivet/ddl/generated/PauseTabOpenedDevstatsEvent.hpp>
#include <rivet/ddl/generated/PauseWeaponsRemapCloseEvent.hpp>
#include <rivet/ddl/generated/HideEvent.hpp>
#include <rivet/ddl/generated/PoleSwingBeginEvent.hpp>
#include <rivet/ddl/generated/HeadSpawnedEvent.hpp>
#include <rivet/ddl/generated/ClankPackHeliRetractEvent.hpp>
#include <rivet/ddl/generated/MountFlyerPickupReadyEvent.hpp>
#include <rivet/ddl/generated/WeaponRefireBurstCompleteEvent.hpp>
#include <rivet/ddl/generated/UIPhotoModeOpenEvent.hpp>
#include <rivet/ddl/generated/MissionFailPopUpClosedEvent.hpp>
#include <rivet/ddl/generated/ThrowerODReleaseEvent.hpp>
#include <rivet/ddl/generated/UIArenaMenuOpenEvent.hpp>
#include <rivet/ddl/generated/ProjectileLifetimeExpiredEvent.hpp>
#include <rivet/ddl/generated/BattleBrewEvent.hpp>
#include <rivet/ddl/generated/NodalShotActorSpawnedEffectEvent.hpp>
#include <rivet/ddl/generated/RicochetBaseEvent.hpp>
#include <rivet/ddl/generated/BotMovingEvent.hpp>
#include <rivet/ddl/generated/BotComboMoveFinishedEvent.hpp>
#include <rivet/ddl/generated/WeaponOutOfAmmoEvent.hpp>
#include <rivet/ddl/generated/DevstatsEmergentVOPlayedEvent.hpp>
#include <rivet/ddl/generated/SheepExplodedEvent.hpp>
#include <rivet/ddl/generated/AnimDamageEvent.hpp>
#include <rivet/ddl/generated/FlyerPickupArrivedEvent.hpp>
#include <rivet/ddl/generated/UICountdownOnStoppedEvent.hpp>
#include <rivet/ddl/generated/PickupBoltDeactivatedEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeInteractEventBase.hpp>
#include <rivet/ddl/generated/ButtonPressedEvent.hpp>
#include <rivet/ddl/generated/DevstatsPlayerWAMChargeAttackCancelledEvent.hpp>
#include <rivet/ddl/generated/PrefabZoneDeactivatedEvent.hpp>
#include <rivet/ddl/generated/PauseMenuShowEvent.hpp>
#include <rivet/ddl/generated/SwingshotRetractingStartEvent.hpp>
#include <rivet/ddl/generated/CarpetBomberShellPopOffEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndSelectEvent.hpp>
#include <rivet/ddl/generated/BotStateLungeStartEvent.hpp>
#include <rivet/ddl/generated/DropshipBotLandedEvent.hpp>
#include <rivet/ddl/generated/DevstatsHighContrastMaterialsEnabledEvent.hpp>
#include <rivet/ddl/generated/AnimPropActionEvent.hpp>
#include <rivet/ddl/generated/VehicleHeadLightsOnEvent.hpp>
#include <rivet/ddl/generated/RagdollActivatedEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidMissilesLaunched.hpp>
#include <rivet/ddl/generated/ClientLeftEvent.hpp>
#include <rivet/ddl/generated/ClothChangeGravityEvent.hpp>
#include <rivet/ddl/generated/HeadVisibilityEvent.hpp>
#include <rivet/ddl/generated/ShipUsingDisabledMissilesEvent.hpp>
#include <rivet/ddl/generated/VanityBundleCollectedEvent.hpp>
#include <rivet/ddl/generated/FlameStopEvent.hpp>
#include <rivet/ddl/generated/FlyerPickupStartEvent.hpp>
#include <rivet/ddl/generated/WalkingArchivesSoundEvent.hpp>
#include <rivet/ddl/generated/WarpRifleEnterColdTempTierEvent.hpp>
#include <rivet/ddl/generated/WeaponLaseringStartEvent.hpp>
#include <rivet/ddl/generated/DimensionCompletedEvent.hpp>
#include <rivet/ddl/generated/BoltCrankStopCrankingEvent.hpp>
#include <rivet/ddl/generated/WeaponSubBurstStartedEvent.hpp>
#include <rivet/ddl/generated/VehicleThrustersOnEvent.hpp>
#include <rivet/ddl/generated/FlyerPickupLaunchEvent.hpp>
#include <rivet/ddl/generated/ObjZipLinePlayerSlideEvent.hpp>
#include <rivet/ddl/generated/JumpLandingWarnEvent.hpp>
#include <rivet/ddl/generated/AnimDeathExplosionEvent.hpp>
#include <rivet/ddl/generated/BotTelekinesisStartedEvent.hpp>
#include <rivet/ddl/generated/CinePortalZipLineEnd.hpp>
#include <rivet/ddl/generated/DisallowDanceOutroEvent.hpp>
#include <rivet/ddl/generated/UIPlanetMenuMoveEvent.hpp>
#include <rivet/ddl/generated/ChainLightningExplosionPrepEvent.hpp>
#include <rivet/ddl/generated/TriggeredBrokeEvent.hpp>
#include <rivet/ddl/generated/UserEquippedWeaponFXOnEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorPurchaseFailEvent.hpp>
#include <rivet/ddl/generated/LinearDistanceEvent.hpp>
#include <rivet/ddl/generated/FinaleHeartPartDestroyedEvent.hpp>
#include <rivet/ddl/generated/MaterialConstantFinishedAnimatingEvent.hpp>
#include <rivet/ddl/generated/LedgeGrabEvent.hpp>
#include <rivet/ddl/generated/HammerCrankStartCrankingEvent.hpp>
#include <rivet/ddl/generated/BlendOutEvent.hpp>
#include <rivet/ddl/generated/PortalZipLineAttachEvent.hpp>
#include <rivet/ddl/generated/BataliaTurretFullyChargedEvent.hpp>
#include <rivet/ddl/generated/PickupShimmerActiveEvent.hpp>
#include <rivet/ddl/generated/TriggerOnEvent.hpp>
#include <rivet/ddl/generated/HoverEffectOffEvent.hpp>
#include <rivet/ddl/generated/AnimScaleRotationOffEvent.hpp>
#include <rivet/ddl/generated/MeleeDeathEvent.hpp>
#include <rivet/ddl/generated/DisableEvent.hpp>
#include <rivet/ddl/generated/ManglerTellTrailDeactivateEvent.hpp>
#include <rivet/ddl/generated/CurveFollowerStoppingEvent.hpp>
#include <rivet/ddl/generated/AnimAwarenessChangedEvent.hpp>
#include <rivet/ddl/generated/AnimPortalZipLandEvent.hpp>
#include <rivet/ddl/generated/MeleeChargeStartEvent.hpp>
#include <rivet/ddl/generated/PhaseDashBarrierTransitionEvent.hpp>
#include <rivet/ddl/generated/AirlockLoadedEvent.hpp>
#include <rivet/ddl/generated/OnDetachEvent.hpp>
#include <rivet/ddl/generated/VehicleDebugHeadlightsOverrideChanged.hpp>
#include <rivet/ddl/generated/AOEWaterHazardExplosionEvent.hpp>
#include <rivet/ddl/generated/ChainLightningStartMainEvent.hpp>
#include <rivet/ddl/generated/HeroMeleeTriggeredEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorTreeCloseEvent.hpp>
#include <rivet/ddl/generated/VehicleReachedEndEvent.hpp>
#include <rivet/ddl/generated/ProjectileFlewByEndEvent.hpp>
#include <rivet/ddl/generated/FinaleNefMechDamageStage1Event.hpp>
#include <rivet/ddl/generated/BurrowEvent.hpp>
#include <rivet/ddl/generated/HoverbootBoostEndEvent.hpp>
#include <rivet/ddl/generated/SceneObjectCollectDestroyEvent.hpp>
#include <rivet/ddl/generated/DashAttackDamageEvent.hpp>
#include <rivet/ddl/generated/ShotUnlockTargetingEvent.hpp>
#include <rivet/ddl/generated/PlasmaSphereDetonateEvent.hpp>
#include <rivet/ddl/generated/RegionUnloadedEvent.hpp>
#include <rivet/ddl/generated/AnimScalePreRotateStartEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleRecallerExitEvent.hpp>
#include <rivet/ddl/generated/CarryingLootEvent.hpp>
#include <rivet/ddl/generated/PickupInitiatedEvent.hpp>
#include <rivet/ddl/generated/DevstatsOpenWorldTaskCompletedEvent.hpp>
#include <rivet/ddl/generated/PauseMapIconPinEvent.hpp>
#include <rivet/ddl/generated/DiveStartedEvent.hpp>
#include <rivet/ddl/generated/HeroSprintStopEvent.hpp>
#include <rivet/ddl/generated/MountBoostLaunchStartEvent.hpp>
#include <rivet/ddl/generated/LookAtStartEvent.hpp>
#include <rivet/ddl/generated/BeetleTrailStartEvent.hpp>
#include <rivet/ddl/generated/WeaponFiringStoppedEvent.hpp>
#include <rivet/ddl/generated/HeroDefaultVanityLoadedEvent.hpp>
#include <rivet/ddl/generated/HeroKilledBotEvent.hpp>
#include <rivet/ddl/generated/TimeScaleFXStartEvent.hpp>
#include <rivet/ddl/generated/PlatformStartDescentEvent.hpp>
#include <rivet/ddl/generated/ShipMagnetInvalidTargetEvent.hpp>
#include <rivet/ddl/generated/WeaponThrowStartEvent.hpp>
#include <rivet/ddl/generated/AttackCooldownsSetableEvent.hpp>
#include <rivet/ddl/generated/UnderwaterBaseJuiceSpawnedEvent.hpp>
#include <rivet/ddl/generated/EyeBeamAimEvent.hpp>
#include <rivet/ddl/generated/AnimAttachHandEvent.hpp>
#include <rivet/ddl/generated/PlatformStartMotionEvent.hpp>
#include <rivet/ddl/generated/BreakableDestroyedEvent.hpp>
#include <rivet/ddl/generated/ScreenResizedEvent.hpp>
#include <rivet/ddl/generated/MagShieldFullImpactEvent.hpp>
#include <rivet/ddl/generated/ProjectileWaveStartEvent.hpp>
#include <rivet/ddl/generated/ClankPackDisableCineAttachEvent.hpp>
#include <rivet/ddl/generated/UIOptionsMoveEvent.hpp>
#include <rivet/ddl/generated/SpawnerThrowSpawnEvent.hpp>
#include <rivet/ddl/generated/HeroLevelUpEndEvent.hpp>
#include <rivet/ddl/generated/AnimMotionStartedEvent.hpp>
#include <rivet/ddl/generated/WarpRifleStartFireLoopEvent.hpp>
#include <rivet/ddl/generated/PlayDialogInterruptedEvent.hpp>
#include <rivet/ddl/generated/ProjectileBeamStopEvent.hpp>
#include <rivet/ddl/generated/AutoExplodeEvent.hpp>
#include <rivet/ddl/generated/BoltCrankDetachEvent.hpp>
#include <rivet/ddl/generated/BotDiveRollStopInvulnerablityAnimEvent.hpp>
#include <rivet/ddl/generated/BeamOutStartEvent.hpp>
#include <rivet/ddl/generated/TriggerPadStandEvent.hpp>
#include <rivet/ddl/generated/DisplayEnemyHealthBarsOff.hpp>
#include <rivet/ddl/generated/HeroFootIKOnEvent.hpp>
#include <rivet/ddl/generated/CentipedeFlyoverDeathEvent.hpp>
#include <rivet/ddl/generated/VehicleSoundOffEvent.hpp>
#include <rivet/ddl/generated/UserProfileDevstatsEvent.hpp>
#include <rivet/ddl/generated/HeroUsedPortalZipEndEvent.hpp>
#include <rivet/ddl/generated/BotCinematicExitEvent.hpp>
#include <rivet/ddl/generated/OnFrozenEvent.hpp>
#include <rivet/ddl/generated/SargassoCentipedeFlyOverEnd.hpp>
#include <rivet/ddl/generated/WeaponAmmoGraceStartEvent.hpp>
#include <rivet/ddl/generated/DimensionalPulseStopEvent.hpp>
#include <rivet/ddl/generated/AwardWeaponLevelUpEvent.hpp>
#include <rivet/ddl/generated/MeleeComboWaitEvent.hpp>
#include <rivet/ddl/generated/StreamingVideoSoundStartStreamEvent.hpp>
#include <rivet/ddl/generated/ChangeWeaponZoomEvent.hpp>
#include <rivet/ddl/generated/UIVendorPurchaseAllVFXEvent.hpp>
#include <rivet/ddl/generated/ProjectileBeamStartEvent.hpp>
#include <rivet/ddl/generated/HoverEffectOnEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorChainStartEvent.hpp>
#include <rivet/ddl/generated/CancelAttackEvent.hpp>
#include <rivet/ddl/generated/BotTeleportStartEvent.hpp>
#include <rivet/ddl/generated/CollisionCheckerCollisionEvent.hpp>
#include <rivet/ddl/generated/CineCameraEnableYawPitchEvent.hpp>
#include <rivet/ddl/generated/PauseWeaponsRemapOpenEvent.hpp>
#include <rivet/ddl/generated/PauseCollectiblesTabEvent.hpp>
#include <rivet/ddl/generated/SweepChaseSpawnEvent.hpp>
#include <rivet/ddl/generated/VanityLookEvent.hpp>
#include <rivet/ddl/generated/AmoeboidSplitEvent.hpp>
#include <rivet/ddl/generated/ShieldActivatedEvent.hpp>
#include <rivet/ddl/generated/WepHarpoonTurretRotateStopEvent.hpp>
#include <rivet/ddl/generated/InteractExplodedEvent.hpp>
#include <rivet/ddl/generated/UIMenuForwardEvent.hpp>
#include <rivet/ddl/generated/PlatformStopMotionEvent.hpp>
#include <rivet/ddl/generated/BotMeleeFromGotoStartFrameEvent.hpp>
#include <rivet/ddl/generated/SargassoCentipedeMortar.hpp>
#include <rivet/ddl/generated/DDLTransform.hpp>
#include <rivet/ddl/generated/ThumperThumpEvent.hpp>
#include <rivet/ddl/generated/HardwareProfileDevstatsEvent.hpp>
#include <rivet/ddl/generated/BotDetachFinishedEvent.hpp>
#include <rivet/ddl/generated/HomeRunHitterDeathEvent.hpp>
#include <rivet/ddl/generated/ShipHitCollisionEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndOptionsChangeEvent.hpp>
#include <rivet/ddl/generated/AllowDanceOutroEvent.hpp>
#include <rivet/ddl/generated/ModelSwapEvent.hpp>
#include <rivet/ddl/generated/UIOptionsRestartCheckpointEvent.hpp>
#include <rivet/ddl/generated/DoAutoCheckpointChangedEvent.hpp>
#include <rivet/ddl/generated/DevstatsSegmentMappingEvent.hpp>
#include <rivet/ddl/generated/LaserBeamSpawnerSpawnShotEvent.hpp>
#include <rivet/ddl/generated/PlatformStartAscentEvent.hpp>
#include <rivet/ddl/generated/AnimHeadAimBlendOutEvent.hpp>
#include <rivet/ddl/generated/UsedEvent.hpp>
#include <rivet/ddl/generated/AnimTopiaryPosedModelEvent.hpp>
#include <rivet/ddl/generated/FossilizeTimeSlowEndEvent.hpp>
#include <rivet/ddl/generated/OnVaultDownStartEvent.hpp>
#include <rivet/ddl/generated/ShockwaveStartEvent.hpp>
#include <rivet/ddl/generated/JumpLandingEvent.hpp>
#include <rivet/ddl/generated/GadgetPortCancelEvent.hpp>
#include <rivet/ddl/generated/PauseWeaponsRemapEquipEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimOrientationHintEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorPurchaseHoldStopEvent.hpp>
#include <rivet/ddl/generated/OnAttachParentMoved.hpp>
#include <rivet/ddl/generated/AimModWalkToTargetLockAimEvent.hpp>
#include <rivet/ddl/generated/ActivityClueDestroyedWithOwnerEvent.hpp>
#include <rivet/ddl/generated/AnimatedDismountEvent.hpp>
#include <rivet/ddl/generated/BotDisableFiringEvent.hpp>
#include <rivet/ddl/generated/UIMenuPopupOpenEvent.hpp>
#include <rivet/ddl/generated/PassiveShiftCheckpointLoadedEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorUpgradeSinglePurchaseEvent.hpp>
#include <rivet/ddl/generated/HoverbootKickReadyEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorUpgradeHoldStartEvent.hpp>
#include <rivet/ddl/generated/SpawnedSpawnedEvent.hpp>
#include <rivet/ddl/generated/UnTriggerEvent.hpp>
#include <rivet/ddl/generated/ProjectileLockingOnEvent.hpp>
#include <rivet/ddl/generated/BotHoverMoveFinishedEvent.hpp>
#include <rivet/ddl/generated/HeroInteractEvent.hpp>
#include <rivet/ddl/generated/ManglerShockwaveSpawnEvent.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetStartEvent.hpp>
#include <rivet/ddl/generated/ManglerShockwaveTellEvent.hpp>
#include <rivet/ddl/generated/PauseMenuMoveEvent.hpp>
#include <rivet/ddl/generated/AnimReleaseEvent.hpp>
#include <rivet/ddl/generated/DamageStateChangedEvent.hpp>
#include <rivet/ddl/generated/EyeBeamStopEvent.hpp>
#include <rivet/ddl/generated/VehicleHeadLightsOffEvent.hpp>
#include <rivet/ddl/generated/ZurkieJukeboxExitEvent.hpp>
#include <rivet/ddl/generated/ZurkonFlyingStartEvent.hpp>
#include <rivet/ddl/generated/DodgeEndEvent.hpp>
#include <rivet/ddl/generated/VanityAccessoryToggleEvent.hpp>
#include <rivet/ddl/generated/BrokeEvent.hpp>
#include <rivet/ddl/generated/StartPlaythroughDevstatsEvent.hpp>
#include <rivet/ddl/generated/CritterLocationMaxExceededDevstatsEvent.hpp>
#include <rivet/ddl/generated/ShotPlantedEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorTreeMoveEvent.hpp>
#include <rivet/ddl/generated/AnimVarSteadyEvent.hpp>
#include <rivet/ddl/generated/ShipDodgeRollStartEvent.hpp>
#include <rivet/ddl/generated/CameraProximityOnEvent.hpp>
#include <rivet/ddl/generated/PauseMenuRotateStartEvent.hpp>
#include <rivet/ddl/generated/UIArenaMenuFailEvent.hpp>
#include <rivet/ddl/generated/ReviveBarHideEvent.hpp>
#include <rivet/ddl/generated/BreakableUnpooledActivateEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeEndRemoveEntryEvent.hpp>
#include <rivet/ddl/generated/BreakableUnpooledDeactivateEvent.hpp>
#include <rivet/ddl/generated/WeakSpotBrokenEvent.hpp>
#include <rivet/ddl/generated/HeroSuperMeterFullEvent.hpp>
#include <rivet/ddl/generated/AllegianceChangedEvent.hpp>
#include <rivet/ddl/generated/DodgeStartEvent.hpp>
#include <rivet/ddl/generated/FrozenSpinStartEvent.hpp>
#include <rivet/ddl/generated/AirlockTriggeredEvent.hpp>
#include <rivet/ddl/generated/PickupCompletedEvent.hpp>
#include <rivet/ddl/generated/ZurkonFlyingEndEvent.hpp>
#include <rivet/ddl/generated/BeetleRideStartEvent.hpp>
#include <rivet/ddl/generated/BlizonShiftImpactEvent.hpp>
#include <rivet/ddl/generated/MeleeChargeEndEvent.hpp>
#include <rivet/ddl/generated/BoltCrankTargetIdle.hpp>
#include <rivet/ddl/generated/TouchedByBeamStartEvent.hpp>
#include <rivet/ddl/generated/FlockingVolumesMaxExceededDevstatsEvent.hpp>
#include <rivet/ddl/generated/TopiarySprinklerChangeTargetEvent.hpp>
#include <rivet/ddl/generated/WeaponAddedEvent.hpp>
#include <rivet/ddl/generated/MovingSurfaceCollectionReadyEvent.hpp>
#include <rivet/ddl/generated/KamehamehaFinalExplosionEvent.hpp>
#include <rivet/ddl/generated/HammerCrankResetEvent.hpp>
#include <rivet/ddl/generated/TurningStartEvent.hpp>
#include <rivet/ddl/generated/FocusTrackingSkipDefaultSolversEvent.hpp>
#include <rivet/ddl/generated/HealthChangedEvent.hpp>
#include <rivet/ddl/generated/GamePausedEvent.hpp>
#include <rivet/ddl/generated/PlayerJoinedEvent.hpp>
#include <rivet/ddl/generated/WeaponBurstCompleteEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorChainFailEvent.hpp>
#include <rivet/ddl/generated/BotPartialAnimsManagerStartAnimsEvent.hpp>
#include <rivet/ddl/generated/WeaponEquippedFXOffEvent.hpp>
#include <rivet/ddl/generated/BlizonShiftCrystalHideEvent.hpp>
#include <rivet/ddl/generated/MagShieldShotReturnedEvent.hpp>
#include <rivet/ddl/generated/SaveDataAppliedEvent.hpp>
#include <rivet/ddl/generated/ProtoGrenadeBotExplosionEvent.hpp>
#include <rivet/ddl/generated/ProtoShotgunTendrilImpactEvent.hpp>
#include <rivet/ddl/generated/EyeBeamAttackEndEvent.hpp>
#include <rivet/ddl/generated/HexapodWeaponChargeUpCompletedEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidSpeedBoostOnEvent.hpp>
#include <rivet/ddl/generated/StartMovingEvent.hpp>
#include <rivet/ddl/generated/HammerCrankQuitEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeTargetExitEvent.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetControlEvent.hpp>
#include <rivet/ddl/generated/SpawnPickupsEvent.hpp>
#include <rivet/ddl/generated/ChainLightningStartChainEvent.hpp>
#include <rivet/ddl/generated/ProjectileExplodeWarningReticleStartEvent.hpp>
#include <rivet/ddl/generated/CapturableProgressChangedEvent.hpp>
#include <rivet/ddl/generated/PixelizerBlastEvent.hpp>
#include <rivet/ddl/generated/FrozenSlideStartEvent.hpp>
#include <rivet/ddl/generated/RYNOPortalDestroyEvent.hpp>
#include <rivet/ddl/generated/BloodTrailEvent.hpp>
#include <rivet/ddl/generated/MrFunGuyMaxSpawnedEvent.hpp>
#include <rivet/ddl/generated/WepHarpoonTurretRotateLoopEvent.hpp>
#include <rivet/ddl/generated/ClankWeaponLockMidAirEvent.hpp>
#include <rivet/ddl/generated/HeroLevelUpBeginEvent.hpp>
#include <rivet/ddl/generated/WeakSpotRestoredEvent.hpp>
#include <rivet/ddl/generated/ElectricExplodeEvent.hpp>
#include <rivet/ddl/generated/ThumperDeactivateEvent.hpp>
#include <rivet/ddl/generated/ClankWeaponLockTargetedEvent.hpp>
#include <rivet/ddl/generated/RefireSustainStartEvent.hpp>
#include <rivet/ddl/generated/AnimOptInLookEvent.hpp>
#include <rivet/ddl/generated/Cinematic2SyncActionEvent.hpp>
#include <rivet/ddl/generated/MoverIsFallingStartEvent.hpp>
#include <rivet/ddl/generated/GroupEngagedEvent.hpp>
#include <rivet/ddl/generated/PickupActiveEvent.hpp>
#include <rivet/ddl/generated/InteractStartedEvent.hpp>
#include <rivet/ddl/generated/PhotoModeLightEnabledEvent.hpp>
#include <rivet/ddl/generated/PickupSettledEvent.hpp>
#include <rivet/ddl/generated/LightningRodElectrifiedBeginEvent.hpp>
#include <rivet/ddl/generated/PixelizedStartEvent.hpp>
#include <rivet/ddl/generated/ConduitLocatorTransformEvent.hpp>
#include <rivet/ddl/generated/MusicIntensityHighEvent.hpp>
#include <rivet/ddl/generated/FrozenBreakoutEvent.hpp>
#include <rivet/ddl/generated/OnCinematicCameraActivateEvent.hpp>
#include <rivet/ddl/generated/FlockMemberKilledEvent.hpp>
#include <rivet/ddl/generated/ManglerActivateEvent.hpp>
#include <rivet/ddl/generated/HammerCrankLoadFinishedEvent.hpp>
#include <rivet/ddl/generated/RicochetDoneEvent.hpp>
#include <rivet/ddl/generated/VanityAccessoryEquipEvent.hpp>
#include <rivet/ddl/generated/ProtoShotgunSecondShotWindowEndEvent.hpp>
#include <rivet/ddl/generated/UIHeroOfferActivateControlGroupEvent.hpp>
#include <rivet/ddl/generated/HeroTeleportEvent.hpp>
#include <rivet/ddl/generated/SwingshotAscendEvent.hpp>
#include <rivet/ddl/generated/BataliaTurretChargingEvent.hpp>
#include <rivet/ddl/generated/DrawOffEvent.hpp>
#include <rivet/ddl/generated/UITutorialPauseBegin.hpp>
#include <rivet/ddl/generated/HeroMeleeMoveEvent.hpp>
#include <rivet/ddl/generated/LetterEffectFadeEvent.hpp>
#include <rivet/ddl/generated/ScriptedShotGenericEvent.hpp>
#include <rivet/ddl/generated/BreakStationaryConnectionsEvent.hpp>
#include <rivet/ddl/generated/ConduitParticleCollisionEvent.hpp>
#include <rivet/ddl/generated/TriggerPadLeaveEvent.hpp>
#include <rivet/ddl/generated/PauseWeaponsRemapTabEvent.hpp>
#include <rivet/ddl/generated/BotDashChargeChargeEndedEvent.hpp>
#include <rivet/ddl/generated/ProtoGrenadeShardDissolveQuicklyEvent.hpp>
#include <rivet/ddl/generated/EyeBeamAttackBeginEvent.hpp>
#include <rivet/ddl/generated/BotTriggerUnequipPartialAnimsEvent.hpp>
#include <rivet/ddl/generated/FinaleHeartPartDamagedEvent.hpp>
#include <rivet/ddl/generated/PauseArmorLegsHoverEvent.hpp>
#include <rivet/ddl/generated/UIArenaMenuCloseEvent.hpp>
#include <rivet/ddl/generated/MPALoadedTypesChangedEvent.hpp>
#include <rivet/ddl/generated/FlewByStopEvent.hpp>
#include <rivet/ddl/generated/ImpactDamageOnEvent.hpp>
#include <rivet/ddl/generated/ObjectiveStateChangedEvent.hpp>
#include <rivet/ddl/generated/ObjZipLineFireEvent.hpp>
#include <rivet/ddl/generated/HarpoonBottlePopEvent.hpp>
#include <rivet/ddl/generated/ShipMagnetCollectAmmoEvent.hpp>
#include <rivet/ddl/generated/StackableCrateMaterialOverrideReadyEvent.hpp>
#include <rivet/ddl/generated/HoverbootOmniBoostPadRotateStartEvent.hpp>
#include <rivet/ddl/generated/ScriptedFlockFinishedSpawningEvent.hpp>
#include <rivet/ddl/generated/AnimMotionInflectionPointEvent.hpp>
#include <rivet/ddl/generated/DialogFinishedEvent.hpp>
#include <rivet/ddl/generated/SwingshotExtendedEvent.hpp>
#include <rivet/ddl/generated/EnableEvent.hpp>
#include <rivet/ddl/generated/LightingModeTransitionStartedEvent.hpp>
#include <rivet/ddl/generated/TopiarySprinklerLastShotFiredEvent.hpp>
#include <rivet/ddl/generated/BataliaTurretCannonFiredEvent.hpp>
#include <rivet/ddl/generated/HazardAlarmStartEvent.hpp>
#include <rivet/ddl/generated/VehicleHoverJetsOnEvent.hpp>
#include <rivet/ddl/generated/BotComboFinishedEvent.hpp>
#include <rivet/ddl/generated/MagShieldBlastWaveReadyEvent.hpp>
#include <rivet/ddl/generated/MagnetFiredAsProjectileEvent.hpp>
#include <rivet/ddl/generated/PlasmaStrikerScopeExitEvent.hpp>
#include <rivet/ddl/generated/HeroHasProtosuitEvent.hpp>
#include <rivet/ddl/generated/ZurkieArenaSelectAcceptEvent.hpp>
#include <rivet/ddl/generated/AnimPhotoEvent.hpp>
#include <rivet/ddl/generated/ParachuteOnEvent.hpp>
#include <rivet/ddl/generated/UIJukeboxMoveEvent.hpp>
#include <rivet/ddl/generated/BotFlungStopEvent.hpp>
#include <rivet/ddl/generated/LoadedZoneDevstatsEvent.hpp>
#include <rivet/ddl/generated/WeaponLaseringStopEvent.hpp>
#include <rivet/ddl/generated/HeroTargetTrackerResolvedEvent.hpp>
#include <rivet/ddl/generated/FinaleHeartPartReactAftershockEvent.hpp>
#include <rivet/ddl/generated/BotMoveCueEvent.hpp>
#include <rivet/ddl/generated/UITutorialAdvanceEvent.hpp>
#include <rivet/ddl/generated/ObjZipLinePlayerAttachEvent.hpp>
#include <rivet/ddl/generated/WeaponWarpRifleSpinUpStartedEvent.hpp>
#include <rivet/ddl/generated/DestroyAllLedgeFlocksEvent.hpp>
#include <rivet/ddl/generated/ProtoGrenadeShardDissolveEvent.hpp>
#include <rivet/ddl/generated/BotEnableFiringEvent.hpp>
#include <rivet/ddl/generated/BotDashChargeIntroStartedEvent.hpp>
#include <rivet/ddl/generated/ShipUsingDisabledBulletsEvent.hpp>
#include <rivet/ddl/generated/BotDeathCompleteEvent.hpp>
#include <rivet/ddl/generated/WeaponUnsightedEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorVideoStartEvent.hpp>
#include <rivet/ddl/generated/KamehamehaChargeUpStartedEvent.hpp>
#include <rivet/ddl/generated/PhotomodeActivateEvent.hpp>
#include <rivet/ddl/generated/CoverGenerationFinishedEvent.hpp>
#include <rivet/ddl/generated/SetEmergentVOTriggerEnabledEvent.hpp>
#include <rivet/ddl/generated/PickupAboutToResetEvent.hpp>
#include <rivet/ddl/generated/ImpactDamageOffEvent.hpp>
#include <rivet/ddl/generated/HeroUsedPortalZipStartEvent.hpp>
#include <rivet/ddl/generated/GotSheepedEvent.hpp>
#include <rivet/ddl/generated/BehaviorGotoNavQueryFailedEvent.hpp>
#include <rivet/ddl/generated/RegionLoadingEvent.hpp>
#include <rivet/ddl/generated/ShipThrustStartEvent.hpp>
#include <rivet/ddl/generated/NPCBotFleeStartEvent.hpp>
#include <rivet/ddl/generated/ConduitVFXEvent.hpp>
#include <rivet/ddl/generated/InjuredEvent.hpp>
#include <rivet/ddl/generated/MeleeEnvironmentEvent.hpp>
#include <rivet/ddl/generated/NPCBotFleeAnimClueStartEvent.hpp>
#include <rivet/ddl/generated/UIPlanetMenuCloseEvent.hpp>
#include <rivet/ddl/generated/MeleeUnTriggeredEvent.hpp>
#include <rivet/ddl/generated/LoadSetLoadedEvent.hpp>
#include <rivet/ddl/generated/DisallowEarlyTransitionEvent.hpp>
#include <rivet/ddl/generated/VendorMenuOpenedDevstatsEvent.hpp>
#include <rivet/ddl/generated/HoverStartEvent.hpp>
#include <rivet/ddl/generated/PrioritizeTargetsEvent.hpp>
#include <rivet/ddl/generated/SpawnTrapGunkEvent.hpp>
#include <rivet/ddl/generated/FormationAttackWarningStopEvent.hpp>
#include <rivet/ddl/generated/ThrusterOnEvent.hpp>
#include <rivet/ddl/generated/ThrowObjectEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndColorPickerOpenEvent.hpp>
#include <rivet/ddl/generated/ShardAttackTellBeginEvent.hpp>
#include <rivet/ddl/generated/HeroGrindMacroStateOffEvent.hpp>
#include <rivet/ddl/generated/BurstPistolLowHeatEvent.hpp>
#include <rivet/ddl/generated/BehaviorUseActivityClueStartedEvent.hpp>
#include <rivet/ddl/generated/GroundDashBeginEvent.hpp>
#include <rivet/ddl/generated/VendorTabOpenedDevstatsEvent.hpp>
#include <rivet/ddl/generated/HeroSprintStartEvent.hpp>
#include <rivet/ddl/generated/HammerCrankLightOnEvent.hpp>
#include <rivet/ddl/generated/MagnaMissileMagnetImplodeEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorPurchaseWeaponEvent.hpp>
#include <rivet/ddl/generated/AnimMountFlyGrabEndEvent.hpp>
#include <rivet/ddl/generated/InteractArmedEvent.hpp>
#include <rivet/ddl/generated/ThumperActivateEvent.hpp>
#include <rivet/ddl/generated/AudioBusMaterialStartListeningEvent.hpp>
#include <rivet/ddl/generated/VendorAcceptEvent.hpp>
#include <rivet/ddl/generated/AccessibilityHighContrastMaterialRemovedEvent.hpp>
#include <rivet/ddl/generated/BotDeathSpawnChunksTimeEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimImpactEvent.hpp>
#include <rivet/ddl/generated/GetTeamEvent.hpp>
#include <rivet/ddl/generated/FossilizeSlowEndEvent.hpp>
#include <rivet/ddl/generated/PauseWeaponsEquipEvent.hpp>
#include <rivet/ddl/generated/SwingshotRetractingEndEvent.hpp>
#include <rivet/ddl/generated/WeaponArmedEvent.hpp>
#include <rivet/ddl/generated/AccessibilityHighContrastBackgroundEnableEvent.hpp>
#include <rivet/ddl/generated/GameUnpausedEvent.hpp>
#include <rivet/ddl/generated/WeaponLevelUpEndEvent.hpp>
#include <rivet/ddl/generated/TimeScaleDeactivatedEvent.hpp>
#include <rivet/ddl/generated/GainGoldBoltEvent.hpp>
#include <rivet/ddl/generated/MeleeMediumEvent.hpp>
#include <rivet/ddl/generated/TopiarySprinklerStartTurnEvent.hpp>
#include <rivet/ddl/generated/BotPopDeathTriggerAnimEvent.hpp>
#include <rivet/ddl/generated/MagnaMissileRangeExitEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserStartWarningEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorUpgradeHoldStopEvent.hpp>
#include <rivet/ddl/generated/HeroDamageFieldStartEvent.hpp>
#include <rivet/ddl/generated/ShrubberyRampUpStartEvent.hpp>
#include <rivet/ddl/generated/DrNefariousOnShieldActivatedEvent.hpp>
#include <rivet/ddl/generated/UIHudMessageTutorialClosedEvent.hpp>
#include <rivet/ddl/generated/MeleeSwingEvent.hpp>
#include <rivet/ddl/generated/MountFlyerDropEvent.hpp>
#include <rivet/ddl/generated/UIMenuSelectEvent.hpp>
#include <rivet/ddl/generated/OnCinematicCameraDeactivateEvent.hpp>
#include <rivet/ddl/generated/ShieldWithHealthActivatedEvent.hpp>
#include <rivet/ddl/generated/OnStartCloseEvent.hpp>
#include <rivet/ddl/generated/PlayDialogPlayStartedEvent.hpp>
#include <rivet/ddl/generated/ShotLockTargetingEvent.hpp>
#include <rivet/ddl/generated/OnAttachParentLost.hpp>
#include <rivet/ddl/generated/CinematicStateExitEventBase.hpp>
#include <rivet/ddl/generated/LeftBroadphaseEvent.hpp>
#include <rivet/ddl/generated/FriendTradingCardsRetrievedEvent.hpp>
#include <rivet/ddl/generated/RequestCritterDeactivateEvent.hpp>
#include <rivet/ddl/generated/WeaponLaserChargeStartEvent.hpp>
#include <rivet/ddl/generated/BoltCrankStartCrankingEvent.hpp>
#include <rivet/ddl/generated/TeleporterDisabledEvent.hpp>
#include <rivet/ddl/generated/AnimScaleDriverRateOffEvent.hpp>
#include <rivet/ddl/generated/PortalZipDeactivated.hpp>
#include <rivet/ddl/generated/AnimSpawnEvent.hpp>
#include <rivet/ddl/generated/GameEndedEvent.hpp>
#include <rivet/ddl/generated/AmbientShooterFireEvent.hpp>
#include <rivet/ddl/generated/TimeScaleCancelEvent.hpp>
#include <rivet/ddl/generated/FinalizeRotationEvent.hpp>
#include <rivet/ddl/generated/AirplaneCrashDescendEvent.hpp>
#include <rivet/ddl/generated/SyncPoolChangedEvent.hpp>
#include <rivet/ddl/generated/UIWeaponSelectChangeEvent.hpp>
#include <rivet/ddl/generated/AnimDamageJointEventResponderEvent.hpp>
#include <rivet/ddl/generated/MoverOnGroundEvent.hpp>
#include <rivet/ddl/generated/BestOfferChangedEvent.hpp>
#include <rivet/ddl/generated/HeroJumpedEvent.hpp>
#include <rivet/ddl/generated/EventMeterFullEvent.hpp>
#include <rivet/ddl/generated/RYNOBulletFiredEvent.hpp>
#include <rivet/ddl/generated/GameEndDevstatsEvent.hpp>
#include <rivet/ddl/generated/MusicIntensityLowEvent.hpp>
#include <rivet/ddl/generated/MoverTakeOffEvent.hpp>
#include <rivet/ddl/generated/PhotoModeAddStickerEvent.hpp>
#include <rivet/ddl/generated/InPositionEvent.hpp>
#include <rivet/ddl/generated/BotOnTranslationFinishedEvent.hpp>
#include <rivet/ddl/generated/GrindWooshOffEvent.hpp>
#include <rivet/ddl/generated/FlyerTrailsOnEvent.hpp>
#include <rivet/ddl/generated/UITutorialCompleteEvent.hpp>
#include <rivet/ddl/generated/EventExplosionEventBase.hpp>
#include <rivet/ddl/generated/PhotomodeSelfieActivateEvent.hpp>
#include <rivet/ddl/generated/BoltCrankTargetPaused.hpp>
#include <rivet/ddl/generated/BeginRotationEvent.hpp>
#include <rivet/ddl/generated/DebugWorldPositionAddedEvent.hpp>
#include <rivet/ddl/generated/DrNefariousDimensionatorShotEndEvent.hpp>
#include <rivet/ddl/generated/FossilizeBonusBulletLoadedEvent.hpp>
#include <rivet/ddl/generated/UIMenuPopupCloseEvent.hpp>
#include <rivet/ddl/generated/AnimMotionQueryEndEvent.hpp>
#include <rivet/ddl/generated/PortalZipTargetOutOfRange.hpp>
#include <rivet/ddl/generated/BotAnimLandedEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorChainAcceptLargeEvent.hpp>
#include <rivet/ddl/generated/BouncyActiveFXOffEvent.hpp>
#include <rivet/ddl/generated/FinaleNefWeakspotDamagedStage1Event.hpp>
#include <rivet/ddl/generated/NodalShotGenericEvent.hpp>
#include <rivet/ddl/generated/AnimDecalExplosionEvent.hpp>
#include <rivet/ddl/generated/MovingLevelAnimDoneEvent.hpp>
#include <rivet/ddl/generated/HeroQuickSandEnteredEvent.hpp>
#include <rivet/ddl/generated/FossilizeTimeSlowStartEvent.hpp>
#include <rivet/ddl/generated/AnimSpawnPhysicsActorEvent.hpp>
#include <rivet/ddl/generated/MountFlyerPickupEvent.hpp>
#include <rivet/ddl/generated/MultiplayerRoundEndEvent.hpp>
#include <rivet/ddl/generated/FrozenPropDestroyEvent.hpp>
#include <rivet/ddl/generated/ArrivedEvent.hpp>
#include <rivet/ddl/generated/BotIntroInAirEvent.hpp>
#include <rivet/ddl/generated/DiveEndedEvent.hpp>
#include <rivet/ddl/generated/UIWeaponSelectStickShowEvent.hpp>
#include <rivet/ddl/generated/ActorUpdateParentChangedEvent.hpp>
#include <rivet/ddl/generated/BotGuideArrivedEvent.hpp>
#include <rivet/ddl/generated/WindGustEvent.hpp>
#include <rivet/ddl/generated/PickupSetInputDropEnabledEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimConnectTransEvent.hpp>
#include <rivet/ddl/generated/JumpCycleBeginEvent.hpp>
#include <rivet/ddl/generated/DevstatsBigObjectivePOIsEnabledEvent.hpp>
#include <rivet/ddl/generated/BootTimeDevstatsEvent.hpp>
#include <rivet/ddl/generated/HeroCancelPerfTestEvent.hpp>
#include <rivet/ddl/generated/ExitedVendorEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorPurchaseHoldStartEvent.hpp>
#include <rivet/ddl/generated/FossilizeWalkStartEvent.hpp>
#include <rivet/ddl/generated/WepHarpoonTurretDryfireEvent.hpp>
#include <rivet/ddl/generated/AnimLockMoveEvent.hpp>
#include <rivet/ddl/generated/MountDeathEvent.hpp>
#include <rivet/ddl/generated/FlewByStartEvent.hpp>
#include <rivet/ddl/generated/CommandEvent.hpp>
#include <rivet/ddl/generated/WeaponEconomySnapshotDevstatsEvent.hpp>
#include <rivet/ddl/generated/CinematicAllowEarlyTransitionEvent.hpp>
#include <rivet/ddl/generated/DoomBotJumpStartEvent.hpp>
#include <rivet/ddl/generated/AuthFailureDevstatsEvent.hpp>
#include <rivet/ddl/generated/HUDLowHealthPulseEvent.hpp>
#include <rivet/ddl/generated/AnimUnlockMoveEvent.hpp>
#include <rivet/ddl/generated/HUDMessageArenaWaveStartedEvent.hpp>
#include <rivet/ddl/generated/LaserSightSourceOnEvent.hpp>
#include <rivet/ddl/generated/ChildSpawnedEvent.hpp>
#include <rivet/ddl/generated/VehicleStoppedEvent.hpp>
#include <rivet/ddl/generated/SlingshotEndEvent.hpp>
#include <rivet/ddl/generated/HeadRetractEvent.hpp>
#include <rivet/ddl/generated/UnburrowEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimStartTransEvent.hpp>
#include <rivet/ddl/generated/TopiaryDestroyEvent.hpp>
#include <rivet/ddl/generated/PauseArmorHeadHoverEvent.hpp>
#include <rivet/ddl/generated/MeleeAnimCameraStopEvent.hpp>
#include <rivet/ddl/generated/BotStateFaceStopTurningEvent.hpp>
#include <rivet/ddl/generated/AlarmEvent.hpp>
#include <rivet/ddl/generated/InteractDetachedFromEvent.hpp>
#include <rivet/ddl/generated/BotInvestigateEndEvent.hpp>
#include <rivet/ddl/generated/ClankPackHeliStopEvent.hpp>
#include <rivet/ddl/generated/FocusTrackingOverrideFocusScaleEvent.hpp>
#include <rivet/ddl/generated/LightningRodChargeUpFireEvent.hpp>
#include <rivet/ddl/generated/HeroRequestRespawnEvent.hpp>
#include <rivet/ddl/generated/ShipThrustStopEvent.hpp>
#include <rivet/ddl/generated/OnStopTriggerEvent.hpp>
#include <rivet/ddl/generated/FormationInPositionEvent.hpp>
#include <rivet/ddl/generated/DropObjectEvent.hpp>
#include <rivet/ddl/generated/AnimGrabEvent.hpp>
#include <rivet/ddl/generated/HoverbootOmniBoostPadRotateEndEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidShieldOffEvent.hpp>
#include <rivet/ddl/generated/LeftEvent.hpp>
#include <rivet/ddl/generated/ClothEnableStateEvent.hpp>
#include <rivet/ddl/generated/ShipMagnetFailTurnOnEvent.hpp>
#include <rivet/ddl/generated/PortalZipHeroPreWarpEvent.hpp>
#include <rivet/ddl/generated/ResponseEvent.hpp>
#include <rivet/ddl/generated/Cinematic2BotGotoEvent.hpp>
#include <rivet/ddl/generated/AimContextOverTheShoulderDeactivateEvent.hpp>
#include <rivet/ddl/generated/WeaponTriggeredEvent.hpp>
#include <rivet/ddl/generated/FinaleNefWeakspotDestroyedAndAllPortalsClosedEvent.hpp>
#include <rivet/ddl/generated/DevstatsPlayerAbilityUsedEvent.hpp>
#include <rivet/ddl/generated/CVCBumpedEvent.hpp>
#include <rivet/ddl/generated/HeroRevivingCompleteEvent.hpp>
#include <rivet/ddl/generated/BotTriggerEquipPartialAnimsEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorChainDownEvent.hpp>
#include <rivet/ddl/generated/UIPlanetMenuErrorEvent.hpp>
#include <rivet/ddl/generated/PlayerDeathEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndBackEvent.hpp>
#include <rivet/ddl/generated/BotAttackSelectEvent.hpp>
#include <rivet/ddl/generated/PassiveShiftCompleteEvent.hpp>
#include <rivet/ddl/generated/MountFlyerPickupUnreadyEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidSpeedBoostOffEvent.hpp>
#include <rivet/ddl/generated/BouncerDroppedMiniBombEvent.hpp>
#include <rivet/ddl/generated/BreakableSpawnDebrisEvent.hpp>
#include <rivet/ddl/generated/AttachToWaterSurfaceEvent.hpp>
#include <rivet/ddl/generated/BeamInStartEvent.hpp>
#include <rivet/ddl/generated/InitiateAnimatedDismountEvent.hpp>
#include <rivet/ddl/generated/WallRunOffEvent.hpp>
#include <rivet/ddl/generated/Beam2JointStopEvent.hpp>
#include <rivet/ddl/generated/RefireSustainStopEvent.hpp>
#include <rivet/ddl/generated/JointShrinkStopEvent.hpp>
#include <rivet/ddl/generated/CinematicExitToLedgeEvent.hpp>
#include <rivet/ddl/generated/AnimEquipBeamStartEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorUpgradeTabOpenEvent.hpp>
#include <rivet/ddl/generated/AnimChunkEvent.hpp>
#include <rivet/ddl/generated/TriggerSwitchAutoResetEvent.hpp>
#include <rivet/ddl/generated/WeaponManagerEvent.hpp>
#include <rivet/ddl/generated/PauseWeaponsRemapChangeEvent.hpp>
#include <rivet/ddl/generated/ManglerSetOverloadLevelEvent.hpp>
#include <rivet/ddl/generated/ThumpedEvent.hpp>
#include <rivet/ddl/generated/HeroTeleportBeginEvent.hpp>
#include <rivet/ddl/generated/PortalClosingEvent.hpp>
#include <rivet/ddl/generated/DimensionalBarrageAttackEndEvent.hpp>
#include <rivet/ddl/generated/OfferBeginAcceptingEvent.hpp>
#include <rivet/ddl/generated/PauseMenuTabEvent.hpp>
#include <rivet/ddl/generated/AnimSpawnProjectileEvent.hpp>
#include <rivet/ddl/generated/BotShootLaserStartAnimEvent.hpp>
#include <rivet/ddl/generated/MagbootStartEvent.hpp>
#include <rivet/ddl/generated/AudioBusMaterialStopListeningEvent.hpp>
#include <rivet/ddl/generated/AnimScaleRotationOnEvent.hpp>
#include <rivet/ddl/generated/MountEvent.hpp>
#include <rivet/ddl/generated/GroovitronDancePartyStopEvent.hpp>
#include <rivet/ddl/generated/OnPoweredEvent.hpp>
#include <rivet/ddl/generated/PickupBoltActivatedEvent.hpp>
#include <rivet/ddl/generated/SpawnerBotSpawnedMaxEvent.hpp>
#include <rivet/ddl/generated/RYNOPortalObjectImpactEvent.hpp>
#include <rivet/ddl/generated/HeroPlayScriptedAnimComplete.hpp>
#include <rivet/ddl/generated/IncinerateFinishedEvent.hpp>
#include <rivet/ddl/generated/TeleportTrailEndEvent.hpp>
#include <rivet/ddl/generated/InventoryFullEvent.hpp>
#include <rivet/ddl/generated/HarpoonStreamStopEvent.hpp>
#include <rivet/ddl/generated/OnCloseEvent.hpp>
#include <rivet/ddl/generated/AwardThrownWeaponHitEvent.hpp>
#include <rivet/ddl/generated/AimContextOverTheShoulderActivateEvent.hpp>
#include <rivet/ddl/generated/TurretTargetSpottedEvent.hpp>
#include <rivet/ddl/generated/CarpetBomberTargetingLaserOnEvent.hpp>
#include <rivet/ddl/generated/ClearVanityOverrideEvent.hpp>
#include <rivet/ddl/generated/RagdollBodyDropEvent.hpp>
#include <rivet/ddl/generated/JumpPeakEvent.hpp>
#include <rivet/ddl/generated/DamageModifierEvent.hpp>
#include <rivet/ddl/generated/HideInteractLockedIconEvent.hpp>
#include <rivet/ddl/generated/LockedProximityEvent.hpp>
#include <rivet/ddl/generated/SwingshotExtendingStartEvent.hpp>
#include <rivet/ddl/generated/BotImpaleEvent.hpp>
#include <rivet/ddl/generated/ElementalBoneEffectEvent.hpp>
#include <rivet/ddl/generated/PhaseMatchBlendInEvent.hpp>
#include <rivet/ddl/generated/HeroTeleportEndEvent.hpp>
#include <rivet/ddl/generated/Cinematic2HeroTransitionEventBase.hpp>
#include <rivet/ddl/generated/ProjectileIdlingStartEvent.hpp>
#include <rivet/ddl/generated/PixelizerChargedEndEvent.hpp>
#include <rivet/ddl/generated/CapturableAllegianceChangedEvent.hpp>
#include <rivet/ddl/generated/BeamOutFinishedEvent.hpp>
#include <rivet/ddl/generated/MountBoostEndEvent.hpp>
#include <rivet/ddl/generated/DrNefariousDimensionatorShotBeginEvent.hpp>
#include <rivet/ddl/generated/CameraFieldOfViewEvent.hpp>
#include <rivet/ddl/generated/RagdollDeactivatedEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndSaveSlotsMoveEvent.hpp>
#include <rivet/ddl/generated/OnAttachEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorOpenEvent.hpp>
#include <rivet/ddl/generated/ZurkieArenaSelectCancelEvent.hpp>
#include <rivet/ddl/generated/OnDisabledEvent.hpp>
#include <rivet/ddl/generated/ShrubberyFlowerSpawnEvent.hpp>
#include <rivet/ddl/generated/AnimBurrowEvent.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetFXEndEvent.hpp>
#include <rivet/ddl/generated/LandingFlockDisturbedEvent.hpp>
#include <rivet/ddl/generated/MeleeActiveStartEvent.hpp>
#include <rivet/ddl/generated/BeamImpactStopEvent.hpp>
#include <rivet/ddl/generated/ShipDodgeRollStopEvent.hpp>
#include <rivet/ddl/generated/ShipOutOfAmmoEvent.hpp>
#include <rivet/ddl/generated/DevstatsBigObjectivePOIsDisabledEvent.hpp>
#include <rivet/ddl/generated/BouncyLaunchEvent.hpp>
#include <rivet/ddl/generated/HammerCrankAttachEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorTabEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndCloseEvent.hpp>
#include <rivet/ddl/generated/EnableParryEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeFilterChangeEvent.hpp>
#include <rivet/ddl/generated/ActivityClueActivityStartedEvent.hpp>
#include <rivet/ddl/generated/WasHiredEvent.hpp>
#include <rivet/ddl/generated/BehaviorGotoDoneEvent.hpp>
#include <rivet/ddl/generated/InteractAllReadyEvent.hpp>
#include <rivet/ddl/generated/OnUnTriggerEvent.hpp>
#include <rivet/ddl/generated/ElectricArcEvent.hpp>
#include <rivet/ddl/generated/AnimIKFootUpEvent.hpp>
#include <rivet/ddl/generated/TunnelerGroundFrameEvent.hpp>
#include <rivet/ddl/generated/LightningRodChargeUpCompleteEvent.hpp>
#include <rivet/ddl/generated/RegionLoadedEvent.hpp>
#include <rivet/ddl/generated/CarpetBomberBurstShotEvent.hpp>
#include <rivet/ddl/generated/TopiarySprinklerStopTurnEvent.hpp>
#include <rivet/ddl/generated/PickupSetCarryPromptEnabledEvent.hpp>
#include <rivet/ddl/generated/AlertCompleteEvent.hpp>
#include <rivet/ddl/generated/Cinematic2BlendOutEvent.hpp>
#include <rivet/ddl/generated/AnimFootDownEvent.hpp>
#include <rivet/ddl/generated/WeakSpotDamagedEvent.hpp>
#include <rivet/ddl/generated/PortalZipWarpSoundEvent.hpp>
#include <rivet/ddl/generated/ConditionStopEvent.hpp>
#include <rivet/ddl/generated/GroundTriggerValidUserEvent.hpp>
#include <rivet/ddl/generated/WarpToInteractEvent.hpp>
#include <rivet/ddl/generated/ScriptedShotActorSpawnedEffectEvent.hpp>
#include <rivet/ddl/generated/DrNefariousOnShieldDeactivatedEvent.hpp>
#include <rivet/ddl/generated/BotShootMortarStartEvent.hpp>
#include <rivet/ddl/generated/PauseGalleryZoomStartEvent.hpp>
#include <rivet/ddl/generated/TriggerPadGroupCompleteEvent.hpp>
#include <rivet/ddl/generated/WeaponRefireBurstBeginEvent.hpp>
#include <rivet/ddl/generated/RevivingStartEvent.hpp>
#include <rivet/ddl/generated/InteractBrokenStartEvent.hpp>
#include <rivet/ddl/generated/SwimSurfaceStartEvent.hpp>
#include <rivet/ddl/generated/DevstatsEmergentVOFailedEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleRecallerEnterEvent.hpp>
#include <rivet/ddl/generated/BotCurveIntroDataFollowEndEvent.hpp>
#include <rivet/ddl/generated/PixelizedExplodeEvent.hpp>
#include <rivet/ddl/generated/RippleEvent.hpp>
#include <rivet/ddl/generated/RefireChargeStartEvent.hpp>
#include <rivet/ddl/generated/MissionStateChangedEvent.hpp>
#include <rivet/ddl/generated/UITutorialPopUp.hpp>
#include <rivet/ddl/generated/BotDropIntroEndEvent.hpp>
#include <rivet/ddl/generated/AttackEndEvent.hpp>
#include <rivet/ddl/generated/AnimCoordinatorSyncEvent.hpp>
#include <rivet/ddl/generated/MissionDeactivatedEvent.hpp>
#include <rivet/ddl/generated/UnderwaterBaseJuiceDistractionUseEndEvent.hpp>
#include <rivet/ddl/generated/CrateExplodeWarningSoundEvent.hpp>
#include <rivet/ddl/generated/LightningRodExplosionEvent.hpp>
#include <rivet/ddl/generated/SwimUnderwaterStartEvent.hpp>
#include <rivet/ddl/generated/SpawnerStoppedEvent.hpp>
#include <rivet/ddl/generated/TauntEvent.hpp>
#include <rivet/ddl/generated/TunnelerLockOnCanceledEvent.hpp>
#include <rivet/ddl/generated/SargassoCentipedeAODStartEvent.hpp>
#include <rivet/ddl/generated/MrFunGuyDisappearEvent.hpp>
#include <rivet/ddl/generated/ShrubberyBreakoutExplosionStartEvent.hpp>
#include <rivet/ddl/generated/HazardNestTargetBeamStopEvent.hpp>
#include <rivet/ddl/generated/TimeScaleChannelBlendInEvent.hpp>
#include <rivet/ddl/generated/GalacticMapShipLandFinishEvent.hpp>
#include <rivet/ddl/generated/WallStickOffEvent.hpp>
#include <rivet/ddl/generated/MissionStartedEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeTrackerExitEvent.hpp>
#include <rivet/ddl/generated/TargetChangedEvent.hpp>
#include <rivet/ddl/generated/DisplayInteractLockedIconEvent.hpp>
#include <rivet/ddl/generated/MovingLevelPauseEvent.hpp>
#include <rivet/ddl/generated/SwimUnderwaterStopEvent.hpp>
#include <rivet/ddl/generated/HandBeamTellEndEvent.hpp>
#include <rivet/ddl/generated/MeleeIntroCompleteEvent.hpp>
#include <rivet/ddl/generated/SwimSurfaceStopEvent.hpp>
#include <rivet/ddl/generated/BotTelekinesisThrowObjectEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndColorPickerCloseEvent.hpp>
#include <rivet/ddl/generated/HeroEnterCinematicEvent.hpp>
#include <rivet/ddl/generated/HUDMessageArenaWaveCountdownEvent.hpp>
#include <rivet/ddl/generated/AnimPortalZipReturnStartEvent.hpp>
#include <rivet/ddl/generated/ChargeAttackHitEvent.hpp>
#include <rivet/ddl/generated/FormationAttackWarningStartEvent.hpp>
#include <rivet/ddl/generated/ElectrifiedOnEvent.hpp>
#include <rivet/ddl/generated/MeleeStrongEvent.hpp>
#include <rivet/ddl/generated/PushFireWeaponEvent.hpp>
#include <rivet/ddl/generated/PickupResetEvent.hpp>
#include <rivet/ddl/generated/HeroFallingRespawnBeginEvent.hpp>
#include <rivet/ddl/generated/UIArenaMenuMoveEvent.hpp>
#include <rivet/ddl/generated/HeroGrindTransferEndEvent.hpp>
#include <rivet/ddl/generated/GroundResponseOnEvent.hpp>
#include <rivet/ddl/generated/GolemOnEvent.hpp>
#include <rivet/ddl/generated/BattlePhaseChangedEvent.hpp>
#include <rivet/ddl/generated/FacingStartEvent.hpp>
#include <rivet/ddl/generated/PortalZipRiftMovingEvent.hpp>
#include <rivet/ddl/generated/AttachEvent.hpp>
#include <rivet/ddl/generated/AnimPortalZipLineStartEvent.hpp>
#include <rivet/ddl/generated/LoadGenerationChangedEvent.hpp>
#include <rivet/ddl/generated/GasMaskEquippedEvent.hpp>
#include <rivet/ddl/generated/TriggerByGroupEvent.hpp>
#include <rivet/ddl/generated/LookAtStopEvent.hpp>
#include <rivet/ddl/generated/PlasmaStrikerScopeEnterEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimPreserveMotionEvent.hpp>
#include <rivet/ddl/generated/FormationStartAttackEvent.hpp>
#include <rivet/ddl/generated/KillTrackerEvent.hpp>
#include <rivet/ddl/generated/WeaponWarpRifleSpinDownFinishedEvent.hpp>
#include <rivet/ddl/generated/HandBeamTellBeginEvent.hpp>
#include <rivet/ddl/generated/WeaponLaserHittingStartEvent.hpp>
#include <rivet/ddl/generated/RocketProximityEvent.hpp>
#include <rivet/ddl/generated/HealthPickedUpEvent.hpp>
#include <rivet/ddl/generated/AudioHordeStopEvent.hpp>
#include <rivet/ddl/generated/WallStickOnEvent.hpp>
#include <rivet/ddl/generated/GrindWooshOnEvent.hpp>
#include <rivet/ddl/generated/SuperBounceEvent.hpp>
#include <rivet/ddl/generated/MagnaMissileRangeEnterEvent.hpp>
#include <rivet/ddl/generated/BotStartUsingAnimClueEvent.hpp>
#include <rivet/ddl/generated/StageTransitionEndEvent.hpp>
#include <rivet/ddl/generated/MoverIsFallingEndEvent.hpp>
#include <rivet/ddl/generated/AnimHammerCrankLightEvent.hpp>
#include <rivet/ddl/generated/PauseMapIconUnhoverEvent.hpp>
#include <rivet/ddl/generated/DiveAttackLandedEvent.hpp>
#include <rivet/ddl/generated/InteractAttachedToEvent.hpp>
#include <rivet/ddl/generated/FrozenWhackedEvent.hpp>
#include <rivet/ddl/generated/ShotArtSpawnedEvent.hpp>
#include <rivet/ddl/generated/MrFunGuyMaxSpawnedFailedToShootEvent.hpp>
#include <rivet/ddl/generated/AuthSuccessDevstatsEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeLanded.hpp>
#include <rivet/ddl/generated/RYNOPlayPickedUpEvent.hpp>
#include <rivet/ddl/generated/OnLeaveEvent.hpp>
#include <rivet/ddl/generated/FrozenPropSpawnEvent.hpp>
#include <rivet/ddl/generated/BotTeleportEndEvent.hpp>
#include <rivet/ddl/generated/HoverbootKickHighSpeedEndEvent.hpp>
#include <rivet/ddl/generated/ExplodedEvent.hpp>
#include <rivet/ddl/generated/Cinematic2CameraPaneEvent.hpp>
#include <rivet/ddl/generated/StackableCrateAwakenAboveEvent.hpp>
#include <rivet/ddl/generated/PlayerLeftEvent.hpp>
#include <rivet/ddl/generated/Cinematic2ActivationEvent.hpp>
#include <rivet/ddl/generated/PhaseDashEndEvent.hpp>
#include <rivet/ddl/generated/PauseMapZoomStartEvent.hpp>
#include <rivet/ddl/generated/DrNefariousShieldActivationAnimStartEvent.hpp>
#include <rivet/ddl/generated/SlopeSlideStartEvent.hpp>
#include <rivet/ddl/generated/StartMissionDevstatsEvent.hpp>
#include <rivet/ddl/generated/UIOptionsButtonRemapEvent.hpp>
#include <rivet/ddl/generated/PhotomodeSelfieDeactivateEvent.hpp>
#include <rivet/ddl/generated/DevstatsRumbleAccessibilityEnabledEvent.hpp>
#include <rivet/ddl/generated/MotionSegmentEvent.hpp>
#include <rivet/ddl/generated/MountBoostLaunchInternalEvent.hpp>
#include <rivet/ddl/generated/PixelizedEndEvent.hpp>
#include <rivet/ddl/generated/BotBehaviorStuckFailedEvent.hpp>
#include <rivet/ddl/generated/FinaleHeartLaserPhaseHasEndedEvent.hpp>
#include <rivet/ddl/generated/SetTeamEvent.hpp>
#include <rivet/ddl/generated/SargassoCentipedeLaser.hpp>
#include <rivet/ddl/generated/BotDashChargeDoneEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimReleaseEvent.hpp>
#include <rivet/ddl/generated/MeleeStreakBeginEvent.hpp>
#include <rivet/ddl/generated/BotDiveRollStartInvulnerablityAnimEvent.hpp>
#include <rivet/ddl/generated/EarlyTransitionOnHitEvent.hpp>
#include <rivet/ddl/generated/ZerpPlayPickedUpEvent.hpp>
#include <rivet/ddl/generated/FrozenL2Event.hpp>
#include <rivet/ddl/generated/PixelizedDeathEvent.hpp>
#include <rivet/ddl/generated/AwarenessChangedEvent.hpp>
#include <rivet/ddl/generated/LightningRodSpikeStateEvent.hpp>
#include <rivet/ddl/generated/GrindLeanStartEvent.hpp>
#include <rivet/ddl/generated/OnStopUntriggerEvent.hpp>
#include <rivet/ddl/generated/HoverStopEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorUpgradePurchaseAllEvent.hpp>
#include <rivet/ddl/generated/UICreditsMusicStopEvent.hpp>
#include <rivet/ddl/generated/TurretTargetLostEvent.hpp>
#include <rivet/ddl/generated/HUDMessageTimerTickEvent.hpp>
#include <rivet/ddl/generated/SyncedBoxActivateEvent.hpp>
#include <rivet/ddl/generated/MeleeKillEvent.hpp>
#include <rivet/ddl/generated/DimensionPortalAddHighlightEvent.hpp>
#include <rivet/ddl/generated/WeaponBurstCanceledEvent.hpp>
#include <rivet/ddl/generated/ManglerMovingStopEvent.hpp>
#include <rivet/ddl/generated/UIArenaMenuForwardEvent.hpp>
#include <rivet/ddl/generated/FrozenSpinStopEvent.hpp>
#include <rivet/ddl/generated/HammerCrankTargetResetting.hpp>
#include <rivet/ddl/generated/PortalZipRiftCreatedEvent.hpp>
#include <rivet/ddl/generated/HUDMessageTutorialControlRefreshEvent.hpp>
#include <rivet/ddl/generated/StreamingVideoStartEvent.hpp>
#include <rivet/ddl/generated/SelfieSwitchEvent.hpp>
#include <rivet/ddl/generated/ArachnodroidShieldOnEvent.hpp>
#include <rivet/ddl/generated/SweepChaseHitEvent.hpp>
#include <rivet/ddl/generated/SpawnerSpawnEvent.hpp>
#include <rivet/ddl/generated/PixelizerChargeUpStartEvent.hpp>
#include <rivet/ddl/generated/UIFrontEndStartGameEvent.hpp>
#include <rivet/ddl/generated/AnimClipIKEvent.hpp>
#include <rivet/ddl/generated/WarpRifleEndFireLoopEvent.hpp>
#include <rivet/ddl/generated/PossibleTargetOnEvent.hpp>
#include <rivet/ddl/generated/CineActorVoiceDisableEvent.hpp>
#include <rivet/ddl/generated/HeroMeleeBotEvent.hpp>
#include <rivet/ddl/generated/DevstatsHeartbeatEvent.hpp>
#include <rivet/ddl/generated/AwardHeroGrindrailDoubleJumpedEvent.hpp>
#include <rivet/ddl/generated/LedgeFlockDisturbedEvent.hpp>
#include <rivet/ddl/generated/DetachEvent.hpp>
#include <rivet/ddl/generated/InteractLockedEvent.hpp>
#include <rivet/ddl/generated/DevstatsPlayerAbilityHitEvent.hpp>
#include <rivet/ddl/generated/UserEquippedWeaponFXOffEvent.hpp>
#include <rivet/ddl/generated/WeaponThrowEndEvent.hpp>
#include <rivet/ddl/generated/BoltCrankResetEvent.hpp>
#include <rivet/ddl/generated/HammerCrankFinishedEvent.hpp>
#include <rivet/ddl/generated/PerformWarpEvent.hpp>
#include <rivet/ddl/generated/ShipMagnetTurnedOnEvent.hpp>
#include <rivet/ddl/generated/WeaponReloadedEvent.hpp>
#include <rivet/ddl/generated/DimensionPortalTokenStolenEvent.hpp>
#include <rivet/ddl/generated/BlizonShiftStartedEvent.hpp>
#include <rivet/ddl/generated/UIWeaponLevelUpDoneEvent.hpp>
#include <rivet/ddl/generated/HUDLowHealthFirstShowEvent.hpp>
#include <rivet/ddl/generated/ObjZipLinePlayerSlideStopEvent.hpp>
#include <rivet/ddl/generated/BotMountEvent.hpp>
#include <rivet/ddl/generated/HoverbootKickPreReadyEvent.hpp>
#include <rivet/ddl/generated/WarpRifleEnterMediumTempTierEvent.hpp>
#include <rivet/ddl/generated/WallJumpEvent.hpp>
#include <rivet/ddl/generated/AnimScalePreRotateEndEvent.hpp>
#include <rivet/ddl/generated/ShipReticleTargetedEvent.hpp>
#include <rivet/ddl/generated/PredatorTargetLostEvent.hpp>
#include <rivet/ddl/generated/HexapodWeaponChargeUpCanceledEvent.hpp>
#include <rivet/ddl/generated/SkinManagerChangedEvent.hpp>
#include <rivet/ddl/generated/HeroRevivingStopEvent.hpp>
#include <rivet/ddl/generated/MaterialConstantBlendStartedEvent.hpp>
#include <rivet/ddl/generated/BataliaTurretNotEnoughEnergyEvent.hpp>
#include <rivet/ddl/generated/MissionEndedDevstatsEventBase.hpp>
#include <rivet/ddl/generated/MultiplayerRoundStartEvent.hpp>
#include <rivet/ddl/generated/ProtoShotgunShellEjectEvent.hpp>
#include <rivet/ddl/generated/DevstatsPlayerDamagedEvent.hpp>
#include <rivet/ddl/generated/GroundTriggerOnEvent.hpp>
#include <rivet/ddl/generated/MissionDataStoreChangedEvent.hpp>
#include <rivet/ddl/generated/UIMenuSkipCinematicEvent.hpp>
#include <rivet/ddl/generated/ProjectileWaveEndEvent.hpp>
#include <rivet/ddl/generated/BoltCrankTargetComplete.hpp>
#include <rivet/ddl/generated/WeaponWarpRifleSpinDownStartedEvent.hpp>
#include <rivet/ddl/generated/PortalClosedEvent.hpp>
#include <rivet/ddl/generated/WeaponSightedEvent.hpp>
#include <rivet/ddl/generated/VehicleHoverJetsOffEvent.hpp>
#include <rivet/ddl/generated/HarpoonStreamSplatEvent.hpp>
#include <rivet/ddl/generated/PickupBoltEvent.hpp>
#include <rivet/ddl/generated/BotStopSleepEvent.hpp>
#include <rivet/ddl/generated/GolemOffEvent.hpp>
#include <rivet/ddl/generated/ShrubberyRampDownStartEvent.hpp>
#include <rivet/ddl/generated/CinematicEquipWeaponEvent.hpp>
#include <rivet/ddl/generated/SpendRaritaniumEvent.hpp>
#include <rivet/ddl/generated/DamageVolumeWarmupEvent.hpp>
#include <rivet/ddl/generated/TouchedEvent.hpp>
#include <rivet/ddl/generated/AmmoPickedUpEvent.hpp>
#include <rivet/ddl/generated/FadeOutStartedEvent.hpp>
#include <rivet/ddl/generated/PickupLandEvent.hpp>
#include <rivet/ddl/generated/HarpoonStreamSprayEvent.hpp>
#include <rivet/ddl/generated/ShipEvadeEvent.hpp>
#include <rivet/ddl/generated/PropAttachedEvent.hpp>
#include <rivet/ddl/generated/UserSigninCanceledEvent.hpp>
#include <rivet/ddl/generated/MeleeDamageBeginEvent.hpp>
#include <rivet/ddl/generated/SyncedAnimConnectEvent.hpp>
#include <rivet/ddl/generated/CarpetBomberTargetingLaserOffEvent.hpp>
#include <rivet/ddl/generated/AnimScaleDriverRateOnEvent.hpp>
#include <rivet/ddl/generated/AnimLookGroupChangeEvent.hpp>
#include <rivet/ddl/generated/RallyOffEvent.hpp>
#include <rivet/ddl/generated/PyrocitorEquippedFXOffEvent.hpp>
#include <rivet/ddl/generated/PassiveShiftTranstionStartEvent.hpp>
#include <rivet/ddl/generated/GroundDashEndEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorInStockContinueEvent.hpp>
#include <rivet/ddl/generated/SwimDeepUnderwaterStartEvent.hpp>
#include <rivet/ddl/generated/DeactivatedEvent.hpp>
#include <rivet/ddl/generated/OnFireReactStopEvent.hpp>
#include <rivet/ddl/generated/ChargeAttackEndEvent.hpp>
#include <rivet/ddl/generated/FinaleNefWeakspotDamagedStageDestroyedEvent.hpp>
#include <rivet/ddl/generated/TargetersChangedEvent.hpp>
#include <rivet/ddl/generated/LaserSightOnEvent.hpp>
#include <rivet/ddl/generated/AnimAttachUnholsterEvent.hpp>
#include <rivet/ddl/generated/WasConnectedEvent.hpp>
#include <rivet/ddl/generated/HammerCrankTargetComplete.hpp>
#include <rivet/ddl/generated/AwardWeaponFullUpgradeEvent.hpp>
#include <rivet/ddl/generated/AnimNotationEvent.hpp>
#include <rivet/ddl/generated/SweepChaseEndEvent.hpp>
#include <rivet/ddl/generated/PortalDeactivatedEvent.hpp>
#include <rivet/ddl/generated/HeroEconomySnapshotDevstatsEvent.hpp>
#include <rivet/ddl/generated/MagShieldFullEvent.hpp>
#include <rivet/ddl/generated/PreExplodedKnockbackEvent.hpp>
#include <rivet/ddl/generated/ZoneLoadedEvent.hpp>
#include <rivet/ddl/generated/AnimScriptEndedEvent.hpp>
#include <rivet/ddl/generated/WeaponFiringStartedEvent.hpp>
#include <rivet/ddl/generated/ParentShotDestroyedEvent.hpp>
#include <rivet/ddl/generated/ProtonSeekerAttackBeginEvent.hpp>
#include <rivet/ddl/generated/BotStateFaceStartTurningEvent.hpp>
#include <rivet/ddl/generated/HeroDamageFieldEndEvent.hpp>
#include <rivet/ddl/generated/BotStartAimingEvent.hpp>
#include <rivet/ddl/generated/TargetedOnEvent.hpp>
#include <rivet/ddl/generated/GalacticMapManualSwitchReadyEvent.hpp>
#include <rivet/ddl/generated/ShowEvent.hpp>
#include <rivet/ddl/generated/BotWeaponChargeStart.hpp>
#include <rivet/ddl/generated/PukeStartEvent.hpp>
#include <rivet/ddl/generated/BurstPistolNoHeatEvent.hpp>
#include <rivet/ddl/generated/ObjSysUnlocksChangedEvent.hpp>
#include <rivet/ddl/generated/PlayDialogDestroyedEvent.hpp>
#include <rivet/ddl/generated/FacingEndEvent.hpp>
#include <rivet/ddl/generated/BurningOnEvent.hpp>
#include <rivet/ddl/generated/PortalZipStartEvent.hpp>
#include <rivet/ddl/generated/GrindBoostStartEvent.hpp>
#include <rivet/ddl/generated/PerformToggleLookEvent.hpp>
#include <rivet/ddl/generated/BotSpawnRewardEvent.hpp>
#include <rivet/ddl/generated/PauseMenuOpenedDevstatsEvent.hpp>
#include <rivet/ddl/generated/PrefabZoneActivatedEvent.hpp>
#include <rivet/ddl/generated/BotStateHitReactStartEvent.hpp>
#include <rivet/ddl/generated/LungeEndEvent.hpp>
#include <rivet/ddl/generated/DevstatsSystemMenuOptionChangedEvent.hpp>
#include <rivet/ddl/generated/HeroStartPerfTestEvent.hpp>
#include <rivet/ddl/generated/DisallowStagedBlockEarlyTransitionEvent.hpp>
#include <rivet/ddl/generated/GroovitronActivateEvent.hpp>
#include <rivet/ddl/generated/HeroPortalTransitionEvent.hpp>
#include <rivet/ddl/generated/AnimPropForwardEvent.hpp>
#include <rivet/ddl/generated/DamageBlockedByShieldEvent.hpp>
#include <rivet/ddl/generated/RYNOPortalObjectDestroyEvent.hpp>
#include <rivet/ddl/generated/ClientJoinedEvent.hpp>
#include <rivet/ddl/generated/AnimScriptStartedEvent.hpp>
#include <rivet/ddl/generated/StartMountSpeedEvent.hpp>
#include <rivet/ddl/generated/UITutorialPauseEnd.hpp>
#include <rivet/ddl/generated/ShipBulletsFinishedEvent.hpp>
#include <rivet/ddl/generated/HealthBarHideEvent.hpp>
#include <rivet/ddl/generated/TrajectoryHighlightOnEvent.hpp>
#include <rivet/ddl/generated/ProjectileWarnedEvent.hpp>
#include <rivet/ddl/generated/SkinManagerClothModifyEvent.hpp>
#include <rivet/ddl/generated/ZoneInstantiatedEvent.hpp>
#include <rivet/ddl/generated/HeadLookAtEvent.hpp>
#include <rivet/ddl/generated/UIOptionsColorPickerMoveEvent.hpp>
#include <rivet/ddl/generated/ScreenSplatterEvent.hpp>
#include <rivet/ddl/generated/FormationUserDiedEvent.hpp>
#include <rivet/ddl/generated/ShuffleStartEvent.hpp>
#include <rivet/ddl/generated/HoverbootKickEvent.hpp>
#include <rivet/ddl/generated/UIWeaponSelectOpenEvent.hpp>
#include <rivet/ddl/generated/AOEWaterHazardEndTellEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeActivateEvent.hpp>
#include <rivet/ddl/generated/HPThresholdEvent.hpp>
#include <rivet/ddl/generated/ValidAreasChangedEvent.hpp>
#include <rivet/ddl/generated/ShipBulletsStartedEvent.hpp>
#include <rivet/ddl/generated/GroundEvent.hpp>
#include <rivet/ddl/generated/ClankWeaponLockUnTargetedEvent.hpp>
#include <rivet/ddl/generated/CentipedeGroundEffectStart.hpp>
#include <rivet/ddl/generated/StopJumpEvent.hpp>
#include <rivet/ddl/generated/ShockReactStartEvent.hpp>
#include <rivet/ddl/generated/MissionFailedEvent.hpp>
#include <rivet/ddl/generated/TunnelerEnterGroundEvent.hpp>
#include <rivet/ddl/generated/CentipedeGroundEffectEnd.hpp>
#include <rivet/ddl/generated/ShowMagbootLaunchReticleEvent.hpp>
#include <rivet/ddl/generated/FocusTrackingDisableTrackingEvent.hpp>
#include <rivet/ddl/generated/HeroLevelUpExplosionEvent.hpp>
#include <rivet/ddl/generated/MeleeHitTakenEvent.hpp>
#include <rivet/ddl/generated/UIOptionsColorPickerOpenEvent.hpp>
#include <rivet/ddl/generated/ProjectileFlewByStartEvent.hpp>
#include <rivet/ddl/generated/GrowthOffEvent.hpp>
#include <rivet/ddl/generated/FinalizeDamageEvent.hpp>
#include <rivet/ddl/generated/PauseArmorChestHoverEvent.hpp>
#include <rivet/ddl/generated/AttachmentAddedEvent.hpp>
#include <rivet/ddl/generated/ValidMagbootSurfaceLostEvent.hpp>
#include <rivet/ddl/generated/ShuffleEndEvent.hpp>
#include <rivet/ddl/generated/HeroLeaveCinematicEvent.hpp>
#include <rivet/ddl/generated/SelfieLightIntensityEvent.hpp>
#include <rivet/ddl/generated/SkateStartEvent.hpp>
#include <rivet/ddl/generated/TriggerPhysicsLauncherEvent.hpp>
#include <rivet/ddl/generated/SceneObjectCollectCompleteEvent.hpp>
#include <rivet/ddl/generated/PassiveShiftInterruptedEvent.hpp>
#include <rivet/ddl/generated/MeleeImpactFrameEvent.hpp>
#include <rivet/ddl/generated/AnimMeleeDamageEvent.hpp>
#include <rivet/ddl/generated/ProtoShotgunTendrilFireEvent.hpp>
#include <rivet/ddl/generated/PhotomodeSaveEvent.hpp>
#include <rivet/ddl/generated/UIOptionsColorPickerCloseEvent.hpp>
#include <rivet/ddl/generated/GainBoltEvent.hpp>
#include <rivet/ddl/generated/PortalOpenEvent.hpp>
#include <rivet/ddl/generated/DamageStateChunkEjectedEvent.hpp>
#include <rivet/ddl/generated/UIWeaponVendorCloseEvent.hpp>
#include <rivet/ddl/generated/ElectrifiedOffEvent.hpp>
#include <rivet/ddl/generated/ShipMagnetFireEvent.hpp>
#include <rivet/ddl/generated/HammerCrankDetachEvent.hpp>
#include <rivet/ddl/generated/StatusEffectVampireDrainEvent.hpp>
#include <rivet/ddl/generated/EnterViewEvent.hpp>
#include <rivet/ddl/generated/SargassoCentipedeMelee.hpp>
#include <rivet/ddl/generated/BoltCrankTargetReset.hpp>
#include <rivet/ddl/generated/JointCrawlerStopEvent.hpp>
#include <rivet/ddl/generated/StringMessageEvent.hpp>
#include <rivet/ddl/generated/BotIdlingEvent.hpp>
#include <rivet/ddl/generated/StatusEffectCloningEvent.hpp>
#include <rivet/ddl/generated/StopBlockingEvent.hpp>
#include <rivet/ddl/generated/MissionObjectiveDeactivatedEvent.hpp>
#include <rivet/ddl/generated/AnimLookChangeEvent.hpp>
#include <rivet/ddl/generated/GrindOffEvent.hpp>
#include <rivet/ddl/generated/VisualFxKillEvent.hpp>
#include <rivet/ddl/generated/OnStartOpenEvent.hpp>
#include <rivet/ddl/generated/MagnaMissileMagnetExplodeEvent.hpp>
#include <rivet/ddl/generated/ShipMagnetNoTransCollectEvent.hpp>
#include <rivet/ddl/generated/DimensionalPulseStartEvent.hpp>
#include <rivet/ddl/generated/MagbootEndEvent.hpp> 

#include <rivet/ddl/generated/EventBase.hpp>

namespace rivet::ddl::generated {
	EventBase::EventBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Frame = serialized->get_uint32(Frame_type_id, 0);
		SenderHandle = serialized->get_uint32(SenderHandle_type_id, 0);
		TrackedNameHash = serialized->get_uint32(TrackedNameHash_type_id, 0);
		EventLocatorHash = serialized->get_uint32(EventLocatorHash_type_id, 0);
		SourceAnimDriverNameHash = serialized->get_uint32(SourceAnimDriverNameHash_type_id, 0);
		SourceAnimDriverHandle = serialized->get_uint32(SourceAnimDriverHandle_type_id, 0);
		Orientation = serialized->unwrap_into<rivet::ddl::generated::DDLTransform>(Orientation_type_id);
		RequireActivated = serialized->get_uint8(RequireActivated_type_id, 1); 
	}

	[[nodiscard]] auto
	EventBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	EventBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EventBase> {
		if (incoming_type_id == EventBase::type_id) {
			return std::make_shared<EventBase>(serialized);
		}

		auto HeroLevelUpEndEvent_ptr = HeroLevelUpEndEvent::from_substruct(incoming_type_id, serialized);
		if (HeroLevelUpEndEvent_ptr != nullptr) {
			return HeroLevelUpEndEvent_ptr;
		}

		auto PauseTabOpenedDevstatsEvent_ptr = PauseTabOpenedDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (PauseTabOpenedDevstatsEvent_ptr != nullptr) {
			return PauseTabOpenedDevstatsEvent_ptr;
		}

		auto VaultEndEvent_ptr = VaultEndEvent::from_substruct(incoming_type_id, serialized);
		if (VaultEndEvent_ptr != nullptr) {
			return VaultEndEvent_ptr;
		}

		auto ClankPuzzleVolumeInteractEventBase_ptr = ClankPuzzleVolumeInteractEventBase::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeInteractEventBase_ptr != nullptr) {
			return ClankPuzzleVolumeInteractEventBase_ptr;
		}

		auto PreExplodeHideEvent_ptr = PreExplodeHideEvent::from_substruct(incoming_type_id, serialized);
		if (PreExplodeHideEvent_ptr != nullptr) {
			return PreExplodeHideEvent_ptr;
		}

		auto AnimDismountEvent_ptr = AnimDismountEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDismountEvent_ptr != nullptr) {
			return AnimDismountEvent_ptr;
		}

		auto DimensionalPulseTargetStartEvent_ptr = DimensionalPulseTargetStartEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetStartEvent_ptr != nullptr) {
			return DimensionalPulseTargetStartEvent_ptr;
		}

		auto CinePortalZipLineEnd_ptr = CinePortalZipLineEnd::from_substruct(incoming_type_id, serialized);
		if (CinePortalZipLineEnd_ptr != nullptr) {
			return CinePortalZipLineEnd_ptr;
		}

		auto FlyerPickupStartEvent_ptr = FlyerPickupStartEvent::from_substruct(incoming_type_id, serialized);
		if (FlyerPickupStartEvent_ptr != nullptr) {
			return FlyerPickupStartEvent_ptr;
		}

		auto WeaponFiringStoppedEvent_ptr = WeaponFiringStoppedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponFiringStoppedEvent_ptr != nullptr) {
			return WeaponFiringStoppedEvent_ptr;
		}

		auto DevstatsSegmentMappingEvent_ptr = DevstatsSegmentMappingEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsSegmentMappingEvent_ptr != nullptr) {
			return DevstatsSegmentMappingEvent_ptr;
		}

		auto GasMaskUnequippedEvent_ptr = GasMaskUnequippedEvent::from_substruct(incoming_type_id, serialized);
		if (GasMaskUnequippedEvent_ptr != nullptr) {
			return GasMaskUnequippedEvent_ptr;
		}

		auto ElementalBoneEffectEvent_ptr = ElementalBoneEffectEvent::from_substruct(incoming_type_id, serialized);
		if (ElementalBoneEffectEvent_ptr != nullptr) {
			return ElementalBoneEffectEvent_ptr;
		}

		auto PickupActiveEvent_ptr = PickupActiveEvent::from_substruct(incoming_type_id, serialized);
		if (PickupActiveEvent_ptr != nullptr) {
			return PickupActiveEvent_ptr;
		}

		auto DashAttackDamageEvent_ptr = DashAttackDamageEvent::from_substruct(incoming_type_id, serialized);
		if (DashAttackDamageEvent_ptr != nullptr) {
			return DashAttackDamageEvent_ptr;
		}

		auto MeleeChargeStartEvent_ptr = MeleeChargeStartEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeChargeStartEvent_ptr != nullptr) {
			return MeleeChargeStartEvent_ptr;
		}

		auto UIHeroOfferActivateControlGroupEvent_ptr = UIHeroOfferActivateControlGroupEvent::from_substruct(incoming_type_id, serialized);
		if (UIHeroOfferActivateControlGroupEvent_ptr != nullptr) {
			return UIHeroOfferActivateControlGroupEvent_ptr;
		}

		auto PickupShimmerActiveEvent_ptr = PickupShimmerActiveEvent::from_substruct(incoming_type_id, serialized);
		if (PickupShimmerActiveEvent_ptr != nullptr) {
			return PickupShimmerActiveEvent_ptr;
		}

		auto UIMenuForwardEvent_ptr = UIMenuForwardEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuForwardEvent_ptr != nullptr) {
			return UIMenuForwardEvent_ptr;
		}

		auto FriendTradingCardsRetrievedEvent_ptr = FriendTradingCardsRetrievedEvent::from_substruct(incoming_type_id, serialized);
		if (FriendTradingCardsRetrievedEvent_ptr != nullptr) {
			return FriendTradingCardsRetrievedEvent_ptr;
		}

		auto UserEquippedWeaponFXOnEvent_ptr = UserEquippedWeaponFXOnEvent::from_substruct(incoming_type_id, serialized);
		if (UserEquippedWeaponFXOnEvent_ptr != nullptr) {
			return UserEquippedWeaponFXOnEvent_ptr;
		}

		auto HeroSprintStopEvent_ptr = HeroSprintStopEvent::from_substruct(incoming_type_id, serialized);
		if (HeroSprintStopEvent_ptr != nullptr) {
			return HeroSprintStopEvent_ptr;
		}

		auto GadgetItemAddedEvent_ptr = GadgetItemAddedEvent::from_substruct(incoming_type_id, serialized);
		if (GadgetItemAddedEvent_ptr != nullptr) {
			return GadgetItemAddedEvent_ptr;
		}

		auto ProjectileBeamStartEvent_ptr = ProjectileBeamStartEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileBeamStartEvent_ptr != nullptr) {
			return ProjectileBeamStartEvent_ptr;
		}

		auto SargassoCentipedeFlyOverEnd_ptr = SargassoCentipedeFlyOverEnd::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeFlyOverEnd_ptr != nullptr) {
			return SargassoCentipedeFlyOverEnd_ptr;
		}

		auto MagnaMissileMagnetImplodeEvent_ptr = MagnaMissileMagnetImplodeEvent::from_substruct(incoming_type_id, serialized);
		if (MagnaMissileMagnetImplodeEvent_ptr != nullptr) {
			return MagnaMissileMagnetImplodeEvent_ptr;
		}

		auto LaserSweepAttackEndEvent_ptr = LaserSweepAttackEndEvent::from_substruct(incoming_type_id, serialized);
		if (LaserSweepAttackEndEvent_ptr != nullptr) {
			return LaserSweepAttackEndEvent_ptr;
		}

		auto AnimAwarenessChangedEvent_ptr = AnimAwarenessChangedEvent::from_substruct(incoming_type_id, serialized);
		if (AnimAwarenessChangedEvent_ptr != nullptr) {
			return AnimAwarenessChangedEvent_ptr;
		}

		auto BreakableDestroyedEvent_ptr = BreakableDestroyedEvent::from_substruct(incoming_type_id, serialized);
		if (BreakableDestroyedEvent_ptr != nullptr) {
			return BreakableDestroyedEvent_ptr;
		}

		auto Cinematic2CameraPosessionChangeEvent_ptr = Cinematic2CameraPosessionChangeEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2CameraPosessionChangeEvent_ptr != nullptr) {
			return Cinematic2CameraPosessionChangeEvent_ptr;
		}

		auto SuperBounceEvent_ptr = SuperBounceEvent::from_substruct(incoming_type_id, serialized);
		if (SuperBounceEvent_ptr != nullptr) {
			return SuperBounceEvent_ptr;
		}

		auto AudioHordeStartEvent_ptr = AudioHordeStartEvent::from_substruct(incoming_type_id, serialized);
		if (AudioHordeStartEvent_ptr != nullptr) {
			return AudioHordeStartEvent_ptr;
		}

		auto SyncedAnimOrientationHintEvent_ptr = SyncedAnimOrientationHintEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimOrientationHintEvent_ptr != nullptr) {
			return SyncedAnimOrientationHintEvent_ptr;
		}

		auto AimModWalkToTargetLockAimEvent_ptr = AimModWalkToTargetLockAimEvent::from_substruct(incoming_type_id, serialized);
		if (AimModWalkToTargetLockAimEvent_ptr != nullptr) {
			return AimModWalkToTargetLockAimEvent_ptr;
		}

		auto UIWeaponSelectOpenEvent_ptr = UIWeaponSelectOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponSelectOpenEvent_ptr != nullptr) {
			return UIWeaponSelectOpenEvent_ptr;
		}

		auto FrozenWhackedEvent_ptr = FrozenWhackedEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenWhackedEvent_ptr != nullptr) {
			return FrozenWhackedEvent_ptr;
		}

		auto DrNefariousShieldActivationAnimStartEvent_ptr = DrNefariousShieldActivationAnimStartEvent::from_substruct(incoming_type_id, serialized);
		if (DrNefariousShieldActivationAnimStartEvent_ptr != nullptr) {
			return DrNefariousShieldActivationAnimStartEvent_ptr;
		}

		auto DevstatsOpenWorldTaskCompletedEvent_ptr = DevstatsOpenWorldTaskCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsOpenWorldTaskCompletedEvent_ptr != nullptr) {
			return DevstatsOpenWorldTaskCompletedEvent_ptr;
		}

		auto AnimPhotoEvent_ptr = AnimPhotoEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPhotoEvent_ptr != nullptr) {
			return AnimPhotoEvent_ptr;
		}

		auto SyncedAnimStartRotEvent_ptr = SyncedAnimStartRotEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimStartRotEvent_ptr != nullptr) {
			return SyncedAnimStartRotEvent_ptr;
		}

		auto ParachuteOnEvent_ptr = ParachuteOnEvent::from_substruct(incoming_type_id, serialized);
		if (ParachuteOnEvent_ptr != nullptr) {
			return ParachuteOnEvent_ptr;
		}

		auto ShieldImpactReactionEvent_ptr = ShieldImpactReactionEvent::from_substruct(incoming_type_id, serialized);
		if (ShieldImpactReactionEvent_ptr != nullptr) {
			return ShieldImpactReactionEvent_ptr;
		}

		auto AnimDeathExplosionEvent_ptr = AnimDeathExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDeathExplosionEvent_ptr != nullptr) {
			return AnimDeathExplosionEvent_ptr;
		}

		auto MeleeChargeEndEvent_ptr = MeleeChargeEndEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeChargeEndEvent_ptr != nullptr) {
			return MeleeChargeEndEvent_ptr;
		}

		auto PickupCompletedEvent_ptr = PickupCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (PickupCompletedEvent_ptr != nullptr) {
			return PickupCompletedEvent_ptr;
		}

		auto VehicleReachedEndEvent_ptr = VehicleReachedEndEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleReachedEndEvent_ptr != nullptr) {
			return VehicleReachedEndEvent_ptr;
		}

		auto LaserBeamSpawnerSpawnShotEvent_ptr = LaserBeamSpawnerSpawnShotEvent::from_substruct(incoming_type_id, serialized);
		if (LaserBeamSpawnerSpawnShotEvent_ptr != nullptr) {
			return LaserBeamSpawnerSpawnShotEvent_ptr;
		}

		auto DodgeStartEvent_ptr = DodgeStartEvent::from_substruct(incoming_type_id, serialized);
		if (DodgeStartEvent_ptr != nullptr) {
			return DodgeStartEvent_ptr;
		}

		auto BlizonShiftImpactEvent_ptr = BlizonShiftImpactEvent::from_substruct(incoming_type_id, serialized);
		if (BlizonShiftImpactEvent_ptr != nullptr) {
			return BlizonShiftImpactEvent_ptr;
		}

		auto SpawnedSpawnedEvent_ptr = SpawnedSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (SpawnedSpawnedEvent_ptr != nullptr) {
			return SpawnedSpawnedEvent_ptr;
		}

		auto SyncedAnimConnectTransEvent_ptr = SyncedAnimConnectTransEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimConnectTransEvent_ptr != nullptr) {
			return SyncedAnimConnectTransEvent_ptr;
		}

		auto StartPlaythroughDevstatsEvent_ptr = StartPlaythroughDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (StartPlaythroughDevstatsEvent_ptr != nullptr) {
			return StartPlaythroughDevstatsEvent_ptr;
		}

		auto RagdollSettledEvent_ptr = RagdollSettledEvent::from_substruct(incoming_type_id, serialized);
		if (RagdollSettledEvent_ptr != nullptr) {
			return RagdollSettledEvent_ptr;
		}

		auto UIWeaponVendorPurchaseHoldStopEvent_ptr = UIWeaponVendorPurchaseHoldStopEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorPurchaseHoldStopEvent_ptr != nullptr) {
			return UIWeaponVendorPurchaseHoldStopEvent_ptr;
		}

		auto PauseMenuClosedDevstatsEvent_ptr = PauseMenuClosedDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuClosedDevstatsEvent_ptr != nullptr) {
			return PauseMenuClosedDevstatsEvent_ptr;
		}

		auto WeaponAddedEvent_ptr = WeaponAddedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponAddedEvent_ptr != nullptr) {
			return WeaponAddedEvent_ptr;
		}

		auto ClankPuzzleRecallOrbStartEvent_ptr = ClankPuzzleRecallOrbStartEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleRecallOrbStartEvent_ptr != nullptr) {
			return ClankPuzzleRecallOrbStartEvent_ptr;
		}

		auto UIWeaponVendorTreeCloseEvent_ptr = UIWeaponVendorTreeCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorTreeCloseEvent_ptr != nullptr) {
			return UIWeaponVendorTreeCloseEvent_ptr;
		}

		auto UIArenaMenuFailEvent_ptr = UIArenaMenuFailEvent::from_substruct(incoming_type_id, serialized);
		if (UIArenaMenuFailEvent_ptr != nullptr) {
			return UIArenaMenuFailEvent_ptr;
		}

		auto HammerCrankLightOnEvent_ptr = HammerCrankLightOnEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankLightOnEvent_ptr != nullptr) {
			return HammerCrankLightOnEvent_ptr;
		}

		auto PortalZipDeactivated_ptr = PortalZipDeactivated::from_substruct(incoming_type_id, serialized);
		if (PortalZipDeactivated_ptr != nullptr) {
			return PortalZipDeactivated_ptr;
		}

		auto PauseWeaponsRemapTabEvent_ptr = PauseWeaponsRemapTabEvent::from_substruct(incoming_type_id, serialized);
		if (PauseWeaponsRemapTabEvent_ptr != nullptr) {
			return PauseWeaponsRemapTabEvent_ptr;
		}

		auto RYNOPortalShotActivatedEvent_ptr = RYNOPortalShotActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOPortalShotActivatedEvent_ptr != nullptr) {
			return RYNOPortalShotActivatedEvent_ptr;
		}

		auto BotStateLungeStartEvent_ptr = BotStateLungeStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotStateLungeStartEvent_ptr != nullptr) {
			return BotStateLungeStartEvent_ptr;
		}

		auto ZurkieJukeboxExitEvent_ptr = ZurkieJukeboxExitEvent::from_substruct(incoming_type_id, serialized);
		if (ZurkieJukeboxExitEvent_ptr != nullptr) {
			return ZurkieJukeboxExitEvent_ptr;
		}

		auto UIWeaponVendorPurchaseHoldStartEvent_ptr = UIWeaponVendorPurchaseHoldStartEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorPurchaseHoldStartEvent_ptr != nullptr) {
			return UIWeaponVendorPurchaseHoldStartEvent_ptr;
		}

		auto ClankPuzzleVolumeTargetExitEvent_ptr = ClankPuzzleVolumeTargetExitEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeTargetExitEvent_ptr != nullptr) {
			return ClankPuzzleVolumeTargetExitEvent_ptr;
		}

		auto UIWeaponSelectStickHideEvent_ptr = UIWeaponSelectStickHideEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponSelectStickHideEvent_ptr != nullptr) {
			return UIWeaponSelectStickHideEvent_ptr;
		}

		auto CancelAttackEvent_ptr = CancelAttackEvent::from_substruct(incoming_type_id, serialized);
		if (CancelAttackEvent_ptr != nullptr) {
			return CancelAttackEvent_ptr;
		}

		auto ThrowerODReleaseEvent_ptr = ThrowerODReleaseEvent::from_substruct(incoming_type_id, serialized);
		if (ThrowerODReleaseEvent_ptr != nullptr) {
			return ThrowerODReleaseEvent_ptr;
		}

		auto AllowNewNavClueUserEvent_ptr = AllowNewNavClueUserEvent::from_substruct(incoming_type_id, serialized);
		if (AllowNewNavClueUserEvent_ptr != nullptr) {
			return AllowNewNavClueUserEvent_ptr;
		}

		auto BehaviorUseActivityClueStartedEvent_ptr = BehaviorUseActivityClueStartedEvent::from_substruct(incoming_type_id, serialized);
		if (BehaviorUseActivityClueStartedEvent_ptr != nullptr) {
			return BehaviorUseActivityClueStartedEvent_ptr;
		}

		auto FinaleNefMechDamageStage1Event_ptr = FinaleNefMechDamageStage1Event::from_substruct(incoming_type_id, serialized);
		if (FinaleNefMechDamageStage1Event_ptr != nullptr) {
			return FinaleNefMechDamageStage1Event_ptr;
		}

		auto ProtonSeekerAccelerateEvent_ptr = ProtonSeekerAccelerateEvent::from_substruct(incoming_type_id, serialized);
		if (ProtonSeekerAccelerateEvent_ptr != nullptr) {
			return ProtonSeekerAccelerateEvent_ptr;
		}

		auto BeetleTrailStartEvent_ptr = BeetleTrailStartEvent::from_substruct(incoming_type_id, serialized);
		if (BeetleTrailStartEvent_ptr != nullptr) {
			return BeetleTrailStartEvent_ptr;
		}

		auto UIPlanetMenuCloseEvent_ptr = UIPlanetMenuCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIPlanetMenuCloseEvent_ptr != nullptr) {
			return UIPlanetMenuCloseEvent_ptr;
		}

		auto TurningStopEvent_ptr = TurningStopEvent::from_substruct(incoming_type_id, serialized);
		if (TurningStopEvent_ptr != nullptr) {
			return TurningStopEvent_ptr;
		}

		auto LeftBroadphaseEvent_ptr = LeftBroadphaseEvent::from_substruct(incoming_type_id, serialized);
		if (LeftBroadphaseEvent_ptr != nullptr) {
			return LeftBroadphaseEvent_ptr;
		}

		auto OnDoneEvent_ptr = OnDoneEvent::from_substruct(incoming_type_id, serialized);
		if (OnDoneEvent_ptr != nullptr) {
			return OnDoneEvent_ptr;
		}

		auto BotShootLaserStartWarningEvent_ptr = BotShootLaserStartWarningEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserStartWarningEvent_ptr != nullptr) {
			return BotShootLaserStartWarningEvent_ptr;
		}

		auto MeleeComboBeginEvent_ptr = MeleeComboBeginEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeComboBeginEvent_ptr != nullptr) {
			return MeleeComboBeginEvent_ptr;
		}

		auto PauseMenuHideEvent_ptr = PauseMenuHideEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuHideEvent_ptr != nullptr) {
			return PauseMenuHideEvent_ptr;
		}

		auto TopiarySprinklerPlantedEvent_ptr = TopiarySprinklerPlantedEvent::from_substruct(incoming_type_id, serialized);
		if (TopiarySprinklerPlantedEvent_ptr != nullptr) {
			return TopiarySprinklerPlantedEvent_ptr;
		}

		auto LoadedZoneDevstatsEvent_ptr = LoadedZoneDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (LoadedZoneDevstatsEvent_ptr != nullptr) {
			return LoadedZoneDevstatsEvent_ptr;
		}

		auto ShieldActivatedEvent_ptr = ShieldActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (ShieldActivatedEvent_ptr != nullptr) {
			return ShieldActivatedEvent_ptr;
		}

		auto CineCameraEnableYawPitchEvent_ptr = CineCameraEnableYawPitchEvent::from_substruct(incoming_type_id, serialized);
		if (CineCameraEnableYawPitchEvent_ptr != nullptr) {
			return CineCameraEnableYawPitchEvent_ptr;
		}

		auto ResetActorEvent_ptr = ResetActorEvent::from_substruct(incoming_type_id, serialized);
		if (ResetActorEvent_ptr != nullptr) {
			return ResetActorEvent_ptr;
		}

		auto LightningRodChargeUpBeginEvent_ptr = LightningRodChargeUpBeginEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodChargeUpBeginEvent_ptr != nullptr) {
			return LightningRodChargeUpBeginEvent_ptr;
		}

		auto ProjectileLockingOnEvent_ptr = ProjectileLockingOnEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileLockingOnEvent_ptr != nullptr) {
			return ProjectileLockingOnEvent_ptr;
		}

		auto CameraShakeAnimEvent_ptr = CameraShakeAnimEvent::from_substruct(incoming_type_id, serialized);
		if (CameraShakeAnimEvent_ptr != nullptr) {
			return CameraShakeAnimEvent_ptr;
		}

		auto MagbootLaunchStartEvent_ptr = MagbootLaunchStartEvent::from_substruct(incoming_type_id, serialized);
		if (MagbootLaunchStartEvent_ptr != nullptr) {
			return MagbootLaunchStartEvent_ptr;
		}

		auto ClankPackHydropackStopEvent_ptr = ClankPackHydropackStopEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHydropackStopEvent_ptr != nullptr) {
			return ClankPackHydropackStopEvent_ptr;
		}

		auto SwingshotActiveEndEvent_ptr = SwingshotActiveEndEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotActiveEndEvent_ptr != nullptr) {
			return SwingshotActiveEndEvent_ptr;
		}

		auto GroundDashEndEvent_ptr = GroundDashEndEvent::from_substruct(incoming_type_id, serialized);
		if (GroundDashEndEvent_ptr != nullptr) {
			return GroundDashEndEvent_ptr;
		}

		auto BotGuideDestChangedEvent_ptr = BotGuideDestChangedEvent::from_substruct(incoming_type_id, serialized);
		if (BotGuideDestChangedEvent_ptr != nullptr) {
			return BotGuideDestChangedEvent_ptr;
		}

		auto ConduitScriptEvent_ptr = ConduitScriptEvent::from_substruct(incoming_type_id, serialized);
		if (ConduitScriptEvent_ptr != nullptr) {
			return ConduitScriptEvent_ptr;
		}

		auto IncinerateStartEvent_ptr = IncinerateStartEvent::from_substruct(incoming_type_id, serialized);
		if (IncinerateStartEvent_ptr != nullptr) {
			return IncinerateStartEvent_ptr;
		}

		auto MountBrakeEvent_ptr = MountBrakeEvent::from_substruct(incoming_type_id, serialized);
		if (MountBrakeEvent_ptr != nullptr) {
			return MountBrakeEvent_ptr;
		}

		auto DisplayHealthValuesOn_ptr = DisplayHealthValuesOn::from_substruct(incoming_type_id, serialized);
		if (DisplayHealthValuesOn_ptr != nullptr) {
			return DisplayHealthValuesOn_ptr;
		}

		auto HeroFootIKOnEvent_ptr = HeroFootIKOnEvent::from_substruct(incoming_type_id, serialized);
		if (HeroFootIKOnEvent_ptr != nullptr) {
			return HeroFootIKOnEvent_ptr;
		}

		auto VolcanicEruptorBurstOnEvent_ptr = VolcanicEruptorBurstOnEvent::from_substruct(incoming_type_id, serialized);
		if (VolcanicEruptorBurstOnEvent_ptr != nullptr) {
			return VolcanicEruptorBurstOnEvent_ptr;
		}

		auto TopiarySprinklerDestroyFlowerEvent_ptr = TopiarySprinklerDestroyFlowerEvent::from_substruct(incoming_type_id, serialized);
		if (TopiarySprinklerDestroyFlowerEvent_ptr != nullptr) {
			return TopiarySprinklerDestroyFlowerEvent_ptr;
		}

		auto MagShieldFullImpactEvent_ptr = MagShieldFullImpactEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldFullImpactEvent_ptr != nullptr) {
			return MagShieldFullImpactEvent_ptr;
		}

		auto TriggerOnEvent_ptr = TriggerOnEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerOnEvent_ptr != nullptr) {
			return TriggerOnEvent_ptr;
		}

		auto BotWeaponChargeEnd_ptr = BotWeaponChargeEnd::from_substruct(incoming_type_id, serialized);
		if (BotWeaponChargeEnd_ptr != nullptr) {
			return BotWeaponChargeEnd_ptr;
		}

		auto DevstatsAccessibilitySetShortcutEvent_ptr = DevstatsAccessibilitySetShortcutEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsAccessibilitySetShortcutEvent_ptr != nullptr) {
			return DevstatsAccessibilitySetShortcutEvent_ptr;
		}

		auto VanityHelmetOnEvent_ptr = VanityHelmetOnEvent::from_substruct(incoming_type_id, serialized);
		if (VanityHelmetOnEvent_ptr != nullptr) {
			return VanityHelmetOnEvent_ptr;
		}

		auto OnLeaveEvent_ptr = OnLeaveEvent::from_substruct(incoming_type_id, serialized);
		if (OnLeaveEvent_ptr != nullptr) {
			return OnLeaveEvent_ptr;
		}

		auto GadgetItemRemovedEvent_ptr = GadgetItemRemovedEvent::from_substruct(incoming_type_id, serialized);
		if (GadgetItemRemovedEvent_ptr != nullptr) {
			return GadgetItemRemovedEvent_ptr;
		}

		auto UnderwaterBaseJuiceSpawnedEvent_ptr = UnderwaterBaseJuiceSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (UnderwaterBaseJuiceSpawnedEvent_ptr != nullptr) {
			return UnderwaterBaseJuiceSpawnedEvent_ptr;
		}

		auto BreakableUnpooledDeactivateEvent_ptr = BreakableUnpooledDeactivateEvent::from_substruct(incoming_type_id, serialized);
		if (BreakableUnpooledDeactivateEvent_ptr != nullptr) {
			return BreakableUnpooledDeactivateEvent_ptr;
		}

		auto AnimReplayFrameEvent_ptr = AnimReplayFrameEvent::from_substruct(incoming_type_id, serialized);
		if (AnimReplayFrameEvent_ptr != nullptr) {
			return AnimReplayFrameEvent_ptr;
		}

		auto ManglerShockwaveSpawnEvent_ptr = ManglerShockwaveSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerShockwaveSpawnEvent_ptr != nullptr) {
			return ManglerShockwaveSpawnEvent_ptr;
		}

		auto DialogFinishedEvent_ptr = DialogFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (DialogFinishedEvent_ptr != nullptr) {
			return DialogFinishedEvent_ptr;
		}

		auto UIMenuBackEvent_ptr = UIMenuBackEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuBackEvent_ptr != nullptr) {
			return UIMenuBackEvent_ptr;
		}

		auto DimensionalPulseTargetHitEvent_ptr = DimensionalPulseTargetHitEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetHitEvent_ptr != nullptr) {
			return DimensionalPulseTargetHitEvent_ptr;
		}

		auto HeroPassiveShiftTransitionEndEvent_ptr = HeroPassiveShiftTransitionEndEvent::from_substruct(incoming_type_id, serialized);
		if (HeroPassiveShiftTransitionEndEvent_ptr != nullptr) {
			return HeroPassiveShiftTransitionEndEvent_ptr;
		}

		auto BotDodgeTriggeredEvent_ptr = BotDodgeTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (BotDodgeTriggeredEvent_ptr != nullptr) {
			return BotDodgeTriggeredEvent_ptr;
		}

		auto AnimGrenadeDropEvent_ptr = AnimGrenadeDropEvent::from_substruct(incoming_type_id, serialized);
		if (AnimGrenadeDropEvent_ptr != nullptr) {
			return AnimGrenadeDropEvent_ptr;
		}

		auto PauseMenuRotateStartEvent_ptr = PauseMenuRotateStartEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuRotateStartEvent_ptr != nullptr) {
			return PauseMenuRotateStartEvent_ptr;
		}

		auto KamehamehaTargetFirstImpactEvent_ptr = KamehamehaTargetFirstImpactEvent::from_substruct(incoming_type_id, serialized);
		if (KamehamehaTargetFirstImpactEvent_ptr != nullptr) {
			return KamehamehaTargetFirstImpactEvent_ptr;
		}

		auto ChildDiedEvent_ptr = ChildDiedEvent::from_substruct(incoming_type_id, serialized);
		if (ChildDiedEvent_ptr != nullptr) {
			return ChildDiedEvent_ptr;
		}

		auto OnLeaveTurretEvent_ptr = OnLeaveTurretEvent::from_substruct(incoming_type_id, serialized);
		if (OnLeaveTurretEvent_ptr != nullptr) {
			return OnLeaveTurretEvent_ptr;
		}

		auto TriggeredBrokeEvent_ptr = TriggeredBrokeEvent::from_substruct(incoming_type_id, serialized);
		if (TriggeredBrokeEvent_ptr != nullptr) {
			return TriggeredBrokeEvent_ptr;
		}

		auto HoverbootKickReadyEvent_ptr = HoverbootKickReadyEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootKickReadyEvent_ptr != nullptr) {
			return HoverbootKickReadyEvent_ptr;
		}

		auto OnElapsedEvent_ptr = OnElapsedEvent::from_substruct(incoming_type_id, serialized);
		if (OnElapsedEvent_ptr != nullptr) {
			return OnElapsedEvent_ptr;
		}

		auto PlatformStartMotionEvent_ptr = PlatformStartMotionEvent::from_substruct(incoming_type_id, serialized);
		if (PlatformStartMotionEvent_ptr != nullptr) {
			return PlatformStartMotionEvent_ptr;
		}

		auto HexapodWeaponChargeUpCompletedEvent_ptr = HexapodWeaponChargeUpCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (HexapodWeaponChargeUpCompletedEvent_ptr != nullptr) {
			return HexapodWeaponChargeUpCompletedEvent_ptr;
		}

		auto FinaleHeartPartDestroyedEvent_ptr = FinaleHeartPartDestroyedEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleHeartPartDestroyedEvent_ptr != nullptr) {
			return FinaleHeartPartDestroyedEvent_ptr;
		}

		auto DisableEvent_ptr = DisableEvent::from_substruct(incoming_type_id, serialized);
		if (DisableEvent_ptr != nullptr) {
			return DisableEvent_ptr;
		}

		auto MrFunGuyMaxSpawnedEvent_ptr = MrFunGuyMaxSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (MrFunGuyMaxSpawnedEvent_ptr != nullptr) {
			return MrFunGuyMaxSpawnedEvent_ptr;
		}

		auto InteractStartedEvent_ptr = InteractStartedEvent::from_substruct(incoming_type_id, serialized);
		if (InteractStartedEvent_ptr != nullptr) {
			return InteractStartedEvent_ptr;
		}

		auto DamageModifierEvent_ptr = DamageModifierEvent::from_substruct(incoming_type_id, serialized);
		if (DamageModifierEvent_ptr != nullptr) {
			return DamageModifierEvent_ptr;
		}

		auto HeadSpawnedEvent_ptr = HeadSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (HeadSpawnedEvent_ptr != nullptr) {
			return HeadSpawnedEvent_ptr;
		}

		auto PauseMapIconPinEvent_ptr = PauseMapIconPinEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMapIconPinEvent_ptr != nullptr) {
			return PauseMapIconPinEvent_ptr;
		}

		auto ClankWeaponLockMidAirEvent_ptr = ClankWeaponLockMidAirEvent::from_substruct(incoming_type_id, serialized);
		if (ClankWeaponLockMidAirEvent_ptr != nullptr) {
			return ClankWeaponLockMidAirEvent_ptr;
		}

		auto ElectricExplodeEvent_ptr = ElectricExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (ElectricExplodeEvent_ptr != nullptr) {
			return ElectricExplodeEvent_ptr;
		}

		auto HeroHasProtosuitEvent_ptr = HeroHasProtosuitEvent::from_substruct(incoming_type_id, serialized);
		if (HeroHasProtosuitEvent_ptr != nullptr) {
			return HeroHasProtosuitEvent_ptr;
		}

		auto PlasmaSphereDetonateEvent_ptr = PlasmaSphereDetonateEvent::from_substruct(incoming_type_id, serialized);
		if (PlasmaSphereDetonateEvent_ptr != nullptr) {
			return PlasmaSphereDetonateEvent_ptr;
		}

		auto PickupAboutToResetEvent_ptr = PickupAboutToResetEvent::from_substruct(incoming_type_id, serialized);
		if (PickupAboutToResetEvent_ptr != nullptr) {
			return PickupAboutToResetEvent_ptr;
		}

		auto FlewByStopEvent_ptr = FlewByStopEvent::from_substruct(incoming_type_id, serialized);
		if (FlewByStopEvent_ptr != nullptr) {
			return FlewByStopEvent_ptr;
		}

		auto FrozenBreakoutEvent_ptr = FrozenBreakoutEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenBreakoutEvent_ptr != nullptr) {
			return FrozenBreakoutEvent_ptr;
		}

		auto WasHiredEvent_ptr = WasHiredEvent::from_substruct(incoming_type_id, serialized);
		if (WasHiredEvent_ptr != nullptr) {
			return WasHiredEvent_ptr;
		}

		auto WeaponEquippedFXOffEvent_ptr = WeaponEquippedFXOffEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponEquippedFXOffEvent_ptr != nullptr) {
			return WeaponEquippedFXOffEvent_ptr;
		}

		auto SargassoCentipedeMortar_ptr = SargassoCentipedeMortar::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeMortar_ptr != nullptr) {
			return SargassoCentipedeMortar_ptr;
		}

		auto ArachnodroidMissilesLaunched_ptr = ArachnodroidMissilesLaunched::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidMissilesLaunched_ptr != nullptr) {
			return ArachnodroidMissilesLaunched_ptr;
		}

		auto EyeBeamAttackEndEvent_ptr = EyeBeamAttackEndEvent::from_substruct(incoming_type_id, serialized);
		if (EyeBeamAttackEndEvent_ptr != nullptr) {
			return EyeBeamAttackEndEvent_ptr;
		}

		auto ManglerActivateEvent_ptr = ManglerActivateEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerActivateEvent_ptr != nullptr) {
			return ManglerActivateEvent_ptr;
		}

		auto DevstatsPlayerWAMChargeAttackCancelledEvent_ptr = DevstatsPlayerWAMChargeAttackCancelledEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsPlayerWAMChargeAttackCancelledEvent_ptr != nullptr) {
			return DevstatsPlayerWAMChargeAttackCancelledEvent_ptr;
		}

		auto ClankPuzzleRecallOrbEndEvent_ptr = ClankPuzzleRecallOrbEndEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleRecallOrbEndEvent_ptr != nullptr) {
			return ClankPuzzleRecallOrbEndEvent_ptr;
		}

		auto HeroMeleeMoveEvent_ptr = HeroMeleeMoveEvent::from_substruct(incoming_type_id, serialized);
		if (HeroMeleeMoveEvent_ptr != nullptr) {
			return HeroMeleeMoveEvent_ptr;
		}

		auto BehaviorGotoNavQueryFailedEvent_ptr = BehaviorGotoNavQueryFailedEvent::from_substruct(incoming_type_id, serialized);
		if (BehaviorGotoNavQueryFailedEvent_ptr != nullptr) {
			return BehaviorGotoNavQueryFailedEvent_ptr;
		}

		auto ScriptedShotGenericEvent_ptr = ScriptedShotGenericEvent::from_substruct(incoming_type_id, serialized);
		if (ScriptedShotGenericEvent_ptr != nullptr) {
			return ScriptedShotGenericEvent_ptr;
		}

		auto BoltCrankDetachEvent_ptr = BoltCrankDetachEvent::from_substruct(incoming_type_id, serialized);
		if (BoltCrankDetachEvent_ptr != nullptr) {
			return BoltCrankDetachEvent_ptr;
		}

		auto BreakStationaryConnectionsEvent_ptr = BreakStationaryConnectionsEvent::from_substruct(incoming_type_id, serialized);
		if (BreakStationaryConnectionsEvent_ptr != nullptr) {
			return BreakStationaryConnectionsEvent_ptr;
		}

		auto BotDashChargeChargeEndedEvent_ptr = BotDashChargeChargeEndedEvent::from_substruct(incoming_type_id, serialized);
		if (BotDashChargeChargeEndedEvent_ptr != nullptr) {
			return BotDashChargeChargeEndedEvent_ptr;
		}

		auto ProtoGrenadeShardDissolveQuicklyEvent_ptr = ProtoGrenadeShardDissolveQuicklyEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoGrenadeShardDissolveQuicklyEvent_ptr != nullptr) {
			return ProtoGrenadeShardDissolveQuicklyEvent_ptr;
		}

		auto WalkingArchivesSoundEvent_ptr = WalkingArchivesSoundEvent::from_substruct(incoming_type_id, serialized);
		if (WalkingArchivesSoundEvent_ptr != nullptr) {
			return WalkingArchivesSoundEvent_ptr;
		}

		auto OnStartUntriggerEvent_ptr = OnStartUntriggerEvent::from_substruct(incoming_type_id, serialized);
		if (OnStartUntriggerEvent_ptr != nullptr) {
			return OnStartUntriggerEvent_ptr;
		}

		auto BotShootLaserStartAnimEvent_ptr = BotShootLaserStartAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserStartAnimEvent_ptr != nullptr) {
			return BotShootLaserStartAnimEvent_ptr;
		}

		auto ObjectiveStateChangedEvent_ptr = ObjectiveStateChangedEvent::from_substruct(incoming_type_id, serialized);
		if (ObjectiveStateChangedEvent_ptr != nullptr) {
			return ObjectiveStateChangedEvent_ptr;
		}

		auto WeaponLaseringStartEvent_ptr = WeaponLaseringStartEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponLaseringStartEvent_ptr != nullptr) {
			return WeaponLaseringStartEvent_ptr;
		}

		auto SwingshotExtendedEvent_ptr = SwingshotExtendedEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotExtendedEvent_ptr != nullptr) {
			return SwingshotExtendedEvent_ptr;
		}

		auto EyeBeamChargedEndEvent_ptr = EyeBeamChargedEndEvent::from_substruct(incoming_type_id, serialized);
		if (EyeBeamChargedEndEvent_ptr != nullptr) {
			return EyeBeamChargedEndEvent_ptr;
		}

		auto AnimCompleteAutoEvent_ptr = AnimCompleteAutoEvent::from_substruct(incoming_type_id, serialized);
		if (AnimCompleteAutoEvent_ptr != nullptr) {
			return AnimCompleteAutoEvent_ptr;
		}

		auto UIPhotoModeOpenEvent_ptr = UIPhotoModeOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIPhotoModeOpenEvent_ptr != nullptr) {
			return UIPhotoModeOpenEvent_ptr;
		}

		auto PauseArmorSlotSelectEvent_ptr = PauseArmorSlotSelectEvent::from_substruct(incoming_type_id, serialized);
		if (PauseArmorSlotSelectEvent_ptr != nullptr) {
			return PauseArmorSlotSelectEvent_ptr;
		}

		auto GroupEngagedEvent_ptr = GroupEngagedEvent::from_substruct(incoming_type_id, serialized);
		if (GroupEngagedEvent_ptr != nullptr) {
			return GroupEngagedEvent_ptr;
		}

		auto MountBoostLaunchStartEvent_ptr = MountBoostLaunchStartEvent::from_substruct(incoming_type_id, serialized);
		if (MountBoostLaunchStartEvent_ptr != nullptr) {
			return MountBoostLaunchStartEvent_ptr;
		}

		auto PhaseDashBarrierTransitionEvent_ptr = PhaseDashBarrierTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (PhaseDashBarrierTransitionEvent_ptr != nullptr) {
			return PhaseDashBarrierTransitionEvent_ptr;
		}

		auto UIJukeboxMoveEvent_ptr = UIJukeboxMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIJukeboxMoveEvent_ptr != nullptr) {
			return UIJukeboxMoveEvent_ptr;
		}

		auto HeroTargetTrackerResolvedEvent_ptr = HeroTargetTrackerResolvedEvent::from_substruct(incoming_type_id, serialized);
		if (HeroTargetTrackerResolvedEvent_ptr != nullptr) {
			return HeroTargetTrackerResolvedEvent_ptr;
		}

		auto DisplayEnemyHealthBarsOff_ptr = DisplayEnemyHealthBarsOff::from_substruct(incoming_type_id, serialized);
		if (DisplayEnemyHealthBarsOff_ptr != nullptr) {
			return DisplayEnemyHealthBarsOff_ptr;
		}

		auto HeroInteractEvent_ptr = HeroInteractEvent::from_substruct(incoming_type_id, serialized);
		if (HeroInteractEvent_ptr != nullptr) {
			return HeroInteractEvent_ptr;
		}

		auto UnTriggerEvent_ptr = UnTriggerEvent::from_substruct(incoming_type_id, serialized);
		if (UnTriggerEvent_ptr != nullptr) {
			return UnTriggerEvent_ptr;
		}

		auto BotDashChargeIntroStartedEvent_ptr = BotDashChargeIntroStartedEvent::from_substruct(incoming_type_id, serialized);
		if (BotDashChargeIntroStartedEvent_ptr != nullptr) {
			return BotDashChargeIntroStartedEvent_ptr;
		}

		auto AnimOptInLookEvent_ptr = AnimOptInLookEvent::from_substruct(incoming_type_id, serialized);
		if (AnimOptInLookEvent_ptr != nullptr) {
			return AnimOptInLookEvent_ptr;
		}

		auto GolemOnEvent_ptr = GolemOnEvent::from_substruct(incoming_type_id, serialized);
		if (GolemOnEvent_ptr != nullptr) {
			return GolemOnEvent_ptr;
		}

		auto AnimMountFlyGrabStartEvent_ptr = AnimMountFlyGrabStartEvent::from_substruct(incoming_type_id, serialized);
		if (AnimMountFlyGrabStartEvent_ptr != nullptr) {
			return AnimMountFlyGrabStartEvent_ptr;
		}

		auto RegionLoadingEvent_ptr = RegionLoadingEvent::from_substruct(incoming_type_id, serialized);
		if (RegionLoadingEvent_ptr != nullptr) {
			return RegionLoadingEvent_ptr;
		}

		auto InjuredEvent_ptr = InjuredEvent::from_substruct(incoming_type_id, serialized);
		if (InjuredEvent_ptr != nullptr) {
			return InjuredEvent_ptr;
		}

		auto MPALoadedTypesChangedEvent_ptr = MPALoadedTypesChangedEvent::from_substruct(incoming_type_id, serialized);
		if (MPALoadedTypesChangedEvent_ptr != nullptr) {
			return MPALoadedTypesChangedEvent_ptr;
		}

		auto DrawOffEvent_ptr = DrawOffEvent::from_substruct(incoming_type_id, serialized);
		if (DrawOffEvent_ptr != nullptr) {
			return DrawOffEvent_ptr;
		}

		auto BotDeathCompleteEvent_ptr = BotDeathCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (BotDeathCompleteEvent_ptr != nullptr) {
			return BotDeathCompleteEvent_ptr;
		}

		auto LightningRodChargeUpReleaseEvent_ptr = LightningRodChargeUpReleaseEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodChargeUpReleaseEvent_ptr != nullptr) {
			return LightningRodChargeUpReleaseEvent_ptr;
		}

		auto ProtoGrenadeBotExplosionEvent_ptr = ProtoGrenadeBotExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoGrenadeBotExplosionEvent_ptr != nullptr) {
			return ProtoGrenadeBotExplosionEvent_ptr;
		}

		auto HoverStartEvent_ptr = HoverStartEvent::from_substruct(incoming_type_id, serialized);
		if (HoverStartEvent_ptr != nullptr) {
			return HoverStartEvent_ptr;
		}

		auto JumpLandingEvent_ptr = JumpLandingEvent::from_substruct(incoming_type_id, serialized);
		if (JumpLandingEvent_ptr != nullptr) {
			return JumpLandingEvent_ptr;
		}

		auto ThrusterOnEvent_ptr = ThrusterOnEvent::from_substruct(incoming_type_id, serialized);
		if (ThrusterOnEvent_ptr != nullptr) {
			return ThrusterOnEvent_ptr;
		}

		auto DodgeEndEvent_ptr = DodgeEndEvent::from_substruct(incoming_type_id, serialized);
		if (DodgeEndEvent_ptr != nullptr) {
			return DodgeEndEvent_ptr;
		}

		auto ThrowObjectEvent_ptr = ThrowObjectEvent::from_substruct(incoming_type_id, serialized);
		if (ThrowObjectEvent_ptr != nullptr) {
			return ThrowObjectEvent_ptr;
		}

		auto UIFrontEndColorPickerOpenEvent_ptr = UIFrontEndColorPickerOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndColorPickerOpenEvent_ptr != nullptr) {
			return UIFrontEndColorPickerOpenEvent_ptr;
		}

		auto HealthBarShowEvent_ptr = HealthBarShowEvent::from_substruct(incoming_type_id, serialized);
		if (HealthBarShowEvent_ptr != nullptr) {
			return HealthBarShowEvent_ptr;
		}

		auto OnDetachEvent_ptr = OnDetachEvent::from_substruct(incoming_type_id, serialized);
		if (OnDetachEvent_ptr != nullptr) {
			return OnDetachEvent_ptr;
		}

		auto SweepChaseSpawnEvent_ptr = SweepChaseSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (SweepChaseSpawnEvent_ptr != nullptr) {
			return SweepChaseSpawnEvent_ptr;
		}

		auto AnimMountFlyGrabEndEvent_ptr = AnimMountFlyGrabEndEvent::from_substruct(incoming_type_id, serialized);
		if (AnimMountFlyGrabEndEvent_ptr != nullptr) {
			return AnimMountFlyGrabEndEvent_ptr;
		}

		auto ThumperActivateEvent_ptr = ThumperActivateEvent::from_substruct(incoming_type_id, serialized);
		if (ThumperActivateEvent_ptr != nullptr) {
			return ThumperActivateEvent_ptr;
		}

		auto VendorAcceptEvent_ptr = VendorAcceptEvent::from_substruct(incoming_type_id, serialized);
		if (VendorAcceptEvent_ptr != nullptr) {
			return VendorAcceptEvent_ptr;
		}

		auto GetTeamEvent_ptr = GetTeamEvent::from_substruct(incoming_type_id, serialized);
		if (GetTeamEvent_ptr != nullptr) {
			return GetTeamEvent_ptr;
		}

		auto UIFrontEndOptionsChangeEvent_ptr = UIFrontEndOptionsChangeEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndOptionsChangeEvent_ptr != nullptr) {
			return UIFrontEndOptionsChangeEvent_ptr;
		}

		auto ShotSpawnerFireEvent_ptr = ShotSpawnerFireEvent::from_substruct(incoming_type_id, serialized);
		if (ShotSpawnerFireEvent_ptr != nullptr) {
			return ShotSpawnerFireEvent_ptr;
		}

		auto EngageEvent_ptr = EngageEvent::from_substruct(incoming_type_id, serialized);
		if (EngageEvent_ptr != nullptr) {
			return EngageEvent_ptr;
		}

		auto WeaponBurstCompleteEvent_ptr = WeaponBurstCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponBurstCompleteEvent_ptr != nullptr) {
			return WeaponBurstCompleteEvent_ptr;
		}

		auto EnableEvent_ptr = EnableEvent::from_substruct(incoming_type_id, serialized);
		if (EnableEvent_ptr != nullptr) {
			return EnableEvent_ptr;
		}

		auto DevstatsEmergentVOPlayedEvent_ptr = DevstatsEmergentVOPlayedEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsEmergentVOPlayedEvent_ptr != nullptr) {
			return DevstatsEmergentVOPlayedEvent_ptr;
		}

		auto UITutorialAdvanceEvent_ptr = UITutorialAdvanceEvent::from_substruct(incoming_type_id, serialized);
		if (UITutorialAdvanceEvent_ptr != nullptr) {
			return UITutorialAdvanceEvent_ptr;
		}

		auto BotDashChargeDoneEvent_ptr = BotDashChargeDoneEvent::from_substruct(incoming_type_id, serialized);
		if (BotDashChargeDoneEvent_ptr != nullptr) {
			return BotDashChargeDoneEvent_ptr;
		}

		auto HeroPortalTransitionEvent_ptr = HeroPortalTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (HeroPortalTransitionEvent_ptr != nullptr) {
			return HeroPortalTransitionEvent_ptr;
		}

		auto HitReactEndEvent_ptr = HitReactEndEvent::from_substruct(incoming_type_id, serialized);
		if (HitReactEndEvent_ptr != nullptr) {
			return HitReactEndEvent_ptr;
		}

		auto CapturableProgressChangedEvent_ptr = CapturableProgressChangedEvent::from_substruct(incoming_type_id, serialized);
		if (CapturableProgressChangedEvent_ptr != nullptr) {
			return CapturableProgressChangedEvent_ptr;
		}

		auto UpgradeWeaponEvent_ptr = UpgradeWeaponEvent::from_substruct(incoming_type_id, serialized);
		if (UpgradeWeaponEvent_ptr != nullptr) {
			return UpgradeWeaponEvent_ptr;
		}

		auto FinaleHeartPartReactAftershockEvent_ptr = FinaleHeartPartReactAftershockEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleHeartPartReactAftershockEvent_ptr != nullptr) {
			return FinaleHeartPartReactAftershockEvent_ptr;
		}

		auto BotPopDeathTriggerAnimEvent_ptr = BotPopDeathTriggerAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotPopDeathTriggerAnimEvent_ptr != nullptr) {
			return BotPopDeathTriggerAnimEvent_ptr;
		}

		auto ProjectileFlyingStartEvent_ptr = ProjectileFlyingStartEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileFlyingStartEvent_ptr != nullptr) {
			return ProjectileFlyingStartEvent_ptr;
		}

		auto HeroTeleportBeginEvent_ptr = HeroTeleportBeginEvent::from_substruct(incoming_type_id, serialized);
		if (HeroTeleportBeginEvent_ptr != nullptr) {
			return HeroTeleportBeginEvent_ptr;
		}

		auto HeroFallingRespawnEvent_ptr = HeroFallingRespawnEvent::from_substruct(incoming_type_id, serialized);
		if (HeroFallingRespawnEvent_ptr != nullptr) {
			return HeroFallingRespawnEvent_ptr;
		}

		auto GroundTriggerInvalidUserEvent_ptr = GroundTriggerInvalidUserEvent::from_substruct(incoming_type_id, serialized);
		if (GroundTriggerInvalidUserEvent_ptr != nullptr) {
			return GroundTriggerInvalidUserEvent_ptr;
		}

		auto BeetleRideStartEvent_ptr = BeetleRideStartEvent::from_substruct(incoming_type_id, serialized);
		if (BeetleRideStartEvent_ptr != nullptr) {
			return BeetleRideStartEvent_ptr;
		}

		auto BattleBrewEvent_ptr = BattleBrewEvent::from_substruct(incoming_type_id, serialized);
		if (BattleBrewEvent_ptr != nullptr) {
			return BattleBrewEvent_ptr;
		}

		auto PickupSettledEvent_ptr = PickupSettledEvent::from_substruct(incoming_type_id, serialized);
		if (PickupSettledEvent_ptr != nullptr) {
			return PickupSettledEvent_ptr;
		}

		auto TurningStartEvent_ptr = TurningStartEvent::from_substruct(incoming_type_id, serialized);
		if (TurningStartEvent_ptr != nullptr) {
			return TurningStartEvent_ptr;
		}

		auto ChainLightningStartMainEvent_ptr = ChainLightningStartMainEvent::from_substruct(incoming_type_id, serialized);
		if (ChainLightningStartMainEvent_ptr != nullptr) {
			return ChainLightningStartMainEvent_ptr;
		}

		auto ProjectileFlewByStartEvent_ptr = ProjectileFlewByStartEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileFlewByStartEvent_ptr != nullptr) {
			return ProjectileFlewByStartEvent_ptr;
		}

		auto UIHudMessageTutorialClosedEvent_ptr = UIHudMessageTutorialClosedEvent::from_substruct(incoming_type_id, serialized);
		if (UIHudMessageTutorialClosedEvent_ptr != nullptr) {
			return UIHudMessageTutorialClosedEvent_ptr;
		}

		auto HomeRunHitterDeathEvent_ptr = HomeRunHitterDeathEvent::from_substruct(incoming_type_id, serialized);
		if (HomeRunHitterDeathEvent_ptr != nullptr) {
			return HomeRunHitterDeathEvent_ptr;
		}

		auto LedgeFlockDisturbedEvent_ptr = LedgeFlockDisturbedEvent::from_substruct(incoming_type_id, serialized);
		if (LedgeFlockDisturbedEvent_ptr != nullptr) {
			return LedgeFlockDisturbedEvent_ptr;
		}

		auto GadgetBotBridgeRemovedEvent_ptr = GadgetBotBridgeRemovedEvent::from_substruct(incoming_type_id, serialized);
		if (GadgetBotBridgeRemovedEvent_ptr != nullptr) {
			return GadgetBotBridgeRemovedEvent_ptr;
		}

		auto ThumpedEvent_ptr = ThumpedEvent::from_substruct(incoming_type_id, serialized);
		if (ThumpedEvent_ptr != nullptr) {
			return ThumpedEvent_ptr;
		}

		auto PickupBoltDeactivatedEvent_ptr = PickupBoltDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (PickupBoltDeactivatedEvent_ptr != nullptr) {
			return PickupBoltDeactivatedEvent_ptr;
		}

		auto OnCinematicCameraDeactivateEvent_ptr = OnCinematicCameraDeactivateEvent::from_substruct(incoming_type_id, serialized);
		if (OnCinematicCameraDeactivateEvent_ptr != nullptr) {
			return OnCinematicCameraDeactivateEvent_ptr;
		}

		auto PauseMapZoomStopEvent_ptr = PauseMapZoomStopEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMapZoomStopEvent_ptr != nullptr) {
			return PauseMapZoomStopEvent_ptr;
		}

		auto DimensionCompletedEvent_ptr = DimensionCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionCompletedEvent_ptr != nullptr) {
			return DimensionCompletedEvent_ptr;
		}

		auto UIWeaponVendorChainStartEvent_ptr = UIWeaponVendorChainStartEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorChainStartEvent_ptr != nullptr) {
			return UIWeaponVendorChainStartEvent_ptr;
		}

		auto GamePausedEvent_ptr = GamePausedEvent::from_substruct(incoming_type_id, serialized);
		if (GamePausedEvent_ptr != nullptr) {
			return GamePausedEvent_ptr;
		}

		auto ObjZipLinePlayerAttachEvent_ptr = ObjZipLinePlayerAttachEvent::from_substruct(incoming_type_id, serialized);
		if (ObjZipLinePlayerAttachEvent_ptr != nullptr) {
			return ObjZipLinePlayerAttachEvent_ptr;
		}

		auto OnAttachParentMoved_ptr = OnAttachParentMoved::from_substruct(incoming_type_id, serialized);
		if (OnAttachParentMoved_ptr != nullptr) {
			return OnAttachParentMoved_ptr;
		}

		auto ShieldWithHealthActivatedEvent_ptr = ShieldWithHealthActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (ShieldWithHealthActivatedEvent_ptr != nullptr) {
			return ShieldWithHealthActivatedEvent_ptr;
		}

		auto FinaleHeartPartDamagedEvent_ptr = FinaleHeartPartDamagedEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleHeartPartDamagedEvent_ptr != nullptr) {
			return FinaleHeartPartDamagedEvent_ptr;
		}

		auto WeaponLaseringStopEvent_ptr = WeaponLaseringStopEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponLaseringStopEvent_ptr != nullptr) {
			return WeaponLaseringStopEvent_ptr;
		}

		auto PortalZipFinishedEvent_ptr = PortalZipFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipFinishedEvent_ptr != nullptr) {
			return PortalZipFinishedEvent_ptr;
		}

		auto OnStartCloseEvent_ptr = OnStartCloseEvent::from_substruct(incoming_type_id, serialized);
		if (OnStartCloseEvent_ptr != nullptr) {
			return OnStartCloseEvent_ptr;
		}

		auto ShotLockTargetingEvent_ptr = ShotLockTargetingEvent::from_substruct(incoming_type_id, serialized);
		if (ShotLockTargetingEvent_ptr != nullptr) {
			return ShotLockTargetingEvent_ptr;
		}

		auto DimensionalPulseTargetFXEndEvent_ptr = DimensionalPulseTargetFXEndEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetFXEndEvent_ptr != nullptr) {
			return DimensionalPulseTargetFXEndEvent_ptr;
		}

		auto ValidMagbootSurfaceLostEvent_ptr = ValidMagbootSurfaceLostEvent::from_substruct(incoming_type_id, serialized);
		if (ValidMagbootSurfaceLostEvent_ptr != nullptr) {
			return ValidMagbootSurfaceLostEvent_ptr;
		}

		auto GrenadeHazardStopEvent_ptr = GrenadeHazardStopEvent::from_substruct(incoming_type_id, serialized);
		if (GrenadeHazardStopEvent_ptr != nullptr) {
			return GrenadeHazardStopEvent_ptr;
		}

		auto CineActorVoiceEnableEvent_ptr = CineActorVoiceEnableEvent::from_substruct(incoming_type_id, serialized);
		if (CineActorVoiceEnableEvent_ptr != nullptr) {
			return CineActorVoiceEnableEvent_ptr;
		}

		auto GadgetBotBridgeMadeEvent_ptr = GadgetBotBridgeMadeEvent::from_substruct(incoming_type_id, serialized);
		if (GadgetBotBridgeMadeEvent_ptr != nullptr) {
			return GadgetBotBridgeMadeEvent_ptr;
		}

		auto MagShieldBlastWaveReadyEvent_ptr = MagShieldBlastWaveReadyEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldBlastWaveReadyEvent_ptr != nullptr) {
			return MagShieldBlastWaveReadyEvent_ptr;
		}

		auto ClankPackDisableCineAttachEvent_ptr = ClankPackDisableCineAttachEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackDisableCineAttachEvent_ptr != nullptr) {
			return ClankPackDisableCineAttachEvent_ptr;
		}

		auto PoleSwingBeginEvent_ptr = PoleSwingBeginEvent::from_substruct(incoming_type_id, serialized);
		if (PoleSwingBeginEvent_ptr != nullptr) {
			return PoleSwingBeginEvent_ptr;
		}

		auto WeaponRefireBurstCompleteEvent_ptr = WeaponRefireBurstCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponRefireBurstCompleteEvent_ptr != nullptr) {
			return WeaponRefireBurstCompleteEvent_ptr;
		}

		auto ProjectileBeamStopEvent_ptr = ProjectileBeamStopEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileBeamStopEvent_ptr != nullptr) {
			return ProjectileBeamStopEvent_ptr;
		}

		auto HideEvent_ptr = HideEvent::from_substruct(incoming_type_id, serialized);
		if (HideEvent_ptr != nullptr) {
			return HideEvent_ptr;
		}

		auto DeathFinishedEvent_ptr = DeathFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (DeathFinishedEvent_ptr != nullptr) {
			return DeathFinishedEvent_ptr;
		}

		auto StatusEmitterStopEvent_ptr = StatusEmitterStopEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterStopEvent_ptr != nullptr) {
			return StatusEmitterStopEvent_ptr;
		}

		auto ClothChangeGravityEvent_ptr = ClothChangeGravityEvent::from_substruct(incoming_type_id, serialized);
		if (ClothChangeGravityEvent_ptr != nullptr) {
			return ClothChangeGravityEvent_ptr;
		}

		auto WeaponSubBurstCompleteEvent_ptr = WeaponSubBurstCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponSubBurstCompleteEvent_ptr != nullptr) {
			return WeaponSubBurstCompleteEvent_ptr;
		}

		auto SpawnShieldEvent_ptr = SpawnShieldEvent::from_substruct(incoming_type_id, serialized);
		if (SpawnShieldEvent_ptr != nullptr) {
			return SpawnShieldEvent_ptr;
		}

		auto HeroCompletePerfTestEvent_ptr = HeroCompletePerfTestEvent::from_substruct(incoming_type_id, serialized);
		if (HeroCompletePerfTestEvent_ptr != nullptr) {
			return HeroCompletePerfTestEvent_ptr;
		}

		auto CommandDoneEvent_ptr = CommandDoneEvent::from_substruct(incoming_type_id, serialized);
		if (CommandDoneEvent_ptr != nullptr) {
			return CommandDoneEvent_ptr;
		}

		auto ClankPuzzleWireRideStartEvent_ptr = ClankPuzzleWireRideStartEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleWireRideStartEvent_ptr != nullptr) {
			return ClankPuzzleWireRideStartEvent_ptr;
		}

		auto JumpLandEvent_ptr = JumpLandEvent::from_substruct(incoming_type_id, serialized);
		if (JumpLandEvent_ptr != nullptr) {
			return JumpLandEvent_ptr;
		}

		auto JumpCycleEndEvent_ptr = JumpCycleEndEvent::from_substruct(incoming_type_id, serialized);
		if (JumpCycleEndEvent_ptr != nullptr) {
			return JumpCycleEndEvent_ptr;
		}

		auto AnimDriverTransitionEvent_ptr = AnimDriverTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDriverTransitionEvent_ptr != nullptr) {
			return AnimDriverTransitionEvent_ptr;
		}

		auto AirDashEndEvent_ptr = AirDashEndEvent::from_substruct(incoming_type_id, serialized);
		if (AirDashEndEvent_ptr != nullptr) {
			return AirDashEndEvent_ptr;
		}

		auto PortalZipTargetOutOfRange_ptr = PortalZipTargetOutOfRange::from_substruct(incoming_type_id, serialized);
		if (PortalZipTargetOutOfRange_ptr != nullptr) {
			return PortalZipTargetOutOfRange_ptr;
		}

		auto AllowCoverTransitionEvent_ptr = AllowCoverTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (AllowCoverTransitionEvent_ptr != nullptr) {
			return AllowCoverTransitionEvent_ptr;
		}

		auto PoisonReactStartEvent_ptr = PoisonReactStartEvent::from_substruct(incoming_type_id, serialized);
		if (PoisonReactStartEvent_ptr != nullptr) {
			return PoisonReactStartEvent_ptr;
		}

		auto PlasmaSpherePrepareToFireEvent_ptr = PlasmaSpherePrepareToFireEvent::from_substruct(incoming_type_id, serialized);
		if (PlasmaSpherePrepareToFireEvent_ptr != nullptr) {
			return PlasmaSpherePrepareToFireEvent_ptr;
		}

		auto ClankPuzzleWireRideEndEvent_ptr = ClankPuzzleWireRideEndEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleWireRideEndEvent_ptr != nullptr) {
			return ClankPuzzleWireRideEndEvent_ptr;
		}

		auto InventoryFullEvent_ptr = InventoryFullEvent::from_substruct(incoming_type_id, serialized);
		if (InventoryFullEvent_ptr != nullptr) {
			return InventoryFullEvent_ptr;
		}

		auto ProjectileDamagedEvent_ptr = ProjectileDamagedEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileDamagedEvent_ptr != nullptr) {
			return ProjectileDamagedEvent_ptr;
		}

		auto InteractExplodedEvent_ptr = InteractExplodedEvent::from_substruct(incoming_type_id, serialized);
		if (InteractExplodedEvent_ptr != nullptr) {
			return InteractExplodedEvent_ptr;
		}

		auto ShardAttackTellEndEvent_ptr = ShardAttackTellEndEvent::from_substruct(incoming_type_id, serialized);
		if (ShardAttackTellEndEvent_ptr != nullptr) {
			return ShardAttackTellEndEvent_ptr;
		}

		auto InteractAttachedToEvent_ptr = InteractAttachedToEvent::from_substruct(incoming_type_id, serialized);
		if (InteractAttachedToEvent_ptr != nullptr) {
			return InteractAttachedToEvent_ptr;
		}

		auto HealedEvent_ptr = HealedEvent::from_substruct(incoming_type_id, serialized);
		if (HealedEvent_ptr != nullptr) {
			return HealedEvent_ptr;
		}

		auto FinaleHeartLaserPhaseHasEndedEvent_ptr = FinaleHeartLaserPhaseHasEndedEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleHeartLaserPhaseHasEndedEvent_ptr != nullptr) {
			return FinaleHeartLaserPhaseHasEndedEvent_ptr;
		}

		auto HeroDamageFieldStartEvent_ptr = HeroDamageFieldStartEvent::from_substruct(incoming_type_id, serialized);
		if (HeroDamageFieldStartEvent_ptr != nullptr) {
			return HeroDamageFieldStartEvent_ptr;
		}

		auto CarryingLootEvent_ptr = CarryingLootEvent::from_substruct(incoming_type_id, serialized);
		if (CarryingLootEvent_ptr != nullptr) {
			return CarryingLootEvent_ptr;
		}

		auto ConfigModEvent_ptr = ConfigModEvent::from_substruct(incoming_type_id, serialized);
		if (ConfigModEvent_ptr != nullptr) {
			return ConfigModEvent_ptr;
		}

		auto WeaponEquippedEvent_ptr = WeaponEquippedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponEquippedEvent_ptr != nullptr) {
			return WeaponEquippedEvent_ptr;
		}

		auto BotLandedOnEvent_ptr = BotLandedOnEvent::from_substruct(incoming_type_id, serialized);
		if (BotLandedOnEvent_ptr != nullptr) {
			return BotLandedOnEvent_ptr;
		}

		auto UIArenaMenuBackEvent_ptr = UIArenaMenuBackEvent::from_substruct(incoming_type_id, serialized);
		if (UIArenaMenuBackEvent_ptr != nullptr) {
			return UIArenaMenuBackEvent_ptr;
		}

		auto AllowLavaBounceTransitionEvent_ptr = AllowLavaBounceTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (AllowLavaBounceTransitionEvent_ptr != nullptr) {
			return AllowLavaBounceTransitionEvent_ptr;
		}

		auto MoverIsFallingStartEvent_ptr = MoverIsFallingStartEvent::from_substruct(incoming_type_id, serialized);
		if (MoverIsFallingStartEvent_ptr != nullptr) {
			return MoverIsFallingStartEvent_ptr;
		}

		auto BurningDamageOnEvent_ptr = BurningDamageOnEvent::from_substruct(incoming_type_id, serialized);
		if (BurningDamageOnEvent_ptr != nullptr) {
			return BurningDamageOnEvent_ptr;
		}

		auto UIMenuCloseEvent_ptr = UIMenuCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuCloseEvent_ptr != nullptr) {
			return UIMenuCloseEvent_ptr;
		}

		auto BotRelativeAnimInvulnerableEvent_ptr = BotRelativeAnimInvulnerableEvent::from_substruct(incoming_type_id, serialized);
		if (BotRelativeAnimInvulnerableEvent_ptr != nullptr) {
			return BotRelativeAnimInvulnerableEvent_ptr;
		}

		auto BotTranslationEvent_ptr = BotTranslationEvent::from_substruct(incoming_type_id, serialized);
		if (BotTranslationEvent_ptr != nullptr) {
			return BotTranslationEvent_ptr;
		}

		auto DevstatsHeartbeatEvent_ptr = DevstatsHeartbeatEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsHeartbeatEvent_ptr != nullptr) {
			return DevstatsHeartbeatEvent_ptr;
		}

		auto UIPlanetMenuMoveEvent_ptr = UIPlanetMenuMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIPlanetMenuMoveEvent_ptr != nullptr) {
			return UIPlanetMenuMoveEvent_ptr;
		}

		auto TeleportTrailEndEvent_ptr = TeleportTrailEndEvent::from_substruct(incoming_type_id, serialized);
		if (TeleportTrailEndEvent_ptr != nullptr) {
			return TeleportTrailEndEvent_ptr;
		}

		auto BotDetachFinishedEvent_ptr = BotDetachFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BotDetachFinishedEvent_ptr != nullptr) {
			return BotDetachFinishedEvent_ptr;
		}

		auto InventoryChangedEvent_ptr = InventoryChangedEvent::from_substruct(incoming_type_id, serialized);
		if (InventoryChangedEvent_ptr != nullptr) {
			return InventoryChangedEvent_ptr;
		}

		auto ShipMagnetFireNoAmmoEvent_ptr = ShipMagnetFireNoAmmoEvent::from_substruct(incoming_type_id, serialized);
		if (ShipMagnetFireNoAmmoEvent_ptr != nullptr) {
			return ShipMagnetFireNoAmmoEvent_ptr;
		}

		auto GotSheepedEvent_ptr = GotSheepedEvent::from_substruct(incoming_type_id, serialized);
		if (GotSheepedEvent_ptr != nullptr) {
			return GotSheepedEvent_ptr;
		}

		auto SkinManagerClothModifyEvent_ptr = SkinManagerClothModifyEvent::from_substruct(incoming_type_id, serialized);
		if (SkinManagerClothModifyEvent_ptr != nullptr) {
			return SkinManagerClothModifyEvent_ptr;
		}

		auto StartEvent_ptr = StartEvent::from_substruct(incoming_type_id, serialized);
		if (StartEvent_ptr != nullptr) {
			return StartEvent_ptr;
		}

		auto TriggerPadLeaveEvent_ptr = TriggerPadLeaveEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerPadLeaveEvent_ptr != nullptr) {
			return TriggerPadLeaveEvent_ptr;
		}

		auto HoverEffectOnEvent_ptr = HoverEffectOnEvent::from_substruct(incoming_type_id, serialized);
		if (HoverEffectOnEvent_ptr != nullptr) {
			return HoverEffectOnEvent_ptr;
		}

		auto OscillatingMotionStopAllEvent_ptr = OscillatingMotionStopAllEvent::from_substruct(incoming_type_id, serialized);
		if (OscillatingMotionStopAllEvent_ptr != nullptr) {
			return OscillatingMotionStopAllEvent_ptr;
		}

		auto MovingSurfaceCollectionReadyEvent_ptr = MovingSurfaceCollectionReadyEvent::from_substruct(incoming_type_id, serialized);
		if (MovingSurfaceCollectionReadyEvent_ptr != nullptr) {
			return MovingSurfaceCollectionReadyEvent_ptr;
		}

		auto FormationStartedEvent_ptr = FormationStartedEvent::from_substruct(incoming_type_id, serialized);
		if (FormationStartedEvent_ptr != nullptr) {
			return FormationStartedEvent_ptr;
		}

		auto HeroFrozeToDeathEvent_ptr = HeroFrozeToDeathEvent::from_substruct(incoming_type_id, serialized);
		if (HeroFrozeToDeathEvent_ptr != nullptr) {
			return HeroFrozeToDeathEvent_ptr;
		}

		auto SwingshotRetractedEvent_ptr = SwingshotRetractedEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotRetractedEvent_ptr != nullptr) {
			return SwingshotRetractedEvent_ptr;
		}

		auto ClearVanityOverrideEvent_ptr = ClearVanityOverrideEvent::from_substruct(incoming_type_id, serialized);
		if (ClearVanityOverrideEvent_ptr != nullptr) {
			return ClearVanityOverrideEvent_ptr;
		}

		auto ProtoShotgunTendrilFireEvent_ptr = ProtoShotgunTendrilFireEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoShotgunTendrilFireEvent_ptr != nullptr) {
			return ProtoShotgunTendrilFireEvent_ptr;
		}

		auto AnimAttachHandEvent_ptr = AnimAttachHandEvent::from_substruct(incoming_type_id, serialized);
		if (AnimAttachHandEvent_ptr != nullptr) {
			return AnimAttachHandEvent_ptr;
		}

		auto BouncyActiveEvent_ptr = BouncyActiveEvent::from_substruct(incoming_type_id, serialized);
		if (BouncyActiveEvent_ptr != nullptr) {
			return BouncyActiveEvent_ptr;
		}

		auto WeaponRefireBurstBeginEvent_ptr = WeaponRefireBurstBeginEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponRefireBurstBeginEvent_ptr != nullptr) {
			return WeaponRefireBurstBeginEvent_ptr;
		}

		auto PlayDialogDestroyedEvent_ptr = PlayDialogDestroyedEvent::from_substruct(incoming_type_id, serialized);
		if (PlayDialogDestroyedEvent_ptr != nullptr) {
			return PlayDialogDestroyedEvent_ptr;
		}

		auto SetEmergentVOCooldownOverrideEvent_ptr = SetEmergentVOCooldownOverrideEvent::from_substruct(incoming_type_id, serialized);
		if (SetEmergentVOCooldownOverrideEvent_ptr != nullptr) {
			return SetEmergentVOCooldownOverrideEvent_ptr;
		}

		auto HeroSprintStartEvent_ptr = HeroSprintStartEvent::from_substruct(incoming_type_id, serialized);
		if (HeroSprintStartEvent_ptr != nullptr) {
			return HeroSprintStartEvent_ptr;
		}

		auto ClankWeaponLockFullEvent_ptr = ClankWeaponLockFullEvent::from_substruct(incoming_type_id, serialized);
		if (ClankWeaponLockFullEvent_ptr != nullptr) {
			return ClankWeaponLockFullEvent_ptr;
		}

		auto UIHudMessageTutorialInputPressedEvent_ptr = UIHudMessageTutorialInputPressedEvent::from_substruct(incoming_type_id, serialized);
		if (UIHudMessageTutorialInputPressedEvent_ptr != nullptr) {
			return UIHudMessageTutorialInputPressedEvent_ptr;
		}

		auto UIWeaponVendorVideoStopEvent_ptr = UIWeaponVendorVideoStopEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorVideoStopEvent_ptr != nullptr) {
			return UIWeaponVendorVideoStopEvent_ptr;
		}

		auto HeroGrindMacroStateOffEvent_ptr = HeroGrindMacroStateOffEvent::from_substruct(incoming_type_id, serialized);
		if (HeroGrindMacroStateOffEvent_ptr != nullptr) {
			return HeroGrindMacroStateOffEvent_ptr;
		}

		auto UITutorialPopUp_ptr = UITutorialPopUp::from_substruct(incoming_type_id, serialized);
		if (UITutorialPopUp_ptr != nullptr) {
			return UITutorialPopUp_ptr;
		}

		auto BotComboFinishedEvent_ptr = BotComboFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BotComboFinishedEvent_ptr != nullptr) {
			return BotComboFinishedEvent_ptr;
		}

		auto HandRetractEvent_ptr = HandRetractEvent::from_substruct(incoming_type_id, serialized);
		if (HandRetractEvent_ptr != nullptr) {
			return HandRetractEvent_ptr;
		}

		auto DrawOnEvent_ptr = DrawOnEvent::from_substruct(incoming_type_id, serialized);
		if (DrawOnEvent_ptr != nullptr) {
			return DrawOnEvent_ptr;
		}

		auto BotDeathSpawnChunksTimeEvent_ptr = BotDeathSpawnChunksTimeEvent::from_substruct(incoming_type_id, serialized);
		if (BotDeathSpawnChunksTimeEvent_ptr != nullptr) {
			return BotDeathSpawnChunksTimeEvent_ptr;
		}

		auto UIWeaponSelectStickShowEvent_ptr = UIWeaponSelectStickShowEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponSelectStickShowEvent_ptr != nullptr) {
			return UIWeaponSelectStickShowEvent_ptr;
		}

		auto WeaponEquippedFXOnEvent_ptr = WeaponEquippedFXOnEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponEquippedFXOnEvent_ptr != nullptr) {
			return WeaponEquippedFXOnEvent_ptr;
		}

		auto DevstatsHighContrastMaterialsDisabledEvent_ptr = DevstatsHighContrastMaterialsDisabledEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsHighContrastMaterialsDisabledEvent_ptr != nullptr) {
			return DevstatsHighContrastMaterialsDisabledEvent_ptr;
		}

		auto HazardNestExplosionEvent_ptr = HazardNestExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (HazardNestExplosionEvent_ptr != nullptr) {
			return HazardNestExplosionEvent_ptr;
		}

		auto PounceDamageEvent_ptr = PounceDamageEvent::from_substruct(incoming_type_id, serialized);
		if (PounceDamageEvent_ptr != nullptr) {
			return PounceDamageEvent_ptr;
		}

		auto TunnelerExitGroundEvent_ptr = TunnelerExitGroundEvent::from_substruct(incoming_type_id, serialized);
		if (TunnelerExitGroundEvent_ptr != nullptr) {
			return TunnelerExitGroundEvent_ptr;
		}

		auto EyeBeamFireEvent_ptr = EyeBeamFireEvent::from_substruct(incoming_type_id, serialized);
		if (EyeBeamFireEvent_ptr != nullptr) {
			return EyeBeamFireEvent_ptr;
		}

		auto ActorReplacedEvent_ptr = ActorReplacedEvent::from_substruct(incoming_type_id, serialized);
		if (ActorReplacedEvent_ptr != nullptr) {
			return ActorReplacedEvent_ptr;
		}

		auto PauseArmorLegsHoverEvent_ptr = PauseArmorLegsHoverEvent::from_substruct(incoming_type_id, serialized);
		if (PauseArmorLegsHoverEvent_ptr != nullptr) {
			return PauseArmorLegsHoverEvent_ptr;
		}

		auto LoadSetUnloadedEvent_ptr = LoadSetUnloadedEvent::from_substruct(incoming_type_id, serialized);
		if (LoadSetUnloadedEvent_ptr != nullptr) {
			return LoadSetUnloadedEvent_ptr;
		}

		auto VehicleSoundOffEvent_ptr = VehicleSoundOffEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleSoundOffEvent_ptr != nullptr) {
			return VehicleSoundOffEvent_ptr;
		}

		auto PhotomodeActivateEvent_ptr = PhotomodeActivateEvent::from_substruct(incoming_type_id, serialized);
		if (PhotomodeActivateEvent_ptr != nullptr) {
			return PhotomodeActivateEvent_ptr;
		}

		auto BeginMotionEvent_ptr = BeginMotionEvent::from_substruct(incoming_type_id, serialized);
		if (BeginMotionEvent_ptr != nullptr) {
			return BeginMotionEvent_ptr;
		}

		auto HeroCinematicFurSettingsEvent_ptr = HeroCinematicFurSettingsEvent::from_substruct(incoming_type_id, serialized);
		if (HeroCinematicFurSettingsEvent_ptr != nullptr) {
			return HeroCinematicFurSettingsEvent_ptr;
		}

		auto MissionStateChangeEvent_ptr = MissionStateChangeEvent::from_substruct(incoming_type_id, serialized);
		if (MissionStateChangeEvent_ptr != nullptr) {
			return MissionStateChangeEvent_ptr;
		}

		auto UnderwaterBaseJuiceDistractionUseStartEvent_ptr = UnderwaterBaseJuiceDistractionUseStartEvent::from_substruct(incoming_type_id, serialized);
		if (UnderwaterBaseJuiceDistractionUseStartEvent_ptr != nullptr) {
			return UnderwaterBaseJuiceDistractionUseStartEvent_ptr;
		}

		auto PukeEndEvent_ptr = PukeEndEvent::from_substruct(incoming_type_id, serialized);
		if (PukeEndEvent_ptr != nullptr) {
			return PukeEndEvent_ptr;
		}

		auto HarpoonStreamSplatEvent_ptr = HarpoonStreamSplatEvent::from_substruct(incoming_type_id, serialized);
		if (HarpoonStreamSplatEvent_ptr != nullptr) {
			return HarpoonStreamSplatEvent_ptr;
		}

		auto WeaponUnsightedEvent_ptr = WeaponUnsightedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponUnsightedEvent_ptr != nullptr) {
			return WeaponUnsightedEvent_ptr;
		}

		auto UIArenaMenuAcceptEvent_ptr = UIArenaMenuAcceptEvent::from_substruct(incoming_type_id, serialized);
		if (UIArenaMenuAcceptEvent_ptr != nullptr) {
			return UIArenaMenuAcceptEvent_ptr;
		}

		auto ClankPuzzleRecallerExitEvent_ptr = ClankPuzzleRecallerExitEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleRecallerExitEvent_ptr != nullptr) {
			return ClankPuzzleRecallerExitEvent_ptr;
		}

		auto BeamImpactStartEvent_ptr = BeamImpactStartEvent::from_substruct(incoming_type_id, serialized);
		if (BeamImpactStartEvent_ptr != nullptr) {
			return BeamImpactStartEvent_ptr;
		}

		auto TriggerEvent_ptr = TriggerEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerEvent_ptr != nullptr) {
			return TriggerEvent_ptr;
		}

		auto FlyerHomingMineActivatedEvent_ptr = FlyerHomingMineActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (FlyerHomingMineActivatedEvent_ptr != nullptr) {
			return FlyerHomingMineActivatedEvent_ptr;
		}

		auto UsedEvent_ptr = UsedEvent::from_substruct(incoming_type_id, serialized);
		if (UsedEvent_ptr != nullptr) {
			return UsedEvent_ptr;
		}

		auto ShockReactStopEvent_ptr = ShockReactStopEvent::from_substruct(incoming_type_id, serialized);
		if (ShockReactStopEvent_ptr != nullptr) {
			return ShockReactStopEvent_ptr;
		}

		auto AllowInputEndEvent_ptr = AllowInputEndEvent::from_substruct(incoming_type_id, serialized);
		if (AllowInputEndEvent_ptr != nullptr) {
			return AllowInputEndEvent_ptr;
		}

		auto DisplayHeroHealthBarOff_ptr = DisplayHeroHealthBarOff::from_substruct(incoming_type_id, serialized);
		if (DisplayHeroHealthBarOff_ptr != nullptr) {
			return DisplayHeroHealthBarOff_ptr;
		}

		auto AOEWaterHazardExplosionEvent_ptr = AOEWaterHazardExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (AOEWaterHazardExplosionEvent_ptr != nullptr) {
			return AOEWaterHazardExplosionEvent_ptr;
		}

		auto GrindOnEvent_ptr = GrindOnEvent::from_substruct(incoming_type_id, serialized);
		if (GrindOnEvent_ptr != nullptr) {
			return GrindOnEvent_ptr;
		}

		auto MoverOnGroundEvent_ptr = MoverOnGroundEvent::from_substruct(incoming_type_id, serialized);
		if (MoverOnGroundEvent_ptr != nullptr) {
			return MoverOnGroundEvent_ptr;
		}

		auto ClankPackHeliRetractEvent_ptr = ClankPackHeliRetractEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHeliRetractEvent_ptr != nullptr) {
			return ClankPackHeliRetractEvent_ptr;
		}

		auto ClankPuzzleVolumeTrackerEnterEvent_ptr = ClankPuzzleVolumeTrackerEnterEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeTrackerEnterEvent_ptr != nullptr) {
			return ClankPuzzleVolumeTrackerEnterEvent_ptr;
		}

		auto ZurkieArenaSelectAcceptEvent_ptr = ZurkieArenaSelectAcceptEvent::from_substruct(incoming_type_id, serialized);
		if (ZurkieArenaSelectAcceptEvent_ptr != nullptr) {
			return ZurkieArenaSelectAcceptEvent_ptr;
		}

		auto TimeScaleActivatedEvent_ptr = TimeScaleActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleActivatedEvent_ptr != nullptr) {
			return TimeScaleActivatedEvent_ptr;
		}

		auto BotTargetVisibleEvent_ptr = BotTargetVisibleEvent::from_substruct(incoming_type_id, serialized);
		if (BotTargetVisibleEvent_ptr != nullptr) {
			return BotTargetVisibleEvent_ptr;
		}

		auto DimensionPortalTokenStolenEvent_ptr = DimensionPortalTokenStolenEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionPortalTokenStolenEvent_ptr != nullptr) {
			return DimensionPortalTokenStolenEvent_ptr;
		}

		auto MeleeDeathEvent_ptr = MeleeDeathEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeDeathEvent_ptr != nullptr) {
			return MeleeDeathEvent_ptr;
		}

		auto BotShootLaserStartAnimLoopEvent_ptr = BotShootLaserStartAnimLoopEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserStartAnimLoopEvent_ptr != nullptr) {
			return BotShootLaserStartAnimLoopEvent_ptr;
		}

		auto WeaponBurstShotCountedEvent_ptr = WeaponBurstShotCountedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponBurstShotCountedEvent_ptr != nullptr) {
			return WeaponBurstShotCountedEvent_ptr;
		}

		auto FinalizeChunkActorEvent_ptr = FinalizeChunkActorEvent::from_substruct(incoming_type_id, serialized);
		if (FinalizeChunkActorEvent_ptr != nullptr) {
			return FinalizeChunkActorEvent_ptr;
		}

		auto TouchedByBeamStartEvent_ptr = TouchedByBeamStartEvent::from_substruct(incoming_type_id, serialized);
		if (TouchedByBeamStartEvent_ptr != nullptr) {
			return TouchedByBeamStartEvent_ptr;
		}

		auto ConduitLocatorTransformEvent_ptr = ConduitLocatorTransformEvent::from_substruct(incoming_type_id, serialized);
		if (ConduitLocatorTransformEvent_ptr != nullptr) {
			return ConduitLocatorTransformEvent_ptr;
		}

		auto UserAttachPropEvent_ptr = UserAttachPropEvent::from_substruct(incoming_type_id, serialized);
		if (UserAttachPropEvent_ptr != nullptr) {
			return UserAttachPropEvent_ptr;
		}

		auto AnimAttachUnholsterEvent_ptr = AnimAttachUnholsterEvent::from_substruct(incoming_type_id, serialized);
		if (AnimAttachUnholsterEvent_ptr != nullptr) {
			return AnimAttachUnholsterEvent_ptr;
		}

		auto AnimScaleDriverRateOffEvent_ptr = AnimScaleDriverRateOffEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScaleDriverRateOffEvent_ptr != nullptr) {
			return AnimScaleDriverRateOffEvent_ptr;
		}

		auto ZurkieArenaSelectCancelEvent_ptr = ZurkieArenaSelectCancelEvent::from_substruct(incoming_type_id, serialized);
		if (ZurkieArenaSelectCancelEvent_ptr != nullptr) {
			return ZurkieArenaSelectCancelEvent_ptr;
		}

		auto Cinematic2CompletedEvent_ptr = Cinematic2CompletedEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2CompletedEvent_ptr != nullptr) {
			return Cinematic2CompletedEvent_ptr;
		}

		auto MountBoostEndEvent_ptr = MountBoostEndEvent::from_substruct(incoming_type_id, serialized);
		if (MountBoostEndEvent_ptr != nullptr) {
			return MountBoostEndEvent_ptr;
		}

		auto TopiarySprinklerChangeTargetEvent_ptr = TopiarySprinklerChangeTargetEvent::from_substruct(incoming_type_id, serialized);
		if (TopiarySprinklerChangeTargetEvent_ptr != nullptr) {
			return TopiarySprinklerChangeTargetEvent_ptr;
		}

		auto TriggerPadInvalidLeaveEvent_ptr = TriggerPadInvalidLeaveEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerPadInvalidLeaveEvent_ptr != nullptr) {
			return TriggerPadInvalidLeaveEvent_ptr;
		}

		auto WarpRifleFinishedCoolingOffEvent_ptr = WarpRifleFinishedCoolingOffEvent::from_substruct(incoming_type_id, serialized);
		if (WarpRifleFinishedCoolingOffEvent_ptr != nullptr) {
			return WarpRifleFinishedCoolingOffEvent_ptr;
		}

		auto FinaleNefMechDamageStage2Event_ptr = FinaleNefMechDamageStage2Event::from_substruct(incoming_type_id, serialized);
		if (FinaleNefMechDamageStage2Event_ptr != nullptr) {
			return FinaleNefMechDamageStage2Event_ptr;
		}

		auto BouncyInactiveEvent_ptr = BouncyInactiveEvent::from_substruct(incoming_type_id, serialized);
		if (BouncyInactiveEvent_ptr != nullptr) {
			return BouncyInactiveEvent_ptr;
		}

		auto ShuffleEndEvent_ptr = ShuffleEndEvent::from_substruct(incoming_type_id, serialized);
		if (ShuffleEndEvent_ptr != nullptr) {
			return ShuffleEndEvent_ptr;
		}

		auto DisallowDanceOutroEvent_ptr = DisallowDanceOutroEvent::from_substruct(incoming_type_id, serialized);
		if (DisallowDanceOutroEvent_ptr != nullptr) {
			return DisallowDanceOutroEvent_ptr;
		}

		auto DevstatsHighContrastMaterialsEnabledEvent_ptr = DevstatsHighContrastMaterialsEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsHighContrastMaterialsEnabledEvent_ptr != nullptr) {
			return DevstatsHighContrastMaterialsEnabledEvent_ptr;
		}

		auto FossilizeSlowEndEvent_ptr = FossilizeSlowEndEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeSlowEndEvent_ptr != nullptr) {
			return FossilizeSlowEndEvent_ptr;
		}

		auto AuthSuccessDevstatsEvent_ptr = AuthSuccessDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (AuthSuccessDevstatsEvent_ptr != nullptr) {
			return AuthSuccessDevstatsEvent_ptr;
		}

		auto MissionStartedEvent_ptr = MissionStartedEvent::from_substruct(incoming_type_id, serialized);
		if (MissionStartedEvent_ptr != nullptr) {
			return MissionStartedEvent_ptr;
		}

		auto MissionStateChangedEvent_ptr = MissionStateChangedEvent::from_substruct(incoming_type_id, serialized);
		if (MissionStateChangedEvent_ptr != nullptr) {
			return MissionStateChangedEvent_ptr;
		}

		auto BotDeathStartEvent_ptr = BotDeathStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotDeathStartEvent_ptr != nullptr) {
			return BotDeathStartEvent_ptr;
		}

		auto LoadSetLoadedEvent_ptr = LoadSetLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (LoadSetLoadedEvent_ptr != nullptr) {
			return LoadSetLoadedEvent_ptr;
		}

		auto GrindLandEvent_ptr = GrindLandEvent::from_substruct(incoming_type_id, serialized);
		if (GrindLandEvent_ptr != nullptr) {
			return GrindLandEvent_ptr;
		}

		auto MoverBumpEvent_ptr = MoverBumpEvent::from_substruct(incoming_type_id, serialized);
		if (MoverBumpEvent_ptr != nullptr) {
			return MoverBumpEvent_ptr;
		}

		auto FallingDeathEvent_ptr = FallingDeathEvent::from_substruct(incoming_type_id, serialized);
		if (FallingDeathEvent_ptr != nullptr) {
			return FallingDeathEvent_ptr;
		}

		auto DoAutoCheckpointChangedEvent_ptr = DoAutoCheckpointChangedEvent::from_substruct(incoming_type_id, serialized);
		if (DoAutoCheckpointChangedEvent_ptr != nullptr) {
			return DoAutoCheckpointChangedEvent_ptr;
		}

		auto ProjectileIdlingStartEvent_ptr = ProjectileIdlingStartEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileIdlingStartEvent_ptr != nullptr) {
			return ProjectileIdlingStartEvent_ptr;
		}

		auto WeaponTriggerDeactivateEvent_ptr = WeaponTriggerDeactivateEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponTriggerDeactivateEvent_ptr != nullptr) {
			return WeaponTriggerDeactivateEvent_ptr;
		}

		auto WeaponLevelUpStartEvent_ptr = WeaponLevelUpStartEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponLevelUpStartEvent_ptr != nullptr) {
			return WeaponLevelUpStartEvent_ptr;
		}

		auto AllowInputStartEvent_ptr = AllowInputStartEvent::from_substruct(incoming_type_id, serialized);
		if (AllowInputStartEvent_ptr != nullptr) {
			return AllowInputStartEvent_ptr;
		}

		auto SlingshotSpinStartEvent_ptr = SlingshotSpinStartEvent::from_substruct(incoming_type_id, serialized);
		if (SlingshotSpinStartEvent_ptr != nullptr) {
			return SlingshotSpinStartEvent_ptr;
		}

		auto AmmoPickedUpEvent_ptr = AmmoPickedUpEvent::from_substruct(incoming_type_id, serialized);
		if (AmmoPickedUpEvent_ptr != nullptr) {
			return AmmoPickedUpEvent_ptr;
		}

		auto BotShootLaserStartTargetingEvent_ptr = BotShootLaserStartTargetingEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserStartTargetingEvent_ptr != nullptr) {
			return BotShootLaserStartTargetingEvent_ptr;
		}

		auto HoverbootOmniBoostPadRotateStartEvent_ptr = HoverbootOmniBoostPadRotateStartEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootOmniBoostPadRotateStartEvent_ptr != nullptr) {
			return HoverbootOmniBoostPadRotateStartEvent_ptr;
		}

		auto CinematicExitFreezeCameraEvent_ptr = CinematicExitFreezeCameraEvent::from_substruct(incoming_type_id, serialized);
		if (CinematicExitFreezeCameraEvent_ptr != nullptr) {
			return CinematicExitFreezeCameraEvent_ptr;
		}

		auto TargetersChangedEvent_ptr = TargetersChangedEvent::from_substruct(incoming_type_id, serialized);
		if (TargetersChangedEvent_ptr != nullptr) {
			return TargetersChangedEvent_ptr;
		}

		auto DevstatsPlayerAbilityHitEvent_ptr = DevstatsPlayerAbilityHitEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsPlayerAbilityHitEvent_ptr != nullptr) {
			return DevstatsPlayerAbilityHitEvent_ptr;
		}

		auto RegionUnloadedEvent_ptr = RegionUnloadedEvent::from_substruct(incoming_type_id, serialized);
		if (RegionUnloadedEvent_ptr != nullptr) {
			return RegionUnloadedEvent_ptr;
		}

		auto DestroyPlantedShotEvent_ptr = DestroyPlantedShotEvent::from_substruct(incoming_type_id, serialized);
		if (DestroyPlantedShotEvent_ptr != nullptr) {
			return DestroyPlantedShotEvent_ptr;
		}

		auto VehicleHeadLightsOnEvent_ptr = VehicleHeadLightsOnEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleHeadLightsOnEvent_ptr != nullptr) {
			return VehicleHeadLightsOnEvent_ptr;
		}

		auto ClankPackHydropackRetractEvent_ptr = ClankPackHydropackRetractEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHydropackRetractEvent_ptr != nullptr) {
			return ClankPackHydropackRetractEvent_ptr;
		}

		auto BotDisableFiringEvent_ptr = BotDisableFiringEvent::from_substruct(incoming_type_id, serialized);
		if (BotDisableFiringEvent_ptr != nullptr) {
			return BotDisableFiringEvent_ptr;
		}

		auto AnimatedDismountEvent_ptr = AnimatedDismountEvent::from_substruct(incoming_type_id, serialized);
		if (AnimatedDismountEvent_ptr != nullptr) {
			return AnimatedDismountEvent_ptr;
		}

		auto QuicksandDeathEvent_ptr = QuicksandDeathEvent::from_substruct(incoming_type_id, serialized);
		if (QuicksandDeathEvent_ptr != nullptr) {
			return QuicksandDeathEvent_ptr;
		}

		auto AllowStagedBlockEarlyTransitionEvent_ptr = AllowStagedBlockEarlyTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (AllowStagedBlockEarlyTransitionEvent_ptr != nullptr) {
			return AllowStagedBlockEarlyTransitionEvent_ptr;
		}

		auto AnimScaleRotationOffEvent_ptr = AnimScaleRotationOffEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScaleRotationOffEvent_ptr != nullptr) {
			return AnimScaleRotationOffEvent_ptr;
		}

		auto MeleeComboWaitEvent_ptr = MeleeComboWaitEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeComboWaitEvent_ptr != nullptr) {
			return MeleeComboWaitEvent_ptr;
		}

		auto MountFlyerPickupReadyEvent_ptr = MountFlyerPickupReadyEvent::from_substruct(incoming_type_id, serialized);
		if (MountFlyerPickupReadyEvent_ptr != nullptr) {
			return MountFlyerPickupReadyEvent_ptr;
		}

		auto SwingingMotionHitEvent_ptr = SwingingMotionHitEvent::from_substruct(incoming_type_id, serialized);
		if (SwingingMotionHitEvent_ptr != nullptr) {
			return SwingingMotionHitEvent_ptr;
		}

		auto StartMovingEvent_ptr = StartMovingEvent::from_substruct(incoming_type_id, serialized);
		if (StartMovingEvent_ptr != nullptr) {
			return StartMovingEvent_ptr;
		}

		auto BlendOutEvent_ptr = BlendOutEvent::from_substruct(incoming_type_id, serialized);
		if (BlendOutEvent_ptr != nullptr) {
			return BlendOutEvent_ptr;
		}

		auto PartialDeactivationEvent_ptr = PartialDeactivationEvent::from_substruct(incoming_type_id, serialized);
		if (PartialDeactivationEvent_ptr != nullptr) {
			return PartialDeactivationEvent_ptr;
		}

		auto AnimTriggerEmergentVOEvent_ptr = AnimTriggerEmergentVOEvent::from_substruct(incoming_type_id, serialized);
		if (AnimTriggerEmergentVOEvent_ptr != nullptr) {
			return AnimTriggerEmergentVOEvent_ptr;
		}

		auto ShipReticleSwitchTargetEvent_ptr = ShipReticleSwitchTargetEvent::from_substruct(incoming_type_id, serialized);
		if (ShipReticleSwitchTargetEvent_ptr != nullptr) {
			return ShipReticleSwitchTargetEvent_ptr;
		}

		auto DashBeginEvent_ptr = DashBeginEvent::from_substruct(incoming_type_id, serialized);
		if (DashBeginEvent_ptr != nullptr) {
			return DashBeginEvent_ptr;
		}

		auto BurningOffEvent_ptr = BurningOffEvent::from_substruct(incoming_type_id, serialized);
		if (BurningOffEvent_ptr != nullptr) {
			return BurningOffEvent_ptr;
		}

		auto HeroLevelUpBeginEvent_ptr = HeroLevelUpBeginEvent::from_substruct(incoming_type_id, serialized);
		if (HeroLevelUpBeginEvent_ptr != nullptr) {
			return HeroLevelUpBeginEvent_ptr;
		}

		auto GadgetPortDetachEvent_ptr = GadgetPortDetachEvent::from_substruct(incoming_type_id, serialized);
		if (GadgetPortDetachEvent_ptr != nullptr) {
			return GadgetPortDetachEvent_ptr;
		}

		auto FinaleNefWeakspotDamagedStage3Event_ptr = FinaleNefWeakspotDamagedStage3Event::from_substruct(incoming_type_id, serialized);
		if (FinaleNefWeakspotDamagedStage3Event_ptr != nullptr) {
			return FinaleNefWeakspotDamagedStage3Event_ptr;
		}

		auto HUDLowHealthShowEvent_ptr = HUDLowHealthShowEvent::from_substruct(incoming_type_id, serialized);
		if (HUDLowHealthShowEvent_ptr != nullptr) {
			return HUDLowHealthShowEvent_ptr;
		}

		auto RequestCritterLocationRegistrationEvent_ptr = RequestCritterLocationRegistrationEvent::from_substruct(incoming_type_id, serialized);
		if (RequestCritterLocationRegistrationEvent_ptr != nullptr) {
			return RequestCritterLocationRegistrationEvent_ptr;
		}

		auto ShipMagnetTurnedOffEvent_ptr = ShipMagnetTurnedOffEvent::from_substruct(incoming_type_id, serialized);
		if (ShipMagnetTurnedOffEvent_ptr != nullptr) {
			return ShipMagnetTurnedOffEvent_ptr;
		}

		auto RocketFiredEvent_ptr = RocketFiredEvent::from_substruct(incoming_type_id, serialized);
		if (RocketFiredEvent_ptr != nullptr) {
			return RocketFiredEvent_ptr;
		}

		auto WeaponWarpRifleSpinUpStartedEvent_ptr = WeaponWarpRifleSpinUpStartedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponWarpRifleSpinUpStartedEvent_ptr != nullptr) {
			return WeaponWarpRifleSpinUpStartedEvent_ptr;
		}

		auto StatusEffectPreExplodeEvent_ptr = StatusEffectPreExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectPreExplodeEvent_ptr != nullptr) {
			return StatusEffectPreExplodeEvent_ptr;
		}

		auto HeroGlideEndEvent_ptr = HeroGlideEndEvent::from_substruct(incoming_type_id, serialized);
		if (HeroGlideEndEvent_ptr != nullptr) {
			return HeroGlideEndEvent_ptr;
		}

		auto PyrocitorFiredEvent_ptr = PyrocitorFiredEvent::from_substruct(incoming_type_id, serialized);
		if (PyrocitorFiredEvent_ptr != nullptr) {
			return PyrocitorFiredEvent_ptr;
		}

		auto ProtoShotgunSecondShotWindowEndEvent_ptr = ProtoShotgunSecondShotWindowEndEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoShotgunSecondShotWindowEndEvent_ptr != nullptr) {
			return ProtoShotgunSecondShotWindowEndEvent_ptr;
		}

		auto VanityAccessoryEquipEvent_ptr = VanityAccessoryEquipEvent::from_substruct(incoming_type_id, serialized);
		if (VanityAccessoryEquipEvent_ptr != nullptr) {
			return VanityAccessoryEquipEvent_ptr;
		}

		auto HeroEnterCinematicEvent_ptr = HeroEnterCinematicEvent::from_substruct(incoming_type_id, serialized);
		if (HeroEnterCinematicEvent_ptr != nullptr) {
			return HeroEnterCinematicEvent_ptr;
		}

		auto DimensionalPulseTargetFlockFleeEvent_ptr = DimensionalPulseTargetFlockFleeEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetFlockFleeEvent_ptr != nullptr) {
			return DimensionalPulseTargetFlockFleeEvent_ptr;
		}

		auto SwingshotActiveStartEvent_ptr = SwingshotActiveStartEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotActiveStartEvent_ptr != nullptr) {
			return SwingshotActiveStartEvent_ptr;
		}

		auto MagShieldShotReturnedEvent_ptr = MagShieldShotReturnedEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldShotReturnedEvent_ptr != nullptr) {
			return MagShieldShotReturnedEvent_ptr;
		}

		auto DevstatsRumbleAccessibilityDisabledEvent_ptr = DevstatsRumbleAccessibilityDisabledEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsRumbleAccessibilityDisabledEvent_ptr != nullptr) {
			return DevstatsRumbleAccessibilityDisabledEvent_ptr;
		}

		auto BoltCrankTargetComplete_ptr = BoltCrankTargetComplete::from_substruct(incoming_type_id, serialized);
		if (BoltCrankTargetComplete_ptr != nullptr) {
			return BoltCrankTargetComplete_ptr;
		}

		auto PhysicsContactEvent_ptr = PhysicsContactEvent::from_substruct(incoming_type_id, serialized);
		if (PhysicsContactEvent_ptr != nullptr) {
			return PhysicsContactEvent_ptr;
		}

		auto EyeBeamChargedStartEvent_ptr = EyeBeamChargedStartEvent::from_substruct(incoming_type_id, serialized);
		if (EyeBeamChargedStartEvent_ptr != nullptr) {
			return EyeBeamChargedStartEvent_ptr;
		}

		auto UIFrontEndUpgradeToDeluxeEvent_ptr = UIFrontEndUpgradeToDeluxeEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndUpgradeToDeluxeEvent_ptr != nullptr) {
			return UIFrontEndUpgradeToDeluxeEvent_ptr;
		}

		auto BotMeleeFromGotoStartFrameEvent_ptr = BotMeleeFromGotoStartFrameEvent::from_substruct(incoming_type_id, serialized);
		if (BotMeleeFromGotoStartFrameEvent_ptr != nullptr) {
			return BotMeleeFromGotoStartFrameEvent_ptr;
		}

		auto WepHarpoonTurretRotateLoopEvent_ptr = WepHarpoonTurretRotateLoopEvent::from_substruct(incoming_type_id, serialized);
		if (WepHarpoonTurretRotateLoopEvent_ptr != nullptr) {
			return WepHarpoonTurretRotateLoopEvent_ptr;
		}

		auto HammerCrankStartCrankingEvent_ptr = HammerCrankStartCrankingEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankStartCrankingEvent_ptr != nullptr) {
			return HammerCrankStartCrankingEvent_ptr;
		}

		auto SargassoCentipedeAODEndEvent_ptr = SargassoCentipedeAODEndEvent::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeAODEndEvent_ptr != nullptr) {
			return SargassoCentipedeAODEndEvent_ptr;
		}

		auto PlasmaStrikerScopeExitEvent_ptr = PlasmaStrikerScopeExitEvent::from_substruct(incoming_type_id, serialized);
		if (PlasmaStrikerScopeExitEvent_ptr != nullptr) {
			return PlasmaStrikerScopeExitEvent_ptr;
		}

		auto HeroUsedPortalZipEndEvent_ptr = HeroUsedPortalZipEndEvent::from_substruct(incoming_type_id, serialized);
		if (HeroUsedPortalZipEndEvent_ptr != nullptr) {
			return HeroUsedPortalZipEndEvent_ptr;
		}

		auto AnimScalePreRotateStartEvent_ptr = AnimScalePreRotateStartEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScalePreRotateStartEvent_ptr != nullptr) {
			return AnimScalePreRotateStartEvent_ptr;
		}

		auto HammerCrankLightOffEvent_ptr = HammerCrankLightOffEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankLightOffEvent_ptr != nullptr) {
			return HammerCrankLightOffEvent_ptr;
		}

		auto InPositionEvent_ptr = InPositionEvent::from_substruct(incoming_type_id, serialized);
		if (InPositionEvent_ptr != nullptr) {
			return InPositionEvent_ptr;
		}

		auto DevstatsPlayerWeaponFiredEvent_ptr = DevstatsPlayerWeaponFiredEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsPlayerWeaponFiredEvent_ptr != nullptr) {
			return DevstatsPlayerWeaponFiredEvent_ptr;
		}

		auto DifficultyChangeEvent_ptr = DifficultyChangeEvent::from_substruct(incoming_type_id, serialized);
		if (DifficultyChangeEvent_ptr != nullptr) {
			return DifficultyChangeEvent_ptr;
		}

		auto BotFlungStartEvent_ptr = BotFlungStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotFlungStartEvent_ptr != nullptr) {
			return BotFlungStartEvent_ptr;
		}

		auto PyrocitorEquippedFXOnEvent_ptr = PyrocitorEquippedFXOnEvent::from_substruct(incoming_type_id, serialized);
		if (PyrocitorEquippedFXOnEvent_ptr != nullptr) {
			return PyrocitorEquippedFXOnEvent_ptr;
		}

		auto ChainLightningStopChainEvent_ptr = ChainLightningStopChainEvent::from_substruct(incoming_type_id, serialized);
		if (ChainLightningStopChainEvent_ptr != nullptr) {
			return ChainLightningStopChainEvent_ptr;
		}

		auto GrindLeanStartEvent_ptr = GrindLeanStartEvent::from_substruct(incoming_type_id, serialized);
		if (GrindLeanStartEvent_ptr != nullptr) {
			return GrindLeanStartEvent_ptr;
		}

		auto HeroStateTransitionEvent_ptr = HeroStateTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (HeroStateTransitionEvent_ptr != nullptr) {
			return HeroStateTransitionEvent_ptr;
		}

		auto EyeBeamStopEvent_ptr = EyeBeamStopEvent::from_substruct(incoming_type_id, serialized);
		if (EyeBeamStopEvent_ptr != nullptr) {
			return EyeBeamStopEvent_ptr;
		}

		auto ImpactDamageOffEvent_ptr = ImpactDamageOffEvent::from_substruct(incoming_type_id, serialized);
		if (ImpactDamageOffEvent_ptr != nullptr) {
			return ImpactDamageOffEvent_ptr;
		}

		auto JumpPeakEvent_ptr = JumpPeakEvent::from_substruct(incoming_type_id, serialized);
		if (JumpPeakEvent_ptr != nullptr) {
			return JumpPeakEvent_ptr;
		}

		auto AOEWaterHazardStartTellEvent_ptr = AOEWaterHazardStartTellEvent::from_substruct(incoming_type_id, serialized);
		if (AOEWaterHazardStartTellEvent_ptr != nullptr) {
			return AOEWaterHazardStartTellEvent_ptr;
		}

		auto FrozenHeroDiedEvent_ptr = FrozenHeroDiedEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenHeroDiedEvent_ptr != nullptr) {
			return FrozenHeroDiedEvent_ptr;
		}

		auto HUDLowHealthHideEvent_ptr = HUDLowHealthHideEvent::from_substruct(incoming_type_id, serialized);
		if (HUDLowHealthHideEvent_ptr != nullptr) {
			return HUDLowHealthHideEvent_ptr;
		}

		auto AnimPortalZipIntroEvent_ptr = AnimPortalZipIntroEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPortalZipIntroEvent_ptr != nullptr) {
			return AnimPortalZipIntroEvent_ptr;
		}

		auto MeleeChargeReadyEvent_ptr = MeleeChargeReadyEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeChargeReadyEvent_ptr != nullptr) {
			return MeleeChargeReadyEvent_ptr;
		}

		auto TimeScaleFXStartEvent_ptr = TimeScaleFXStartEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleFXStartEvent_ptr != nullptr) {
			return TimeScaleFXStartEvent_ptr;
		}

		auto FadeOutStartedEvent_ptr = FadeOutStartedEvent::from_substruct(incoming_type_id, serialized);
		if (FadeOutStartedEvent_ptr != nullptr) {
			return FadeOutStartedEvent_ptr;
		}

		auto MagnaMissileRangeExitEvent_ptr = MagnaMissileRangeExitEvent::from_substruct(incoming_type_id, serialized);
		if (MagnaMissileRangeExitEvent_ptr != nullptr) {
			return MagnaMissileRangeExitEvent_ptr;
		}

		auto StatusEffectAppliedEvent_ptr = StatusEffectAppliedEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectAppliedEvent_ptr != nullptr) {
			return StatusEffectAppliedEvent_ptr;
		}

		auto CommandFailedEvent_ptr = CommandFailedEvent::from_substruct(incoming_type_id, serialized);
		if (CommandFailedEvent_ptr != nullptr) {
			return CommandFailedEvent_ptr;
		}

		auto ValidAreasChangedEvent_ptr = ValidAreasChangedEvent::from_substruct(incoming_type_id, serialized);
		if (ValidAreasChangedEvent_ptr != nullptr) {
			return ValidAreasChangedEvent_ptr;
		}

		auto AnimExplodeEvent_ptr = AnimExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (AnimExplodeEvent_ptr != nullptr) {
			return AnimExplodeEvent_ptr;
		}

		auto BotSprungEvent_ptr = BotSprungEvent::from_substruct(incoming_type_id, serialized);
		if (BotSprungEvent_ptr != nullptr) {
			return BotSprungEvent_ptr;
		}

		auto FacingStartEvent_ptr = FacingStartEvent::from_substruct(incoming_type_id, serialized);
		if (FacingStartEvent_ptr != nullptr) {
			return FacingStartEvent_ptr;
		}

		auto StreamingVideoSoundStartStreamEvent_ptr = StreamingVideoSoundStartStreamEvent::from_substruct(incoming_type_id, serialized);
		if (StreamingVideoSoundStartStreamEvent_ptr != nullptr) {
			return StreamingVideoSoundStartStreamEvent_ptr;
		}

		auto FrozenSpinStartEvent_ptr = FrozenSpinStartEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenSpinStartEvent_ptr != nullptr) {
			return FrozenSpinStartEvent_ptr;
		}

		auto UIWeaponVendorChainFailEvent_ptr = UIWeaponVendorChainFailEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorChainFailEvent_ptr != nullptr) {
			return UIWeaponVendorChainFailEvent_ptr;
		}

		auto ShipReticleTargetedEvent_ptr = ShipReticleTargetedEvent::from_substruct(incoming_type_id, serialized);
		if (ShipReticleTargetedEvent_ptr != nullptr) {
			return ShipReticleTargetedEvent_ptr;
		}

		auto MountBoostLaunchInternalEvent_ptr = MountBoostLaunchInternalEvent::from_substruct(incoming_type_id, serialized);
		if (MountBoostLaunchInternalEvent_ptr != nullptr) {
			return MountBoostLaunchInternalEvent_ptr;
		}

		auto OnEnterTurretEvent_ptr = OnEnterTurretEvent::from_substruct(incoming_type_id, serialized);
		if (OnEnterTurretEvent_ptr != nullptr) {
			return OnEnterTurretEvent_ptr;
		}

		auto PlatformStopDescentEvent_ptr = PlatformStopDescentEvent::from_substruct(incoming_type_id, serialized);
		if (PlatformStopDescentEvent_ptr != nullptr) {
			return PlatformStopDescentEvent_ptr;
		}

		auto HazardAlarmStartEvent_ptr = HazardAlarmStartEvent::from_substruct(incoming_type_id, serialized);
		if (HazardAlarmStartEvent_ptr != nullptr) {
			return HazardAlarmStartEvent_ptr;
		}

		auto GlobalCooldownSetEvent_ptr = GlobalCooldownSetEvent::from_substruct(incoming_type_id, serialized);
		if (GlobalCooldownSetEvent_ptr != nullptr) {
			return GlobalCooldownSetEvent_ptr;
		}

		auto ActivityClueUserDataStoppedEvent_ptr = ActivityClueUserDataStoppedEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityClueUserDataStoppedEvent_ptr != nullptr) {
			return ActivityClueUserDataStoppedEvent_ptr;
		}

		auto CinematicEquipWeaponOnExitEvent_ptr = CinematicEquipWeaponOnExitEvent::from_substruct(incoming_type_id, serialized);
		if (CinematicEquipWeaponOnExitEvent_ptr != nullptr) {
			return CinematicEquipWeaponOnExitEvent_ptr;
		}

		auto PixelizedStartEvent_ptr = PixelizedStartEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizedStartEvent_ptr != nullptr) {
			return PixelizedStartEvent_ptr;
		}

		auto GameUnpausedEvent_ptr = GameUnpausedEvent::from_substruct(incoming_type_id, serialized);
		if (GameUnpausedEvent_ptr != nullptr) {
			return GameUnpausedEvent_ptr;
		}

		auto SlingshotStartEvent_ptr = SlingshotStartEvent::from_substruct(incoming_type_id, serialized);
		if (SlingshotStartEvent_ptr != nullptr) {
			return SlingshotStartEvent_ptr;
		}

		auto EyeBeamAimEvent_ptr = EyeBeamAimEvent::from_substruct(incoming_type_id, serialized);
		if (EyeBeamAimEvent_ptr != nullptr) {
			return EyeBeamAimEvent_ptr;
		}

		auto ActivityClueUserDataStartedEvent_ptr = ActivityClueUserDataStartedEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityClueUserDataStartedEvent_ptr != nullptr) {
			return ActivityClueUserDataStartedEvent_ptr;
		}

		auto FocusTrackingDisableTrackingEvent_ptr = FocusTrackingDisableTrackingEvent::from_substruct(incoming_type_id, serialized);
		if (FocusTrackingDisableTrackingEvent_ptr != nullptr) {
			return FocusTrackingDisableTrackingEvent_ptr;
		}

		auto FormationInPositionEvent_ptr = FormationInPositionEvent::from_substruct(incoming_type_id, serialized);
		if (FormationInPositionEvent_ptr != nullptr) {
			return FormationInPositionEvent_ptr;
		}

		auto PauseArmorEquipEvent_ptr = PauseArmorEquipEvent::from_substruct(incoming_type_id, serialized);
		if (PauseArmorEquipEvent_ptr != nullptr) {
			return PauseArmorEquipEvent_ptr;
		}

		auto SetEmergentVOEnabledEvent_ptr = SetEmergentVOEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (SetEmergentVOEnabledEvent_ptr != nullptr) {
			return SetEmergentVOEnabledEvent_ptr;
		}

		auto BeamInFinishedEvent_ptr = BeamInFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BeamInFinishedEvent_ptr != nullptr) {
			return BeamInFinishedEvent_ptr;
		}

		auto AnimAimOnEvent_ptr = AnimAimOnEvent::from_substruct(incoming_type_id, serialized);
		if (AnimAimOnEvent_ptr != nullptr) {
			return AnimAimOnEvent_ptr;
		}

		auto MeleeActiveEndEvent_ptr = MeleeActiveEndEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeActiveEndEvent_ptr != nullptr) {
			return MeleeActiveEndEvent_ptr;
		}

		auto HeroLeaveCinematicEvent_ptr = HeroLeaveCinematicEvent::from_substruct(incoming_type_id, serialized);
		if (HeroLeaveCinematicEvent_ptr != nullptr) {
			return HeroLeaveCinematicEvent_ptr;
		}

		auto PortalZipHeroPreWarpEvent_ptr = PortalZipHeroPreWarpEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipHeroPreWarpEvent_ptr != nullptr) {
			return PortalZipHeroPreWarpEvent_ptr;
		}

		auto HeadLookAtEvent_ptr = HeadLookAtEvent::from_substruct(incoming_type_id, serialized);
		if (HeadLookAtEvent_ptr != nullptr) {
			return HeadLookAtEvent_ptr;
		}

		auto UIFrontEndSaveSlotsSelectEvent_ptr = UIFrontEndSaveSlotsSelectEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndSaveSlotsSelectEvent_ptr != nullptr) {
			return UIFrontEndSaveSlotsSelectEvent_ptr;
		}

		auto EventExplosionEventBase_ptr = EventExplosionEventBase::from_substruct(incoming_type_id, serialized);
		if (EventExplosionEventBase_ptr != nullptr) {
			return EventExplosionEventBase_ptr;
		}

		auto FlyerPickupArrivedEvent_ptr = FlyerPickupArrivedEvent::from_substruct(incoming_type_id, serialized);
		if (FlyerPickupArrivedEvent_ptr != nullptr) {
			return FlyerPickupArrivedEvent_ptr;
		}

		auto MoviePracticallyDoneEvent_ptr = MoviePracticallyDoneEvent::from_substruct(incoming_type_id, serialized);
		if (MoviePracticallyDoneEvent_ptr != nullptr) {
			return MoviePracticallyDoneEvent_ptr;
		}

		auto MagnaMissileMagnetActorEnteredEvent_ptr = MagnaMissileMagnetActorEnteredEvent::from_substruct(incoming_type_id, serialized);
		if (MagnaMissileMagnetActorEnteredEvent_ptr != nullptr) {
			return MagnaMissileMagnetActorEnteredEvent_ptr;
		}

		auto AccessibilityHighContrastBackgroundEnableEvent_ptr = AccessibilityHighContrastBackgroundEnableEvent::from_substruct(incoming_type_id, serialized);
		if (AccessibilityHighContrastBackgroundEnableEvent_ptr != nullptr) {
			return AccessibilityHighContrastBackgroundEnableEvent_ptr;
		}

		auto ShipPickedUpMissileEvent_ptr = ShipPickedUpMissileEvent::from_substruct(incoming_type_id, serialized);
		if (ShipPickedUpMissileEvent_ptr != nullptr) {
			return ShipPickedUpMissileEvent_ptr;
		}

		auto WarpRifleStartFireLoopEvent_ptr = WarpRifleStartFireLoopEvent::from_substruct(incoming_type_id, serialized);
		if (WarpRifleStartFireLoopEvent_ptr != nullptr) {
			return WarpRifleStartFireLoopEvent_ptr;
		}

		auto NPCBotFleeStartEvent_ptr = NPCBotFleeStartEvent::from_substruct(incoming_type_id, serialized);
		if (NPCBotFleeStartEvent_ptr != nullptr) {
			return NPCBotFleeStartEvent_ptr;
		}

		auto UIPlanetMenuTravelEvent_ptr = UIPlanetMenuTravelEvent::from_substruct(incoming_type_id, serialized);
		if (UIPlanetMenuTravelEvent_ptr != nullptr) {
			return UIPlanetMenuTravelEvent_ptr;
		}

		auto UIFrontEndStartGameEvent_ptr = UIFrontEndStartGameEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndStartGameEvent_ptr != nullptr) {
			return UIFrontEndStartGameEvent_ptr;
		}

		auto BotMovingEvent_ptr = BotMovingEvent::from_substruct(incoming_type_id, serialized);
		if (BotMovingEvent_ptr != nullptr) {
			return BotMovingEvent_ptr;
		}

		auto Cinematic2ExitEvent_ptr = Cinematic2ExitEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2ExitEvent_ptr != nullptr) {
			return Cinematic2ExitEvent_ptr;
		}

		auto HammerCrankStopCrankingEvent_ptr = HammerCrankStopCrankingEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankStopCrankingEvent_ptr != nullptr) {
			return HammerCrankStopCrankingEvent_ptr;
		}

		auto AnimHeadAimBlendOutEvent_ptr = AnimHeadAimBlendOutEvent::from_substruct(incoming_type_id, serialized);
		if (AnimHeadAimBlendOutEvent_ptr != nullptr) {
			return AnimHeadAimBlendOutEvent_ptr;
		}

		auto InteractBrokenStartEvent_ptr = InteractBrokenStartEvent::from_substruct(incoming_type_id, serialized);
		if (InteractBrokenStartEvent_ptr != nullptr) {
			return InteractBrokenStartEvent_ptr;
		}

		auto IceBlockDestroyedEvent_ptr = IceBlockDestroyedEvent::from_substruct(incoming_type_id, serialized);
		if (IceBlockDestroyedEvent_ptr != nullptr) {
			return IceBlockDestroyedEvent_ptr;
		}

		auto OnTriggerEvent_ptr = OnTriggerEvent::from_substruct(incoming_type_id, serialized);
		if (OnTriggerEvent_ptr != nullptr) {
			return OnTriggerEvent_ptr;
		}

		auto ChainLightningStartChainEvent_ptr = ChainLightningStartChainEvent::from_substruct(incoming_type_id, serialized);
		if (ChainLightningStartChainEvent_ptr != nullptr) {
			return ChainLightningStartChainEvent_ptr;
		}

		auto ProjectilePassedMaxRangeEvent_ptr = ProjectilePassedMaxRangeEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectilePassedMaxRangeEvent_ptr != nullptr) {
			return ProjectilePassedMaxRangeEvent_ptr;
		}

		auto FlewByStartEvent_ptr = FlewByStartEvent::from_substruct(incoming_type_id, serialized);
		if (FlewByStartEvent_ptr != nullptr) {
			return FlewByStartEvent_ptr;
		}

		auto PyrocitorFiringEndEvent_ptr = PyrocitorFiringEndEvent::from_substruct(incoming_type_id, serialized);
		if (PyrocitorFiringEndEvent_ptr != nullptr) {
			return PyrocitorFiringEndEvent_ptr;
		}

		auto EnemySetupCompleteEvent_ptr = EnemySetupCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (EnemySetupCompleteEvent_ptr != nullptr) {
			return EnemySetupCompleteEvent_ptr;
		}

		auto UIWeaponVendorStartEvent_ptr = UIWeaponVendorStartEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorStartEvent_ptr != nullptr) {
			return UIWeaponVendorStartEvent_ptr;
		}

		auto ShipMagnetInvalidTargetEvent_ptr = ShipMagnetInvalidTargetEvent::from_substruct(incoming_type_id, serialized);
		if (ShipMagnetInvalidTargetEvent_ptr != nullptr) {
			return ShipMagnetInvalidTargetEvent_ptr;
		}

		auto BotSpawnedWithNoAnimEvent_ptr = BotSpawnedWithNoAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotSpawnedWithNoAnimEvent_ptr != nullptr) {
			return BotSpawnedWithNoAnimEvent_ptr;
		}

		auto HUDLowHealthFirstPulseEvent_ptr = HUDLowHealthFirstPulseEvent::from_substruct(incoming_type_id, serialized);
		if (HUDLowHealthFirstPulseEvent_ptr != nullptr) {
			return HUDLowHealthFirstPulseEvent_ptr;
		}

		auto AnimRagdollEvent_ptr = AnimRagdollEvent::from_substruct(incoming_type_id, serialized);
		if (AnimRagdollEvent_ptr != nullptr) {
			return AnimRagdollEvent_ptr;
		}

		auto LaserSightImpactOffEvent_ptr = LaserSightImpactOffEvent::from_substruct(incoming_type_id, serialized);
		if (LaserSightImpactOffEvent_ptr != nullptr) {
			return LaserSightImpactOffEvent_ptr;
		}

		auto SpawnTrapGunkEvent_ptr = SpawnTrapGunkEvent::from_substruct(incoming_type_id, serialized);
		if (SpawnTrapGunkEvent_ptr != nullptr) {
			return SpawnTrapGunkEvent_ptr;
		}

		auto DisplayEnemyHealthBarsOn_ptr = DisplayEnemyHealthBarsOn::from_substruct(incoming_type_id, serialized);
		if (DisplayEnemyHealthBarsOn_ptr != nullptr) {
			return DisplayEnemyHealthBarsOn_ptr;
		}

		auto TauntEvent_ptr = TauntEvent::from_substruct(incoming_type_id, serialized);
		if (TauntEvent_ptr != nullptr) {
			return TauntEvent_ptr;
		}

		auto AnimReleaseEvent_ptr = AnimReleaseEvent::from_substruct(incoming_type_id, serialized);
		if (AnimReleaseEvent_ptr != nullptr) {
			return AnimReleaseEvent_ptr;
		}

		auto WeaponWarpRifleImplosionActivatedEvent_ptr = WeaponWarpRifleImplosionActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponWarpRifleImplosionActivatedEvent_ptr != nullptr) {
			return WeaponWarpRifleImplosionActivatedEvent_ptr;
		}

		auto PauseWeaponsRemapChangeEvent_ptr = PauseWeaponsRemapChangeEvent::from_substruct(incoming_type_id, serialized);
		if (PauseWeaponsRemapChangeEvent_ptr != nullptr) {
			return PauseWeaponsRemapChangeEvent_ptr;
		}

		auto FormationAttackWarningStopEvent_ptr = FormationAttackWarningStopEvent::from_substruct(incoming_type_id, serialized);
		if (FormationAttackWarningStopEvent_ptr != nullptr) {
			return FormationAttackWarningStopEvent_ptr;
		}

		auto PauseMapZoomStartEvent_ptr = PauseMapZoomStartEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMapZoomStartEvent_ptr != nullptr) {
			return PauseMapZoomStartEvent_ptr;
		}

		auto PlayerJoinedEvent_ptr = PlayerJoinedEvent::from_substruct(incoming_type_id, serialized);
		if (PlayerJoinedEvent_ptr != nullptr) {
			return PlayerJoinedEvent_ptr;
		}

		auto MagShieldLaserImpactEvent_ptr = MagShieldLaserImpactEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldLaserImpactEvent_ptr != nullptr) {
			return MagShieldLaserImpactEvent_ptr;
		}

		auto PauseArmorHeadHoverEvent_ptr = PauseArmorHeadHoverEvent::from_substruct(incoming_type_id, serialized);
		if (PauseArmorHeadHoverEvent_ptr != nullptr) {
			return PauseArmorHeadHoverEvent_ptr;
		}

		auto RequestCritterDeactivateEvent_ptr = RequestCritterDeactivateEvent::from_substruct(incoming_type_id, serialized);
		if (RequestCritterDeactivateEvent_ptr != nullptr) {
			return RequestCritterDeactivateEvent_ptr;
		}

		auto WepHarpoonTurretRotateStopEvent_ptr = WepHarpoonTurretRotateStopEvent::from_substruct(incoming_type_id, serialized);
		if (WepHarpoonTurretRotateStopEvent_ptr != nullptr) {
			return WepHarpoonTurretRotateStopEvent_ptr;
		}

		auto CineCameraDisableYawPitchEvent_ptr = CineCameraDisableYawPitchEvent::from_substruct(incoming_type_id, serialized);
		if (CineCameraDisableYawPitchEvent_ptr != nullptr) {
			return CineCameraDisableYawPitchEvent_ptr;
		}

		auto WeaponLaserChargeStartEvent_ptr = WeaponLaserChargeStartEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponLaserChargeStartEvent_ptr != nullptr) {
			return WeaponLaserChargeStartEvent_ptr;
		}

		auto HeroDefaultVanityLoadedEvent_ptr = HeroDefaultVanityLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (HeroDefaultVanityLoadedEvent_ptr != nullptr) {
			return HeroDefaultVanityLoadedEvent_ptr;
		}

		auto BoltCrankStartCrankingEvent_ptr = BoltCrankStartCrankingEvent::from_substruct(incoming_type_id, serialized);
		if (BoltCrankStartCrankingEvent_ptr != nullptr) {
			return BoltCrankStartCrankingEvent_ptr;
		}

		auto UIWeaponSelectChangeEvent_ptr = UIWeaponSelectChangeEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponSelectChangeEvent_ptr != nullptr) {
			return UIWeaponSelectChangeEvent_ptr;
		}

		auto TeleporterDisabledEvent_ptr = TeleporterDisabledEvent::from_substruct(incoming_type_id, serialized);
		if (TeleporterDisabledEvent_ptr != nullptr) {
			return TeleporterDisabledEvent_ptr;
		}

		auto GrindOffEvent_ptr = GrindOffEvent::from_substruct(incoming_type_id, serialized);
		if (GrindOffEvent_ptr != nullptr) {
			return GrindOffEvent_ptr;
		}

		auto ShipUsingDisabledMissilesEvent_ptr = ShipUsingDisabledMissilesEvent::from_substruct(incoming_type_id, serialized);
		if (ShipUsingDisabledMissilesEvent_ptr != nullptr) {
			return ShipUsingDisabledMissilesEvent_ptr;
		}

		auto AnimSpawnEvent_ptr = AnimSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (AnimSpawnEvent_ptr != nullptr) {
			return AnimSpawnEvent_ptr;
		}

		auto RagdollActivatedEvent_ptr = RagdollActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (RagdollActivatedEvent_ptr != nullptr) {
			return RagdollActivatedEvent_ptr;
		}

		auto AmbientShooterFireEvent_ptr = AmbientShooterFireEvent::from_substruct(incoming_type_id, serialized);
		if (AmbientShooterFireEvent_ptr != nullptr) {
			return AmbientShooterFireEvent_ptr;
		}

		auto TimeScaleCancelEvent_ptr = TimeScaleCancelEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleCancelEvent_ptr != nullptr) {
			return TimeScaleCancelEvent_ptr;
		}

		auto EventMeterFullEvent_ptr = EventMeterFullEvent::from_substruct(incoming_type_id, serialized);
		if (EventMeterFullEvent_ptr != nullptr) {
			return EventMeterFullEvent_ptr;
		}

		auto VanityAccessoryToggleEvent_ptr = VanityAccessoryToggleEvent::from_substruct(incoming_type_id, serialized);
		if (VanityAccessoryToggleEvent_ptr != nullptr) {
			return VanityAccessoryToggleEvent_ptr;
		}

		auto DrNefariousOnShieldDeactivatedEvent_ptr = DrNefariousOnShieldDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (DrNefariousOnShieldDeactivatedEvent_ptr != nullptr) {
			return DrNefariousOnShieldDeactivatedEvent_ptr;
		}

		auto GameEndDevstatsEvent_ptr = GameEndDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (GameEndDevstatsEvent_ptr != nullptr) {
			return GameEndDevstatsEvent_ptr;
		}

		auto MusicIntensityLowEvent_ptr = MusicIntensityLowEvent::from_substruct(incoming_type_id, serialized);
		if (MusicIntensityLowEvent_ptr != nullptr) {
			return MusicIntensityLowEvent_ptr;
		}

		auto BotOnTranslationFinishedEvent_ptr = BotOnTranslationFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BotOnTranslationFinishedEvent_ptr != nullptr) {
			return BotOnTranslationFinishedEvent_ptr;
		}

		auto FiringDesiredAimPosChangedEvent_ptr = FiringDesiredAimPosChangedEvent::from_substruct(incoming_type_id, serialized);
		if (FiringDesiredAimPosChangedEvent_ptr != nullptr) {
			return FiringDesiredAimPosChangedEvent_ptr;
		}

		auto UITutorialCompleteEvent_ptr = UITutorialCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (UITutorialCompleteEvent_ptr != nullptr) {
			return UITutorialCompleteEvent_ptr;
		}

		auto PlanetMenuAcceptEvent_ptr = PlanetMenuAcceptEvent::from_substruct(incoming_type_id, serialized);
		if (PlanetMenuAcceptEvent_ptr != nullptr) {
			return PlanetMenuAcceptEvent_ptr;
		}

		auto ThumperThumpEvent_ptr = ThumperThumpEvent::from_substruct(incoming_type_id, serialized);
		if (ThumperThumpEvent_ptr != nullptr) {
			return ThumperThumpEvent_ptr;
		}

		auto PhotomodeSelfieActivateEvent_ptr = PhotomodeSelfieActivateEvent::from_substruct(incoming_type_id, serialized);
		if (PhotomodeSelfieActivateEvent_ptr != nullptr) {
			return PhotomodeSelfieActivateEvent_ptr;
		}

		auto BoltCrankTargetPaused_ptr = BoltCrankTargetPaused::from_substruct(incoming_type_id, serialized);
		if (BoltCrankTargetPaused_ptr != nullptr) {
			return BoltCrankTargetPaused_ptr;
		}

		auto BeginRotationEvent_ptr = BeginRotationEvent::from_substruct(incoming_type_id, serialized);
		if (BeginRotationEvent_ptr != nullptr) {
			return BeginRotationEvent_ptr;
		}

		auto ShipBulletsFinishedEvent_ptr = ShipBulletsFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (ShipBulletsFinishedEvent_ptr != nullptr) {
			return ShipBulletsFinishedEvent_ptr;
		}

		auto MeleeDamageImpactEvent_ptr = MeleeDamageImpactEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeDamageImpactEvent_ptr != nullptr) {
			return MeleeDamageImpactEvent_ptr;
		}

		auto DrNefariousDimensionatorShotEndEvent_ptr = DrNefariousDimensionatorShotEndEvent::from_substruct(incoming_type_id, serialized);
		if (DrNefariousDimensionatorShotEndEvent_ptr != nullptr) {
			return DrNefariousDimensionatorShotEndEvent_ptr;
		}

		auto FossilizeBonusBulletLoadedEvent_ptr = FossilizeBonusBulletLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeBonusBulletLoadedEvent_ptr != nullptr) {
			return FossilizeBonusBulletLoadedEvent_ptr;
		}

		auto HoverbootBoostStartEvent_ptr = HoverbootBoostStartEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootBoostStartEvent_ptr != nullptr) {
			return HoverbootBoostStartEvent_ptr;
		}

		auto BrokeEvent_ptr = BrokeEvent::from_substruct(incoming_type_id, serialized);
		if (BrokeEvent_ptr != nullptr) {
			return BrokeEvent_ptr;
		}

		auto BotAnimLandedEvent_ptr = BotAnimLandedEvent::from_substruct(incoming_type_id, serialized);
		if (BotAnimLandedEvent_ptr != nullptr) {
			return BotAnimLandedEvent_ptr;
		}

		auto UIWeaponVendorChainAcceptLargeEvent_ptr = UIWeaponVendorChainAcceptLargeEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorChainAcceptLargeEvent_ptr != nullptr) {
			return UIWeaponVendorChainAcceptLargeEvent_ptr;
		}

		auto BouncyActiveFXOffEvent_ptr = BouncyActiveFXOffEvent::from_substruct(incoming_type_id, serialized);
		if (BouncyActiveFXOffEvent_ptr != nullptr) {
			return BouncyActiveFXOffEvent_ptr;
		}

		auto OnVaultDownStartEvent_ptr = OnVaultDownStartEvent::from_substruct(incoming_type_id, serialized);
		if (OnVaultDownStartEvent_ptr != nullptr) {
			return OnVaultDownStartEvent_ptr;
		}

		auto RYNOBulletFiredEvent_ptr = RYNOBulletFiredEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOBulletFiredEvent_ptr != nullptr) {
			return RYNOBulletFiredEvent_ptr;
		}

		auto CustomOverlayRegisteredEvent_ptr = CustomOverlayRegisteredEvent::from_substruct(incoming_type_id, serialized);
		if (CustomOverlayRegisteredEvent_ptr != nullptr) {
			return CustomOverlayRegisteredEvent_ptr;
		}

		auto FinaleNefWeakspotDamagedStage1Event_ptr = FinaleNefWeakspotDamagedStage1Event::from_substruct(incoming_type_id, serialized);
		if (FinaleNefWeakspotDamagedStage1Event_ptr != nullptr) {
			return FinaleNefWeakspotDamagedStage1Event_ptr;
		}

		auto ManglerShockwaveTellEvent_ptr = ManglerShockwaveTellEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerShockwaveTellEvent_ptr != nullptr) {
			return ManglerShockwaveTellEvent_ptr;
		}

		auto ShipTargetDetectedEvent_ptr = ShipTargetDetectedEvent::from_substruct(incoming_type_id, serialized);
		if (ShipTargetDetectedEvent_ptr != nullptr) {
			return ShipTargetDetectedEvent_ptr;
		}

		auto AnimVarAscendingEvent_ptr = AnimVarAscendingEvent::from_substruct(incoming_type_id, serialized);
		if (AnimVarAscendingEvent_ptr != nullptr) {
			return AnimVarAscendingEvent_ptr;
		}

		auto FossilizeTimeSlowStartEvent_ptr = FossilizeTimeSlowStartEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeTimeSlowStartEvent_ptr != nullptr) {
			return FossilizeTimeSlowStartEvent_ptr;
		}

		auto ObjZipLineFireEvent_ptr = ObjZipLineFireEvent::from_substruct(incoming_type_id, serialized);
		if (ObjZipLineFireEvent_ptr != nullptr) {
			return ObjZipLineFireEvent_ptr;
		}

		auto MagnaMissileMagnetExplodeEvent_ptr = MagnaMissileMagnetExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (MagnaMissileMagnetExplodeEvent_ptr != nullptr) {
			return MagnaMissileMagnetExplodeEvent_ptr;
		}

		auto MountFlyerPickupEvent_ptr = MountFlyerPickupEvent::from_substruct(incoming_type_id, serialized);
		if (MountFlyerPickupEvent_ptr != nullptr) {
			return MountFlyerPickupEvent_ptr;
		}

		auto BotIntroInAirEvent_ptr = BotIntroInAirEvent::from_substruct(incoming_type_id, serialized);
		if (BotIntroInAirEvent_ptr != nullptr) {
			return BotIntroInAirEvent_ptr;
		}

		auto DiveEndedEvent_ptr = DiveEndedEvent::from_substruct(incoming_type_id, serialized);
		if (DiveEndedEvent_ptr != nullptr) {
			return DiveEndedEvent_ptr;
		}

		auto DoomBotExplodeEvent_ptr = DoomBotExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (DoomBotExplodeEvent_ptr != nullptr) {
			return DoomBotExplodeEvent_ptr;
		}

		auto ActorUpdateParentChangedEvent_ptr = ActorUpdateParentChangedEvent::from_substruct(incoming_type_id, serialized);
		if (ActorUpdateParentChangedEvent_ptr != nullptr) {
			return ActorUpdateParentChangedEvent_ptr;
		}

		auto BotGuideArrivedEvent_ptr = BotGuideArrivedEvent::from_substruct(incoming_type_id, serialized);
		if (BotGuideArrivedEvent_ptr != nullptr) {
			return BotGuideArrivedEvent_ptr;
		}

		auto EndMountSpeedEvent_ptr = EndMountSpeedEvent::from_substruct(incoming_type_id, serialized);
		if (EndMountSpeedEvent_ptr != nullptr) {
			return EndMountSpeedEvent_ptr;
		}

		auto ManglerTellTrailDeactivateEvent_ptr = ManglerTellTrailDeactivateEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerTellTrailDeactivateEvent_ptr != nullptr) {
			return ManglerTellTrailDeactivateEvent_ptr;
		}

		auto WindGustEvent_ptr = WindGustEvent::from_substruct(incoming_type_id, serialized);
		if (WindGustEvent_ptr != nullptr) {
			return WindGustEvent_ptr;
		}

		auto ExitedVendorEvent_ptr = ExitedVendorEvent::from_substruct(incoming_type_id, serialized);
		if (ExitedVendorEvent_ptr != nullptr) {
			return ExitedVendorEvent_ptr;
		}

		auto DevstatsBigObjectivePOIsEnabledEvent_ptr = DevstatsBigObjectivePOIsEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsBigObjectivePOIsEnabledEvent_ptr != nullptr) {
			return DevstatsBigObjectivePOIsEnabledEvent_ptr;
		}

		auto FossilizeWalkStartEvent_ptr = FossilizeWalkStartEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeWalkStartEvent_ptr != nullptr) {
			return FossilizeWalkStartEvent_ptr;
		}

		auto AnimSpawnChunkEvent_ptr = AnimSpawnChunkEvent::from_substruct(incoming_type_id, serialized);
		if (AnimSpawnChunkEvent_ptr != nullptr) {
			return AnimSpawnChunkEvent_ptr;
		}

		auto OnFireReactStartEvent_ptr = OnFireReactStartEvent::from_substruct(incoming_type_id, serialized);
		if (OnFireReactStartEvent_ptr != nullptr) {
			return OnFireReactStartEvent_ptr;
		}

		auto WepHarpoonTurretDryfireEvent_ptr = WepHarpoonTurretDryfireEvent::from_substruct(incoming_type_id, serialized);
		if (WepHarpoonTurretDryfireEvent_ptr != nullptr) {
			return WepHarpoonTurretDryfireEvent_ptr;
		}

		auto MeleeSwingEvent_ptr = MeleeSwingEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeSwingEvent_ptr != nullptr) {
			return MeleeSwingEvent_ptr;
		}

		auto ImpactDamageOnEvent_ptr = ImpactDamageOnEvent::from_substruct(incoming_type_id, serialized);
		if (ImpactDamageOnEvent_ptr != nullptr) {
			return ImpactDamageOnEvent_ptr;
		}

		auto MountDeathEvent_ptr = MountDeathEvent::from_substruct(incoming_type_id, serialized);
		if (MountDeathEvent_ptr != nullptr) {
			return MountDeathEvent_ptr;
		}

		auto CommandEvent_ptr = CommandEvent::from_substruct(incoming_type_id, serialized);
		if (CommandEvent_ptr != nullptr) {
			return CommandEvent_ptr;
		}

		auto CinematicEquipWeaponEvent_ptr = CinematicEquipWeaponEvent::from_substruct(incoming_type_id, serialized);
		if (CinematicEquipWeaponEvent_ptr != nullptr) {
			return CinematicEquipWeaponEvent_ptr;
		}

		auto HUDLowHealthPulseEvent_ptr = HUDLowHealthPulseEvent::from_substruct(incoming_type_id, serialized);
		if (HUDLowHealthPulseEvent_ptr != nullptr) {
			return HUDLowHealthPulseEvent_ptr;
		}

		auto DialogDurationEvent_ptr = DialogDurationEvent::from_substruct(incoming_type_id, serialized);
		if (DialogDurationEvent_ptr != nullptr) {
			return DialogDurationEvent_ptr;
		}

		auto AnimDamageJointEventResponderEvent_ptr = AnimDamageJointEventResponderEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDamageJointEventResponderEvent_ptr != nullptr) {
			return AnimDamageJointEventResponderEvent_ptr;
		}

		auto UIFrontEndForwardEvent_ptr = UIFrontEndForwardEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndForwardEvent_ptr != nullptr) {
			return UIFrontEndForwardEvent_ptr;
		}

		auto HUDMessageArenaWaveStartedEvent_ptr = HUDMessageArenaWaveStartedEvent::from_substruct(incoming_type_id, serialized);
		if (HUDMessageArenaWaveStartedEvent_ptr != nullptr) {
			return HUDMessageArenaWaveStartedEvent_ptr;
		}

		auto ChildSpawnedEvent_ptr = ChildSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (ChildSpawnedEvent_ptr != nullptr) {
			return ChildSpawnedEvent_ptr;
		}

		auto VehicleStoppedEvent_ptr = VehicleStoppedEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleStoppedEvent_ptr != nullptr) {
			return VehicleStoppedEvent_ptr;
		}

		auto UIWeaponVendorInStockEvent_ptr = UIWeaponVendorInStockEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorInStockEvent_ptr != nullptr) {
			return UIWeaponVendorInStockEvent_ptr;
		}

		auto UnburrowEvent_ptr = UnburrowEvent::from_substruct(incoming_type_id, serialized);
		if (UnburrowEvent_ptr != nullptr) {
			return UnburrowEvent_ptr;
		}

		auto SyncedAnimStartTransEvent_ptr = SyncedAnimStartTransEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimStartTransEvent_ptr != nullptr) {
			return SyncedAnimStartTransEvent_ptr;
		}

		auto TopiaryDestroyEvent_ptr = TopiaryDestroyEvent::from_substruct(incoming_type_id, serialized);
		if (TopiaryDestroyEvent_ptr != nullptr) {
			return TopiaryDestroyEvent_ptr;
		}

		auto MeleeAnimCameraStopEvent_ptr = MeleeAnimCameraStopEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeAnimCameraStopEvent_ptr != nullptr) {
			return MeleeAnimCameraStopEvent_ptr;
		}

		auto BotStateFaceStopTurningEvent_ptr = BotStateFaceStopTurningEvent::from_substruct(incoming_type_id, serialized);
		if (BotStateFaceStopTurningEvent_ptr != nullptr) {
			return BotStateFaceStopTurningEvent_ptr;
		}

		auto BotInvestigateEndEvent_ptr = BotInvestigateEndEvent::from_substruct(incoming_type_id, serialized);
		if (BotInvestigateEndEvent_ptr != nullptr) {
			return BotInvestigateEndEvent_ptr;
		}

		auto TriggerPhysicsLauncherEvent_ptr = TriggerPhysicsLauncherEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerPhysicsLauncherEvent_ptr != nullptr) {
			return TriggerPhysicsLauncherEvent_ptr;
		}

		auto HeroMeleeTriggeredEvent_ptr = HeroMeleeTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (HeroMeleeTriggeredEvent_ptr != nullptr) {
			return HeroMeleeTriggeredEvent_ptr;
		}

		auto ClankPackHeliStopEvent_ptr = ClankPackHeliStopEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHeliStopEvent_ptr != nullptr) {
			return ClankPackHeliStopEvent_ptr;
		}

		auto UIMenuPopupOpenEvent_ptr = UIMenuPopupOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuPopupOpenEvent_ptr != nullptr) {
			return UIMenuPopupOpenEvent_ptr;
		}

		auto UserProfileDevstatsEvent_ptr = UserProfileDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (UserProfileDevstatsEvent_ptr != nullptr) {
			return UserProfileDevstatsEvent_ptr;
		}

		auto UserEquippedWeaponFXOffEvent_ptr = UserEquippedWeaponFXOffEvent::from_substruct(incoming_type_id, serialized);
		if (UserEquippedWeaponFXOffEvent_ptr != nullptr) {
			return UserEquippedWeaponFXOffEvent_ptr;
		}

		auto MeleeStormSkillCastPowerEndEvent_ptr = MeleeStormSkillCastPowerEndEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeStormSkillCastPowerEndEvent_ptr != nullptr) {
			return MeleeStormSkillCastPowerEndEvent_ptr;
		}

		auto PauseArmorEquipSetEvent_ptr = PauseArmorEquipSetEvent::from_substruct(incoming_type_id, serialized);
		if (PauseArmorEquipSetEvent_ptr != nullptr) {
			return PauseArmorEquipSetEvent_ptr;
		}

		auto ShipThrustStopEvent_ptr = ShipThrustStopEvent::from_substruct(incoming_type_id, serialized);
		if (ShipThrustStopEvent_ptr != nullptr) {
			return ShipThrustStopEvent_ptr;
		}

		auto HeroKilledBotEvent_ptr = HeroKilledBotEvent::from_substruct(incoming_type_id, serialized);
		if (HeroKilledBotEvent_ptr != nullptr) {
			return HeroKilledBotEvent_ptr;
		}

		auto HardwareProfileDevstatsEvent_ptr = HardwareProfileDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (HardwareProfileDevstatsEvent_ptr != nullptr) {
			return HardwareProfileDevstatsEvent_ptr;
		}

		auto OnStopTriggerEvent_ptr = OnStopTriggerEvent::from_substruct(incoming_type_id, serialized);
		if (OnStopTriggerEvent_ptr != nullptr) {
			return OnStopTriggerEvent_ptr;
		}

		auto DropObjectEvent_ptr = DropObjectEvent::from_substruct(incoming_type_id, serialized);
		if (DropObjectEvent_ptr != nullptr) {
			return DropObjectEvent_ptr;
		}

		auto AnimGrabEvent_ptr = AnimGrabEvent::from_substruct(incoming_type_id, serialized);
		if (AnimGrabEvent_ptr != nullptr) {
			return AnimGrabEvent_ptr;
		}

		auto HoverbootOmniBoostPadRotateEndEvent_ptr = HoverbootOmniBoostPadRotateEndEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootOmniBoostPadRotateEndEvent_ptr != nullptr) {
			return HoverbootOmniBoostPadRotateEndEvent_ptr;
		}

		auto SpawnerBotSpawnedMaxEvent_ptr = SpawnerBotSpawnedMaxEvent::from_substruct(incoming_type_id, serialized);
		if (SpawnerBotSpawnedMaxEvent_ptr != nullptr) {
			return SpawnerBotSpawnedMaxEvent_ptr;
		}

		auto PlayDialogInterruptedEvent_ptr = PlayDialogInterruptedEvent::from_substruct(incoming_type_id, serialized);
		if (PlayDialogInterruptedEvent_ptr != nullptr) {
			return PlayDialogInterruptedEvent_ptr;
		}

		auto ChangeWeaponZoomEvent_ptr = ChangeWeaponZoomEvent::from_substruct(incoming_type_id, serialized);
		if (ChangeWeaponZoomEvent_ptr != nullptr) {
			return ChangeWeaponZoomEvent_ptr;
		}

		auto DrNefariousOnShieldActivatedEvent_ptr = DrNefariousOnShieldActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (DrNefariousOnShieldActivatedEvent_ptr != nullptr) {
			return DrNefariousOnShieldActivatedEvent_ptr;
		}

		auto ResponseEvent_ptr = ResponseEvent::from_substruct(incoming_type_id, serialized);
		if (ResponseEvent_ptr != nullptr) {
			return ResponseEvent_ptr;
		}

		auto WeaponTriggeredEvent_ptr = WeaponTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponTriggeredEvent_ptr != nullptr) {
			return WeaponTriggeredEvent_ptr;
		}

		auto DevstatsPlayerAbilityUsedEvent_ptr = DevstatsPlayerAbilityUsedEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsPlayerAbilityUsedEvent_ptr != nullptr) {
			return DevstatsPlayerAbilityUsedEvent_ptr;
		}

		auto MeleeImpactFrameEvent_ptr = MeleeImpactFrameEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeImpactFrameEvent_ptr != nullptr) {
			return MeleeImpactFrameEvent_ptr;
		}

		auto ImpHarpoonTurretWhaleEvent_ptr = ImpHarpoonTurretWhaleEvent::from_substruct(incoming_type_id, serialized);
		if (ImpHarpoonTurretWhaleEvent_ptr != nullptr) {
			return ImpHarpoonTurretWhaleEvent_ptr;
		}

		auto HeroRevivingCompleteEvent_ptr = HeroRevivingCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (HeroRevivingCompleteEvent_ptr != nullptr) {
			return HeroRevivingCompleteEvent_ptr;
		}

		auto UIPlanetMenuErrorEvent_ptr = UIPlanetMenuErrorEvent::from_substruct(incoming_type_id, serialized);
		if (UIPlanetMenuErrorEvent_ptr != nullptr) {
			return UIPlanetMenuErrorEvent_ptr;
		}

		auto StageTransitionEndEvent_ptr = StageTransitionEndEvent::from_substruct(incoming_type_id, serialized);
		if (StageTransitionEndEvent_ptr != nullptr) {
			return StageTransitionEndEvent_ptr;
		}

		auto PassiveShiftCompleteEvent_ptr = PassiveShiftCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (PassiveShiftCompleteEvent_ptr != nullptr) {
			return PassiveShiftCompleteEvent_ptr;
		}

		auto AttackEndEvent_ptr = AttackEndEvent::from_substruct(incoming_type_id, serialized);
		if (AttackEndEvent_ptr != nullptr) {
			return AttackEndEvent_ptr;
		}

		auto ArachnodroidSpeedBoostOffEvent_ptr = ArachnodroidSpeedBoostOffEvent::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidSpeedBoostOffEvent_ptr != nullptr) {
			return ArachnodroidSpeedBoostOffEvent_ptr;
		}

		auto BestOfferChangedEvent_ptr = BestOfferChangedEvent::from_substruct(incoming_type_id, serialized);
		if (BestOfferChangedEvent_ptr != nullptr) {
			return BestOfferChangedEvent_ptr;
		}

		auto BouncerDroppedMiniBombEvent_ptr = BouncerDroppedMiniBombEvent::from_substruct(incoming_type_id, serialized);
		if (BouncerDroppedMiniBombEvent_ptr != nullptr) {
			return BouncerDroppedMiniBombEvent_ptr;
		}

		auto HammerCrankLoadFinishedEvent_ptr = HammerCrankLoadFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankLoadFinishedEvent_ptr != nullptr) {
			return HammerCrankLoadFinishedEvent_ptr;
		}

		auto AttachToWaterSurfaceEvent_ptr = AttachToWaterSurfaceEvent::from_substruct(incoming_type_id, serialized);
		if (AttachToWaterSurfaceEvent_ptr != nullptr) {
			return AttachToWaterSurfaceEvent_ptr;
		}

		auto Beam2JointStopEvent_ptr = Beam2JointStopEvent::from_substruct(incoming_type_id, serialized);
		if (Beam2JointStopEvent_ptr != nullptr) {
			return Beam2JointStopEvent_ptr;
		}

		auto MovingLevelStartEvent_ptr = MovingLevelStartEvent::from_substruct(incoming_type_id, serialized);
		if (MovingLevelStartEvent_ptr != nullptr) {
			return MovingLevelStartEvent_ptr;
		}

		auto CinematicExitToLedgeEvent_ptr = CinematicExitToLedgeEvent::from_substruct(incoming_type_id, serialized);
		if (CinematicExitToLedgeEvent_ptr != nullptr) {
			return CinematicExitToLedgeEvent_ptr;
		}

		auto AnimChunkEvent_ptr = AnimChunkEvent::from_substruct(incoming_type_id, serialized);
		if (AnimChunkEvent_ptr != nullptr) {
			return AnimChunkEvent_ptr;
		}

		auto TriggerSwitchAutoResetEvent_ptr = TriggerSwitchAutoResetEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerSwitchAutoResetEvent_ptr != nullptr) {
			return TriggerSwitchAutoResetEvent_ptr;
		}

		auto WeaponManagerEvent_ptr = WeaponManagerEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponManagerEvent_ptr != nullptr) {
			return WeaponManagerEvent_ptr;
		}

		auto ManglerSetOverloadLevelEvent_ptr = ManglerSetOverloadLevelEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerSetOverloadLevelEvent_ptr != nullptr) {
			return ManglerSetOverloadLevelEvent_ptr;
		}

		auto FlameStopEvent_ptr = FlameStopEvent::from_substruct(incoming_type_id, serialized);
		if (FlameStopEvent_ptr != nullptr) {
			return FlameStopEvent_ptr;
		}

		auto ReviveBarHideEvent_ptr = ReviveBarHideEvent::from_substruct(incoming_type_id, serialized);
		if (ReviveBarHideEvent_ptr != nullptr) {
			return ReviveBarHideEvent_ptr;
		}

		auto ShipMagnetFireEvent_ptr = ShipMagnetFireEvent::from_substruct(incoming_type_id, serialized);
		if (ShipMagnetFireEvent_ptr != nullptr) {
			return ShipMagnetFireEvent_ptr;
		}

		auto BoltCrankQuitEvent_ptr = BoltCrankQuitEvent::from_substruct(incoming_type_id, serialized);
		if (BoltCrankQuitEvent_ptr != nullptr) {
			return BoltCrankQuitEvent_ptr;
		}

		auto TunnelerBombExplodeEvent_ptr = TunnelerBombExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (TunnelerBombExplodeEvent_ptr != nullptr) {
			return TunnelerBombExplodeEvent_ptr;
		}

		auto PortalClosingEvent_ptr = PortalClosingEvent::from_substruct(incoming_type_id, serialized);
		if (PortalClosingEvent_ptr != nullptr) {
			return PortalClosingEvent_ptr;
		}

		auto PixelizedDeathEvent_ptr = PixelizedDeathEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizedDeathEvent_ptr != nullptr) {
			return PixelizedDeathEvent_ptr;
		}

		auto PauseMenuTabEvent_ptr = PauseMenuTabEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuTabEvent_ptr != nullptr) {
			return PauseMenuTabEvent_ptr;
		}

		auto MagbootStartEvent_ptr = MagbootStartEvent::from_substruct(incoming_type_id, serialized);
		if (MagbootStartEvent_ptr != nullptr) {
			return MagbootStartEvent_ptr;
		}

		auto GroovitronDancePartyStopEvent_ptr = GroovitronDancePartyStopEvent::from_substruct(incoming_type_id, serialized);
		if (GroovitronDancePartyStopEvent_ptr != nullptr) {
			return GroovitronDancePartyStopEvent_ptr;
		}

		auto PickupBoltActivatedEvent_ptr = PickupBoltActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (PickupBoltActivatedEvent_ptr != nullptr) {
			return PickupBoltActivatedEvent_ptr;
		}

		auto RYNOPortalObjectImpactEvent_ptr = RYNOPortalObjectImpactEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOPortalObjectImpactEvent_ptr != nullptr) {
			return RYNOPortalObjectImpactEvent_ptr;
		}

		auto IncinerateFinishedEvent_ptr = IncinerateFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (IncinerateFinishedEvent_ptr != nullptr) {
			return IncinerateFinishedEvent_ptr;
		}

		auto HarpoonStreamStopEvent_ptr = HarpoonStreamStopEvent::from_substruct(incoming_type_id, serialized);
		if (HarpoonStreamStopEvent_ptr != nullptr) {
			return HarpoonStreamStopEvent_ptr;
		}

		auto GrindBoostStopEvent_ptr = GrindBoostStopEvent::from_substruct(incoming_type_id, serialized);
		if (GrindBoostStopEvent_ptr != nullptr) {
			return GrindBoostStopEvent_ptr;
		}

		auto AwardThrownWeaponHitEvent_ptr = AwardThrownWeaponHitEvent::from_substruct(incoming_type_id, serialized);
		if (AwardThrownWeaponHitEvent_ptr != nullptr) {
			return AwardThrownWeaponHitEvent_ptr;
		}

		auto CarpetBomberTargetingLaserOnEvent_ptr = CarpetBomberTargetingLaserOnEvent::from_substruct(incoming_type_id, serialized);
		if (CarpetBomberTargetingLaserOnEvent_ptr != nullptr) {
			return CarpetBomberTargetingLaserOnEvent_ptr;
		}

		auto FocusTrackingOverrideFocusScaleEvent_ptr = FocusTrackingOverrideFocusScaleEvent::from_substruct(incoming_type_id, serialized);
		if (FocusTrackingOverrideFocusScaleEvent_ptr != nullptr) {
			return FocusTrackingOverrideFocusScaleEvent_ptr;
		}

		auto RagdollBodyDropEvent_ptr = RagdollBodyDropEvent::from_substruct(incoming_type_id, serialized);
		if (RagdollBodyDropEvent_ptr != nullptr) {
			return RagdollBodyDropEvent_ptr;
		}

		auto HideInteractLockedIconEvent_ptr = HideInteractLockedIconEvent::from_substruct(incoming_type_id, serialized);
		if (HideInteractLockedIconEvent_ptr != nullptr) {
			return HideInteractLockedIconEvent_ptr;
		}

		auto PhaseMatchBlendInEvent_ptr = PhaseMatchBlendInEvent::from_substruct(incoming_type_id, serialized);
		if (PhaseMatchBlendInEvent_ptr != nullptr) {
			return PhaseMatchBlendInEvent_ptr;
		}

		auto DimensionalPulseTargetEndEvent_ptr = DimensionalPulseTargetEndEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetEndEvent_ptr != nullptr) {
			return DimensionalPulseTargetEndEvent_ptr;
		}

		auto SwingshotRetractingEndEvent_ptr = SwingshotRetractingEndEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotRetractingEndEvent_ptr != nullptr) {
			return SwingshotRetractingEndEvent_ptr;
		}

		auto ClankPuzzleVolumeFilterChangeEvent_ptr = ClankPuzzleVolumeFilterChangeEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeFilterChangeEvent_ptr != nullptr) {
			return ClankPuzzleVolumeFilterChangeEvent_ptr;
		}

		auto Cinematic2HeroTransitionEventBase_ptr = Cinematic2HeroTransitionEventBase::from_substruct(incoming_type_id, serialized);
		if (Cinematic2HeroTransitionEventBase_ptr != nullptr) {
			return Cinematic2HeroTransitionEventBase_ptr;
		}

		auto PixelizerChargedEndEvent_ptr = PixelizerChargedEndEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizerChargedEndEvent_ptr != nullptr) {
			return PixelizerChargedEndEvent_ptr;
		}

		auto UIWeaponVendorVideoStartEvent_ptr = UIWeaponVendorVideoStartEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorVideoStartEvent_ptr != nullptr) {
			return UIWeaponVendorVideoStartEvent_ptr;
		}

		auto CapturableAllegianceChangedEvent_ptr = CapturableAllegianceChangedEvent::from_substruct(incoming_type_id, serialized);
		if (CapturableAllegianceChangedEvent_ptr != nullptr) {
			return CapturableAllegianceChangedEvent_ptr;
		}

		auto GroundTriggerValidUserEvent_ptr = GroundTriggerValidUserEvent::from_substruct(incoming_type_id, serialized);
		if (GroundTriggerValidUserEvent_ptr != nullptr) {
			return GroundTriggerValidUserEvent_ptr;
		}

		auto TunnelerLockOnCompletedEvent_ptr = TunnelerLockOnCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (TunnelerLockOnCompletedEvent_ptr != nullptr) {
			return TunnelerLockOnCompletedEvent_ptr;
		}

		auto BeamOutFinishedEvent_ptr = BeamOutFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BeamOutFinishedEvent_ptr != nullptr) {
			return BeamOutFinishedEvent_ptr;
		}

		auto DimensionPortalTargetAddedEvent_ptr = DimensionPortalTargetAddedEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionPortalTargetAddedEvent_ptr != nullptr) {
			return DimensionPortalTargetAddedEvent_ptr;
		}

		auto BotShootLaserStartSweepAnimEvent_ptr = BotShootLaserStartSweepAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserStartSweepAnimEvent_ptr != nullptr) {
			return BotShootLaserStartSweepAnimEvent_ptr;
		}

		auto DrNefariousDimensionatorShotBeginEvent_ptr = DrNefariousDimensionatorShotBeginEvent::from_substruct(incoming_type_id, serialized);
		if (DrNefariousDimensionatorShotBeginEvent_ptr != nullptr) {
			return DrNefariousDimensionatorShotBeginEvent_ptr;
		}

		auto MissionDeactivatedEvent_ptr = MissionDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (MissionDeactivatedEvent_ptr != nullptr) {
			return MissionDeactivatedEvent_ptr;
		}

		auto RagdollDeactivatedEvent_ptr = RagdollDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (RagdollDeactivatedEvent_ptr != nullptr) {
			return RagdollDeactivatedEvent_ptr;
		}

		auto VehicleNearEndEvent_ptr = VehicleNearEndEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleNearEndEvent_ptr != nullptr) {
			return VehicleNearEndEvent_ptr;
		}

		auto PhotomodeSelfieDeactivateEvent_ptr = PhotomodeSelfieDeactivateEvent::from_substruct(incoming_type_id, serialized);
		if (PhotomodeSelfieDeactivateEvent_ptr != nullptr) {
			return PhotomodeSelfieDeactivateEvent_ptr;
		}

		auto AirlockTriggeredEvent_ptr = AirlockTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (AirlockTriggeredEvent_ptr != nullptr) {
			return AirlockTriggeredEvent_ptr;
		}

		auto UIFrontEndSaveSlotsMoveEvent_ptr = UIFrontEndSaveSlotsMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndSaveSlotsMoveEvent_ptr != nullptr) {
			return UIFrontEndSaveSlotsMoveEvent_ptr;
		}

		auto OnAttachEvent_ptr = OnAttachEvent::from_substruct(incoming_type_id, serialized);
		if (OnAttachEvent_ptr != nullptr) {
			return OnAttachEvent_ptr;
		}

		auto ZurkonFlyingStartEvent_ptr = ZurkonFlyingStartEvent::from_substruct(incoming_type_id, serialized);
		if (ZurkonFlyingStartEvent_ptr != nullptr) {
			return ZurkonFlyingStartEvent_ptr;
		}

		auto ShrubberyFlowerSpawnEvent_ptr = ShrubberyFlowerSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (ShrubberyFlowerSpawnEvent_ptr != nullptr) {
			return ShrubberyFlowerSpawnEvent_ptr;
		}

		auto MeleeActiveStartEvent_ptr = MeleeActiveStartEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeActiveStartEvent_ptr != nullptr) {
			return MeleeActiveStartEvent_ptr;
		}

		auto HammerCrankAttachEvent_ptr = HammerCrankAttachEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankAttachEvent_ptr != nullptr) {
			return HammerCrankAttachEvent_ptr;
		}

		auto UIWeaponVendorTabEvent_ptr = UIWeaponVendorTabEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorTabEvent_ptr != nullptr) {
			return UIWeaponVendorTabEvent_ptr;
		}

		auto PixelizerBlastEvent_ptr = PixelizerBlastEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizerBlastEvent_ptr != nullptr) {
			return PixelizerBlastEvent_ptr;
		}

		auto EnableParryEvent_ptr = EnableParryEvent::from_substruct(incoming_type_id, serialized);
		if (EnableParryEvent_ptr != nullptr) {
			return EnableParryEvent_ptr;
		}

		auto LightningRodChargeUpCompleteEvent_ptr = LightningRodChargeUpCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodChargeUpCompleteEvent_ptr != nullptr) {
			return LightningRodChargeUpCompleteEvent_ptr;
		}

		auto BehaviorGotoDoneEvent_ptr = BehaviorGotoDoneEvent::from_substruct(incoming_type_id, serialized);
		if (BehaviorGotoDoneEvent_ptr != nullptr) {
			return BehaviorGotoDoneEvent_ptr;
		}

		auto BotTriggerToUnequippedEvent_ptr = BotTriggerToUnequippedEvent::from_substruct(incoming_type_id, serialized);
		if (BotTriggerToUnequippedEvent_ptr != nullptr) {
			return BotTriggerToUnequippedEvent_ptr;
		}

		auto ElectricArcEvent_ptr = ElectricArcEvent::from_substruct(incoming_type_id, serialized);
		if (ElectricArcEvent_ptr != nullptr) {
			return ElectricArcEvent_ptr;
		}

		auto AnimIKFootUpEvent_ptr = AnimIKFootUpEvent::from_substruct(incoming_type_id, serialized);
		if (AnimIKFootUpEvent_ptr != nullptr) {
			return AnimIKFootUpEvent_ptr;
		}

		auto TunnelerGroundFrameEvent_ptr = TunnelerGroundFrameEvent::from_substruct(incoming_type_id, serialized);
		if (TunnelerGroundFrameEvent_ptr != nullptr) {
			return TunnelerGroundFrameEvent_ptr;
		}

		auto StopBlockingEvent_ptr = StopBlockingEvent::from_substruct(incoming_type_id, serialized);
		if (StopBlockingEvent_ptr != nullptr) {
			return StopBlockingEvent_ptr;
		}

		auto RegionLoadedEvent_ptr = RegionLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (RegionLoadedEvent_ptr != nullptr) {
			return RegionLoadedEvent_ptr;
		}

		auto CarpetBomberBurstShotEvent_ptr = CarpetBomberBurstShotEvent::from_substruct(incoming_type_id, serialized);
		if (CarpetBomberBurstShotEvent_ptr != nullptr) {
			return CarpetBomberBurstShotEvent_ptr;
		}

		auto CentipedeFlyoverDeathEvent_ptr = CentipedeFlyoverDeathEvent::from_substruct(incoming_type_id, serialized);
		if (CentipedeFlyoverDeathEvent_ptr != nullptr) {
			return CentipedeFlyoverDeathEvent_ptr;
		}

		auto CritterQueryMaxExceededDevstatsEvent_ptr = CritterQueryMaxExceededDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (CritterQueryMaxExceededDevstatsEvent_ptr != nullptr) {
			return CritterQueryMaxExceededDevstatsEvent_ptr;
		}

		auto WeakSpotDamagedEvent_ptr = WeakSpotDamagedEvent::from_substruct(incoming_type_id, serialized);
		if (WeakSpotDamagedEvent_ptr != nullptr) {
			return WeakSpotDamagedEvent_ptr;
		}

		auto BeamInStartEvent_ptr = BeamInStartEvent::from_substruct(incoming_type_id, serialized);
		if (BeamInStartEvent_ptr != nullptr) {
			return BeamInStartEvent_ptr;
		}

		auto ConditionStopEvent_ptr = ConditionStopEvent::from_substruct(incoming_type_id, serialized);
		if (ConditionStopEvent_ptr != nullptr) {
			return ConditionStopEvent_ptr;
		}

		auto MeleeMediumEvent_ptr = MeleeMediumEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeMediumEvent_ptr != nullptr) {
			return MeleeMediumEvent_ptr;
		}

		auto PauseGalleryZoomStartEvent_ptr = PauseGalleryZoomStartEvent::from_substruct(incoming_type_id, serialized);
		if (PauseGalleryZoomStartEvent_ptr != nullptr) {
			return PauseGalleryZoomStartEvent_ptr;
		}

		auto TriggerPadGroupCompleteEvent_ptr = TriggerPadGroupCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerPadGroupCompleteEvent_ptr != nullptr) {
			return TriggerPadGroupCompleteEvent_ptr;
		}

		auto DialogStartedEvent_ptr = DialogStartedEvent::from_substruct(incoming_type_id, serialized);
		if (DialogStartedEvent_ptr != nullptr) {
			return DialogStartedEvent_ptr;
		}

		auto ShuffleStartEvent_ptr = ShuffleStartEvent::from_substruct(incoming_type_id, serialized);
		if (ShuffleStartEvent_ptr != nullptr) {
			return ShuffleStartEvent_ptr;
		}

		auto RevivingStartEvent_ptr = RevivingStartEvent::from_substruct(incoming_type_id, serialized);
		if (RevivingStartEvent_ptr != nullptr) {
			return RevivingStartEvent_ptr;
		}

		auto SwimSurfaceStartEvent_ptr = SwimSurfaceStartEvent::from_substruct(incoming_type_id, serialized);
		if (SwimSurfaceStartEvent_ptr != nullptr) {
			return SwimSurfaceStartEvent_ptr;
		}

		auto NPCBotFleeAnimClueStartEvent_ptr = NPCBotFleeAnimClueStartEvent::from_substruct(incoming_type_id, serialized);
		if (NPCBotFleeAnimClueStartEvent_ptr != nullptr) {
			return NPCBotFleeAnimClueStartEvent_ptr;
		}

		auto DismountEvent_ptr = DismountEvent::from_substruct(incoming_type_id, serialized);
		if (DismountEvent_ptr != nullptr) {
			return DismountEvent_ptr;
		}

		auto ClankPuzzleRecallerEnterEvent_ptr = ClankPuzzleRecallerEnterEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleRecallerEnterEvent_ptr != nullptr) {
			return ClankPuzzleRecallerEnterEvent_ptr;
		}

		auto PixelizedExplodeEvent_ptr = PixelizedExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizedExplodeEvent_ptr != nullptr) {
			return PixelizedExplodeEvent_ptr;
		}

		auto ShrubberyRampDownStartEvent_ptr = ShrubberyRampDownStartEvent::from_substruct(incoming_type_id, serialized);
		if (ShrubberyRampDownStartEvent_ptr != nullptr) {
			return ShrubberyRampDownStartEvent_ptr;
		}

		auto RefireChargeStartEvent_ptr = RefireChargeStartEvent::from_substruct(incoming_type_id, serialized);
		if (RefireChargeStartEvent_ptr != nullptr) {
			return RefireChargeStartEvent_ptr;
		}

		auto BotDropIntroEndEvent_ptr = BotDropIntroEndEvent::from_substruct(incoming_type_id, serialized);
		if (BotDropIntroEndEvent_ptr != nullptr) {
			return BotDropIntroEndEvent_ptr;
		}

		auto PauseTabClosedDevstatsEvent_ptr = PauseTabClosedDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (PauseTabClosedDevstatsEvent_ptr != nullptr) {
			return PauseTabClosedDevstatsEvent_ptr;
		}

		auto UnderwaterBaseJuiceDistractionUseEndEvent_ptr = UnderwaterBaseJuiceDistractionUseEndEvent::from_substruct(incoming_type_id, serialized);
		if (UnderwaterBaseJuiceDistractionUseEndEvent_ptr != nullptr) {
			return UnderwaterBaseJuiceDistractionUseEndEvent_ptr;
		}

		auto ShowEvent_ptr = ShowEvent::from_substruct(incoming_type_id, serialized);
		if (ShowEvent_ptr != nullptr) {
			return ShowEvent_ptr;
		}

		auto SwimUnderwaterStartEvent_ptr = SwimUnderwaterStartEvent::from_substruct(incoming_type_id, serialized);
		if (SwimUnderwaterStartEvent_ptr != nullptr) {
			return SwimUnderwaterStartEvent_ptr;
		}

		auto TunnelerLockOnCanceledEvent_ptr = TunnelerLockOnCanceledEvent::from_substruct(incoming_type_id, serialized);
		if (TunnelerLockOnCanceledEvent_ptr != nullptr) {
			return TunnelerLockOnCanceledEvent_ptr;
		}

		auto CarpetBomberDropEvent_ptr = CarpetBomberDropEvent::from_substruct(incoming_type_id, serialized);
		if (CarpetBomberDropEvent_ptr != nullptr) {
			return CarpetBomberDropEvent_ptr;
		}

		auto SargassoCentipedeAODStartEvent_ptr = SargassoCentipedeAODStartEvent::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeAODStartEvent_ptr != nullptr) {
			return SargassoCentipedeAODStartEvent_ptr;
		}

		auto ShrubberyBreakoutExplosionStartEvent_ptr = ShrubberyBreakoutExplosionStartEvent::from_substruct(incoming_type_id, serialized);
		if (ShrubberyBreakoutExplosionStartEvent_ptr != nullptr) {
			return ShrubberyBreakoutExplosionStartEvent_ptr;
		}

		auto ProtoShotgunTendrilImpactEvent_ptr = ProtoShotgunTendrilImpactEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoShotgunTendrilImpactEvent_ptr != nullptr) {
			return ProtoShotgunTendrilImpactEvent_ptr;
		}

		auto HazardNestTargetBeamStopEvent_ptr = HazardNestTargetBeamStopEvent::from_substruct(incoming_type_id, serialized);
		if (HazardNestTargetBeamStopEvent_ptr != nullptr) {
			return HazardNestTargetBeamStopEvent_ptr;
		}

		auto UIOptionsRestartCheckpointEvent_ptr = UIOptionsRestartCheckpointEvent::from_substruct(incoming_type_id, serialized);
		if (UIOptionsRestartCheckpointEvent_ptr != nullptr) {
			return UIOptionsRestartCheckpointEvent_ptr;
		}

		auto GalacticMapShipLandFinishEvent_ptr = GalacticMapShipLandFinishEvent::from_substruct(incoming_type_id, serialized);
		if (GalacticMapShipLandFinishEvent_ptr != nullptr) {
			return GalacticMapShipLandFinishEvent_ptr;
		}

		auto OnUnPoweredEvent_ptr = OnUnPoweredEvent::from_substruct(incoming_type_id, serialized);
		if (OnUnPoweredEvent_ptr != nullptr) {
			return OnUnPoweredEvent_ptr;
		}

		auto ClankPuzzleVolumeTrackerExitEvent_ptr = ClankPuzzleVolumeTrackerExitEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeTrackerExitEvent_ptr != nullptr) {
			return ClankPuzzleVolumeTrackerExitEvent_ptr;
		}

		auto MovingLevelPauseEvent_ptr = MovingLevelPauseEvent::from_substruct(incoming_type_id, serialized);
		if (MovingLevelPauseEvent_ptr != nullptr) {
			return MovingLevelPauseEvent_ptr;
		}

		auto SwimUnderwaterStopEvent_ptr = SwimUnderwaterStopEvent::from_substruct(incoming_type_id, serialized);
		if (SwimUnderwaterStopEvent_ptr != nullptr) {
			return SwimUnderwaterStopEvent_ptr;
		}

		auto SwimSurfaceStopEvent_ptr = SwimSurfaceStopEvent::from_substruct(incoming_type_id, serialized);
		if (SwimSurfaceStopEvent_ptr != nullptr) {
			return SwimSurfaceStopEvent_ptr;
		}

		auto AnimPortalZipReturnStartEvent_ptr = AnimPortalZipReturnStartEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPortalZipReturnStartEvent_ptr != nullptr) {
			return AnimPortalZipReturnStartEvent_ptr;
		}

		auto ChargeAttackHitEvent_ptr = ChargeAttackHitEvent::from_substruct(incoming_type_id, serialized);
		if (ChargeAttackHitEvent_ptr != nullptr) {
			return ChargeAttackHitEvent_ptr;
		}

		auto FormationAttackWarningStartEvent_ptr = FormationAttackWarningStartEvent::from_substruct(incoming_type_id, serialized);
		if (FormationAttackWarningStartEvent_ptr != nullptr) {
			return FormationAttackWarningStartEvent_ptr;
		}

		auto ProjectileLifetimeExpiredEvent_ptr = ProjectileLifetimeExpiredEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileLifetimeExpiredEvent_ptr != nullptr) {
			return ProjectileLifetimeExpiredEvent_ptr;
		}

		auto ProjectileHitMarkerSpawnEvent_ptr = ProjectileHitMarkerSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileHitMarkerSpawnEvent_ptr != nullptr) {
			return ProjectileHitMarkerSpawnEvent_ptr;
		}

		auto MeleeStrongEvent_ptr = MeleeStrongEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeStrongEvent_ptr != nullptr) {
			return MeleeStrongEvent_ptr;
		}

		auto PushFireWeaponEvent_ptr = PushFireWeaponEvent::from_substruct(incoming_type_id, serialized);
		if (PushFireWeaponEvent_ptr != nullptr) {
			return PushFireWeaponEvent_ptr;
		}

		auto GainGoldBoltEvent_ptr = GainGoldBoltEvent::from_substruct(incoming_type_id, serialized);
		if (GainGoldBoltEvent_ptr != nullptr) {
			return GainGoldBoltEvent_ptr;
		}

		auto SwingshotExtendingStartEvent_ptr = SwingshotExtendingStartEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotExtendingStartEvent_ptr != nullptr) {
			return SwingshotExtendingStartEvent_ptr;
		}

		auto HeroFallingRespawnBeginEvent_ptr = HeroFallingRespawnBeginEvent::from_substruct(incoming_type_id, serialized);
		if (HeroFallingRespawnBeginEvent_ptr != nullptr) {
			return HeroFallingRespawnBeginEvent_ptr;
		}

		auto UIArenaMenuMoveEvent_ptr = UIArenaMenuMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIArenaMenuMoveEvent_ptr != nullptr) {
			return UIArenaMenuMoveEvent_ptr;
		}

		auto OnDisabledEvent_ptr = OnDisabledEvent::from_substruct(incoming_type_id, serialized);
		if (OnDisabledEvent_ptr != nullptr) {
			return OnDisabledEvent_ptr;
		}

		auto HeroGrindTransferEndEvent_ptr = HeroGrindTransferEndEvent::from_substruct(incoming_type_id, serialized);
		if (HeroGrindTransferEndEvent_ptr != nullptr) {
			return HeroGrindTransferEndEvent_ptr;
		}

		auto HUDMessageArenaWaveCountdownEvent_ptr = HUDMessageArenaWaveCountdownEvent::from_substruct(incoming_type_id, serialized);
		if (HUDMessageArenaWaveCountdownEvent_ptr != nullptr) {
			return HUDMessageArenaWaveCountdownEvent_ptr;
		}

		auto PortalZipStartEvent_ptr = PortalZipStartEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipStartEvent_ptr != nullptr) {
			return PortalZipStartEvent_ptr;
		}

		auto BattlePhaseChangedEvent_ptr = BattlePhaseChangedEvent::from_substruct(incoming_type_id, serialized);
		if (BattlePhaseChangedEvent_ptr != nullptr) {
			return BattlePhaseChangedEvent_ptr;
		}

		auto UDSEventBase_ptr = UDSEventBase::from_substruct(incoming_type_id, serialized);
		if (UDSEventBase_ptr != nullptr) {
			return UDSEventBase_ptr;
		}

		auto AttachEvent_ptr = AttachEvent::from_substruct(incoming_type_id, serialized);
		if (AttachEvent_ptr != nullptr) {
			return AttachEvent_ptr;
		}

		auto PreExplodedKnockbackEvent_ptr = PreExplodedKnockbackEvent::from_substruct(incoming_type_id, serialized);
		if (PreExplodedKnockbackEvent_ptr != nullptr) {
			return PreExplodedKnockbackEvent_ptr;
		}

		auto GasMaskEquippedEvent_ptr = GasMaskEquippedEvent::from_substruct(incoming_type_id, serialized);
		if (GasMaskEquippedEvent_ptr != nullptr) {
			return GasMaskEquippedEvent_ptr;
		}

		auto KillTrackerEvent_ptr = KillTrackerEvent::from_substruct(incoming_type_id, serialized);
		if (KillTrackerEvent_ptr != nullptr) {
			return KillTrackerEvent_ptr;
		}

		auto WeaponWarpRifleSpinDownFinishedEvent_ptr = WeaponWarpRifleSpinDownFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponWarpRifleSpinDownFinishedEvent_ptr != nullptr) {
			return WeaponWarpRifleSpinDownFinishedEvent_ptr;
		}

		auto SceneObjectCollectDestroyEvent_ptr = SceneObjectCollectDestroyEvent::from_substruct(incoming_type_id, serialized);
		if (SceneObjectCollectDestroyEvent_ptr != nullptr) {
			return SceneObjectCollectDestroyEvent_ptr;
		}

		auto DiveStartedEvent_ptr = DiveStartedEvent::from_substruct(incoming_type_id, serialized);
		if (DiveStartedEvent_ptr != nullptr) {
			return DiveStartedEvent_ptr;
		}

		auto LightningRodChargeUpFireEvent_ptr = LightningRodChargeUpFireEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodChargeUpFireEvent_ptr != nullptr) {
			return LightningRodChargeUpFireEvent_ptr;
		}

		auto CameraFieldOfViewEvent_ptr = CameraFieldOfViewEvent::from_substruct(incoming_type_id, serialized);
		if (CameraFieldOfViewEvent_ptr != nullptr) {
			return CameraFieldOfViewEvent_ptr;
		}

		auto WeaponThrowStartEvent_ptr = WeaponThrowStartEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponThrowStartEvent_ptr != nullptr) {
			return WeaponThrowStartEvent_ptr;
		}

		auto ThumperDeactivateEvent_ptr = ThumperDeactivateEvent::from_substruct(incoming_type_id, serialized);
		if (ThumperDeactivateEvent_ptr != nullptr) {
			return ThumperDeactivateEvent_ptr;
		}

		auto RocketProximityEvent_ptr = RocketProximityEvent::from_substruct(incoming_type_id, serialized);
		if (RocketProximityEvent_ptr != nullptr) {
			return RocketProximityEvent_ptr;
		}

		auto DeactivateCameraEvent_ptr = DeactivateCameraEvent::from_substruct(incoming_type_id, serialized);
		if (DeactivateCameraEvent_ptr != nullptr) {
			return DeactivateCameraEvent_ptr;
		}

		auto WallStickOnEvent_ptr = WallStickOnEvent::from_substruct(incoming_type_id, serialized);
		if (WallStickOnEvent_ptr != nullptr) {
			return WallStickOnEvent_ptr;
		}

		auto GrindWooshOnEvent_ptr = GrindWooshOnEvent::from_substruct(incoming_type_id, serialized);
		if (GrindWooshOnEvent_ptr != nullptr) {
			return GrindWooshOnEvent_ptr;
		}

		auto SetHomeAreaEvent_ptr = SetHomeAreaEvent::from_substruct(incoming_type_id, serialized);
		if (SetHomeAreaEvent_ptr != nullptr) {
			return SetHomeAreaEvent_ptr;
		}

		auto AnimMotionStartedEvent_ptr = AnimMotionStartedEvent::from_substruct(incoming_type_id, serialized);
		if (AnimMotionStartedEvent_ptr != nullptr) {
			return AnimMotionStartedEvent_ptr;
		}

		auto MagnaMissileRangeEnterEvent_ptr = MagnaMissileRangeEnterEvent::from_substruct(incoming_type_id, serialized);
		if (MagnaMissileRangeEnterEvent_ptr != nullptr) {
			return MagnaMissileRangeEnterEvent_ptr;
		}

		auto CoverGenerationFinishedEvent_ptr = CoverGenerationFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (CoverGenerationFinishedEvent_ptr != nullptr) {
			return CoverGenerationFinishedEvent_ptr;
		}

		auto LightningRodStopEffectsEvent_ptr = LightningRodStopEffectsEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodStopEffectsEvent_ptr != nullptr) {
			return LightningRodStopEffectsEvent_ptr;
		}

		auto MoverIsFallingEndEvent_ptr = MoverIsFallingEndEvent::from_substruct(incoming_type_id, serialized);
		if (MoverIsFallingEndEvent_ptr != nullptr) {
			return MoverIsFallingEndEvent_ptr;
		}

		auto PauseMapIconUnhoverEvent_ptr = PauseMapIconUnhoverEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMapIconUnhoverEvent_ptr != nullptr) {
			return PauseMapIconUnhoverEvent_ptr;
		}

		auto PlatformStartDescentEvent_ptr = PlatformStartDescentEvent::from_substruct(incoming_type_id, serialized);
		if (PlatformStartDescentEvent_ptr != nullptr) {
			return PlatformStartDescentEvent_ptr;
		}

		auto ClothEnableStateEvent_ptr = ClothEnableStateEvent::from_substruct(incoming_type_id, serialized);
		if (ClothEnableStateEvent_ptr != nullptr) {
			return ClothEnableStateEvent_ptr;
		}

		auto ValidMagbootSurfaceFoundEvent_ptr = ValidMagbootSurfaceFoundEvent::from_substruct(incoming_type_id, serialized);
		if (ValidMagbootSurfaceFoundEvent_ptr != nullptr) {
			return ValidMagbootSurfaceFoundEvent_ptr;
		}

		auto UIArenaMenuOpenEvent_ptr = UIArenaMenuOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIArenaMenuOpenEvent_ptr != nullptr) {
			return UIArenaMenuOpenEvent_ptr;
		}

		auto BehaviorGotoNavQuerySucceededEvent_ptr = BehaviorGotoNavQuerySucceededEvent::from_substruct(incoming_type_id, serialized);
		if (BehaviorGotoNavQuerySucceededEvent_ptr != nullptr) {
			return BehaviorGotoNavQuerySucceededEvent_ptr;
		}

		auto WarpToInteractEvent_ptr = WarpToInteractEvent::from_substruct(incoming_type_id, serialized);
		if (WarpToInteractEvent_ptr != nullptr) {
			return WarpToInteractEvent_ptr;
		}

		auto ProtonSeekerAttackActiveEvent_ptr = ProtonSeekerAttackActiveEvent::from_substruct(incoming_type_id, serialized);
		if (ProtonSeekerAttackActiveEvent_ptr != nullptr) {
			return ProtonSeekerAttackActiveEvent_ptr;
		}

		auto SwimDeepUnderwaterStartEvent_ptr = SwimDeepUnderwaterStartEvent::from_substruct(incoming_type_id, serialized);
		if (SwimDeepUnderwaterStartEvent_ptr != nullptr) {
			return SwimDeepUnderwaterStartEvent_ptr;
		}

		auto ShotArtSpawnedEvent_ptr = ShotArtSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (ShotArtSpawnedEvent_ptr != nullptr) {
			return ShotArtSpawnedEvent_ptr;
		}

		auto HeroDamageFlashbangEvent_ptr = HeroDamageFlashbangEvent::from_substruct(incoming_type_id, serialized);
		if (HeroDamageFlashbangEvent_ptr != nullptr) {
			return HeroDamageFlashbangEvent_ptr;
		}

		auto MrFunGuyMaxSpawnedFailedToShootEvent_ptr = MrFunGuyMaxSpawnedFailedToShootEvent::from_substruct(incoming_type_id, serialized);
		if (MrFunGuyMaxSpawnedFailedToShootEvent_ptr != nullptr) {
			return MrFunGuyMaxSpawnedFailedToShootEvent_ptr;
		}

		auto NodalShotGenericEvent_ptr = NodalShotGenericEvent::from_substruct(incoming_type_id, serialized);
		if (NodalShotGenericEvent_ptr != nullptr) {
			return NodalShotGenericEvent_ptr;
		}

		auto DisengageEvent_ptr = DisengageEvent::from_substruct(incoming_type_id, serialized);
		if (DisengageEvent_ptr != nullptr) {
			return DisengageEvent_ptr;
		}

		auto RYNOPlayPickedUpEvent_ptr = RYNOPlayPickedUpEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOPlayPickedUpEvent_ptr != nullptr) {
			return RYNOPlayPickedUpEvent_ptr;
		}

		auto FrozenPropSpawnEvent_ptr = FrozenPropSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenPropSpawnEvent_ptr != nullptr) {
			return FrozenPropSpawnEvent_ptr;
		}

		auto HoverbootKickHighSpeedEndEvent_ptr = HoverbootKickHighSpeedEndEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootKickHighSpeedEndEvent_ptr != nullptr) {
			return HoverbootKickHighSpeedEndEvent_ptr;
		}

		auto BataliaTurretCannonFiredEvent_ptr = BataliaTurretCannonFiredEvent::from_substruct(incoming_type_id, serialized);
		if (BataliaTurretCannonFiredEvent_ptr != nullptr) {
			return BataliaTurretCannonFiredEvent_ptr;
		}

		auto TopiarySprinklerStartTurnEvent_ptr = TopiarySprinklerStartTurnEvent::from_substruct(incoming_type_id, serialized);
		if (TopiarySprinklerStartTurnEvent_ptr != nullptr) {
			return TopiarySprinklerStartTurnEvent_ptr;
		}

		auto ExplodedEvent_ptr = ExplodedEvent::from_substruct(incoming_type_id, serialized);
		if (ExplodedEvent_ptr != nullptr) {
			return ExplodedEvent_ptr;
		}

		auto PlayerLeftEvent_ptr = PlayerLeftEvent::from_substruct(incoming_type_id, serialized);
		if (PlayerLeftEvent_ptr != nullptr) {
			return PlayerLeftEvent_ptr;
		}

		auto HealthChangedEvent_ptr = HealthChangedEvent::from_substruct(incoming_type_id, serialized);
		if (HealthChangedEvent_ptr != nullptr) {
			return HealthChangedEvent_ptr;
		}

		auto LightningRodElectrifiedBeginEvent_ptr = LightningRodElectrifiedBeginEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodElectrifiedBeginEvent_ptr != nullptr) {
			return LightningRodElectrifiedBeginEvent_ptr;
		}

		auto FrozenSlideStartEvent_ptr = FrozenSlideStartEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenSlideStartEvent_ptr != nullptr) {
			return FrozenSlideStartEvent_ptr;
		}

		auto SlopeSlideStartEvent_ptr = SlopeSlideStartEvent::from_substruct(incoming_type_id, serialized);
		if (SlopeSlideStartEvent_ptr != nullptr) {
			return SlopeSlideStartEvent_ptr;
		}

		auto StartMissionDevstatsEvent_ptr = StartMissionDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (StartMissionDevstatsEvent_ptr != nullptr) {
			return StartMissionDevstatsEvent_ptr;
		}

		auto DevstatsRumbleAccessibilityEnabledEvent_ptr = DevstatsRumbleAccessibilityEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsRumbleAccessibilityEnabledEvent_ptr != nullptr) {
			return DevstatsRumbleAccessibilityEnabledEvent_ptr;
		}

		auto BotImpaleEvent_ptr = BotImpaleEvent::from_substruct(incoming_type_id, serialized);
		if (BotImpaleEvent_ptr != nullptr) {
			return BotImpaleEvent_ptr;
		}

		auto MotionSegmentEvent_ptr = MotionSegmentEvent::from_substruct(incoming_type_id, serialized);
		if (MotionSegmentEvent_ptr != nullptr) {
			return MotionSegmentEvent_ptr;
		}

		auto PixelizedEndEvent_ptr = PixelizedEndEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizedEndEvent_ptr != nullptr) {
			return PixelizedEndEvent_ptr;
		}

		auto BotDiveRollStartInvulnerablityAnimEvent_ptr = BotDiveRollStartInvulnerablityAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotDiveRollStartInvulnerablityAnimEvent_ptr != nullptr) {
			return BotDiveRollStartInvulnerablityAnimEvent_ptr;
		}

		auto LoadGenerationChangedEvent_ptr = LoadGenerationChangedEvent::from_substruct(incoming_type_id, serialized);
		if (LoadGenerationChangedEvent_ptr != nullptr) {
			return LoadGenerationChangedEvent_ptr;
		}

		auto BotBehaviorStuckFailedEvent_ptr = BotBehaviorStuckFailedEvent::from_substruct(incoming_type_id, serialized);
		if (BotBehaviorStuckFailedEvent_ptr != nullptr) {
			return BotBehaviorStuckFailedEvent_ptr;
		}

		auto ClankPuzzleVolumeLanded_ptr = ClankPuzzleVolumeLanded::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeLanded_ptr != nullptr) {
			return ClankPuzzleVolumeLanded_ptr;
		}

		auto SetTeamEvent_ptr = SetTeamEvent::from_substruct(incoming_type_id, serialized);
		if (SetTeamEvent_ptr != nullptr) {
			return SetTeamEvent_ptr;
		}

		auto SargassoCentipedeLaser_ptr = SargassoCentipedeLaser::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeLaser_ptr != nullptr) {
			return SargassoCentipedeLaser_ptr;
		}

		auto EarlyTransitionOnHitEvent_ptr = EarlyTransitionOnHitEvent::from_substruct(incoming_type_id, serialized);
		if (EarlyTransitionOnHitEvent_ptr != nullptr) {
			return EarlyTransitionOnHitEvent_ptr;
		}

		auto RefireSustainStopEvent_ptr = RefireSustainStopEvent::from_substruct(incoming_type_id, serialized);
		if (RefireSustainStopEvent_ptr != nullptr) {
			return RefireSustainStopEvent_ptr;
		}

		auto LetterEffectFadeEvent_ptr = LetterEffectFadeEvent::from_substruct(incoming_type_id, serialized);
		if (LetterEffectFadeEvent_ptr != nullptr) {
			return LetterEffectFadeEvent_ptr;
		}

		auto CinematicStateExitEventBase_ptr = CinematicStateExitEventBase::from_substruct(incoming_type_id, serialized);
		if (CinematicStateExitEventBase_ptr != nullptr) {
			return CinematicStateExitEventBase_ptr;
		}

		auto FrozenL2Event_ptr = FrozenL2Event::from_substruct(incoming_type_id, serialized);
		if (FrozenL2Event_ptr != nullptr) {
			return FrozenL2Event_ptr;
		}

		auto AnimCoordinatorSyncEvent_ptr = AnimCoordinatorSyncEvent::from_substruct(incoming_type_id, serialized);
		if (AnimCoordinatorSyncEvent_ptr != nullptr) {
			return AnimCoordinatorSyncEvent_ptr;
		}

		auto CinematicAllowEarlyTransitionEvent_ptr = CinematicAllowEarlyTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (CinematicAllowEarlyTransitionEvent_ptr != nullptr) {
			return CinematicAllowEarlyTransitionEvent_ptr;
		}

		auto BotShootMortarStartEvent_ptr = BotShootMortarStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootMortarStartEvent_ptr != nullptr) {
			return BotShootMortarStartEvent_ptr;
		}

		auto ShotPlantedEvent_ptr = ShotPlantedEvent::from_substruct(incoming_type_id, serialized);
		if (ShotPlantedEvent_ptr != nullptr) {
			return ShotPlantedEvent_ptr;
		}

		auto AwarenessChangedEvent_ptr = AwarenessChangedEvent::from_substruct(incoming_type_id, serialized);
		if (AwarenessChangedEvent_ptr != nullptr) {
			return AwarenessChangedEvent_ptr;
		}

		auto LODLimiterSetMinLodEvent_ptr = LODLimiterSetMinLodEvent::from_substruct(incoming_type_id, serialized);
		if (LODLimiterSetMinLodEvent_ptr != nullptr) {
			return LODLimiterSetMinLodEvent_ptr;
		}

		auto AttackCooldownsSetableEvent_ptr = AttackCooldownsSetableEvent::from_substruct(incoming_type_id, serialized);
		if (AttackCooldownsSetableEvent_ptr != nullptr) {
			return AttackCooldownsSetableEvent_ptr;
		}

		auto BurstPistolLowHeatEvent_ptr = BurstPistolLowHeatEvent::from_substruct(incoming_type_id, serialized);
		if (BurstPistolLowHeatEvent_ptr != nullptr) {
			return BurstPistolLowHeatEvent_ptr;
		}

		auto DamageStateChangedEvent_ptr = DamageStateChangedEvent::from_substruct(incoming_type_id, serialized);
		if (DamageStateChangedEvent_ptr != nullptr) {
			return DamageStateChangedEvent_ptr;
		}

		auto OnStopUntriggerEvent_ptr = OnStopUntriggerEvent::from_substruct(incoming_type_id, serialized);
		if (OnStopUntriggerEvent_ptr != nullptr) {
			return OnStopUntriggerEvent_ptr;
		}

		auto UIWeaponVendorUpgradePurchaseAllEvent_ptr = UIWeaponVendorUpgradePurchaseAllEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorUpgradePurchaseAllEvent_ptr != nullptr) {
			return UIWeaponVendorUpgradePurchaseAllEvent_ptr;
		}

		auto UICreditsMusicStopEvent_ptr = UICreditsMusicStopEvent::from_substruct(incoming_type_id, serialized);
		if (UICreditsMusicStopEvent_ptr != nullptr) {
			return UICreditsMusicStopEvent_ptr;
		}

		auto HUDMessageTimerTickEvent_ptr = HUDMessageTimerTickEvent::from_substruct(incoming_type_id, serialized);
		if (HUDMessageTimerTickEvent_ptr != nullptr) {
			return HUDMessageTimerTickEvent_ptr;
		}

		auto WeaponAmmoGraceStartEvent_ptr = WeaponAmmoGraceStartEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponAmmoGraceStartEvent_ptr != nullptr) {
			return WeaponAmmoGraceStartEvent_ptr;
		}

		auto UIArenaMenuForwardEvent_ptr = UIArenaMenuForwardEvent::from_substruct(incoming_type_id, serialized);
		if (UIArenaMenuForwardEvent_ptr != nullptr) {
			return UIArenaMenuForwardEvent_ptr;
		}

		auto PortalZipRiftCreatedEvent_ptr = PortalZipRiftCreatedEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipRiftCreatedEvent_ptr != nullptr) {
			return PortalZipRiftCreatedEvent_ptr;
		}

		auto HammerCrankTargetResetting_ptr = HammerCrankTargetResetting::from_substruct(incoming_type_id, serialized);
		if (HammerCrankTargetResetting_ptr != nullptr) {
			return HammerCrankTargetResetting_ptr;
		}

		auto TopiarySprinklerLastShotFiredEvent_ptr = TopiarySprinklerLastShotFiredEvent::from_substruct(incoming_type_id, serialized);
		if (TopiarySprinklerLastShotFiredEvent_ptr != nullptr) {
			return TopiarySprinklerLastShotFiredEvent_ptr;
		}

		auto StreamingVideoStartEvent_ptr = StreamingVideoStartEvent::from_substruct(incoming_type_id, serialized);
		if (StreamingVideoStartEvent_ptr != nullptr) {
			return StreamingVideoStartEvent_ptr;
		}

		auto UIWeaponVendorTreeMoveEvent_ptr = UIWeaponVendorTreeMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorTreeMoveEvent_ptr != nullptr) {
			return UIWeaponVendorTreeMoveEvent_ptr;
		}

		auto BoltCrankStopCrankingEvent_ptr = BoltCrankStopCrankingEvent::from_substruct(incoming_type_id, serialized);
		if (BoltCrankStopCrankingEvent_ptr != nullptr) {
			return BoltCrankStopCrankingEvent_ptr;
		}

		auto PropAttachedEvent_ptr = PropAttachedEvent::from_substruct(incoming_type_id, serialized);
		if (PropAttachedEvent_ptr != nullptr) {
			return PropAttachedEvent_ptr;
		}

		auto HeroPlayScriptedAnimComplete_ptr = HeroPlayScriptedAnimComplete::from_substruct(incoming_type_id, serialized);
		if (HeroPlayScriptedAnimComplete_ptr != nullptr) {
			return HeroPlayScriptedAnimComplete_ptr;
		}

		auto CurveFollowerResumingFromStopEvent_ptr = CurveFollowerResumingFromStopEvent::from_substruct(incoming_type_id, serialized);
		if (CurveFollowerResumingFromStopEvent_ptr != nullptr) {
			return CurveFollowerResumingFromStopEvent_ptr;
		}

		auto SelfieSwitchEvent_ptr = SelfieSwitchEvent::from_substruct(incoming_type_id, serialized);
		if (SelfieSwitchEvent_ptr != nullptr) {
			return SelfieSwitchEvent_ptr;
		}

		auto ShowMagbootLaunchReticleEvent_ptr = ShowMagbootLaunchReticleEvent::from_substruct(incoming_type_id, serialized);
		if (ShowMagbootLaunchReticleEvent_ptr != nullptr) {
			return ShowMagbootLaunchReticleEvent_ptr;
		}

		auto ClankPuzzleVolumeEndRemoveEntryEvent_ptr = ClankPuzzleVolumeEndRemoveEntryEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeEndRemoveEntryEvent_ptr != nullptr) {
			return ClankPuzzleVolumeEndRemoveEntryEvent_ptr;
		}

		auto SpawnerSpawnEvent_ptr = SpawnerSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (SpawnerSpawnEvent_ptr != nullptr) {
			return SpawnerSpawnEvent_ptr;
		}

		auto AnimBodyMoveBaseEvent_ptr = AnimBodyMoveBaseEvent::from_substruct(incoming_type_id, serialized);
		if (AnimBodyMoveBaseEvent_ptr != nullptr) {
			return AnimBodyMoveBaseEvent_ptr;
		}

		auto ArrivedEvent_ptr = ArrivedEvent::from_substruct(incoming_type_id, serialized);
		if (ArrivedEvent_ptr != nullptr) {
			return ArrivedEvent_ptr;
		}

		auto AnimClipIKEvent_ptr = AnimClipIKEvent::from_substruct(incoming_type_id, serialized);
		if (AnimClipIKEvent_ptr != nullptr) {
			return AnimClipIKEvent_ptr;
		}

		auto GroundTriggerOffEvent_ptr = GroundTriggerOffEvent::from_substruct(incoming_type_id, serialized);
		if (GroundTriggerOffEvent_ptr != nullptr) {
			return GroundTriggerOffEvent_ptr;
		}

		auto FrozenPropDestroyEvent_ptr = FrozenPropDestroyEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenPropDestroyEvent_ptr != nullptr) {
			return FrozenPropDestroyEvent_ptr;
		}

		auto DevstatsBigObjectivePOIsDisabledEvent_ptr = DevstatsBigObjectivePOIsDisabledEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsBigObjectivePOIsDisabledEvent_ptr != nullptr) {
			return DevstatsBigObjectivePOIsDisabledEvent_ptr;
		}

		auto SpawnerThrowSpawnEvent_ptr = SpawnerThrowSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (SpawnerThrowSpawnEvent_ptr != nullptr) {
			return SpawnerThrowSpawnEvent_ptr;
		}

		auto WarpRifleEndFireLoopEvent_ptr = WarpRifleEndFireLoopEvent::from_substruct(incoming_type_id, serialized);
		if (WarpRifleEndFireLoopEvent_ptr != nullptr) {
			return WarpRifleEndFireLoopEvent_ptr;
		}

		auto PossibleTargetOnEvent_ptr = PossibleTargetOnEvent::from_substruct(incoming_type_id, serialized);
		if (PossibleTargetOnEvent_ptr != nullptr) {
			return PossibleTargetOnEvent_ptr;
		}

		auto HeroMeleeBotEvent_ptr = HeroMeleeBotEvent::from_substruct(incoming_type_id, serialized);
		if (HeroMeleeBotEvent_ptr != nullptr) {
			return HeroMeleeBotEvent_ptr;
		}

		auto AwardHeroGrindrailDoubleJumpedEvent_ptr = AwardHeroGrindrailDoubleJumpedEvent::from_substruct(incoming_type_id, serialized);
		if (AwardHeroGrindrailDoubleJumpedEvent_ptr != nullptr) {
			return AwardHeroGrindrailDoubleJumpedEvent_ptr;
		}

		auto AlarmEvent_ptr = AlarmEvent::from_substruct(incoming_type_id, serialized);
		if (AlarmEvent_ptr != nullptr) {
			return AlarmEvent_ptr;
		}

		auto LightningRodExplosionEvent_ptr = LightningRodExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodExplosionEvent_ptr != nullptr) {
			return LightningRodExplosionEvent_ptr;
		}

		auto BotPartialAnimsManagerStartAnimsEvent_ptr = BotPartialAnimsManagerStartAnimsEvent::from_substruct(incoming_type_id, serialized);
		if (BotPartialAnimsManagerStartAnimsEvent_ptr != nullptr) {
			return BotPartialAnimsManagerStartAnimsEvent_ptr;
		}

		auto UITutorialPauseBegin_ptr = UITutorialPauseBegin::from_substruct(incoming_type_id, serialized);
		if (UITutorialPauseBegin_ptr != nullptr) {
			return UITutorialPauseBegin_ptr;
		}

		auto HeroUsedPortalZipStartEvent_ptr = HeroUsedPortalZipStartEvent::from_substruct(incoming_type_id, serialized);
		if (HeroUsedPortalZipStartEvent_ptr != nullptr) {
			return HeroUsedPortalZipStartEvent_ptr;
		}

		auto DetachEvent_ptr = DetachEvent::from_substruct(incoming_type_id, serialized);
		if (DetachEvent_ptr != nullptr) {
			return DetachEvent_ptr;
		}

		auto InteractLockedEvent_ptr = InteractLockedEvent::from_substruct(incoming_type_id, serialized);
		if (InteractLockedEvent_ptr != nullptr) {
			return InteractLockedEvent_ptr;
		}

		auto WeaponThrowEndEvent_ptr = WeaponThrowEndEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponThrowEndEvent_ptr != nullptr) {
			return WeaponThrowEndEvent_ptr;
		}

		auto PerformWarpEvent_ptr = PerformWarpEvent::from_substruct(incoming_type_id, serialized);
		if (PerformWarpEvent_ptr != nullptr) {
			return PerformWarpEvent_ptr;
		}

		auto Cinematic2SyncActionEvent_ptr = Cinematic2SyncActionEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2SyncActionEvent_ptr != nullptr) {
			return Cinematic2SyncActionEvent_ptr;
		}

		auto JointShrinkStopEvent_ptr = JointShrinkStopEvent::from_substruct(incoming_type_id, serialized);
		if (JointShrinkStopEvent_ptr != nullptr) {
			return JointShrinkStopEvent_ptr;
		}

		auto LandingFlockDisturbedEvent_ptr = LandingFlockDisturbedEvent::from_substruct(incoming_type_id, serialized);
		if (LandingFlockDisturbedEvent_ptr != nullptr) {
			return LandingFlockDisturbedEvent_ptr;
		}

		auto BataliaTurretUnchargedEvent_ptr = BataliaTurretUnchargedEvent::from_substruct(incoming_type_id, serialized);
		if (BataliaTurretUnchargedEvent_ptr != nullptr) {
			return BataliaTurretUnchargedEvent_ptr;
		}

		auto WeaponReloadedEvent_ptr = WeaponReloadedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponReloadedEvent_ptr != nullptr) {
			return WeaponReloadedEvent_ptr;
		}

		auto FlyerPickupLaunchEvent_ptr = FlyerPickupLaunchEvent::from_substruct(incoming_type_id, serialized);
		if (FlyerPickupLaunchEvent_ptr != nullptr) {
			return FlyerPickupLaunchEvent_ptr;
		}

		auto KamehamehaFinalExplosionEvent_ptr = KamehamehaFinalExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (KamehamehaFinalExplosionEvent_ptr != nullptr) {
			return KamehamehaFinalExplosionEvent_ptr;
		}

		auto AudioBusMaterialStartListeningEvent_ptr = AudioBusMaterialStartListeningEvent::from_substruct(incoming_type_id, serialized);
		if (AudioBusMaterialStartListeningEvent_ptr != nullptr) {
			return AudioBusMaterialStartListeningEvent_ptr;
		}

		auto TriggerByGroupEvent_ptr = TriggerByGroupEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerByGroupEvent_ptr != nullptr) {
			return TriggerByGroupEvent_ptr;
		}

		auto BlizonShiftStartedEvent_ptr = BlizonShiftStartedEvent::from_substruct(incoming_type_id, serialized);
		if (BlizonShiftStartedEvent_ptr != nullptr) {
			return BlizonShiftStartedEvent_ptr;
		}

		auto SyncedAnimReleaseEvent_ptr = SyncedAnimReleaseEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimReleaseEvent_ptr != nullptr) {
			return SyncedAnimReleaseEvent_ptr;
		}

		auto FacingEndEvent_ptr = FacingEndEvent::from_substruct(incoming_type_id, serialized);
		if (FacingEndEvent_ptr != nullptr) {
			return FacingEndEvent_ptr;
		}

		auto HeroRequestRespawnEvent_ptr = HeroRequestRespawnEvent::from_substruct(incoming_type_id, serialized);
		if (HeroRequestRespawnEvent_ptr != nullptr) {
			return HeroRequestRespawnEvent_ptr;
		}

		auto SweepChaseBeginEvent_ptr = SweepChaseBeginEvent::from_substruct(incoming_type_id, serialized);
		if (SweepChaseBeginEvent_ptr != nullptr) {
			return SweepChaseBeginEvent_ptr;
		}

		auto BreakableSpawnDebrisEvent_ptr = BreakableSpawnDebrisEvent::from_substruct(incoming_type_id, serialized);
		if (BreakableSpawnDebrisEvent_ptr != nullptr) {
			return BreakableSpawnDebrisEvent_ptr;
		}

		auto DimensionPortalAddHighlightEvent_ptr = DimensionPortalAddHighlightEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionPortalAddHighlightEvent_ptr != nullptr) {
			return DimensionPortalAddHighlightEvent_ptr;
		}

		auto ClankPuzzleVolumeTargetEnterEvent_ptr = ClankPuzzleVolumeTargetEnterEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeTargetEnterEvent_ptr != nullptr) {
			return ClankPuzzleVolumeTargetEnterEvent_ptr;
		}

		auto UIWeaponLevelUpDoneEvent_ptr = UIWeaponLevelUpDoneEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponLevelUpDoneEvent_ptr != nullptr) {
			return UIWeaponLevelUpDoneEvent_ptr;
		}

		auto GroundDashBeginEvent_ptr = GroundDashBeginEvent::from_substruct(incoming_type_id, serialized);
		if (GroundDashBeginEvent_ptr != nullptr) {
			return GroundDashBeginEvent_ptr;
		}

		auto HUDLowHealthFirstShowEvent_ptr = HUDLowHealthFirstShowEvent::from_substruct(incoming_type_id, serialized);
		if (HUDLowHealthFirstShowEvent_ptr != nullptr) {
			return HUDLowHealthFirstShowEvent_ptr;
		}

		auto ObjZipLinePlayerSlideStopEvent_ptr = ObjZipLinePlayerSlideStopEvent::from_substruct(incoming_type_id, serialized);
		if (ObjZipLinePlayerSlideStopEvent_ptr != nullptr) {
			return ObjZipLinePlayerSlideStopEvent_ptr;
		}

		auto HoverbootKickPreReadyEvent_ptr = HoverbootKickPreReadyEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootKickPreReadyEvent_ptr != nullptr) {
			return HoverbootKickPreReadyEvent_ptr;
		}

		auto HeroBounceEarlyTransitionEvent_ptr = HeroBounceEarlyTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (HeroBounceEarlyTransitionEvent_ptr != nullptr) {
			return HeroBounceEarlyTransitionEvent_ptr;
		}

		auto HealthBarHideEvent_ptr = HealthBarHideEvent::from_substruct(incoming_type_id, serialized);
		if (HealthBarHideEvent_ptr != nullptr) {
			return HealthBarHideEvent_ptr;
		}

		auto DisplayInteractLockedIconEvent_ptr = DisplayInteractLockedIconEvent::from_substruct(incoming_type_id, serialized);
		if (DisplayInteractLockedIconEvent_ptr != nullptr) {
			return DisplayInteractLockedIconEvent_ptr;
		}

		auto WarpRifleEnterMediumTempTierEvent_ptr = WarpRifleEnterMediumTempTierEvent::from_substruct(incoming_type_id, serialized);
		if (WarpRifleEnterMediumTempTierEvent_ptr != nullptr) {
			return WarpRifleEnterMediumTempTierEvent_ptr;
		}

		auto KamehamehaChargeUpStartedEvent_ptr = KamehamehaChargeUpStartedEvent::from_substruct(incoming_type_id, serialized);
		if (KamehamehaChargeUpStartedEvent_ptr != nullptr) {
			return KamehamehaChargeUpStartedEvent_ptr;
		}

		auto HeadRetractEvent_ptr = HeadRetractEvent::from_substruct(incoming_type_id, serialized);
		if (HeadRetractEvent_ptr != nullptr) {
			return HeadRetractEvent_ptr;
		}

		auto WallJumpEvent_ptr = WallJumpEvent::from_substruct(incoming_type_id, serialized);
		if (WallJumpEvent_ptr != nullptr) {
			return WallJumpEvent_ptr;
		}

		auto AnimScalePreRotateEndEvent_ptr = AnimScalePreRotateEndEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScalePreRotateEndEvent_ptr != nullptr) {
			return AnimScalePreRotateEndEvent_ptr;
		}

		auto AnimScaleTranslationOnEvent_ptr = AnimScaleTranslationOnEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScaleTranslationOnEvent_ptr != nullptr) {
			return AnimScaleTranslationOnEvent_ptr;
		}

		auto HeroRevivingStopEvent_ptr = HeroRevivingStopEvent::from_substruct(incoming_type_id, serialized);
		if (HeroRevivingStopEvent_ptr != nullptr) {
			return HeroRevivingStopEvent_ptr;
		}

		auto BataliaTurretNotEnoughEnergyEvent_ptr = BataliaTurretNotEnoughEnergyEvent::from_substruct(incoming_type_id, serialized);
		if (BataliaTurretNotEnoughEnergyEvent_ptr != nullptr) {
			return BataliaTurretNotEnoughEnergyEvent_ptr;
		}

		auto MultiplayerRoundStartEvent_ptr = MultiplayerRoundStartEvent::from_substruct(incoming_type_id, serialized);
		if (MultiplayerRoundStartEvent_ptr != nullptr) {
			return MultiplayerRoundStartEvent_ptr;
		}

		auto DevstatsPlayerDamagedEvent_ptr = DevstatsPlayerDamagedEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsPlayerDamagedEvent_ptr != nullptr) {
			return DevstatsPlayerDamagedEvent_ptr;
		}

		auto GroundTriggerOnEvent_ptr = GroundTriggerOnEvent::from_substruct(incoming_type_id, serialized);
		if (GroundTriggerOnEvent_ptr != nullptr) {
			return GroundTriggerOnEvent_ptr;
		}

		auto UIMenuSkipCinematicEvent_ptr = UIMenuSkipCinematicEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuSkipCinematicEvent_ptr != nullptr) {
			return UIMenuSkipCinematicEvent_ptr;
		}

		auto WeaponWarpRifleSpinDownStartedEvent_ptr = WeaponWarpRifleSpinDownStartedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponWarpRifleSpinDownStartedEvent_ptr != nullptr) {
			return WeaponWarpRifleSpinDownStartedEvent_ptr;
		}

		auto WeaponSightedEvent_ptr = WeaponSightedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponSightedEvent_ptr != nullptr) {
			return WeaponSightedEvent_ptr;
		}

		auto VehicleHoverJetsOffEvent_ptr = VehicleHoverJetsOffEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleHoverJetsOffEvent_ptr != nullptr) {
			return VehicleHoverJetsOffEvent_ptr;
		}

		auto PickupBoltEvent_ptr = PickupBoltEvent::from_substruct(incoming_type_id, serialized);
		if (PickupBoltEvent_ptr != nullptr) {
			return PickupBoltEvent_ptr;
		}

		auto GolemOffEvent_ptr = GolemOffEvent::from_substruct(incoming_type_id, serialized);
		if (GolemOffEvent_ptr != nullptr) {
			return GolemOffEvent_ptr;
		}

		auto FossilizeSlowStartEvent_ptr = FossilizeSlowStartEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeSlowStartEvent_ptr != nullptr) {
			return FossilizeSlowStartEvent_ptr;
		}

		auto SpendRaritaniumEvent_ptr = SpendRaritaniumEvent::from_substruct(incoming_type_id, serialized);
		if (SpendRaritaniumEvent_ptr != nullptr) {
			return SpendRaritaniumEvent_ptr;
		}

		auto TouchedEvent_ptr = TouchedEvent::from_substruct(incoming_type_id, serialized);
		if (TouchedEvent_ptr != nullptr) {
			return TouchedEvent_ptr;
		}

		auto BotTriggerEquipPartialAnimsEvent_ptr = BotTriggerEquipPartialAnimsEvent::from_substruct(incoming_type_id, serialized);
		if (BotTriggerEquipPartialAnimsEvent_ptr != nullptr) {
			return BotTriggerEquipPartialAnimsEvent_ptr;
		}

		auto GadgetPortAttachEvent_ptr = GadgetPortAttachEvent::from_substruct(incoming_type_id, serialized);
		if (GadgetPortAttachEvent_ptr != nullptr) {
			return GadgetPortAttachEvent_ptr;
		}

		auto NodalShotActorSpawnedEffectEvent_ptr = NodalShotActorSpawnedEffectEvent::from_substruct(incoming_type_id, serialized);
		if (NodalShotActorSpawnedEffectEvent_ptr != nullptr) {
			return NodalShotActorSpawnedEffectEvent_ptr;
		}

		auto Cinematic2CameraPaneEvent_ptr = Cinematic2CameraPaneEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2CameraPaneEvent_ptr != nullptr) {
			return Cinematic2CameraPaneEvent_ptr;
		}

		auto RippleEvent_ptr = RippleEvent::from_substruct(incoming_type_id, serialized);
		if (RippleEvent_ptr != nullptr) {
			return RippleEvent_ptr;
		}

		auto PickupLandEvent_ptr = PickupLandEvent::from_substruct(incoming_type_id, serialized);
		if (PickupLandEvent_ptr != nullptr) {
			return PickupLandEvent_ptr;
		}

		auto CrateExplodeWarningSoundEvent_ptr = CrateExplodeWarningSoundEvent::from_substruct(incoming_type_id, serialized);
		if (CrateExplodeWarningSoundEvent_ptr != nullptr) {
			return CrateExplodeWarningSoundEvent_ptr;
		}

		auto UIVendorPurchaseAllVFXEvent_ptr = UIVendorPurchaseAllVFXEvent::from_substruct(incoming_type_id, serialized);
		if (UIVendorPurchaseAllVFXEvent_ptr != nullptr) {
			return UIVendorPurchaseAllVFXEvent_ptr;
		}

		auto ShipEvadeEvent_ptr = ShipEvadeEvent::from_substruct(incoming_type_id, serialized);
		if (ShipEvadeEvent_ptr != nullptr) {
			return ShipEvadeEvent_ptr;
		}

		auto BlizonShiftCrystalHideEvent_ptr = BlizonShiftCrystalHideEvent::from_substruct(incoming_type_id, serialized);
		if (BlizonShiftCrystalHideEvent_ptr != nullptr) {
			return BlizonShiftCrystalHideEvent_ptr;
		}

		auto MeleeDamageBeginEvent_ptr = MeleeDamageBeginEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeDamageBeginEvent_ptr != nullptr) {
			return MeleeDamageBeginEvent_ptr;
		}

		auto WasDisconnectedEvent_ptr = WasDisconnectedEvent::from_substruct(incoming_type_id, serialized);
		if (WasDisconnectedEvent_ptr != nullptr) {
			return WasDisconnectedEvent_ptr;
		}

		auto SyncedAnimConnectEvent_ptr = SyncedAnimConnectEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimConnectEvent_ptr != nullptr) {
			return SyncedAnimConnectEvent_ptr;
		}

		auto AnimScaleDriverRateOnEvent_ptr = AnimScaleDriverRateOnEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScaleDriverRateOnEvent_ptr != nullptr) {
			return AnimScaleDriverRateOnEvent_ptr;
		}

		auto StopJumpEvent_ptr = StopJumpEvent::from_substruct(incoming_type_id, serialized);
		if (StopJumpEvent_ptr != nullptr) {
			return StopJumpEvent_ptr;
		}

		auto UIWeaponVendorTreeOpenEvent_ptr = UIWeaponVendorTreeOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorTreeOpenEvent_ptr != nullptr) {
			return UIWeaponVendorTreeOpenEvent_ptr;
		}

		auto UIWeaponVendorInStockContinueEvent_ptr = UIWeaponVendorInStockContinueEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorInStockContinueEvent_ptr != nullptr) {
			return UIWeaponVendorInStockContinueEvent_ptr;
		}

		auto AnimDamageEvent_ptr = AnimDamageEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDamageEvent_ptr != nullptr) {
			return AnimDamageEvent_ptr;
		}

		auto UIStartLogoPressedEvent_ptr = UIStartLogoPressedEvent::from_substruct(incoming_type_id, serialized);
		if (UIStartLogoPressedEvent_ptr != nullptr) {
			return UIStartLogoPressedEvent_ptr;
		}

		auto DeactivatedEvent_ptr = DeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (DeactivatedEvent_ptr != nullptr) {
			return DeactivatedEvent_ptr;
		}

		auto VendorTabClosedDevstatsEvent_ptr = VendorTabClosedDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (VendorTabClosedDevstatsEvent_ptr != nullptr) {
			return VendorTabClosedDevstatsEvent_ptr;
		}

		auto BotTeleportEndEvent_ptr = BotTeleportEndEvent::from_substruct(incoming_type_id, serialized);
		if (BotTeleportEndEvent_ptr != nullptr) {
			return BotTeleportEndEvent_ptr;
		}

		auto PlayerDeathEvent_ptr = PlayerDeathEvent::from_substruct(incoming_type_id, serialized);
		if (PlayerDeathEvent_ptr != nullptr) {
			return PlayerDeathEvent_ptr;
		}

		auto AnimScaleRotationOnEvent_ptr = AnimScaleRotationOnEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScaleRotationOnEvent_ptr != nullptr) {
			return AnimScaleRotationOnEvent_ptr;
		}

		auto AnimSpawnPhysicsActorEvent_ptr = AnimSpawnPhysicsActorEvent::from_substruct(incoming_type_id, serialized);
		if (AnimSpawnPhysicsActorEvent_ptr != nullptr) {
			return AnimSpawnPhysicsActorEvent_ptr;
		}

		auto LaserSightOnEvent_ptr = LaserSightOnEvent::from_substruct(incoming_type_id, serialized);
		if (LaserSightOnEvent_ptr != nullptr) {
			return LaserSightOnEvent_ptr;
		}

		auto WasConnectedEvent_ptr = WasConnectedEvent::from_substruct(incoming_type_id, serialized);
		if (WasConnectedEvent_ptr != nullptr) {
			return WasConnectedEvent_ptr;
		}

		auto PauseWeaponsRemapOpenEvent_ptr = PauseWeaponsRemapOpenEvent::from_substruct(incoming_type_id, serialized);
		if (PauseWeaponsRemapOpenEvent_ptr != nullptr) {
			return PauseWeaponsRemapOpenEvent_ptr;
		}

		auto HammerCrankTargetComplete_ptr = HammerCrankTargetComplete::from_substruct(incoming_type_id, serialized);
		if (HammerCrankTargetComplete_ptr != nullptr) {
			return HammerCrankTargetComplete_ptr;
		}

		auto AwardWeaponFullUpgradeEvent_ptr = AwardWeaponFullUpgradeEvent::from_substruct(incoming_type_id, serialized);
		if (AwardWeaponFullUpgradeEvent_ptr != nullptr) {
			return AwardWeaponFullUpgradeEvent_ptr;
		}

		auto SweepChaseEndEvent_ptr = SweepChaseEndEvent::from_substruct(incoming_type_id, serialized);
		if (SweepChaseEndEvent_ptr != nullptr) {
			return SweepChaseEndEvent_ptr;
		}

		auto AlertCompleteEvent_ptr = AlertCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (AlertCompleteEvent_ptr != nullptr) {
			return AlertCompleteEvent_ptr;
		}

		auto PauseCollectiblesTabEvent_ptr = PauseCollectiblesTabEvent::from_substruct(incoming_type_id, serialized);
		if (PauseCollectiblesTabEvent_ptr != nullptr) {
			return PauseCollectiblesTabEvent_ptr;
		}

		auto PortalDeactivatedEvent_ptr = PortalDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (PortalDeactivatedEvent_ptr != nullptr) {
			return PortalDeactivatedEvent_ptr;
		}

		auto BootTimeDevstatsEvent_ptr = BootTimeDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (BootTimeDevstatsEvent_ptr != nullptr) {
			return BootTimeDevstatsEvent_ptr;
		}

		auto HeroEconomySnapshotDevstatsEvent_ptr = HeroEconomySnapshotDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (HeroEconomySnapshotDevstatsEvent_ptr != nullptr) {
			return HeroEconomySnapshotDevstatsEvent_ptr;
		}

		auto BotFlungStopEvent_ptr = BotFlungStopEvent::from_substruct(incoming_type_id, serialized);
		if (BotFlungStopEvent_ptr != nullptr) {
			return BotFlungStopEvent_ptr;
		}

		auto UserSigninCanceledEvent_ptr = UserSigninCanceledEvent::from_substruct(incoming_type_id, serialized);
		if (UserSigninCanceledEvent_ptr != nullptr) {
			return UserSigninCanceledEvent_ptr;
		}

		auto ShrubberyRampUpStartEvent_ptr = ShrubberyRampUpStartEvent::from_substruct(incoming_type_id, serialized);
		if (ShrubberyRampUpStartEvent_ptr != nullptr) {
			return ShrubberyRampUpStartEvent_ptr;
		}

		auto MagShieldFullEvent_ptr = MagShieldFullEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldFullEvent_ptr != nullptr) {
			return MagShieldFullEvent_ptr;
		}

		auto ZoneLoadedEvent_ptr = ZoneLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (ZoneLoadedEvent_ptr != nullptr) {
			return ZoneLoadedEvent_ptr;
		}

		auto ParentShotDestroyedEvent_ptr = ParentShotDestroyedEvent::from_substruct(incoming_type_id, serialized);
		if (ParentShotDestroyedEvent_ptr != nullptr) {
			return ParentShotDestroyedEvent_ptr;
		}

		auto ProtonSeekerAttackBeginEvent_ptr = ProtonSeekerAttackBeginEvent::from_substruct(incoming_type_id, serialized);
		if (ProtonSeekerAttackBeginEvent_ptr != nullptr) {
			return ProtonSeekerAttackBeginEvent_ptr;
		}

		auto HeroDamageFieldEndEvent_ptr = HeroDamageFieldEndEvent::from_substruct(incoming_type_id, serialized);
		if (HeroDamageFieldEndEvent_ptr != nullptr) {
			return HeroDamageFieldEndEvent_ptr;
		}

		auto BotStartAimingEvent_ptr = BotStartAimingEvent::from_substruct(incoming_type_id, serialized);
		if (BotStartAimingEvent_ptr != nullptr) {
			return BotStartAimingEvent_ptr;
		}

		auto MultiplayerRoundEndEvent_ptr = MultiplayerRoundEndEvent::from_substruct(incoming_type_id, serialized);
		if (MultiplayerRoundEndEvent_ptr != nullptr) {
			return MultiplayerRoundEndEvent_ptr;
		}

		auto PortalOpenEvent_ptr = PortalOpenEvent::from_substruct(incoming_type_id, serialized);
		if (PortalOpenEvent_ptr != nullptr) {
			return PortalOpenEvent_ptr;
		}

		auto TargetedOnEvent_ptr = TargetedOnEvent::from_substruct(incoming_type_id, serialized);
		if (TargetedOnEvent_ptr != nullptr) {
			return TargetedOnEvent_ptr;
		}

		auto OnAttachParentLost_ptr = OnAttachParentLost::from_substruct(incoming_type_id, serialized);
		if (OnAttachParentLost_ptr != nullptr) {
			return OnAttachParentLost_ptr;
		}

		auto PickupSetInputDropEnabledEvent_ptr = PickupSetInputDropEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (PickupSetInputDropEnabledEvent_ptr != nullptr) {
			return PickupSetInputDropEnabledEvent_ptr;
		}

		auto MovingLevelAnimDoneEvent_ptr = MovingLevelAnimDoneEvent::from_substruct(incoming_type_id, serialized);
		if (MovingLevelAnimDoneEvent_ptr != nullptr) {
			return MovingLevelAnimDoneEvent_ptr;
		}

		auto BotWeaponChargeStart_ptr = BotWeaponChargeStart::from_substruct(incoming_type_id, serialized);
		if (BotWeaponChargeStart_ptr != nullptr) {
			return BotWeaponChargeStart_ptr;
		}

		auto RYNOPortalObjectDestroyEvent_ptr = RYNOPortalObjectDestroyEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOPortalObjectDestroyEvent_ptr != nullptr) {
			return RYNOPortalObjectDestroyEvent_ptr;
		}

		auto PukeStartEvent_ptr = PukeStartEvent::from_substruct(incoming_type_id, serialized);
		if (PukeStartEvent_ptr != nullptr) {
			return PukeStartEvent_ptr;
		}

		auto MissionFailedEvent_ptr = MissionFailedEvent::from_substruct(incoming_type_id, serialized);
		if (MissionFailedEvent_ptr != nullptr) {
			return MissionFailedEvent_ptr;
		}

		auto ObjSysUnlocksChangedEvent_ptr = ObjSysUnlocksChangedEvent::from_substruct(incoming_type_id, serialized);
		if (ObjSysUnlocksChangedEvent_ptr != nullptr) {
			return ObjSysUnlocksChangedEvent_ptr;
		}

		auto AnimPortalZipLandEvent_ptr = AnimPortalZipLandEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPortalZipLandEvent_ptr != nullptr) {
			return AnimPortalZipLandEvent_ptr;
		}

		auto UIArenaMenuCloseEvent_ptr = UIArenaMenuCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIArenaMenuCloseEvent_ptr != nullptr) {
			return UIArenaMenuCloseEvent_ptr;
		}

		auto BurningOnEvent_ptr = BurningOnEvent::from_substruct(incoming_type_id, serialized);
		if (BurningOnEvent_ptr != nullptr) {
			return BurningOnEvent_ptr;
		}

		auto GrindBoostStartEvent_ptr = GrindBoostStartEvent::from_substruct(incoming_type_id, serialized);
		if (GrindBoostStartEvent_ptr != nullptr) {
			return GrindBoostStartEvent_ptr;
		}

		auto AnimSpawnProjectileEvent_ptr = AnimSpawnProjectileEvent::from_substruct(incoming_type_id, serialized);
		if (AnimSpawnProjectileEvent_ptr != nullptr) {
			return AnimSpawnProjectileEvent_ptr;
		}

		auto EarlyTransitionOnMissEvent_ptr = EarlyTransitionOnMissEvent::from_substruct(incoming_type_id, serialized);
		if (EarlyTransitionOnMissEvent_ptr != nullptr) {
			return EarlyTransitionOnMissEvent_ptr;
		}

		auto WeaponLaserHittingStartEvent_ptr = WeaponLaserHittingStartEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponLaserHittingStartEvent_ptr != nullptr) {
			return WeaponLaserHittingStartEvent_ptr;
		}

		auto ClankWeaponShowInHandEvent_ptr = ClankWeaponShowInHandEvent::from_substruct(incoming_type_id, serialized);
		if (ClankWeaponShowInHandEvent_ptr != nullptr) {
			return ClankWeaponShowInHandEvent_ptr;
		}

		auto RicochetDoneEvent_ptr = RicochetDoneEvent::from_substruct(incoming_type_id, serialized);
		if (RicochetDoneEvent_ptr != nullptr) {
			return RicochetDoneEvent_ptr;
		}

		auto PortalClosedEvent_ptr = PortalClosedEvent::from_substruct(incoming_type_id, serialized);
		if (PortalClosedEvent_ptr != nullptr) {
			return PortalClosedEvent_ptr;
		}

		auto AudioHordeStopEvent_ptr = AudioHordeStopEvent::from_substruct(incoming_type_id, serialized);
		if (AudioHordeStopEvent_ptr != nullptr) {
			return AudioHordeStopEvent_ptr;
		}

		auto MountFlyerPickupUnreadyEvent_ptr = MountFlyerPickupUnreadyEvent::from_substruct(incoming_type_id, serialized);
		if (MountFlyerPickupUnreadyEvent_ptr != nullptr) {
			return MountFlyerPickupUnreadyEvent_ptr;
		}

		auto ProjectileFlewByEndEvent_ptr = ProjectileFlewByEndEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileFlewByEndEvent_ptr != nullptr) {
			return ProjectileFlewByEndEvent_ptr;
		}

		auto BotSpawnRewardEvent_ptr = BotSpawnRewardEvent::from_substruct(incoming_type_id, serialized);
		if (BotSpawnRewardEvent_ptr != nullptr) {
			return BotSpawnRewardEvent_ptr;
		}

		auto PauseMenuOpenedDevstatsEvent_ptr = PauseMenuOpenedDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuOpenedDevstatsEvent_ptr != nullptr) {
			return PauseMenuOpenedDevstatsEvent_ptr;
		}

		auto CVCBumpedEvent_ptr = CVCBumpedEvent::from_substruct(incoming_type_id, serialized);
		if (CVCBumpedEvent_ptr != nullptr) {
			return CVCBumpedEvent_ptr;
		}

		auto WallStickOffEvent_ptr = WallStickOffEvent::from_substruct(incoming_type_id, serialized);
		if (WallStickOffEvent_ptr != nullptr) {
			return WallStickOffEvent_ptr;
		}

		auto BotStateHitReactStartEvent_ptr = BotStateHitReactStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotStateHitReactStartEvent_ptr != nullptr) {
			return BotStateHitReactStartEvent_ptr;
		}

		auto PickupContinuousStartedEvent_ptr = PickupContinuousStartedEvent::from_substruct(incoming_type_id, serialized);
		if (PickupContinuousStartedEvent_ptr != nullptr) {
			return PickupContinuousStartedEvent_ptr;
		}

		auto LungeEndEvent_ptr = LungeEndEvent::from_substruct(incoming_type_id, serialized);
		if (LungeEndEvent_ptr != nullptr) {
			return LungeEndEvent_ptr;
		}

		auto DevstatsSystemMenuOptionChangedEvent_ptr = DevstatsSystemMenuOptionChangedEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsSystemMenuOptionChangedEvent_ptr != nullptr) {
			return DevstatsSystemMenuOptionChangedEvent_ptr;
		}

		auto GrindPathFollowerMoveStartEvent_ptr = GrindPathFollowerMoveStartEvent::from_substruct(incoming_type_id, serialized);
		if (GrindPathFollowerMoveStartEvent_ptr != nullptr) {
			return GrindPathFollowerMoveStartEvent_ptr;
		}

		auto DisallowStagedBlockEarlyTransitionEvent_ptr = DisallowStagedBlockEarlyTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (DisallowStagedBlockEarlyTransitionEvent_ptr != nullptr) {
			return DisallowStagedBlockEarlyTransitionEvent_ptr;
		}

		auto AnimPropForwardEvent_ptr = AnimPropForwardEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPropForwardEvent_ptr != nullptr) {
			return AnimPropForwardEvent_ptr;
		}

		auto DamageBlockedByShieldEvent_ptr = DamageBlockedByShieldEvent::from_substruct(incoming_type_id, serialized);
		if (DamageBlockedByShieldEvent_ptr != nullptr) {
			return DamageBlockedByShieldEvent_ptr;
		}

		auto HostMigratedEvent_ptr = HostMigratedEvent::from_substruct(incoming_type_id, serialized);
		if (HostMigratedEvent_ptr != nullptr) {
			return HostMigratedEvent_ptr;
		}

		auto PhotoModeLightEnabledEvent_ptr = PhotoModeLightEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (PhotoModeLightEnabledEvent_ptr != nullptr) {
			return PhotoModeLightEnabledEvent_ptr;
		}

		auto WeaponBurstCanceledEvent_ptr = WeaponBurstCanceledEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponBurstCanceledEvent_ptr != nullptr) {
			return WeaponBurstCanceledEvent_ptr;
		}

		auto ObjZipLinePlayerSlideEvent_ptr = ObjZipLinePlayerSlideEvent::from_substruct(incoming_type_id, serialized);
		if (ObjZipLinePlayerSlideEvent_ptr != nullptr) {
			return ObjZipLinePlayerSlideEvent_ptr;
		}

		auto ClientJoinedEvent_ptr = ClientJoinedEvent::from_substruct(incoming_type_id, serialized);
		if (ClientJoinedEvent_ptr != nullptr) {
			return ClientJoinedEvent_ptr;
		}

		auto AnimScriptStartedEvent_ptr = AnimScriptStartedEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScriptStartedEvent_ptr != nullptr) {
			return AnimScriptStartedEvent_ptr;
		}

		auto BotComboMoveFinishedEvent_ptr = BotComboMoveFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinishedEvent_ptr != nullptr) {
			return BotComboMoveFinishedEvent_ptr;
		}

		auto TrajectoryHighlightOnEvent_ptr = TrajectoryHighlightOnEvent::from_substruct(incoming_type_id, serialized);
		if (TrajectoryHighlightOnEvent_ptr != nullptr) {
			return TrajectoryHighlightOnEvent_ptr;
		}

		auto PlasmaStrikerScopeEnterEvent_ptr = PlasmaStrikerScopeEnterEvent::from_substruct(incoming_type_id, serialized);
		if (PlasmaStrikerScopeEnterEvent_ptr != nullptr) {
			return PlasmaStrikerScopeEnterEvent_ptr;
		}

		auto ProjectileWarnedEvent_ptr = ProjectileWarnedEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileWarnedEvent_ptr != nullptr) {
			return ProjectileWarnedEvent_ptr;
		}

		auto DevstatsEnvironmentInteractKillEvent_ptr = DevstatsEnvironmentInteractKillEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsEnvironmentInteractKillEvent_ptr != nullptr) {
			return DevstatsEnvironmentInteractKillEvent_ptr;
		}

		auto ShockwaveStartEvent_ptr = ShockwaveStartEvent::from_substruct(incoming_type_id, serialized);
		if (ShockwaveStartEvent_ptr != nullptr) {
			return ShockwaveStartEvent_ptr;
		}

		auto PhotoModeAddStickerEvent_ptr = PhotoModeAddStickerEvent::from_substruct(incoming_type_id, serialized);
		if (PhotoModeAddStickerEvent_ptr != nullptr) {
			return PhotoModeAddStickerEvent_ptr;
		}

		auto BotAttackSelectEvent_ptr = BotAttackSelectEvent::from_substruct(incoming_type_id, serialized);
		if (BotAttackSelectEvent_ptr != nullptr) {
			return BotAttackSelectEvent_ptr;
		}

		auto UIOptionsColorPickerMoveEvent_ptr = UIOptionsColorPickerMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIOptionsColorPickerMoveEvent_ptr != nullptr) {
			return UIOptionsColorPickerMoveEvent_ptr;
		}

		auto DimensionalPulseStopEvent_ptr = DimensionalPulseStopEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseStopEvent_ptr != nullptr) {
			return DimensionalPulseStopEvent_ptr;
		}

		auto OnFrozenEvent_ptr = OnFrozenEvent::from_substruct(incoming_type_id, serialized);
		if (OnFrozenEvent_ptr != nullptr) {
			return OnFrozenEvent_ptr;
		}

		auto ScreenSplatterEvent_ptr = ScreenSplatterEvent::from_substruct(incoming_type_id, serialized);
		if (ScreenSplatterEvent_ptr != nullptr) {
			return ScreenSplatterEvent_ptr;
		}

		auto ShipMagnetCollectAmmoEvent_ptr = ShipMagnetCollectAmmoEvent::from_substruct(incoming_type_id, serialized);
		if (ShipMagnetCollectAmmoEvent_ptr != nullptr) {
			return ShipMagnetCollectAmmoEvent_ptr;
		}

		auto HoverbootKickEvent_ptr = HoverbootKickEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootKickEvent_ptr != nullptr) {
			return HoverbootKickEvent_ptr;
		}

		auto AnimScaleTranslationOffEvent_ptr = AnimScaleTranslationOffEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScaleTranslationOffEvent_ptr != nullptr) {
			return AnimScaleTranslationOffEvent_ptr;
		}

		auto LockedProximityEvent_ptr = LockedProximityEvent::from_substruct(incoming_type_id, serialized);
		if (LockedProximityEvent_ptr != nullptr) {
			return LockedProximityEvent_ptr;
		}

		auto UIFrontEndCloseEvent_ptr = UIFrontEndCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndCloseEvent_ptr != nullptr) {
			return UIFrontEndCloseEvent_ptr;
		}

		auto AOEWaterHazardEndTellEvent_ptr = AOEWaterHazardEndTellEvent::from_substruct(incoming_type_id, serialized);
		if (AOEWaterHazardEndTellEvent_ptr != nullptr) {
			return AOEWaterHazardEndTellEvent_ptr;
		}

		auto WepHarpoonTurretRotateStartEvent_ptr = WepHarpoonTurretRotateStartEvent::from_substruct(incoming_type_id, serialized);
		if (WepHarpoonTurretRotateStartEvent_ptr != nullptr) {
			return WepHarpoonTurretRotateStartEvent_ptr;
		}

		auto ShipBulletsStartedEvent_ptr = ShipBulletsStartedEvent::from_substruct(incoming_type_id, serialized);
		if (ShipBulletsStartedEvent_ptr != nullptr) {
			return ShipBulletsStartedEvent_ptr;
		}

		auto StatusEffectStopEvent_ptr = StatusEffectStopEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectStopEvent_ptr != nullptr) {
			return StatusEffectStopEvent_ptr;
		}

		auto BotCinematicEnterEvent_ptr = BotCinematicEnterEvent::from_substruct(incoming_type_id, serialized);
		if (BotCinematicEnterEvent_ptr != nullptr) {
			return BotCinematicEnterEvent_ptr;
		}

		auto GroundEvent_ptr = GroundEvent::from_substruct(incoming_type_id, serialized);
		if (GroundEvent_ptr != nullptr) {
			return GroundEvent_ptr;
		}

		auto PortalZipRiftMovingEvent_ptr = PortalZipRiftMovingEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipRiftMovingEvent_ptr != nullptr) {
			return PortalZipRiftMovingEvent_ptr;
		}

		auto InitiateAnimatedDismountEvent_ptr = InitiateAnimatedDismountEvent::from_substruct(incoming_type_id, serialized);
		if (InitiateAnimatedDismountEvent_ptr != nullptr) {
			return InitiateAnimatedDismountEvent_ptr;
		}

		auto DamageRollTriggeredEvent_ptr = DamageRollTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (DamageRollTriggeredEvent_ptr != nullptr) {
			return DamageRollTriggeredEvent_ptr;
		}

		auto PredatorTargetLostEvent_ptr = PredatorTargetLostEvent::from_substruct(incoming_type_id, serialized);
		if (PredatorTargetLostEvent_ptr != nullptr) {
			return PredatorTargetLostEvent_ptr;
		}

		auto StatusEffectBuildupEvent_ptr = StatusEffectBuildupEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectBuildupEvent_ptr != nullptr) {
			return StatusEffectBuildupEvent_ptr;
		}

		auto CentipedeGroundEffectStart_ptr = CentipedeGroundEffectStart::from_substruct(incoming_type_id, serialized);
		if (CentipedeGroundEffectStart_ptr != nullptr) {
			return CentipedeGroundEffectStart_ptr;
		}

		auto UIWeaponVendorChainDownEvent_ptr = UIWeaponVendorChainDownEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorChainDownEvent_ptr != nullptr) {
			return UIWeaponVendorChainDownEvent_ptr;
		}

		auto ShockReactStartEvent_ptr = ShockReactStartEvent::from_substruct(incoming_type_id, serialized);
		if (ShockReactStartEvent_ptr != nullptr) {
			return ShockReactStartEvent_ptr;
		}

		auto TunnelerEnterGroundEvent_ptr = TunnelerEnterGroundEvent::from_substruct(incoming_type_id, serialized);
		if (TunnelerEnterGroundEvent_ptr != nullptr) {
			return TunnelerEnterGroundEvent_ptr;
		}

		auto PickupResetEvent_ptr = PickupResetEvent::from_substruct(incoming_type_id, serialized);
		if (PickupResetEvent_ptr != nullptr) {
			return PickupResetEvent_ptr;
		}

		auto BloodTrailEvent_ptr = BloodTrailEvent::from_substruct(incoming_type_id, serialized);
		if (BloodTrailEvent_ptr != nullptr) {
			return BloodTrailEvent_ptr;
		}

		auto CentipedeGroundEffectEnd_ptr = CentipedeGroundEffectEnd::from_substruct(incoming_type_id, serialized);
		if (CentipedeGroundEffectEnd_ptr != nullptr) {
			return CentipedeGroundEffectEnd_ptr;
		}

		auto VehicleThrustersOnEvent_ptr = VehicleThrustersOnEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleThrustersOnEvent_ptr != nullptr) {
			return VehicleThrustersOnEvent_ptr;
		}

		auto BoltCrankResetEvent_ptr = BoltCrankResetEvent::from_substruct(incoming_type_id, serialized);
		if (BoltCrankResetEvent_ptr != nullptr) {
			return BoltCrankResetEvent_ptr;
		}

		auto ZoneInstantiatedEvent_ptr = ZoneInstantiatedEvent::from_substruct(incoming_type_id, serialized);
		if (ZoneInstantiatedEvent_ptr != nullptr) {
			return ZoneInstantiatedEvent_ptr;
		}

		auto PrefabZoneActivatedEvent_ptr = PrefabZoneActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (PrefabZoneActivatedEvent_ptr != nullptr) {
			return PrefabZoneActivatedEvent_ptr;
		}

		auto DisallowEarlyTransitionEvent_ptr = DisallowEarlyTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (DisallowEarlyTransitionEvent_ptr != nullptr) {
			return DisallowEarlyTransitionEvent_ptr;
		}

		auto BataliaTurretFullyChargedEvent_ptr = BataliaTurretFullyChargedEvent::from_substruct(incoming_type_id, serialized);
		if (BataliaTurretFullyChargedEvent_ptr != nullptr) {
			return BataliaTurretFullyChargedEvent_ptr;
		}

		auto WeakSpotBrokenEvent_ptr = WeakSpotBrokenEvent::from_substruct(incoming_type_id, serialized);
		if (WeakSpotBrokenEvent_ptr != nullptr) {
			return WeakSpotBrokenEvent_ptr;
		}

		auto PauseWeaponsRemapEquipEvent_ptr = PauseWeaponsRemapEquipEvent::from_substruct(incoming_type_id, serialized);
		if (PauseWeaponsRemapEquipEvent_ptr != nullptr) {
			return PauseWeaponsRemapEquipEvent_ptr;
		}

		auto FlameStartEvent_ptr = FlameStartEvent::from_substruct(incoming_type_id, serialized);
		if (FlameStartEvent_ptr != nullptr) {
			return FlameStartEvent_ptr;
		}

		auto HeroLevelUpExplosionEvent_ptr = HeroLevelUpExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (HeroLevelUpExplosionEvent_ptr != nullptr) {
			return HeroLevelUpExplosionEvent_ptr;
		}

		auto BotGuideArrivedAtEndEvent_ptr = BotGuideArrivedAtEndEvent::from_substruct(incoming_type_id, serialized);
		if (BotGuideArrivedAtEndEvent_ptr != nullptr) {
			return BotGuideArrivedAtEndEvent_ptr;
		}

		auto MeleeHitTakenEvent_ptr = MeleeHitTakenEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeHitTakenEvent_ptr != nullptr) {
			return MeleeHitTakenEvent_ptr;
		}

		auto UIOptionsColorPickerOpenEvent_ptr = UIOptionsColorPickerOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIOptionsColorPickerOpenEvent_ptr != nullptr) {
			return UIOptionsColorPickerOpenEvent_ptr;
		}

		auto RaycastStateChangedEvent_ptr = RaycastStateChangedEvent::from_substruct(incoming_type_id, serialized);
		if (RaycastStateChangedEvent_ptr != nullptr) {
			return RaycastStateChangedEvent_ptr;
		}

		auto GrowthOffEvent_ptr = GrowthOffEvent::from_substruct(incoming_type_id, serialized);
		if (GrowthOffEvent_ptr != nullptr) {
			return GrowthOffEvent_ptr;
		}

		auto FinalizeDamageEvent_ptr = FinalizeDamageEvent::from_substruct(incoming_type_id, serialized);
		if (FinalizeDamageEvent_ptr != nullptr) {
			return FinalizeDamageEvent_ptr;
		}

		auto PauseArmorChestHoverEvent_ptr = PauseArmorChestHoverEvent::from_substruct(incoming_type_id, serialized);
		if (PauseArmorChestHoverEvent_ptr != nullptr) {
			return PauseArmorChestHoverEvent_ptr;
		}

		auto UIOptionsColorPickerCloseEvent_ptr = UIOptionsColorPickerCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIOptionsColorPickerCloseEvent_ptr != nullptr) {
			return UIOptionsColorPickerCloseEvent_ptr;
		}

		auto AttachmentAddedEvent_ptr = AttachmentAddedEvent::from_substruct(incoming_type_id, serialized);
		if (AttachmentAddedEvent_ptr != nullptr) {
			return AttachmentAddedEvent_ptr;
		}

		auto StackableCrateAwakenAboveEvent_ptr = StackableCrateAwakenAboveEvent::from_substruct(incoming_type_id, serialized);
		if (StackableCrateAwakenAboveEvent_ptr != nullptr) {
			return StackableCrateAwakenAboveEvent_ptr;
		}

		auto BotStartUsingAnimClueEvent_ptr = BotStartUsingAnimClueEvent::from_substruct(incoming_type_id, serialized);
		if (BotStartUsingAnimClueEvent_ptr != nullptr) {
			return BotStartUsingAnimClueEvent_ptr;
		}

		auto SelfieLightIntensityEvent_ptr = SelfieLightIntensityEvent::from_substruct(incoming_type_id, serialized);
		if (SelfieLightIntensityEvent_ptr != nullptr) {
			return SelfieLightIntensityEvent_ptr;
		}

		auto SceneObjectCollectCompleteEvent_ptr = SceneObjectCollectCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (SceneObjectCollectCompleteEvent_ptr != nullptr) {
			return SceneObjectCollectCompleteEvent_ptr;
		}

		auto PickupSetCarryPromptEnabledEvent_ptr = PickupSetCarryPromptEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (PickupSetCarryPromptEnabledEvent_ptr != nullptr) {
			return PickupSetCarryPromptEnabledEvent_ptr;
		}

		auto FossilizeTimeSlowEndEvent_ptr = FossilizeTimeSlowEndEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeTimeSlowEndEvent_ptr != nullptr) {
			return FossilizeTimeSlowEndEvent_ptr;
		}

		auto AnimMeleeDamageEvent_ptr = AnimMeleeDamageEvent::from_substruct(incoming_type_id, serialized);
		if (AnimMeleeDamageEvent_ptr != nullptr) {
			return AnimMeleeDamageEvent_ptr;
		}

		auto PhotomodeSaveEvent_ptr = PhotomodeSaveEvent::from_substruct(incoming_type_id, serialized);
		if (PhotomodeSaveEvent_ptr != nullptr) {
			return PhotomodeSaveEvent_ptr;
		}

		auto ActivityClueActivityStartedEvent_ptr = ActivityClueActivityStartedEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityClueActivityStartedEvent_ptr != nullptr) {
			return ActivityClueActivityStartedEvent_ptr;
		}

		auto ChargeAttackEndEvent_ptr = ChargeAttackEndEvent::from_substruct(incoming_type_id, serialized);
		if (ChargeAttackEndEvent_ptr != nullptr) {
			return ChargeAttackEndEvent_ptr;
		}

		auto ProjectileBeamImpactOffEvent_ptr = ProjectileBeamImpactOffEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileBeamImpactOffEvent_ptr != nullptr) {
			return ProjectileBeamImpactOffEvent_ptr;
		}

		auto GainBoltEvent_ptr = GainBoltEvent::from_substruct(incoming_type_id, serialized);
		if (GainBoltEvent_ptr != nullptr) {
			return GainBoltEvent_ptr;
		}

		auto DamageStateChunkEjectedEvent_ptr = DamageStateChunkEjectedEvent::from_substruct(incoming_type_id, serialized);
		if (DamageStateChunkEjectedEvent_ptr != nullptr) {
			return DamageStateChunkEjectedEvent_ptr;
		}

		auto UIWeaponVendorCloseEvent_ptr = UIWeaponVendorCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorCloseEvent_ptr != nullptr) {
			return UIWeaponVendorCloseEvent_ptr;
		}

		auto JumpCycleBeginEvent_ptr = JumpCycleBeginEvent::from_substruct(incoming_type_id, serialized);
		if (JumpCycleBeginEvent_ptr != nullptr) {
			return JumpCycleBeginEvent_ptr;
		}

		auto HammerCrankDetachEvent_ptr = HammerCrankDetachEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankDetachEvent_ptr != nullptr) {
			return HammerCrankDetachEvent_ptr;
		}

		auto PrefabZoneDeactivatedEvent_ptr = PrefabZoneDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (PrefabZoneDeactivatedEvent_ptr != nullptr) {
			return PrefabZoneDeactivatedEvent_ptr;
		}

		auto AuthFailureDevstatsEvent_ptr = AuthFailureDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (AuthFailureDevstatsEvent_ptr != nullptr) {
			return AuthFailureDevstatsEvent_ptr;
		}

		auto GroovitronActivateEvent_ptr = GroovitronActivateEvent::from_substruct(incoming_type_id, serialized);
		if (GroovitronActivateEvent_ptr != nullptr) {
			return GroovitronActivateEvent_ptr;
		}

		auto StatusEffectVampireDrainEvent_ptr = StatusEffectVampireDrainEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectVampireDrainEvent_ptr != nullptr) {
			return StatusEffectVampireDrainEvent_ptr;
		}

		auto SargassoCentipedeMelee_ptr = SargassoCentipedeMelee::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeMelee_ptr != nullptr) {
			return SargassoCentipedeMelee_ptr;
		}

		auto BoltCrankTargetReset_ptr = BoltCrankTargetReset::from_substruct(incoming_type_id, serialized);
		if (BoltCrankTargetReset_ptr != nullptr) {
			return BoltCrankTargetReset_ptr;
		}

		auto HeroLavaBounceEvent_ptr = HeroLavaBounceEvent::from_substruct(incoming_type_id, serialized);
		if (HeroLavaBounceEvent_ptr != nullptr) {
			return HeroLavaBounceEvent_ptr;
		}

		auto HeadVisibilityEvent_ptr = HeadVisibilityEvent::from_substruct(incoming_type_id, serialized);
		if (HeadVisibilityEvent_ptr != nullptr) {
			return HeadVisibilityEvent_ptr;
		}

		auto RallyOffEvent_ptr = RallyOffEvent::from_substruct(incoming_type_id, serialized);
		if (RallyOffEvent_ptr != nullptr) {
			return RallyOffEvent_ptr;
		}

		auto JointCrawlerStopEvent_ptr = JointCrawlerStopEvent::from_substruct(incoming_type_id, serialized);
		if (JointCrawlerStopEvent_ptr != nullptr) {
			return JointCrawlerStopEvent_ptr;
		}

		auto StringMessageEvent_ptr = StringMessageEvent::from_substruct(incoming_type_id, serialized);
		if (StringMessageEvent_ptr != nullptr) {
			return StringMessageEvent_ptr;
		}

		auto StatusEffectCloningEvent_ptr = StatusEffectCloningEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectCloningEvent_ptr != nullptr) {
			return StatusEffectCloningEvent_ptr;
		}

		auto DevstatsPlayerFailedSpiderSenseDodgeEvent_ptr = DevstatsPlayerFailedSpiderSenseDodgeEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsPlayerFailedSpiderSenseDodgeEvent_ptr != nullptr) {
			return DevstatsPlayerFailedSpiderSenseDodgeEvent_ptr;
		}

		auto ClankPackHydropackActiveBeginEvent_ptr = ClankPackHydropackActiveBeginEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHydropackActiveBeginEvent_ptr != nullptr) {
			return ClankPackHydropackActiveBeginEvent_ptr;
		}

		auto PassiveShiftCheckpointLoadedEvent_ptr = PassiveShiftCheckpointLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (PassiveShiftCheckpointLoadedEvent_ptr != nullptr) {
			return PassiveShiftCheckpointLoadedEvent_ptr;
		}

		auto MissionObjectiveDeactivatedEvent_ptr = MissionObjectiveDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (MissionObjectiveDeactivatedEvent_ptr != nullptr) {
			return MissionObjectiveDeactivatedEvent_ptr;
		}

		auto AnimLookChangeEvent_ptr = AnimLookChangeEvent::from_substruct(incoming_type_id, serialized);
		if (AnimLookChangeEvent_ptr != nullptr) {
			return AnimLookChangeEvent_ptr;
		}

		auto ProjectileExplodeWarningReticleStartEvent_ptr = ProjectileExplodeWarningReticleStartEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileExplodeWarningReticleStartEvent_ptr != nullptr) {
			return ProjectileExplodeWarningReticleStartEvent_ptr;
		}

		auto VisualFxKillEvent_ptr = VisualFxKillEvent::from_substruct(incoming_type_id, serialized);
		if (VisualFxKillEvent_ptr != nullptr) {
			return VisualFxKillEvent_ptr;
		}

		auto UITutorialPauseEnd_ptr = UITutorialPauseEnd::from_substruct(incoming_type_id, serialized);
		if (UITutorialPauseEnd_ptr != nullptr) {
			return UITutorialPauseEnd_ptr;
		}

		auto OnOpenEvent_ptr = OnOpenEvent::from_substruct(incoming_type_id, serialized);
		if (OnOpenEvent_ptr != nullptr) {
			return OnOpenEvent_ptr;
		}

		auto ShipMagnetNoTransCollectEvent_ptr = ShipMagnetNoTransCollectEvent::from_substruct(incoming_type_id, serialized);
		if (ShipMagnetNoTransCollectEvent_ptr != nullptr) {
			return ShipMagnetNoTransCollectEvent_ptr;
		}

		auto MagbootEndEvent_ptr = MagbootEndEvent::from_substruct(incoming_type_id, serialized);
		if (MagbootEndEvent_ptr != nullptr) {
			return MagbootEndEvent_ptr;
		}

		auto WeaponOutOfAmmoEvent_ptr = WeaponOutOfAmmoEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponOutOfAmmoEvent_ptr != nullptr) {
			return WeaponOutOfAmmoEvent_ptr;
		}

		auto UISkipMovieEvent_ptr = UISkipMovieEvent::from_substruct(incoming_type_id, serialized);
		if (UISkipMovieEvent_ptr != nullptr) {
			return UISkipMovieEvent_ptr;
		}

		auto MountBoostEvent_ptr = MountBoostEvent::from_substruct(incoming_type_id, serialized);
		if (MountBoostEvent_ptr != nullptr) {
			return MountBoostEvent_ptr;
		}

		auto FinaleNefBossOnStunLoopEvent_ptr = FinaleNefBossOnStunLoopEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleNefBossOnStunLoopEvent_ptr != nullptr) {
			return FinaleNefBossOnStunLoopEvent_ptr;
		}

		auto MeshGeneratorQueryCompleteEvent_ptr = MeshGeneratorQueryCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (MeshGeneratorQueryCompleteEvent_ptr != nullptr) {
			return MeshGeneratorQueryCompleteEvent_ptr;
		}

		auto WeaponWarpRifleImplosionFinishedEvent_ptr = WeaponWarpRifleImplosionFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponWarpRifleImplosionFinishedEvent_ptr != nullptr) {
			return WeaponWarpRifleImplosionFinishedEvent_ptr;
		}

		auto OnStartOpenEvent_ptr = OnStartOpenEvent::from_substruct(incoming_type_id, serialized);
		if (OnStartOpenEvent_ptr != nullptr) {
			return OnStartOpenEvent_ptr;
		}

		auto HeroPassiveShiftTransitionBeginEvent_ptr = HeroPassiveShiftTransitionBeginEvent::from_substruct(incoming_type_id, serialized);
		if (HeroPassiveShiftTransitionBeginEvent_ptr != nullptr) {
			return HeroPassiveShiftTransitionBeginEvent_ptr;
		}

		auto GroundResponseOffEvent_ptr = GroundResponseOffEvent::from_substruct(incoming_type_id, serialized);
		if (GroundResponseOffEvent_ptr != nullptr) {
			return GroundResponseOffEvent_ptr;
		}

		auto MagShieldShatteringEvent_ptr = MagShieldShatteringEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldShatteringEvent_ptr != nullptr) {
			return MagShieldShatteringEvent_ptr;
		}

		auto GameModeEvent_ptr = GameModeEvent::from_substruct(incoming_type_id, serialized);
		if (GameModeEvent_ptr != nullptr) {
			return GameModeEvent_ptr;
		}

		auto BeamHitEvent_ptr = BeamHitEvent::from_substruct(incoming_type_id, serialized);
		if (BeamHitEvent_ptr != nullptr) {
			return BeamHitEvent_ptr;
		}

		auto HeroGlideStartEvent_ptr = HeroGlideStartEvent::from_substruct(incoming_type_id, serialized);
		if (HeroGlideStartEvent_ptr != nullptr) {
			return HeroGlideStartEvent_ptr;
		}

		auto PixelizerChargedStartEvent_ptr = PixelizerChargedStartEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizerChargedStartEvent_ptr != nullptr) {
			return PixelizerChargedStartEvent_ptr;
		}

		auto BouncyActiveFXOnEvent_ptr = BouncyActiveFXOnEvent::from_substruct(incoming_type_id, serialized);
		if (BouncyActiveFXOnEvent_ptr != nullptr) {
			return BouncyActiveFXOnEvent_ptr;
		}

		auto MountEvent_ptr = MountEvent::from_substruct(incoming_type_id, serialized);
		if (MountEvent_ptr != nullptr) {
			return MountEvent_ptr;
		}

		auto TimeScaleChannelStartEvent_ptr = TimeScaleChannelStartEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleChannelStartEvent_ptr != nullptr) {
			return TimeScaleChannelStartEvent_ptr;
		}

		auto PauseWeaponsBackEvent_ptr = PauseWeaponsBackEvent::from_substruct(incoming_type_id, serialized);
		if (PauseWeaponsBackEvent_ptr != nullptr) {
			return PauseWeaponsBackEvent_ptr;
		}

		auto LetterEffectKillEvent_ptr = LetterEffectKillEvent::from_substruct(incoming_type_id, serialized);
		if (LetterEffectKillEvent_ptr != nullptr) {
			return LetterEffectKillEvent_ptr;
		}

		auto LightingModeTransitionStartedEvent_ptr = LightingModeTransitionStartedEvent::from_substruct(incoming_type_id, serialized);
		if (LightingModeTransitionStartedEvent_ptr != nullptr) {
			return LightingModeTransitionStartedEvent_ptr;
		}

		auto BotEnableFiringEvent_ptr = BotEnableFiringEvent::from_substruct(incoming_type_id, serialized);
		if (BotEnableFiringEvent_ptr != nullptr) {
			return BotEnableFiringEvent_ptr;
		}

		auto ObjZipLineProjectileLoopEvent_ptr = ObjZipLineProjectileLoopEvent::from_substruct(incoming_type_id, serialized);
		if (ObjZipLineProjectileLoopEvent_ptr != nullptr) {
			return ObjZipLineProjectileLoopEvent_ptr;
		}

		auto CameraProximityOnEvent_ptr = CameraProximityOnEvent::from_substruct(incoming_type_id, serialized);
		if (CameraProximityOnEvent_ptr != nullptr) {
			return CameraProximityOnEvent_ptr;
		}

		auto MrFunGuyDisappearEvent_ptr = MrFunGuyDisappearEvent::from_substruct(incoming_type_id, serialized);
		if (MrFunGuyDisappearEvent_ptr != nullptr) {
			return MrFunGuyDisappearEvent_ptr;
		}

		auto RecoveryLedgeRightHandDetachIKEvent_ptr = RecoveryLedgeRightHandDetachIKEvent::from_substruct(incoming_type_id, serialized);
		if (RecoveryLedgeRightHandDetachIKEvent_ptr != nullptr) {
			return RecoveryLedgeRightHandDetachIKEvent_ptr;
		}

		auto ShipOutOfAmmoEvent_ptr = ShipOutOfAmmoEvent::from_substruct(incoming_type_id, serialized);
		if (ShipOutOfAmmoEvent_ptr != nullptr) {
			return ShipOutOfAmmoEvent_ptr;
		}

		auto BotDashChargeChargeStartedEvent_ptr = BotDashChargeChargeStartedEvent::from_substruct(incoming_type_id, serialized);
		if (BotDashChargeChargeStartedEvent_ptr != nullptr) {
			return BotDashChargeChargeStartedEvent_ptr;
		}

		auto LaserSightSourceOnEvent_ptr = LaserSightSourceOnEvent::from_substruct(incoming_type_id, serialized);
		if (LaserSightSourceOnEvent_ptr != nullptr) {
			return LaserSightSourceOnEvent_ptr;
		}

		auto ClankPuzzleEndTargetRemoveEvent_ptr = ClankPuzzleEndTargetRemoveEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleEndTargetRemoveEvent_ptr != nullptr) {
			return ClankPuzzleEndTargetRemoveEvent_ptr;
		}

		auto CurveLoopedEvent_ptr = CurveLoopedEvent::from_substruct(incoming_type_id, serialized);
		if (CurveLoopedEvent_ptr != nullptr) {
			return CurveLoopedEvent_ptr;
		}

		auto ActorDestroyEvent_ptr = ActorDestroyEvent::from_substruct(incoming_type_id, serialized);
		if (ActorDestroyEvent_ptr != nullptr) {
			return ActorDestroyEvent_ptr;
		}

		auto ProjectileHitEvent_ptr = ProjectileHitEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileHitEvent_ptr != nullptr) {
			return ProjectileHitEvent_ptr;
		}

		auto BotTopiaryBreakOutEvent_ptr = BotTopiaryBreakOutEvent::from_substruct(incoming_type_id, serialized);
		if (BotTopiaryBreakOutEvent_ptr != nullptr) {
			return BotTopiaryBreakOutEvent_ptr;
		}

		auto KamehamehaImpactPassThroughEvent_ptr = KamehamehaImpactPassThroughEvent::from_substruct(incoming_type_id, serialized);
		if (KamehamehaImpactPassThroughEvent_ptr != nullptr) {
			return KamehamehaImpactPassThroughEvent_ptr;
		}

		auto SyncPoolChangedEvent_ptr = SyncPoolChangedEvent::from_substruct(incoming_type_id, serialized);
		if (SyncPoolChangedEvent_ptr != nullptr) {
			return SyncPoolChangedEvent_ptr;
		}

		auto GameStartDevstatsEvent_ptr = GameStartDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (GameStartDevstatsEvent_ptr != nullptr) {
			return GameStartDevstatsEvent_ptr;
		}

		auto UnderGrindOffEvent_ptr = UnderGrindOffEvent::from_substruct(incoming_type_id, serialized);
		if (UnderGrindOffEvent_ptr != nullptr) {
			return UnderGrindOffEvent_ptr;
		}

		auto HUDMessageTutorialControlRefreshEvent_ptr = HUDMessageTutorialControlRefreshEvent::from_substruct(incoming_type_id, serialized);
		if (HUDMessageTutorialControlRefreshEvent_ptr != nullptr) {
			return HUDMessageTutorialControlRefreshEvent_ptr;
		}

		auto BotMountEvent_ptr = BotMountEvent::from_substruct(incoming_type_id, serialized);
		if (BotMountEvent_ptr != nullptr) {
			return BotMountEvent_ptr;
		}

		auto ElectrifiedOffEvent_ptr = ElectrifiedOffEvent::from_substruct(incoming_type_id, serialized);
		if (ElectrifiedOffEvent_ptr != nullptr) {
			return ElectrifiedOffEvent_ptr;
		}

		auto OnUnTriggerEvent_ptr = OnUnTriggerEvent::from_substruct(incoming_type_id, serialized);
		if (OnUnTriggerEvent_ptr != nullptr) {
			return OnUnTriggerEvent_ptr;
		}

		auto UIFrontEndSaveSlotsDeleteSlotEvent_ptr = UIFrontEndSaveSlotsDeleteSlotEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndSaveSlotsDeleteSlotEvent_ptr != nullptr) {
			return UIFrontEndSaveSlotsDeleteSlotEvent_ptr;
		}

		auto WasFiredEvent_ptr = WasFiredEvent::from_substruct(incoming_type_id, serialized);
		if (WasFiredEvent_ptr != nullptr) {
			return WasFiredEvent_ptr;
		}

		auto UIFrontEndColorPickerCloseEvent_ptr = UIFrontEndColorPickerCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndColorPickerCloseEvent_ptr != nullptr) {
			return UIFrontEndColorPickerCloseEvent_ptr;
		}

		auto UIFrontEndOptionsMoveEvent_ptr = UIFrontEndOptionsMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndOptionsMoveEvent_ptr != nullptr) {
			return UIFrontEndOptionsMoveEvent_ptr;
		}

		auto AnimFootDownEvent_ptr = AnimFootDownEvent::from_substruct(incoming_type_id, serialized);
		if (AnimFootDownEvent_ptr != nullptr) {
			return AnimFootDownEvent_ptr;
		}

		auto PressurePlateStandEvent_ptr = PressurePlateStandEvent::from_substruct(incoming_type_id, serialized);
		if (PressurePlateStandEvent_ptr != nullptr) {
			return PressurePlateStandEvent_ptr;
		}

		auto BlizonShiftFadeInEvent_ptr = BlizonShiftFadeInEvent::from_substruct(incoming_type_id, serialized);
		if (BlizonShiftFadeInEvent_ptr != nullptr) {
			return BlizonShiftFadeInEvent_ptr;
		}

		auto HeroTeleportEndEvent_ptr = HeroTeleportEndEvent::from_substruct(incoming_type_id, serialized);
		if (HeroTeleportEndEvent_ptr != nullptr) {
			return HeroTeleportEndEvent_ptr;
		}

		auto AnimAllowHitReactEvent_ptr = AnimAllowHitReactEvent::from_substruct(incoming_type_id, serialized);
		if (AnimAllowHitReactEvent_ptr != nullptr) {
			return AnimAllowHitReactEvent_ptr;
		}

		auto MountImpactEvent_ptr = MountImpactEvent::from_substruct(incoming_type_id, serialized);
		if (MountImpactEvent_ptr != nullptr) {
			return MountImpactEvent_ptr;
		}

		auto ProtoGrenadeShardDissolveEvent_ptr = ProtoGrenadeShardDissolveEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoGrenadeShardDissolveEvent_ptr != nullptr) {
			return ProtoGrenadeShardDissolveEvent_ptr;
		}

		auto AirlockInterruptedEvent_ptr = AirlockInterruptedEvent::from_substruct(incoming_type_id, serialized);
		if (AirlockInterruptedEvent_ptr != nullptr) {
			return AirlockInterruptedEvent_ptr;
		}

		auto ObjectiveGraphLoadedEvent_ptr = ObjectiveGraphLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (ObjectiveGraphLoadedEvent_ptr != nullptr) {
			return ObjectiveGraphLoadedEvent_ptr;
		}

		auto TimeScaleChannelBlendOutEvent_ptr = TimeScaleChannelBlendOutEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleChannelBlendOutEvent_ptr != nullptr) {
			return TimeScaleChannelBlendOutEvent_ptr;
		}

		auto PhaseDashEndEvent_ptr = PhaseDashEndEvent::from_substruct(incoming_type_id, serialized);
		if (PhaseDashEndEvent_ptr != nullptr) {
			return PhaseDashEndEvent_ptr;
		}

		auto StreamingVideoSoundStopStreamEvent_ptr = StreamingVideoSoundStopStreamEvent::from_substruct(incoming_type_id, serialized);
		if (StreamingVideoSoundStopStreamEvent_ptr != nullptr) {
			return StreamingVideoSoundStopStreamEvent_ptr;
		}

		auto MagShieldShotSuspendedEvent_ptr = MagShieldShotSuspendedEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldShotSuspendedEvent_ptr != nullptr) {
			return MagShieldShotSuspendedEvent_ptr;
		}

		auto UIWeaponVendorUpgradeHoldStopEvent_ptr = UIWeaponVendorUpgradeHoldStopEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorUpgradeHoldStopEvent_ptr != nullptr) {
			return UIWeaponVendorUpgradeHoldStopEvent_ptr;
		}

		auto ConfettiWeakSpotHitEvent_ptr = ConfettiWeakSpotHitEvent::from_substruct(incoming_type_id, serialized);
		if (ConfettiWeakSpotHitEvent_ptr != nullptr) {
			return ConfettiWeakSpotHitEvent_ptr;
		}

		auto ShotSpawnerAutomaticFireStartEvent_ptr = ShotSpawnerAutomaticFireStartEvent::from_substruct(incoming_type_id, serialized);
		if (ShotSpawnerAutomaticFireStartEvent_ptr != nullptr) {
			return ShotSpawnerAutomaticFireStartEvent_ptr;
		}

		auto FadeOutEvent_ptr = FadeOutEvent::from_substruct(incoming_type_id, serialized);
		if (FadeOutEvent_ptr != nullptr) {
			return FadeOutEvent_ptr;
		}

		auto CameraUnderwaterStopEvent_ptr = CameraUnderwaterStopEvent::from_substruct(incoming_type_id, serialized);
		if (CameraUnderwaterStopEvent_ptr != nullptr) {
			return CameraUnderwaterStopEvent_ptr;
		}

		auto AccessibilityHighContrastMaterialAppliedEvent_ptr = AccessibilityHighContrastMaterialAppliedEvent::from_substruct(incoming_type_id, serialized);
		if (AccessibilityHighContrastMaterialAppliedEvent_ptr != nullptr) {
			return AccessibilityHighContrastMaterialAppliedEvent_ptr;
		}

		auto BeamStartEvent_ptr = BeamStartEvent::from_substruct(incoming_type_id, serialized);
		if (BeamStartEvent_ptr != nullptr) {
			return BeamStartEvent_ptr;
		}

		auto PressurePlateCompletedEvent_ptr = PressurePlateCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (PressurePlateCompletedEvent_ptr != nullptr) {
			return PressurePlateCompletedEvent_ptr;
		}

		auto HeadAnimationEndEvent_ptr = HeadAnimationEndEvent::from_substruct(incoming_type_id, serialized);
		if (HeadAnimationEndEvent_ptr != nullptr) {
			return HeadAnimationEndEvent_ptr;
		}

		auto PortalZipRemoveHighlightEvent_ptr = PortalZipRemoveHighlightEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipRemoveHighlightEvent_ptr != nullptr) {
			return PortalZipRemoveHighlightEvent_ptr;
		}

		auto PressurePlateResetEvent_ptr = PressurePlateResetEvent::from_substruct(incoming_type_id, serialized);
		if (PressurePlateResetEvent_ptr != nullptr) {
			return PressurePlateResetEvent_ptr;
		}

		auto SwingshotExtendingEndEvent_ptr = SwingshotExtendingEndEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotExtendingEndEvent_ptr != nullptr) {
			return SwingshotExtendingEndEvent_ptr;
		}

		auto StatusEmitterAuraActivatedEvent_ptr = StatusEmitterAuraActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterAuraActivatedEvent_ptr != nullptr) {
			return StatusEmitterAuraActivatedEvent_ptr;
		}

		auto HeroXPAddedEvent_ptr = HeroXPAddedEvent::from_substruct(incoming_type_id, serialized);
		if (HeroXPAddedEvent_ptr != nullptr) {
			return HeroXPAddedEvent_ptr;
		}

		auto BotAimSteadyEndEvent_ptr = BotAimSteadyEndEvent::from_substruct(incoming_type_id, serialized);
		if (BotAimSteadyEndEvent_ptr != nullptr) {
			return BotAimSteadyEndEvent_ptr;
		}

		auto UIWeaponVendorChainCancelEvent_ptr = UIWeaponVendorChainCancelEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorChainCancelEvent_ptr != nullptr) {
			return UIWeaponVendorChainCancelEvent_ptr;
		}

		auto UIPlanetMenuOpenEvent_ptr = UIPlanetMenuOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIPlanetMenuOpenEvent_ptr != nullptr) {
			return UIPlanetMenuOpenEvent_ptr;
		}

		auto ClothToggleEvent_ptr = ClothToggleEvent::from_substruct(incoming_type_id, serialized);
		if (ClothToggleEvent_ptr != nullptr) {
			return ClothToggleEvent_ptr;
		}

		auto WarpRifleEnterHighTempTierEvent_ptr = WarpRifleEnterHighTempTierEvent::from_substruct(incoming_type_id, serialized);
		if (WarpRifleEnterHighTempTierEvent_ptr != nullptr) {
			return WarpRifleEnterHighTempTierEvent_ptr;
		}

		auto UICountdownOnStoppedEvent_ptr = UICountdownOnStoppedEvent::from_substruct(incoming_type_id, serialized);
		if (UICountdownOnStoppedEvent_ptr != nullptr) {
			return UICountdownOnStoppedEvent_ptr;
		}

		auto MineExplodedEvent_ptr = MineExplodedEvent::from_substruct(incoming_type_id, serialized);
		if (MineExplodedEvent_ptr != nullptr) {
			return MineExplodedEvent_ptr;
		}

		auto PerformToggleLookEvent_ptr = PerformToggleLookEvent::from_substruct(incoming_type_id, serialized);
		if (PerformToggleLookEvent_ptr != nullptr) {
			return PerformToggleLookEvent_ptr;
		}

		auto HeroRevivingStartEvent_ptr = HeroRevivingStartEvent::from_substruct(incoming_type_id, serialized);
		if (HeroRevivingStartEvent_ptr != nullptr) {
			return HeroRevivingStartEvent_ptr;
		}

		auto ShipFiredMissileEvent_ptr = ShipFiredMissileEvent::from_substruct(incoming_type_id, serialized);
		if (ShipFiredMissileEvent_ptr != nullptr) {
			return ShipFiredMissileEvent_ptr;
		}

		auto PassiveShiftTranstionStartEvent_ptr = PassiveShiftTranstionStartEvent::from_substruct(incoming_type_id, serialized);
		if (PassiveShiftTranstionStartEvent_ptr != nullptr) {
			return PassiveShiftTranstionStartEvent_ptr;
		}

		auto AnimUnlockMoveEvent_ptr = AnimUnlockMoveEvent::from_substruct(incoming_type_id, serialized);
		if (AnimUnlockMoveEvent_ptr != nullptr) {
			return AnimUnlockMoveEvent_ptr;
		}

		auto AnimInvulnerabilityClearEvent_ptr = AnimInvulnerabilityClearEvent::from_substruct(incoming_type_id, serialized);
		if (AnimInvulnerabilityClearEvent_ptr != nullptr) {
			return AnimInvulnerabilityClearEvent_ptr;
		}

		auto SwappableTAASwapTAAEvent_ptr = SwappableTAASwapTAAEvent::from_substruct(incoming_type_id, serialized);
		if (SwappableTAASwapTAAEvent_ptr != nullptr) {
			return SwappableTAASwapTAAEvent_ptr;
		}

		auto GrindPathFollowerMoveStopEvent_ptr = GrindPathFollowerMoveStopEvent::from_substruct(incoming_type_id, serialized);
		if (GrindPathFollowerMoveStopEvent_ptr != nullptr) {
			return GrindPathFollowerMoveStopEvent_ptr;
		}

		auto BotTriggerUnequipPartialAnimsEvent_ptr = BotTriggerUnequipPartialAnimsEvent::from_substruct(incoming_type_id, serialized);
		if (BotTriggerUnequipPartialAnimsEvent_ptr != nullptr) {
			return BotTriggerUnequipPartialAnimsEvent_ptr;
		}

		auto HeroMovedEvent_ptr = HeroMovedEvent::from_substruct(incoming_type_id, serialized);
		if (HeroMovedEvent_ptr != nullptr) {
			return HeroMovedEvent_ptr;
		}

		auto ShipTargetLostEvent_ptr = ShipTargetLostEvent::from_substruct(incoming_type_id, serialized);
		if (ShipTargetLostEvent_ptr != nullptr) {
			return ShipTargetLostEvent_ptr;
		}

		auto PlatformStopMotionEvent_ptr = PlatformStopMotionEvent::from_substruct(incoming_type_id, serialized);
		if (PlatformStopMotionEvent_ptr != nullptr) {
			return PlatformStopMotionEvent_ptr;
		}

		auto GrappleGenerationFinishedEvent_ptr = GrappleGenerationFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (GrappleGenerationFinishedEvent_ptr != nullptr) {
			return GrappleGenerationFinishedEvent_ptr;
		}

		auto ProjectileLockOnCompleteEvent_ptr = ProjectileLockOnCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileLockOnCompleteEvent_ptr != nullptr) {
			return ProjectileLockOnCompleteEvent_ptr;
		}

		auto MoverTakeOffEvent_ptr = MoverTakeOffEvent::from_substruct(incoming_type_id, serialized);
		if (MoverTakeOffEvent_ptr != nullptr) {
			return MoverTakeOffEvent_ptr;
		}

		auto TriggerPadStandEvent_ptr = TriggerPadStandEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerPadStandEvent_ptr != nullptr) {
			return TriggerPadStandEvent_ptr;
		}

		auto BotMoveReachedDestEvent_ptr = BotMoveReachedDestEvent::from_substruct(incoming_type_id, serialized);
		if (BotMoveReachedDestEvent_ptr != nullptr) {
			return BotMoveReachedDestEvent_ptr;
		}

		auto ValueChangedEvent_ptr = ValueChangedEvent::from_substruct(incoming_type_id, serialized);
		if (ValueChangedEvent_ptr != nullptr) {
			return ValueChangedEvent_ptr;
		}

		auto LookAtStopEvent_ptr = LookAtStopEvent::from_substruct(incoming_type_id, serialized);
		if (LookAtStopEvent_ptr != nullptr) {
			return LookAtStopEvent_ptr;
		}

		auto FrozenL1Event_ptr = FrozenL1Event::from_substruct(incoming_type_id, serialized);
		if (FrozenL1Event_ptr != nullptr) {
			return FrozenL1Event_ptr;
		}

		auto PlayerTradingCardsRetrievedEvent_ptr = PlayerTradingCardsRetrievedEvent::from_substruct(incoming_type_id, serialized);
		if (PlayerTradingCardsRetrievedEvent_ptr != nullptr) {
			return PlayerTradingCardsRetrievedEvent_ptr;
		}

		auto AnimLookGroupChangeEvent_ptr = AnimLookGroupChangeEvent::from_substruct(incoming_type_id, serialized);
		if (AnimLookGroupChangeEvent_ptr != nullptr) {
			return AnimLookGroupChangeEvent_ptr;
		}

		auto FinaleNefWeakspotDamagedStageDestroyedEvent_ptr = FinaleNefWeakspotDamagedStageDestroyedEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleNefWeakspotDamagedStageDestroyedEvent_ptr != nullptr) {
			return FinaleNefWeakspotDamagedStageDestroyedEvent_ptr;
		}

		auto AnimDamageClearEvent_ptr = AnimDamageClearEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDamageClearEvent_ptr != nullptr) {
			return AnimDamageClearEvent_ptr;
		}

		auto DevstatsPlayerDeathEvent_ptr = DevstatsPlayerDeathEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsPlayerDeathEvent_ptr != nullptr) {
			return DevstatsPlayerDeathEvent_ptr;
		}

		auto BotMoveCueEvent_ptr = BotMoveCueEvent::from_substruct(incoming_type_id, serialized);
		if (BotMoveCueEvent_ptr != nullptr) {
			return BotMoveCueEvent_ptr;
		}

		auto SpawnPickupsEvent_ptr = SpawnPickupsEvent::from_substruct(incoming_type_id, serialized);
		if (SpawnPickupsEvent_ptr != nullptr) {
			return SpawnPickupsEvent_ptr;
		}

		auto SpawnerStartedEvent_ptr = SpawnerStartedEvent::from_substruct(incoming_type_id, serialized);
		if (SpawnerStartedEvent_ptr != nullptr) {
			return SpawnerStartedEvent_ptr;
		}

		auto ShieldDeactivatedEvent_ptr = ShieldDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (ShieldDeactivatedEvent_ptr != nullptr) {
			return ShieldDeactivatedEvent_ptr;
		}

		auto CustomDesignEvent_ptr = CustomDesignEvent::from_substruct(incoming_type_id, serialized);
		if (CustomDesignEvent_ptr != nullptr) {
			return CustomDesignEvent_ptr;
		}

		auto VanityHelmetOffEvent_ptr = VanityHelmetOffEvent::from_substruct(incoming_type_id, serialized);
		if (VanityHelmetOffEvent_ptr != nullptr) {
			return VanityHelmetOffEvent_ptr;
		}

		auto WallRunOffEvent_ptr = WallRunOffEvent::from_substruct(incoming_type_id, serialized);
		if (WallRunOffEvent_ptr != nullptr) {
			return WallRunOffEvent_ptr;
		}

		auto HUDMessageTutorialDisplayEvent_ptr = HUDMessageTutorialDisplayEvent::from_substruct(incoming_type_id, serialized);
		if (HUDMessageTutorialDisplayEvent_ptr != nullptr) {
			return HUDMessageTutorialDisplayEvent_ptr;
		}

		auto AnimReReactEvent_ptr = AnimReReactEvent::from_substruct(incoming_type_id, serialized);
		if (AnimReReactEvent_ptr != nullptr) {
			return AnimReReactEvent_ptr;
		}

		auto PickupCollectStartEvent_ptr = PickupCollectStartEvent::from_substruct(incoming_type_id, serialized);
		if (PickupCollectStartEvent_ptr != nullptr) {
			return PickupCollectStartEvent_ptr;
		}

		auto AirplaneCrashDescendEvent_ptr = AirplaneCrashDescendEvent::from_substruct(incoming_type_id, serialized);
		if (AirplaneCrashDescendEvent_ptr != nullptr) {
			return AirplaneCrashDescendEvent_ptr;
		}

		auto BotShootLaserStartIntroEvent_ptr = BotShootLaserStartIntroEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserStartIntroEvent_ptr != nullptr) {
			return BotShootLaserStartIntroEvent_ptr;
		}

		auto ClankWeaponLockUnTargetedEvent_ptr = ClankWeaponLockUnTargetedEvent::from_substruct(incoming_type_id, serialized);
		if (ClankWeaponLockUnTargetedEvent_ptr != nullptr) {
			return ClankWeaponLockUnTargetedEvent_ptr;
		}

		auto AnimVarDescendingEvent_ptr = AnimVarDescendingEvent::from_substruct(incoming_type_id, serialized);
		if (AnimVarDescendingEvent_ptr != nullptr) {
			return AnimVarDescendingEvent_ptr;
		}

		auto BaseMountGroundMoveEvent_ptr = BaseMountGroundMoveEvent::from_substruct(incoming_type_id, serialized);
		if (BaseMountGroundMoveEvent_ptr != nullptr) {
			return BaseMountGroundMoveEvent_ptr;
		}

		auto DoomBotJumpStartEvent_ptr = DoomBotJumpStartEvent::from_substruct(incoming_type_id, serialized);
		if (DoomBotJumpStartEvent_ptr != nullptr) {
			return DoomBotJumpStartEvent_ptr;
		}

		auto ShieldDamagedEvent_ptr = ShieldDamagedEvent::from_substruct(incoming_type_id, serialized);
		if (ShieldDamagedEvent_ptr != nullptr) {
			return ShieldDamagedEvent_ptr;
		}

		auto MusicIntensityMediumEvent_ptr = MusicIntensityMediumEvent::from_substruct(incoming_type_id, serialized);
		if (MusicIntensityMediumEvent_ptr != nullptr) {
			return MusicIntensityMediumEvent_ptr;
		}

		auto BurstPistolHighHeatEvent_ptr = BurstPistolHighHeatEvent::from_substruct(incoming_type_id, serialized);
		if (BurstPistolHighHeatEvent_ptr != nullptr) {
			return BurstPistolHighHeatEvent_ptr;
		}

		auto BotDashChargeOnHitOutroEvent_ptr = BotDashChargeOnHitOutroEvent::from_substruct(incoming_type_id, serialized);
		if (BotDashChargeOnHitOutroEvent_ptr != nullptr) {
			return BotDashChargeOnHitOutroEvent_ptr;
		}

		auto InteractBrokenStopEvent_ptr = InteractBrokenStopEvent::from_substruct(incoming_type_id, serialized);
		if (InteractBrokenStopEvent_ptr != nullptr) {
			return InteractBrokenStopEvent_ptr;
		}

		auto DisplayHealthValuesOff_ptr = DisplayHealthValuesOff::from_substruct(incoming_type_id, serialized);
		if (DisplayHealthValuesOff_ptr != nullptr) {
			return DisplayHealthValuesOff_ptr;
		}

		auto BotDropIntroStartEvent_ptr = BotDropIntroStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotDropIntroStartEvent_ptr != nullptr) {
			return BotDropIntroStartEvent_ptr;
		}

		auto OfferStopAcceptingEvent_ptr = OfferStopAcceptingEvent::from_substruct(incoming_type_id, serialized);
		if (OfferStopAcceptingEvent_ptr != nullptr) {
			return OfferStopAcceptingEvent_ptr;
		}

		auto BoltCrankLoadFinishedEvent_ptr = BoltCrankLoadFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BoltCrankLoadFinishedEvent_ptr != nullptr) {
			return BoltCrankLoadFinishedEvent_ptr;
		}

		auto HazardAlarmStopEvent_ptr = HazardAlarmStopEvent::from_substruct(incoming_type_id, serialized);
		if (HazardAlarmStopEvent_ptr != nullptr) {
			return HazardAlarmStopEvent_ptr;
		}

		auto ContainerRegionChangedEvent_ptr = ContainerRegionChangedEvent::from_substruct(incoming_type_id, serialized);
		if (ContainerRegionChangedEvent_ptr != nullptr) {
			return ContainerRegionChangedEvent_ptr;
		}

		auto BoltCrankFinishedEvent_ptr = BoltCrankFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BoltCrankFinishedEvent_ptr != nullptr) {
			return BoltCrankFinishedEvent_ptr;
		}

		auto StreamingVideoStopEvent_ptr = StreamingVideoStopEvent::from_substruct(incoming_type_id, serialized);
		if (StreamingVideoStopEvent_ptr != nullptr) {
			return StreamingVideoStopEvent_ptr;
		}

		auto StartSimpleLocatorFXCrawlEvent_ptr = StartSimpleLocatorFXCrawlEvent::from_substruct(incoming_type_id, serialized);
		if (StartSimpleLocatorFXCrawlEvent_ptr != nullptr) {
			return StartSimpleLocatorFXCrawlEvent_ptr;
		}

		auto EnterViewEvent_ptr = EnterViewEvent::from_substruct(incoming_type_id, serialized);
		if (EnterViewEvent_ptr != nullptr) {
			return EnterViewEvent_ptr;
		}

		auto VendorTabOpenedDevstatsEvent_ptr = VendorTabOpenedDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (VendorTabOpenedDevstatsEvent_ptr != nullptr) {
			return VendorTabOpenedDevstatsEvent_ptr;
		}

		auto WeaponOverheatedEvent_ptr = WeaponOverheatedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponOverheatedEvent_ptr != nullptr) {
			return WeaponOverheatedEvent_ptr;
		}

		auto ActorReinitEvent_ptr = ActorReinitEvent::from_substruct(incoming_type_id, serialized);
		if (ActorReinitEvent_ptr != nullptr) {
			return ActorReinitEvent_ptr;
		}

		auto AnimFireWeaponEvent_ptr = AnimFireWeaponEvent::from_substruct(incoming_type_id, serialized);
		if (AnimFireWeaponEvent_ptr != nullptr) {
			return AnimFireWeaponEvent_ptr;
		}

		auto DialogDebugWarningMessageEvent_ptr = DialogDebugWarningMessageEvent::from_substruct(incoming_type_id, serialized);
		if (DialogDebugWarningMessageEvent_ptr != nullptr) {
			return DialogDebugWarningMessageEvent_ptr;
		}

		auto MeleeDamageEndEvent_ptr = MeleeDamageEndEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeDamageEndEvent_ptr != nullptr) {
			return MeleeDamageEndEvent_ptr;
		}

		auto RYNOScriptPickupEvent_ptr = RYNOScriptPickupEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOScriptPickupEvent_ptr != nullptr) {
			return RYNOScriptPickupEvent_ptr;
		}

		auto ChargeEndEvent_ptr = ChargeEndEvent::from_substruct(incoming_type_id, serialized);
		if (ChargeEndEvent_ptr != nullptr) {
			return ChargeEndEvent_ptr;
		}

		auto WeaponXPEvent_ptr = WeaponXPEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponXPEvent_ptr != nullptr) {
			return WeaponXPEvent_ptr;
		}

		auto UIMenuOpenEvent_ptr = UIMenuOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuOpenEvent_ptr != nullptr) {
			return UIMenuOpenEvent_ptr;
		}

		auto AmoeboidSplitEvent_ptr = AmoeboidSplitEvent::from_substruct(incoming_type_id, serialized);
		if (AmoeboidSplitEvent_ptr != nullptr) {
			return AmoeboidSplitEvent_ptr;
		}

		auto MountBrakeEndEvent_ptr = MountBrakeEndEvent::from_substruct(incoming_type_id, serialized);
		if (MountBrakeEndEvent_ptr != nullptr) {
			return MountBrakeEndEvent_ptr;
		}

		auto AirDashBeginEvent_ptr = AirDashBeginEvent::from_substruct(incoming_type_id, serialized);
		if (AirDashBeginEvent_ptr != nullptr) {
			return AirDashBeginEvent_ptr;
		}

		auto AnimGrenadeReleaseEvent_ptr = AnimGrenadeReleaseEvent::from_substruct(incoming_type_id, serialized);
		if (AnimGrenadeReleaseEvent_ptr != nullptr) {
			return AnimGrenadeReleaseEvent_ptr;
		}

		auto InteractArmedEvent_ptr = InteractArmedEvent::from_substruct(incoming_type_id, serialized);
		if (InteractArmedEvent_ptr != nullptr) {
			return InteractArmedEvent_ptr;
		}

		auto ArachnodroidMissileCooldownEvent_ptr = ArachnodroidMissileCooldownEvent::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidMissileCooldownEvent_ptr != nullptr) {
			return ArachnodroidMissileCooldownEvent_ptr;
		}

		auto MultiAttachDeactivatedEvent_ptr = MultiAttachDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (MultiAttachDeactivatedEvent_ptr != nullptr) {
			return MultiAttachDeactivatedEvent_ptr;
		}

		auto JumpLandingWarnEvent_ptr = JumpLandingWarnEvent::from_substruct(incoming_type_id, serialized);
		if (JumpLandingWarnEvent_ptr != nullptr) {
			return JumpLandingWarnEvent_ptr;
		}

		auto HoverbootStartEvent_ptr = HoverbootStartEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootStartEvent_ptr != nullptr) {
			return HoverbootStartEvent_ptr;
		}

		auto EyeBeamLockTargetEvent_ptr = EyeBeamLockTargetEvent::from_substruct(incoming_type_id, serialized);
		if (EyeBeamLockTargetEvent_ptr != nullptr) {
			return EyeBeamLockTargetEvent_ptr;
		}

		auto LightingModeTransitionFinishedEvent_ptr = LightingModeTransitionFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (LightingModeTransitionFinishedEvent_ptr != nullptr) {
			return LightingModeTransitionFinishedEvent_ptr;
		}

		auto AllegianceChangedEvent_ptr = AllegianceChangedEvent::from_substruct(incoming_type_id, serialized);
		if (AllegianceChangedEvent_ptr != nullptr) {
			return AllegianceChangedEvent_ptr;
		}

		auto AwardHeroHoverbootDoubleJumpedEvent_ptr = AwardHeroHoverbootDoubleJumpedEvent::from_substruct(incoming_type_id, serialized);
		if (AwardHeroHoverbootDoubleJumpedEvent_ptr != nullptr) {
			return AwardHeroHoverbootDoubleJumpedEvent_ptr;
		}

		auto BaseTransformationEvent_ptr = BaseTransformationEvent::from_substruct(incoming_type_id, serialized);
		if (BaseTransformationEvent_ptr != nullptr) {
			return BaseTransformationEvent_ptr;
		}

		auto BotCurveIntroDataFollowStartEvent_ptr = BotCurveIntroDataFollowStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotCurveIntroDataFollowStartEvent_ptr != nullptr) {
			return BotCurveIntroDataFollowStartEvent_ptr;
		}

		auto HazardNestTargetInRangeEvent_ptr = HazardNestTargetInRangeEvent::from_substruct(incoming_type_id, serialized);
		if (HazardNestTargetInRangeEvent_ptr != nullptr) {
			return HazardNestTargetInRangeEvent_ptr;
		}

		auto HPThresholdEvent_ptr = HPThresholdEvent::from_substruct(incoming_type_id, serialized);
		if (HPThresholdEvent_ptr != nullptr) {
			return HPThresholdEvent_ptr;
		}

		auto SargassoCentipedeFlyOver_ptr = SargassoCentipedeFlyOver::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeFlyOver_ptr != nullptr) {
			return SargassoCentipedeFlyOver_ptr;
		}

		auto WeaponArmedEvent_ptr = WeaponArmedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponArmedEvent_ptr != nullptr) {
			return WeaponArmedEvent_ptr;
		}

		auto HeroJumpDodgeStartedEvent_ptr = HeroJumpDodgeStartedEvent::from_substruct(incoming_type_id, serialized);
		if (HeroJumpDodgeStartedEvent_ptr != nullptr) {
			return HeroJumpDodgeStartedEvent_ptr;
		}

		auto HexapodWeaponChargeUpStartedEvent_ptr = HexapodWeaponChargeUpStartedEvent::from_substruct(incoming_type_id, serialized);
		if (HexapodWeaponChargeUpStartedEvent_ptr != nullptr) {
			return HexapodWeaponChargeUpStartedEvent_ptr;
		}

		auto ActivityInterplanetaryTravelEvent_ptr = ActivityInterplanetaryTravelEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityInterplanetaryTravelEvent_ptr != nullptr) {
			return ActivityInterplanetaryTravelEvent_ptr;
		}

		auto ModelSwapEvent_ptr = ModelSwapEvent::from_substruct(incoming_type_id, serialized);
		if (ModelSwapEvent_ptr != nullptr) {
			return ModelSwapEvent_ptr;
		}

		auto ProjectileHitMarkerStopTrackingEvent_ptr = ProjectileHitMarkerStopTrackingEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileHitMarkerStopTrackingEvent_ptr != nullptr) {
			return ProjectileHitMarkerStopTrackingEvent_ptr;
		}

		auto FlyerHomingMineExplodeEvent_ptr = FlyerHomingMineExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (FlyerHomingMineExplodeEvent_ptr != nullptr) {
			return FlyerHomingMineExplodeEvent_ptr;
		}

		auto MovingLevelStopEvent_ptr = MovingLevelStopEvent::from_substruct(incoming_type_id, serialized);
		if (MovingLevelStopEvent_ptr != nullptr) {
			return MovingLevelStopEvent_ptr;
		}

		auto HeroCancelPerfTestEvent_ptr = HeroCancelPerfTestEvent::from_substruct(incoming_type_id, serialized);
		if (HeroCancelPerfTestEvent_ptr != nullptr) {
			return HeroCancelPerfTestEvent_ptr;
		}

		auto ShipMagnetTransCollectEvent_ptr = ShipMagnetTransCollectEvent::from_substruct(incoming_type_id, serialized);
		if (ShipMagnetTransCollectEvent_ptr != nullptr) {
			return ShipMagnetTransCollectEvent_ptr;
		}

		auto ProximitySpawnerDamagedEvent_ptr = ProximitySpawnerDamagedEvent::from_substruct(incoming_type_id, serialized);
		if (ProximitySpawnerDamagedEvent_ptr != nullptr) {
			return ProximitySpawnerDamagedEvent_ptr;
		}

		auto StackableCrateLandEvent_ptr = StackableCrateLandEvent::from_substruct(incoming_type_id, serialized);
		if (StackableCrateLandEvent_ptr != nullptr) {
			return StackableCrateLandEvent_ptr;
		}

		auto ClearEmergentVOCooldownOverrideEvent_ptr = ClearEmergentVOCooldownOverrideEvent::from_substruct(incoming_type_id, serialized);
		if (ClearEmergentVOCooldownOverrideEvent_ptr != nullptr) {
			return ClearEmergentVOCooldownOverrideEvent_ptr;
		}

		auto PortalActivatedEvent_ptr = PortalActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (PortalActivatedEvent_ptr != nullptr) {
			return PortalActivatedEvent_ptr;
		}

		auto HeroStartHeroOpenWorldTravelEvent_ptr = HeroStartHeroOpenWorldTravelEvent::from_substruct(incoming_type_id, serialized);
		if (HeroStartHeroOpenWorldTravelEvent_ptr != nullptr) {
			return HeroStartHeroOpenWorldTravelEvent_ptr;
		}

		auto ScriptedShotActorSpawnedEffectEvent_ptr = ScriptedShotActorSpawnedEffectEvent::from_substruct(incoming_type_id, serialized);
		if (ScriptedShotActorSpawnedEffectEvent_ptr != nullptr) {
			return ScriptedShotActorSpawnedEffectEvent_ptr;
		}

		auto TriggerSwitchDelayedEvent_ptr = TriggerSwitchDelayedEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerSwitchDelayedEvent_ptr != nullptr) {
			return TriggerSwitchDelayedEvent_ptr;
		}

		auto ShipDodgeRollStartEvent_ptr = ShipDodgeRollStartEvent::from_substruct(incoming_type_id, serialized);
		if (ShipDodgeRollStartEvent_ptr != nullptr) {
			return ShipDodgeRollStartEvent_ptr;
		}

		auto UIOptionsChangeEvent_ptr = UIOptionsChangeEvent::from_substruct(incoming_type_id, serialized);
		if (UIOptionsChangeEvent_ptr != nullptr) {
			return UIOptionsChangeEvent_ptr;
		}

		auto ShipUsingDisabledBulletsEvent_ptr = ShipUsingDisabledBulletsEvent::from_substruct(incoming_type_id, serialized);
		if (ShipUsingDisabledBulletsEvent_ptr != nullptr) {
			return ShipUsingDisabledBulletsEvent_ptr;
		}

		auto BeetleTrailEndEvent_ptr = BeetleTrailEndEvent::from_substruct(incoming_type_id, serialized);
		if (BeetleTrailEndEvent_ptr != nullptr) {
			return BeetleTrailEndEvent_ptr;
		}

		auto CritterLocationMaxExceededDevstatsEvent_ptr = CritterLocationMaxExceededDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (CritterLocationMaxExceededDevstatsEvent_ptr != nullptr) {
			return CritterLocationMaxExceededDevstatsEvent_ptr;
		}

		auto FlockingVolumesMaxExceededDevstatsEvent_ptr = FlockingVolumesMaxExceededDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (FlockingVolumesMaxExceededDevstatsEvent_ptr != nullptr) {
			return FlockingVolumesMaxExceededDevstatsEvent_ptr;
		}

		auto BotTriggerToEquippedEvent_ptr = BotTriggerToEquippedEvent::from_substruct(incoming_type_id, serialized);
		if (BotTriggerToEquippedEvent_ptr != nullptr) {
			return BotTriggerToEquippedEvent_ptr;
		}

		auto StatusEffectDamageStopEvent_ptr = StatusEffectDamageStopEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectDamageStopEvent_ptr != nullptr) {
			return StatusEffectDamageStopEvent_ptr;
		}

		auto UIFrontEndSelectEvent_ptr = UIFrontEndSelectEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndSelectEvent_ptr != nullptr) {
			return UIFrontEndSelectEvent_ptr;
		}

		auto MagbootLaunchEndEvent_ptr = MagbootLaunchEndEvent::from_substruct(incoming_type_id, serialized);
		if (MagbootLaunchEndEvent_ptr != nullptr) {
			return MagbootLaunchEndEvent_ptr;
		}

		auto RallyFullEvent_ptr = RallyFullEvent::from_substruct(incoming_type_id, serialized);
		if (RallyFullEvent_ptr != nullptr) {
			return RallyFullEvent_ptr;
		}

		auto WeaponEmptyFireEvent_ptr = WeaponEmptyFireEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponEmptyFireEvent_ptr != nullptr) {
			return WeaponEmptyFireEvent_ptr;
		}

		auto Cinematic2EnterEvent_ptr = Cinematic2EnterEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2EnterEvent_ptr != nullptr) {
			return Cinematic2EnterEvent_ptr;
		}

		auto ClankPuzzleVolumeEndAddEntryEvent_ptr = ClankPuzzleVolumeEndAddEntryEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeEndAddEntryEvent_ptr != nullptr) {
			return ClankPuzzleVolumeEndAddEntryEvent_ptr;
		}

		auto DamageStateEvent_ptr = DamageStateEvent::from_substruct(incoming_type_id, serialized);
		if (DamageStateEvent_ptr != nullptr) {
			return DamageStateEvent_ptr;
		}

		auto ShipThrustStartEvent_ptr = ShipThrustStartEvent::from_substruct(incoming_type_id, serialized);
		if (ShipThrustStartEvent_ptr != nullptr) {
			return ShipThrustStartEvent_ptr;
		}

		auto FlyerTrailsOnEvent_ptr = FlyerTrailsOnEvent::from_substruct(incoming_type_id, serialized);
		if (FlyerTrailsOnEvent_ptr != nullptr) {
			return FlyerTrailsOnEvent_ptr;
		}

		auto BotRelativeAnimGroundSnapEvent_ptr = BotRelativeAnimGroundSnapEvent::from_substruct(incoming_type_id, serialized);
		if (BotRelativeAnimGroundSnapEvent_ptr != nullptr) {
			return BotRelativeAnimGroundSnapEvent_ptr;
		}

		auto ConduitParticleCollisionEvent_ptr = ConduitParticleCollisionEvent::from_substruct(incoming_type_id, serialized);
		if (ConduitParticleCollisionEvent_ptr != nullptr) {
			return ConduitParticleCollisionEvent_ptr;
		}

		auto CinematicContextSnapBlend_ptr = CinematicContextSnapBlend::from_substruct(incoming_type_id, serialized);
		if (CinematicContextSnapBlend_ptr != nullptr) {
			return CinematicContextSnapBlend_ptr;
		}

		auto LaserBeamSpawnerDestroyShotEvent_ptr = LaserBeamSpawnerDestroyShotEvent::from_substruct(incoming_type_id, serialized);
		if (LaserBeamSpawnerDestroyShotEvent_ptr != nullptr) {
			return LaserBeamSpawnerDestroyShotEvent_ptr;
		}

		auto MagnetRingFullyChargedEvent_ptr = MagnetRingFullyChargedEvent::from_substruct(incoming_type_id, serialized);
		if (MagnetRingFullyChargedEvent_ptr != nullptr) {
			return MagnetRingFullyChargedEvent_ptr;
		}

		auto TraversalInvincibilityStartedEvent_ptr = TraversalInvincibilityStartedEvent::from_substruct(incoming_type_id, serialized);
		if (TraversalInvincibilityStartedEvent_ptr != nullptr) {
			return TraversalInvincibilityStartedEvent_ptr;
		}

		auto ClankPackEnableCineAttachEvent_ptr = ClankPackEnableCineAttachEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackEnableCineAttachEvent_ptr != nullptr) {
			return ClankPackEnableCineAttachEvent_ptr;
		}

		auto RevivingStopEvent_ptr = RevivingStopEvent::from_substruct(incoming_type_id, serialized);
		if (RevivingStopEvent_ptr != nullptr) {
			return RevivingStopEvent_ptr;
		}

		auto LookAtStartEvent_ptr = LookAtStartEvent::from_substruct(incoming_type_id, serialized);
		if (LookAtStartEvent_ptr != nullptr) {
			return LookAtStartEvent_ptr;
		}

		auto MeleeStreakBeginEvent_ptr = MeleeStreakBeginEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeStreakBeginEvent_ptr != nullptr) {
			return MeleeStreakBeginEvent_ptr;
		}

		auto PlatformStartAscentEvent_ptr = PlatformStartAscentEvent::from_substruct(incoming_type_id, serialized);
		if (PlatformStartAscentEvent_ptr != nullptr) {
			return PlatformStartAscentEvent_ptr;
		}

		auto TeleportTrailStartEvent_ptr = TeleportTrailStartEvent::from_substruct(incoming_type_id, serialized);
		if (TeleportTrailStartEvent_ptr != nullptr) {
			return TeleportTrailStartEvent_ptr;
		}

		auto AnimFootUpEvent_ptr = AnimFootUpEvent::from_substruct(incoming_type_id, serialized);
		if (AnimFootUpEvent_ptr != nullptr) {
			return AnimFootUpEvent_ptr;
		}

		auto StatusEffectResurrectingEvent_ptr = StatusEffectResurrectingEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectResurrectingEvent_ptr != nullptr) {
			return StatusEffectResurrectingEvent_ptr;
		}

		auto ShotgunPumpEvent_ptr = ShotgunPumpEvent::from_substruct(incoming_type_id, serialized);
		if (ShotgunPumpEvent_ptr != nullptr) {
			return ShotgunPumpEvent_ptr;
		}

		auto BoltCrankAttachEvent_ptr = BoltCrankAttachEvent::from_substruct(incoming_type_id, serialized);
		if (BoltCrankAttachEvent_ptr != nullptr) {
			return BoltCrankAttachEvent_ptr;
		}

		auto UIFrontEndBackEvent_ptr = UIFrontEndBackEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndBackEvent_ptr != nullptr) {
			return UIFrontEndBackEvent_ptr;
		}

		auto ShieldWithHealthDamageEvent_ptr = ShieldWithHealthDamageEvent::from_substruct(incoming_type_id, serialized);
		if (ShieldWithHealthDamageEvent_ptr != nullptr) {
			return ShieldWithHealthDamageEvent_ptr;
		}

		auto ConnectEvent_ptr = ConnectEvent::from_substruct(incoming_type_id, serialized);
		if (ConnectEvent_ptr != nullptr) {
			return ConnectEvent_ptr;
		}

		auto CrowdTypeChangedEvent_ptr = CrowdTypeChangedEvent::from_substruct(incoming_type_id, serialized);
		if (CrowdTypeChangedEvent_ptr != nullptr) {
			return CrowdTypeChangedEvent_ptr;
		}

		auto ClientLeftEvent_ptr = ClientLeftEvent::from_substruct(incoming_type_id, serialized);
		if (ClientLeftEvent_ptr != nullptr) {
			return ClientLeftEvent_ptr;
		}

		auto SwimDeepUnderwaterStopEvent_ptr = SwimDeepUnderwaterStopEvent::from_substruct(incoming_type_id, serialized);
		if (SwimDeepUnderwaterStopEvent_ptr != nullptr) {
			return SwimDeepUnderwaterStopEvent_ptr;
		}

		auto MissionObjectiveCompleteEvent_ptr = MissionObjectiveCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (MissionObjectiveCompleteEvent_ptr != nullptr) {
			return MissionObjectiveCompleteEvent_ptr;
		}

		auto ClankPackHeliStartEvent_ptr = ClankPackHeliStartEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHeliStartEvent_ptr != nullptr) {
			return ClankPackHeliStartEvent_ptr;
		}

		auto HitReactBeginEvent_ptr = HitReactBeginEvent::from_substruct(incoming_type_id, serialized);
		if (HitReactBeginEvent_ptr != nullptr) {
			return HitReactBeginEvent_ptr;
		}

		auto ClothChangeDampingEvent_ptr = ClothChangeDampingEvent::from_substruct(incoming_type_id, serialized);
		if (ClothChangeDampingEvent_ptr != nullptr) {
			return ClothChangeDampingEvent_ptr;
		}

		auto TargetNowReachableEvent_ptr = TargetNowReachableEvent::from_substruct(incoming_type_id, serialized);
		if (TargetNowReachableEvent_ptr != nullptr) {
			return TargetNowReachableEvent_ptr;
		}

		auto BotDashChargeIntroEndedEvent_ptr = BotDashChargeIntroEndedEvent::from_substruct(incoming_type_id, serialized);
		if (BotDashChargeIntroEndedEvent_ptr != nullptr) {
			return BotDashChargeIntroEndedEvent_ptr;
		}

		auto DropEvent_ptr = DropEvent::from_substruct(incoming_type_id, serialized);
		if (DropEvent_ptr != nullptr) {
			return DropEvent_ptr;
		}

		auto AnimVarSteadyEvent_ptr = AnimVarSteadyEvent::from_substruct(incoming_type_id, serialized);
		if (AnimVarSteadyEvent_ptr != nullptr) {
			return AnimVarSteadyEvent_ptr;
		}

		auto DisplayHeroHealthBarOn_ptr = DisplayHeroHealthBarOn::from_substruct(incoming_type_id, serialized);
		if (DisplayHeroHealthBarOn_ptr != nullptr) {
			return DisplayHeroHealthBarOn_ptr;
		}

		auto FlockMemberKilledEvent_ptr = FlockMemberKilledEvent::from_substruct(incoming_type_id, serialized);
		if (FlockMemberKilledEvent_ptr != nullptr) {
			return FlockMemberKilledEvent_ptr;
		}

		auto BotStartFollowPatrolPathEvent_ptr = BotStartFollowPatrolPathEvent::from_substruct(incoming_type_id, serialized);
		if (BotStartFollowPatrolPathEvent_ptr != nullptr) {
			return BotStartFollowPatrolPathEvent_ptr;
		}

		auto VehicleDebugHeadlightsOverrideChanged_ptr = VehicleDebugHeadlightsOverrideChanged::from_substruct(incoming_type_id, serialized);
		if (VehicleDebugHeadlightsOverrideChanged_ptr != nullptr) {
			return VehicleDebugHeadlightsOverrideChanged_ptr;
		}

		auto RYNOShotPreLargePortalCreateEvent_ptr = RYNOShotPreLargePortalCreateEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOShotPreLargePortalCreateEvent_ptr != nullptr) {
			return RYNOShotPreLargePortalCreateEvent_ptr;
		}

		auto DropshipDropoffCompleteEvent_ptr = DropshipDropoffCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (DropshipDropoffCompleteEvent_ptr != nullptr) {
			return DropshipDropoffCompleteEvent_ptr;
		}

		auto Cinematic2SkipDestinationEvent_ptr = Cinematic2SkipDestinationEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2SkipDestinationEvent_ptr != nullptr) {
			return Cinematic2SkipDestinationEvent_ptr;
		}

		auto PSNLinkDevstatsEvent_ptr = PSNLinkDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (PSNLinkDevstatsEvent_ptr != nullptr) {
			return PSNLinkDevstatsEvent_ptr;
		}

		auto TimeScaleStartEvent_ptr = TimeScaleStartEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleStartEvent_ptr != nullptr) {
			return TimeScaleStartEvent_ptr;
		}

		auto PrioritizeTargetsEvent_ptr = PrioritizeTargetsEvent::from_substruct(incoming_type_id, serialized);
		if (PrioritizeTargetsEvent_ptr != nullptr) {
			return PrioritizeTargetsEvent_ptr;
		}

		auto ProjectileExplodeWarningReticleEndEvent_ptr = ProjectileExplodeWarningReticleEndEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileExplodeWarningReticleEndEvent_ptr != nullptr) {
			return ProjectileExplodeWarningReticleEndEvent_ptr;
		}

		auto WarpRifleEnterColdTempTierEvent_ptr = WarpRifleEnterColdTempTierEvent::from_substruct(incoming_type_id, serialized);
		if (WarpRifleEnterColdTempTierEvent_ptr != nullptr) {
			return WarpRifleEnterColdTempTierEvent_ptr;
		}

		auto DevstatsAccessibilitySwingCameraBlendEvent_ptr = DevstatsAccessibilitySwingCameraBlendEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsAccessibilitySwingCameraBlendEvent_ptr != nullptr) {
			return DevstatsAccessibilitySwingCameraBlendEvent_ptr;
		}

		auto CineActorVoiceDisableEvent_ptr = CineActorVoiceDisableEvent::from_substruct(incoming_type_id, serialized);
		if (CineActorVoiceDisableEvent_ptr != nullptr) {
			return CineActorVoiceDisableEvent_ptr;
		}

		auto ProjectileIdlingStopEvent_ptr = ProjectileIdlingStopEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileIdlingStopEvent_ptr != nullptr) {
			return ProjectileIdlingStopEvent_ptr;
		}

		auto BotStopAimingEvent_ptr = BotStopAimingEvent::from_substruct(incoming_type_id, serialized);
		if (BotStopAimingEvent_ptr != nullptr) {
			return BotStopAimingEvent_ptr;
		}

		auto RefireSustainStartEvent_ptr = RefireSustainStartEvent::from_substruct(incoming_type_id, serialized);
		if (RefireSustainStartEvent_ptr != nullptr) {
			return RefireSustainStartEvent_ptr;
		}

		auto HoverbootOmniBoostPadTriggeredEvent_ptr = HoverbootOmniBoostPadTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootOmniBoostPadTriggeredEvent_ptr != nullptr) {
			return HoverbootOmniBoostPadTriggeredEvent_ptr;
		}

		auto ClankWeaponHideInHandEvent_ptr = ClankWeaponHideInHandEvent::from_substruct(incoming_type_id, serialized);
		if (ClankWeaponHideInHandEvent_ptr != nullptr) {
			return ClankWeaponHideInHandEvent_ptr;
		}

		auto MovingLevelAnimLoopedEvent_ptr = MovingLevelAnimLoopedEvent::from_substruct(incoming_type_id, serialized);
		if (MovingLevelAnimLoopedEvent_ptr != nullptr) {
			return MovingLevelAnimLoopedEvent_ptr;
		}

		auto BotCurveIntroDataFollowEndEvent_ptr = BotCurveIntroDataFollowEndEvent::from_substruct(incoming_type_id, serialized);
		if (BotCurveIntroDataFollowEndEvent_ptr != nullptr) {
			return BotCurveIntroDataFollowEndEvent_ptr;
		}

		auto ManglerMovingStartEvent_ptr = ManglerMovingStartEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerMovingStartEvent_ptr != nullptr) {
			return ManglerMovingStartEvent_ptr;
		}

		auto StopEvent_ptr = StopEvent::from_substruct(incoming_type_id, serialized);
		if (StopEvent_ptr != nullptr) {
			return StopEvent_ptr;
		}

		auto RYNOPortalCreateEvent_ptr = RYNOPortalCreateEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOPortalCreateEvent_ptr != nullptr) {
			return RYNOPortalCreateEvent_ptr;
		}

		auto PauseMenuRotateStopEvent_ptr = PauseMenuRotateStopEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuRotateStopEvent_ptr != nullptr) {
			return PauseMenuRotateStopEvent_ptr;
		}

		auto IntroTransitionOnEngagedEvent_ptr = IntroTransitionOnEngagedEvent::from_substruct(incoming_type_id, serialized);
		if (IntroTransitionOnEngagedEvent_ptr != nullptr) {
			return IntroTransitionOnEngagedEvent_ptr;
		}

		auto UIWeaponVendorPurchaseWeaponEvent_ptr = UIWeaponVendorPurchaseWeaponEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorPurchaseWeaponEvent_ptr != nullptr) {
			return UIWeaponVendorPurchaseWeaponEvent_ptr;
		}

		auto AnimDropEvent_ptr = AnimDropEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDropEvent_ptr != nullptr) {
			return AnimDropEvent_ptr;
		}

		auto LeftEvent_ptr = LeftEvent::from_substruct(incoming_type_id, serialized);
		if (LeftEvent_ptr != nullptr) {
			return LeftEvent_ptr;
		}

		auto BotPartialAnimsManagerStopAnimsEvent_ptr = BotPartialAnimsManagerStopAnimsEvent::from_substruct(incoming_type_id, serialized);
		if (BotPartialAnimsManagerStopAnimsEvent_ptr != nullptr) {
			return BotPartialAnimsManagerStopAnimsEvent_ptr;
		}

		auto EnemyWaveCompleteEvent_ptr = EnemyWaveCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (EnemyWaveCompleteEvent_ptr != nullptr) {
			return EnemyWaveCompleteEvent_ptr;
		}

		auto SweepChaseHitEvent_ptr = SweepChaseHitEvent::from_substruct(incoming_type_id, serialized);
		if (SweepChaseHitEvent_ptr != nullptr) {
			return SweepChaseHitEvent_ptr;
		}

		auto AboutToLandLongFallEvent_ptr = AboutToLandLongFallEvent::from_substruct(incoming_type_id, serialized);
		if (AboutToLandLongFallEvent_ptr != nullptr) {
			return AboutToLandLongFallEvent_ptr;
		}

		auto LaserSweepAttackBeginEvent_ptr = LaserSweepAttackBeginEvent::from_substruct(incoming_type_id, serialized);
		if (LaserSweepAttackBeginEvent_ptr != nullptr) {
			return LaserSweepAttackBeginEvent_ptr;
		}

		auto GadgetPortCancelEvent_ptr = GadgetPortCancelEvent::from_substruct(incoming_type_id, serialized);
		if (GadgetPortCancelEvent_ptr != nullptr) {
			return GadgetPortCancelEvent_ptr;
		}

		auto FormationStartAttackEvent_ptr = FormationStartAttackEvent::from_substruct(incoming_type_id, serialized);
		if (FormationStartAttackEvent_ptr != nullptr) {
			return FormationStartAttackEvent_ptr;
		}

		auto ParachuteOffEvent_ptr = ParachuteOffEvent::from_substruct(incoming_type_id, serialized);
		if (ParachuteOffEvent_ptr != nullptr) {
			return ParachuteOffEvent_ptr;
		}

		auto CreateDamageModifierIncomingEvent_ptr = CreateDamageModifierIncomingEvent::from_substruct(incoming_type_id, serialized);
		if (CreateDamageModifierIncomingEvent_ptr != nullptr) {
			return CreateDamageModifierIncomingEvent_ptr;
		}

		auto PortalZipLineStartEvent_ptr = PortalZipLineStartEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipLineStartEvent_ptr != nullptr) {
			return PortalZipLineStartEvent_ptr;
		}

		auto ChargeStartEvent_ptr = ChargeStartEvent::from_substruct(incoming_type_id, serialized);
		if (ChargeStartEvent_ptr != nullptr) {
			return ChargeStartEvent_ptr;
		}

		auto ItemModifiedEvent_ptr = ItemModifiedEvent::from_substruct(incoming_type_id, serialized);
		if (ItemModifiedEvent_ptr != nullptr) {
			return ItemModifiedEvent_ptr;
		}

		auto ManglerBreakDownEvent_ptr = ManglerBreakDownEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerBreakDownEvent_ptr != nullptr) {
			return ManglerBreakDownEvent_ptr;
		}

		auto ChainLightningStopMainEvent_ptr = ChainLightningStopMainEvent::from_substruct(incoming_type_id, serialized);
		if (ChainLightningStopMainEvent_ptr != nullptr) {
			return ChainLightningStopMainEvent_ptr;
		}

		auto DimensionCheckpointChangedEvent_ptr = DimensionCheckpointChangedEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionCheckpointChangedEvent_ptr != nullptr) {
			return DimensionCheckpointChangedEvent_ptr;
		}

		auto BeamStopEvent_ptr = BeamStopEvent::from_substruct(incoming_type_id, serialized);
		if (BeamStopEvent_ptr != nullptr) {
			return BeamStopEvent_ptr;
		}

		auto AnimLockMoveEvent_ptr = AnimLockMoveEvent::from_substruct(incoming_type_id, serialized);
		if (AnimLockMoveEvent_ptr != nullptr) {
			return AnimLockMoveEvent_ptr;
		}

		auto CantripDisabledEvent_ptr = CantripDisabledEvent::from_substruct(incoming_type_id, serialized);
		if (CantripDisabledEvent_ptr != nullptr) {
			return CantripDisabledEvent_ptr;
		}

		auto HammerCrankTargetIdle_ptr = HammerCrankTargetIdle::from_substruct(incoming_type_id, serialized);
		if (HammerCrankTargetIdle_ptr != nullptr) {
			return HammerCrankTargetIdle_ptr;
		}

		auto ArachnodroidShieldOnEvent_ptr = ArachnodroidShieldOnEvent::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidShieldOnEvent_ptr != nullptr) {
			return ArachnodroidShieldOnEvent_ptr;
		}

		auto ProtoShotgunSecondShotWindowStartEvent_ptr = ProtoShotgunSecondShotWindowStartEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoShotgunSecondShotWindowStartEvent_ptr != nullptr) {
			return ProtoShotgunSecondShotWindowStartEvent_ptr;
		}

		auto UIHeroOfferDeactivateControlGroupEvent_ptr = UIHeroOfferDeactivateControlGroupEvent::from_substruct(incoming_type_id, serialized);
		if (UIHeroOfferDeactivateControlGroupEvent_ptr != nullptr) {
			return UIHeroOfferDeactivateControlGroupEvent_ptr;
		}

		auto VehicleSoundOnEvent_ptr = VehicleSoundOnEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleSoundOnEvent_ptr != nullptr) {
			return VehicleSoundOnEvent_ptr;
		}

		auto PixelizerChargeUpEndEvent_ptr = PixelizerChargeUpEndEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizerChargeUpEndEvent_ptr != nullptr) {
			return PixelizerChargeUpEndEvent_ptr;
		}

		auto PhysicsStateActionEvent_ptr = PhysicsStateActionEvent::from_substruct(incoming_type_id, serialized);
		if (PhysicsStateActionEvent_ptr != nullptr) {
			return PhysicsStateActionEvent_ptr;
		}

		auto CentipedeChaseMineFireEvent_ptr = CentipedeChaseMineFireEvent::from_substruct(incoming_type_id, serialized);
		if (CentipedeChaseMineFireEvent_ptr != nullptr) {
			return CentipedeChaseMineFireEvent_ptr;
		}

		auto UnderGrindOnEvent_ptr = UnderGrindOnEvent::from_substruct(incoming_type_id, serialized);
		if (UnderGrindOnEvent_ptr != nullptr) {
			return UnderGrindOnEvent_ptr;
		}

		auto VendorMenuClosedDevstatsEvent_ptr = VendorMenuClosedDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (VendorMenuClosedDevstatsEvent_ptr != nullptr) {
			return VendorMenuClosedDevstatsEvent_ptr;
		}

		auto HUDObjectiveShowActiveEvent_ptr = HUDObjectiveShowActiveEvent::from_substruct(incoming_type_id, serialized);
		if (HUDObjectiveShowActiveEvent_ptr != nullptr) {
			return HUDObjectiveShowActiveEvent_ptr;
		}

		auto PortalGravityWellActivatedEvent_ptr = PortalGravityWellActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (PortalGravityWellActivatedEvent_ptr != nullptr) {
			return PortalGravityWellActivatedEvent_ptr;
		}

		auto NestDestroyedFromSaveEvent_ptr = NestDestroyedFromSaveEvent::from_substruct(incoming_type_id, serialized);
		if (NestDestroyedFromSaveEvent_ptr != nullptr) {
			return NestDestroyedFromSaveEvent_ptr;
		}

		auto OnCinematicCameraActivateEvent_ptr = OnCinematicCameraActivateEvent::from_substruct(incoming_type_id, serialized);
		if (OnCinematicCameraActivateEvent_ptr != nullptr) {
			return OnCinematicCameraActivateEvent_ptr;
		}

		auto TurretTargetSpottedEvent_ptr = TurretTargetSpottedEvent::from_substruct(incoming_type_id, serialized);
		if (TurretTargetSpottedEvent_ptr != nullptr) {
			return TurretTargetSpottedEvent_ptr;
		}

		auto FocusTrackingOverrideInstanceEvent_ptr = FocusTrackingOverrideInstanceEvent::from_substruct(incoming_type_id, serialized);
		if (FocusTrackingOverrideInstanceEvent_ptr != nullptr) {
			return FocusTrackingOverrideInstanceEvent_ptr;
		}

		auto DestroyAllLedgeFlocksEvent_ptr = DestroyAllLedgeFlocksEvent::from_substruct(incoming_type_id, serialized);
		if (DestroyAllLedgeFlocksEvent_ptr != nullptr) {
			return DestroyAllLedgeFlocksEvent_ptr;
		}

		auto FrozenSpinStopEvent_ptr = FrozenSpinStopEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenSpinStopEvent_ptr != nullptr) {
			return FrozenSpinStopEvent_ptr;
		}

		auto MeleeIntroCompleteEvent_ptr = MeleeIntroCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeIntroCompleteEvent_ptr != nullptr) {
			return MeleeIntroCompleteEvent_ptr;
		}

		auto DrNefariousShieldActivationAnimEndEvent_ptr = DrNefariousShieldActivationAnimEndEvent::from_substruct(incoming_type_id, serialized);
		if (DrNefariousShieldActivationAnimEndEvent_ptr != nullptr) {
			return DrNefariousShieldActivationAnimEndEvent_ptr;
		}

		auto FormationLeaveEvent_ptr = FormationLeaveEvent::from_substruct(incoming_type_id, serialized);
		if (FormationLeaveEvent_ptr != nullptr) {
			return FormationLeaveEvent_ptr;
		}

		auto MissionDataStoreChangedEvent_ptr = MissionDataStoreChangedEvent::from_substruct(incoming_type_id, serialized);
		if (MissionDataStoreChangedEvent_ptr != nullptr) {
			return MissionDataStoreChangedEvent_ptr;
		}

		auto CurveFollowerStoppingEvent_ptr = CurveFollowerStoppingEvent::from_substruct(incoming_type_id, serialized);
		if (CurveFollowerStoppingEvent_ptr != nullptr) {
			return CurveFollowerStoppingEvent_ptr;
		}

		auto CarpetBomberTargetingLaserOffEvent_ptr = CarpetBomberTargetingLaserOffEvent::from_substruct(incoming_type_id, serialized);
		if (CarpetBomberTargetingLaserOffEvent_ptr != nullptr) {
			return CarpetBomberTargetingLaserOffEvent_ptr;
		}

		auto AnimMotionStoppedEvent_ptr = AnimMotionStoppedEvent::from_substruct(incoming_type_id, serialized);
		if (AnimMotionStoppedEvent_ptr != nullptr) {
			return AnimMotionStoppedEvent_ptr;
		}

		auto ToggleEvent_ptr = ToggleEvent::from_substruct(incoming_type_id, serialized);
		if (ToggleEvent_ptr != nullptr) {
			return ToggleEvent_ptr;
		}

		auto PickupContinuousStoppedEvent_ptr = PickupContinuousStoppedEvent::from_substruct(incoming_type_id, serialized);
		if (PickupContinuousStoppedEvent_ptr != nullptr) {
			return PickupContinuousStoppedEvent_ptr;
		}

		auto ProtonSeekerShardLandEvent_ptr = ProtonSeekerShardLandEvent::from_substruct(incoming_type_id, serialized);
		if (ProtonSeekerShardLandEvent_ptr != nullptr) {
			return ProtonSeekerShardLandEvent_ptr;
		}

		auto TeleporterEnabledEvent_ptr = TeleporterEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (TeleporterEnabledEvent_ptr != nullptr) {
			return TeleporterEnabledEvent_ptr;
		}

		auto HoverbootBoostEndEvent_ptr = HoverbootBoostEndEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootBoostEndEvent_ptr != nullptr) {
			return HoverbootBoostEndEvent_ptr;
		}

		auto UICountdownOnFinishedEvent_ptr = UICountdownOnFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (UICountdownOnFinishedEvent_ptr != nullptr) {
			return UICountdownOnFinishedEvent_ptr;
		}

		auto SkateEndEvent_ptr = SkateEndEvent::from_substruct(incoming_type_id, serialized);
		if (SkateEndEvent_ptr != nullptr) {
			return SkateEndEvent_ptr;
		}

		auto DestroyedStateEvent_ptr = DestroyedStateEvent::from_substruct(incoming_type_id, serialized);
		if (DestroyedStateEvent_ptr != nullptr) {
			return DestroyedStateEvent_ptr;
		}

		auto OnWarpEvent_ptr = OnWarpEvent::from_substruct(incoming_type_id, serialized);
		if (OnWarpEvent_ptr != nullptr) {
			return OnWarpEvent_ptr;
		}

		auto UIWeaponVendorOpenEvent_ptr = UIWeaponVendorOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorOpenEvent_ptr != nullptr) {
			return UIWeaponVendorOpenEvent_ptr;
		}

		auto VehicleThrustersOffEvent_ptr = VehicleThrustersOffEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleThrustersOffEvent_ptr != nullptr) {
			return VehicleThrustersOffEvent_ptr;
		}

		auto FrozenSlideStopEvent_ptr = FrozenSlideStopEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenSlideStopEvent_ptr != nullptr) {
			return FrozenSlideStopEvent_ptr;
		}

		auto PassiveShiftInterruptedEvent_ptr = PassiveShiftInterruptedEvent::from_substruct(incoming_type_id, serialized);
		if (PassiveShiftInterruptedEvent_ptr != nullptr) {
			return PassiveShiftInterruptedEvent_ptr;
		}

		auto PauseWeaponsEquipEvent_ptr = PauseWeaponsEquipEvent::from_substruct(incoming_type_id, serialized);
		if (PauseWeaponsEquipEvent_ptr != nullptr) {
			return PauseWeaponsEquipEvent_ptr;
		}

		auto PurchaseWeaponEvent_ptr = PurchaseWeaponEvent::from_substruct(incoming_type_id, serialized);
		if (PurchaseWeaponEvent_ptr != nullptr) {
			return PurchaseWeaponEvent_ptr;
		}

		auto ArachnodroidDamageEvent_ptr = ArachnodroidDamageEvent::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidDamageEvent_ptr != nullptr) {
			return ArachnodroidDamageEvent_ptr;
		}

		auto AnimClueAllowNextSpawnEvent_ptr = AnimClueAllowNextSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (AnimClueAllowNextSpawnEvent_ptr != nullptr) {
			return AnimClueAllowNextSpawnEvent_ptr;
		}

		auto UIPhotoModeCycleEditModes_ptr = UIPhotoModeCycleEditModes::from_substruct(incoming_type_id, serialized);
		if (UIPhotoModeCycleEditModes_ptr != nullptr) {
			return UIPhotoModeCycleEditModes_ptr;
		}

		auto ShotUnlockTargetingEvent_ptr = ShotUnlockTargetingEvent::from_substruct(incoming_type_id, serialized);
		if (ShotUnlockTargetingEvent_ptr != nullptr) {
			return ShotUnlockTargetingEvent_ptr;
		}

		auto BurrowMoveEndEvent_ptr = BurrowMoveEndEvent::from_substruct(incoming_type_id, serialized);
		if (BurrowMoveEndEvent_ptr != nullptr) {
			return BurrowMoveEndEvent_ptr;
		}

		auto MagShieldShotImpactEvent_ptr = MagShieldShotImpactEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldShotImpactEvent_ptr != nullptr) {
			return MagShieldShotImpactEvent_ptr;
		}

		auto SyncedAnimImpactEvent_ptr = SyncedAnimImpactEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimImpactEvent_ptr != nullptr) {
			return SyncedAnimImpactEvent_ptr;
		}

		auto UIFrontEndColorPickerMoveEvent_ptr = UIFrontEndColorPickerMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndColorPickerMoveEvent_ptr != nullptr) {
			return UIFrontEndColorPickerMoveEvent_ptr;
		}

		auto ArachnodroidDashStartEvent_ptr = ArachnodroidDashStartEvent::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidDashStartEvent_ptr != nullptr) {
			return ArachnodroidDashStartEvent_ptr;
		}

		auto AnimRateKeyEvent_ptr = AnimRateKeyEvent::from_substruct(incoming_type_id, serialized);
		if (AnimRateKeyEvent_ptr != nullptr) {
			return AnimRateKeyEvent_ptr;
		}

		auto FlyerLandStartEvent_ptr = FlyerLandStartEvent::from_substruct(incoming_type_id, serialized);
		if (FlyerLandStartEvent_ptr != nullptr) {
			return FlyerLandStartEvent_ptr;
		}

		auto BurstPistolNoHeatEvent_ptr = BurstPistolNoHeatEvent::from_substruct(incoming_type_id, serialized);
		if (BurstPistolNoHeatEvent_ptr != nullptr) {
			return BurstPistolNoHeatEvent_ptr;
		}

		auto PoisonReactStopEvent_ptr = PoisonReactStopEvent::from_substruct(incoming_type_id, serialized);
		if (PoisonReactStopEvent_ptr != nullptr) {
			return PoisonReactStopEvent_ptr;
		}

		auto HeroBeginRespawnEvent_ptr = HeroBeginRespawnEvent::from_substruct(incoming_type_id, serialized);
		if (HeroBeginRespawnEvent_ptr != nullptr) {
			return HeroBeginRespawnEvent_ptr;
		}

		auto ChunkSpawnedEvent_ptr = ChunkSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (ChunkSpawnedEvent_ptr != nullptr) {
			return ChunkSpawnedEvent_ptr;
		}

		auto WaterSplashEvent_ptr = WaterSplashEvent::from_substruct(incoming_type_id, serialized);
		if (WaterSplashEvent_ptr != nullptr) {
			return WaterSplashEvent_ptr;
		}

		auto AnimEquipBeamEndEvent_ptr = AnimEquipBeamEndEvent::from_substruct(incoming_type_id, serialized);
		if (AnimEquipBeamEndEvent_ptr != nullptr) {
			return AnimEquipBeamEndEvent_ptr;
		}

		auto HoverEffectOffEvent_ptr = HoverEffectOffEvent::from_substruct(incoming_type_id, serialized);
		if (HoverEffectOffEvent_ptr != nullptr) {
			return HoverEffectOffEvent_ptr;
		}

		auto FormationFinishedEvent_ptr = FormationFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (FormationFinishedEvent_ptr != nullptr) {
			return FormationFinishedEvent_ptr;
		}

		auto CarpetBomberShellPopOffEvent_ptr = CarpetBomberShellPopOffEvent::from_substruct(incoming_type_id, serialized);
		if (CarpetBomberShellPopOffEvent_ptr != nullptr) {
			return CarpetBomberShellPopOffEvent_ptr;
		}

		auto DifficultyStartEvent_ptr = DifficultyStartEvent::from_substruct(incoming_type_id, serialized);
		if (DifficultyStartEvent_ptr != nullptr) {
			return DifficultyStartEvent_ptr;
		}

		auto PauseWeaponsRemapCloseEvent_ptr = PauseWeaponsRemapCloseEvent::from_substruct(incoming_type_id, serialized);
		if (PauseWeaponsRemapCloseEvent_ptr != nullptr) {
			return PauseWeaponsRemapCloseEvent_ptr;
		}

		auto MeleeWeakEvent_ptr = MeleeWeakEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeWeakEvent_ptr != nullptr) {
			return MeleeWeakEvent_ptr;
		}

		auto BotCinematicExitEvent_ptr = BotCinematicExitEvent::from_substruct(incoming_type_id, serialized);
		if (BotCinematicExitEvent_ptr != nullptr) {
			return BotCinematicExitEvent_ptr;
		}

		auto FinalizeMotionEvent_ptr = FinalizeMotionEvent::from_substruct(incoming_type_id, serialized);
		if (FinalizeMotionEvent_ptr != nullptr) {
			return FinalizeMotionEvent_ptr;
		}

		auto MeleeKillEvent_ptr = MeleeKillEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeKillEvent_ptr != nullptr) {
			return MeleeKillEvent_ptr;
		}

		auto PauseArmorEquipFailedEvent_ptr = PauseArmorEquipFailedEvent::from_substruct(incoming_type_id, serialized);
		if (PauseArmorEquipFailedEvent_ptr != nullptr) {
			return PauseArmorEquipFailedEvent_ptr;
		}

		auto DiveAttackLandedEvent_ptr = DiveAttackLandedEvent::from_substruct(incoming_type_id, serialized);
		if (DiveAttackLandedEvent_ptr != nullptr) {
			return DiveAttackLandedEvent_ptr;
		}

		auto MagbootLaunchLandedEvent_ptr = MagbootLaunchLandedEvent::from_substruct(incoming_type_id, serialized);
		if (MagbootLaunchLandedEvent_ptr != nullptr) {
			return MagbootLaunchLandedEvent_ptr;
		}

		auto RicochetBaseEvent_ptr = RicochetBaseEvent::from_substruct(incoming_type_id, serialized);
		if (RicochetBaseEvent_ptr != nullptr) {
			return RicochetBaseEvent_ptr;
		}

		auto HammerCrankTargetCranking_ptr = HammerCrankTargetCranking::from_substruct(incoming_type_id, serialized);
		if (HammerCrankTargetCranking_ptr != nullptr) {
			return HammerCrankTargetCranking_ptr;
		}

		auto HealthRestoredEvent_ptr = HealthRestoredEvent::from_substruct(incoming_type_id, serialized);
		if (HealthRestoredEvent_ptr != nullptr) {
			return HealthRestoredEvent_ptr;
		}

		auto ClankPuzzleEndTargetAddEvent_ptr = ClankPuzzleEndTargetAddEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleEndTargetAddEvent_ptr != nullptr) {
			return ClankPuzzleEndTargetAddEvent_ptr;
		}

		auto StartUnTriggeredEvent_ptr = StartUnTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (StartUnTriggeredEvent_ptr != nullptr) {
			return StartUnTriggeredEvent_ptr;
		}

		auto SyncedBoxActivateEvent_ptr = SyncedBoxActivateEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedBoxActivateEvent_ptr != nullptr) {
			return SyncedBoxActivateEvent_ptr;
		}

		auto StatusEffectDamageStartEvent_ptr = StatusEffectDamageStartEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectDamageStartEvent_ptr != nullptr) {
			return StatusEffectDamageStartEvent_ptr;
		}

		auto TurretTargetLostEvent_ptr = TurretTargetLostEvent::from_substruct(incoming_type_id, serialized);
		if (TurretTargetLostEvent_ptr != nullptr) {
			return TurretTargetLostEvent_ptr;
		}

		auto ClankPackHeliExtendEvent_ptr = ClankPackHeliExtendEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHeliExtendEvent_ptr != nullptr) {
			return ClankPackHeliExtendEvent_ptr;
		}

		auto BlizonShiftCrystalShowEvent_ptr = BlizonShiftCrystalShowEvent::from_substruct(incoming_type_id, serialized);
		if (BlizonShiftCrystalShowEvent_ptr != nullptr) {
			return BlizonShiftCrystalShowEvent_ptr;
		}

		auto DimensionalPulseStartEvent_ptr = DimensionalPulseStartEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseStartEvent_ptr != nullptr) {
			return DimensionalPulseStartEvent_ptr;
		}

		auto BotOnTranslationDieEvent_ptr = BotOnTranslationDieEvent::from_substruct(incoming_type_id, serialized);
		if (BotOnTranslationDieEvent_ptr != nullptr) {
			return BotOnTranslationDieEvent_ptr;
		}

		auto VehicleMovingEvent_ptr = VehicleMovingEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleMovingEvent_ptr != nullptr) {
			return VehicleMovingEvent_ptr;
		}

		auto SwingshotRetractingStartEvent_ptr = SwingshotRetractingStartEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotRetractingStartEvent_ptr != nullptr) {
			return SwingshotRetractingStartEvent_ptr;
		}

		auto BotIdlingEvent_ptr = BotIdlingEvent::from_substruct(incoming_type_id, serialized);
		if (BotIdlingEvent_ptr != nullptr) {
			return BotIdlingEvent_ptr;
		}

		auto FormationUserDiedEvent_ptr = FormationUserDiedEvent::from_substruct(incoming_type_id, serialized);
		if (FormationUserDiedEvent_ptr != nullptr) {
			return FormationUserDiedEvent_ptr;
		}

		auto HammerCrankQuitEvent_ptr = HammerCrankQuitEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankQuitEvent_ptr != nullptr) {
			return HammerCrankQuitEvent_ptr;
		}

		auto AudioBusMaterialStopListeningEvent_ptr = AudioBusMaterialStopListeningEvent::from_substruct(incoming_type_id, serialized);
		if (AudioBusMaterialStopListeningEvent_ptr != nullptr) {
			return AudioBusMaterialStopListeningEvent_ptr;
		}

		auto RefuelPadRefillEvent_ptr = RefuelPadRefillEvent::from_substruct(incoming_type_id, serialized);
		if (RefuelPadRefillEvent_ptr != nullptr) {
			return RefuelPadRefillEvent_ptr;
		}

		auto VanityOverrideEvent_ptr = VanityOverrideEvent::from_substruct(incoming_type_id, serialized);
		if (VanityOverrideEvent_ptr != nullptr) {
			return VanityOverrideEvent_ptr;
		}

		auto LightningRodElectrifiedEndEvent_ptr = LightningRodElectrifiedEndEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodElectrifiedEndEvent_ptr != nullptr) {
			return LightningRodElectrifiedEndEvent_ptr;
		}

		auto HammerCrankTargetPaused_ptr = HammerCrankTargetPaused::from_substruct(incoming_type_id, serialized);
		if (HammerCrankTargetPaused_ptr != nullptr) {
			return HammerCrankTargetPaused_ptr;
		}

		auto BotIntroCompletedEvent_ptr = BotIntroCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (BotIntroCompletedEvent_ptr != nullptr) {
			return BotIntroCompletedEvent_ptr;
		}

		auto UIWeaponSelectCloseEvent_ptr = UIWeaponSelectCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponSelectCloseEvent_ptr != nullptr) {
			return UIWeaponSelectCloseEvent_ptr;
		}

		auto BoltCrankTargetIdle_ptr = BoltCrankTargetIdle::from_substruct(incoming_type_id, serialized);
		if (BoltCrankTargetIdle_ptr != nullptr) {
			return BoltCrankTargetIdle_ptr;
		}

		auto UICreditsLongMusicEvent_ptr = UICreditsLongMusicEvent::from_substruct(incoming_type_id, serialized);
		if (UICreditsLongMusicEvent_ptr != nullptr) {
			return UICreditsLongMusicEvent_ptr;
		}

		auto InteractOnCompleteEvent_ptr = InteractOnCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (InteractOnCompleteEvent_ptr != nullptr) {
			return InteractOnCompleteEvent_ptr;
		}

		auto FocusTrackingSkipDefaultSolversEvent_ptr = FocusTrackingSkipDefaultSolversEvent::from_substruct(incoming_type_id, serialized);
		if (FocusTrackingSkipDefaultSolversEvent_ptr != nullptr) {
			return FocusTrackingSkipDefaultSolversEvent_ptr;
		}

		auto OnFireReactStopEvent_ptr = OnFireReactStopEvent::from_substruct(incoming_type_id, serialized);
		if (OnFireReactStopEvent_ptr != nullptr) {
			return OnFireReactStopEvent_ptr;
		}

		auto RYNOPortalDestroyEvent_ptr = RYNOPortalDestroyEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOPortalDestroyEvent_ptr != nullptr) {
			return RYNOPortalDestroyEvent_ptr;
		}

		auto WeakSpotRestoredEvent_ptr = WeakSpotRestoredEvent::from_substruct(incoming_type_id, serialized);
		if (WeakSpotRestoredEvent_ptr != nullptr) {
			return WeakSpotRestoredEvent_ptr;
		}

		auto FrozenReactStopEvent_ptr = FrozenReactStopEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenReactStopEvent_ptr != nullptr) {
			return FrozenReactStopEvent_ptr;
		}

		auto UnTriggerByGroupEvent_ptr = UnTriggerByGroupEvent::from_substruct(incoming_type_id, serialized);
		if (UnTriggerByGroupEvent_ptr != nullptr) {
			return UnTriggerByGroupEvent_ptr;
		}

		auto JumpLandingParamWarnEvent_ptr = JumpLandingParamWarnEvent::from_substruct(incoming_type_id, serialized);
		if (JumpLandingParamWarnEvent_ptr != nullptr) {
			return JumpLandingParamWarnEvent_ptr;
		}

		auto TriggerOffEvent_ptr = TriggerOffEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerOffEvent_ptr != nullptr) {
			return TriggerOffEvent_ptr;
		}

		auto LightningRodSpikeStateEvent_ptr = LightningRodSpikeStateEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodSpikeStateEvent_ptr != nullptr) {
			return LightningRodSpikeStateEvent_ptr;
		}

		auto UIWeaponVendorUpgradeHoldStartEvent_ptr = UIWeaponVendorUpgradeHoldStartEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorUpgradeHoldStartEvent_ptr != nullptr) {
			return UIWeaponVendorUpgradeHoldStartEvent_ptr;
		}

		auto TargetChangedEvent_ptr = TargetChangedEvent::from_substruct(incoming_type_id, serialized);
		if (TargetChangedEvent_ptr != nullptr) {
			return TargetChangedEvent_ptr;
		}

		auto LevelLoadedEvent_ptr = LevelLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (LevelLoadedEvent_ptr != nullptr) {
			return LevelLoadedEvent_ptr;
		}

		auto PauseGalleryPanStartEvent_ptr = PauseGalleryPanStartEvent::from_substruct(incoming_type_id, serialized);
		if (PauseGalleryPanStartEvent_ptr != nullptr) {
			return PauseGalleryPanStartEvent_ptr;
		}

		auto DevstatsSetRumbleStyleEvent_ptr = DevstatsSetRumbleStyleEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsSetRumbleStyleEvent_ptr != nullptr) {
			return DevstatsSetRumbleStyleEvent_ptr;
		}

		auto VendorMenuOpenedDevstatsEvent_ptr = VendorMenuOpenedDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (VendorMenuOpenedDevstatsEvent_ptr != nullptr) {
			return VendorMenuOpenedDevstatsEvent_ptr;
		}

		auto DisableDamageVolumeEvent_ptr = DisableDamageVolumeEvent::from_substruct(incoming_type_id, serialized);
		if (DisableDamageVolumeEvent_ptr != nullptr) {
			return DisableDamageVolumeEvent_ptr;
		}

		auto FinaleNefWeakspotDamagedStage2Event_ptr = FinaleNefWeakspotDamagedStage2Event::from_substruct(incoming_type_id, serialized);
		if (FinaleNefWeakspotDamagedStage2Event_ptr != nullptr) {
			return FinaleNefWeakspotDamagedStage2Event_ptr;
		}

		auto UnderwaterBaseJuiceDistractionSpottedEvent_ptr = UnderwaterBaseJuiceDistractionSpottedEvent::from_substruct(incoming_type_id, serialized);
		if (UnderwaterBaseJuiceDistractionSpottedEvent_ptr != nullptr) {
			return UnderwaterBaseJuiceDistractionSpottedEvent_ptr;
		}

		auto WeaponSubBurstStartedEvent_ptr = WeaponSubBurstStartedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponSubBurstStartedEvent_ptr != nullptr) {
			return WeaponSubBurstStartedEvent_ptr;
		}

		auto OnStartTriggerEvent_ptr = OnStartTriggerEvent::from_substruct(incoming_type_id, serialized);
		if (OnStartTriggerEvent_ptr != nullptr) {
			return OnStartTriggerEvent_ptr;
		}

		auto ChainLightningExplosionEvent_ptr = ChainLightningExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (ChainLightningExplosionEvent_ptr != nullptr) {
			return ChainLightningExplosionEvent_ptr;
		}

		auto DrNefariousTriggerShieldAnimEvent_ptr = DrNefariousTriggerShieldAnimEvent::from_substruct(incoming_type_id, serialized);
		if (DrNefariousTriggerShieldAnimEvent_ptr != nullptr) {
			return DrNefariousTriggerShieldAnimEvent_ptr;
		}

		auto AlertEvent_ptr = AlertEvent::from_substruct(incoming_type_id, serialized);
		if (AlertEvent_ptr != nullptr) {
			return AlertEvent_ptr;
		}

		auto AnimBreakableDamageEvent_ptr = AnimBreakableDamageEvent::from_substruct(incoming_type_id, serialized);
		if (AnimBreakableDamageEvent_ptr != nullptr) {
			return AnimBreakableDamageEvent_ptr;
		}

		auto PressurePlateLeaveEvent_ptr = PressurePlateLeaveEvent::from_substruct(incoming_type_id, serialized);
		if (PressurePlateLeaveEvent_ptr != nullptr) {
			return PressurePlateLeaveEvent_ptr;
		}

		auto AnimIKFootDownEvent_ptr = AnimIKFootDownEvent::from_substruct(incoming_type_id, serialized);
		if (AnimIKFootDownEvent_ptr != nullptr) {
			return AnimIKFootDownEvent_ptr;
		}

		auto MeleeStormSkillCastPowerEvent_ptr = MeleeStormSkillCastPowerEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeStormSkillCastPowerEvent_ptr != nullptr) {
			return MeleeStormSkillCastPowerEvent_ptr;
		}

		auto LaserSightSourceOffEvent_ptr = LaserSightSourceOffEvent::from_substruct(incoming_type_id, serialized);
		if (LaserSightSourceOffEvent_ptr != nullptr) {
			return LaserSightSourceOffEvent_ptr;
		}

		auto BotShootLaserStartPerfectTweakHeadingAnimEvent_ptr = BotShootLaserStartPerfectTweakHeadingAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserStartPerfectTweakHeadingAnimEvent_ptr != nullptr) {
			return BotShootLaserStartPerfectTweakHeadingAnimEvent_ptr;
		}

		auto FinaleNefMechDamageStage3Event_ptr = FinaleNefMechDamageStage3Event::from_substruct(incoming_type_id, serialized);
		if (FinaleNefMechDamageStage3Event_ptr != nullptr) {
			return FinaleNefMechDamageStage3Event_ptr;
		}

		auto TimeScaleChannelBlendInEvent_ptr = TimeScaleChannelBlendInEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleChannelBlendInEvent_ptr != nullptr) {
			return TimeScaleChannelBlendInEvent_ptr;
		}

		auto GrenadeHazardStartEvent_ptr = GrenadeHazardStartEvent::from_substruct(incoming_type_id, serialized);
		if (GrenadeHazardStartEvent_ptr != nullptr) {
			return GrenadeHazardStartEvent_ptr;
		}

		auto TrajectoryHighlightOffEvent_ptr = TrajectoryHighlightOffEvent::from_substruct(incoming_type_id, serialized);
		if (TrajectoryHighlightOffEvent_ptr != nullptr) {
			return TrajectoryHighlightOffEvent_ptr;
		}

		auto LedgeGrabEvent_ptr = LedgeGrabEvent::from_substruct(incoming_type_id, serialized);
		if (LedgeGrabEvent_ptr != nullptr) {
			return LedgeGrabEvent_ptr;
		}

		auto PhaseDashStartEvent_ptr = PhaseDashStartEvent::from_substruct(incoming_type_id, serialized);
		if (PhaseDashStartEvent_ptr != nullptr) {
			return PhaseDashStartEvent_ptr;
		}

		auto StatusEmitterStartEvent_ptr = StatusEmitterStartEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterStartEvent_ptr != nullptr) {
			return StatusEmitterStartEvent_ptr;
		}

		auto ChainLightningExplosionPrepEvent_ptr = ChainLightningExplosionPrepEvent::from_substruct(incoming_type_id, serialized);
		if (ChainLightningExplosionPrepEvent_ptr != nullptr) {
			return ChainLightningExplosionPrepEvent_ptr;
		}

		auto SlingshotSpinEndEvent_ptr = SlingshotSpinEndEvent::from_substruct(incoming_type_id, serialized);
		if (SlingshotSpinEndEvent_ptr != nullptr) {
			return SlingshotSpinEndEvent_ptr;
		}

		auto CameraUnderwaterStartEvent_ptr = CameraUnderwaterStartEvent::from_substruct(incoming_type_id, serialized);
		if (CameraUnderwaterStartEvent_ptr != nullptr) {
			return CameraUnderwaterStartEvent_ptr;
		}

		auto WarpRifleOverheatedFailedToShootEvent_ptr = WarpRifleOverheatedFailedToShootEvent::from_substruct(incoming_type_id, serialized);
		if (WarpRifleOverheatedFailedToShootEvent_ptr != nullptr) {
			return WarpRifleOverheatedFailedToShootEvent_ptr;
		}

		auto BotShotIntroEndEvent_ptr = BotShotIntroEndEvent::from_substruct(incoming_type_id, serialized);
		if (BotShotIntroEndEvent_ptr != nullptr) {
			return BotShotIntroEndEvent_ptr;
		}

		auto InteractFlickerEvent_ptr = InteractFlickerEvent::from_substruct(incoming_type_id, serialized);
		if (InteractFlickerEvent_ptr != nullptr) {
			return InteractFlickerEvent_ptr;
		}

		auto SwingshotDescendEvent_ptr = SwingshotDescendEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotDescendEvent_ptr != nullptr) {
			return SwingshotDescendEvent_ptr;
		}

		auto MissionObjectiveDevstatsEventBase_ptr = MissionObjectiveDevstatsEventBase::from_substruct(incoming_type_id, serialized);
		if (MissionObjectiveDevstatsEventBase_ptr != nullptr) {
			return MissionObjectiveDevstatsEventBase_ptr;
		}

		auto MeleeStreakEndEvent_ptr = MeleeStreakEndEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeStreakEndEvent_ptr != nullptr) {
			return MeleeStreakEndEvent_ptr;
		}

		auto ShipLowHealthEvent_ptr = ShipLowHealthEvent::from_substruct(incoming_type_id, serialized);
		if (ShipLowHealthEvent_ptr != nullptr) {
			return ShipLowHealthEvent_ptr;
		}

		auto ChunkedEvent_ptr = ChunkedEvent::from_substruct(incoming_type_id, serialized);
		if (ChunkedEvent_ptr != nullptr) {
			return ChunkedEvent_ptr;
		}

		auto HeroDamageScreenFXEvent_ptr = HeroDamageScreenFXEvent::from_substruct(incoming_type_id, serialized);
		if (HeroDamageScreenFXEvent_ptr != nullptr) {
			return HeroDamageScreenFXEvent_ptr;
		}

		auto PhaseDashBarrierInRangeEvent_ptr = PhaseDashBarrierInRangeEvent::from_substruct(incoming_type_id, serialized);
		if (PhaseDashBarrierInRangeEvent_ptr != nullptr) {
			return PhaseDashBarrierInRangeEvent_ptr;
		}

		auto HeroSprungEvent_ptr = HeroSprungEvent::from_substruct(incoming_type_id, serialized);
		if (HeroSprungEvent_ptr != nullptr) {
			return HeroSprungEvent_ptr;
		}

		auto ChargeAttackMissEvent_ptr = ChargeAttackMissEvent::from_substruct(incoming_type_id, serialized);
		if (ChargeAttackMissEvent_ptr != nullptr) {
			return ChargeAttackMissEvent_ptr;
		}

		auto TimeScaleFXStopEvent_ptr = TimeScaleFXStopEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleFXStopEvent_ptr != nullptr) {
			return TimeScaleFXStopEvent_ptr;
		}

		auto PickupStartFlyingEvent_ptr = PickupStartFlyingEvent::from_substruct(incoming_type_id, serialized);
		if (PickupStartFlyingEvent_ptr != nullptr) {
			return PickupStartFlyingEvent_ptr;
		}

		auto SkateStartEvent_ptr = SkateStartEvent::from_substruct(incoming_type_id, serialized);
		if (SkateStartEvent_ptr != nullptr) {
			return SkateStartEvent_ptr;
		}

		auto EmergentVOLineCompletedEvent_ptr = EmergentVOLineCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (EmergentVOLineCompletedEvent_ptr != nullptr) {
			return EmergentVOLineCompletedEvent_ptr;
		}

		auto HeroJumpedEvent_ptr = HeroJumpedEvent::from_substruct(incoming_type_id, serialized);
		if (HeroJumpedEvent_ptr != nullptr) {
			return HeroJumpedEvent_ptr;
		}

		auto BotDetectedHostileEvent_ptr = BotDetectedHostileEvent::from_substruct(incoming_type_id, serialized);
		if (BotDetectedHostileEvent_ptr != nullptr) {
			return BotDetectedHostileEvent_ptr;
		}

		auto SlopeSlideEndEvent_ptr = SlopeSlideEndEvent::from_substruct(incoming_type_id, serialized);
		if (SlopeSlideEndEvent_ptr != nullptr) {
			return SlopeSlideEndEvent_ptr;
		}

		auto ArachnodroidMissilesCancelled_ptr = ArachnodroidMissilesCancelled::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidMissilesCancelled_ptr != nullptr) {
			return ArachnodroidMissilesCancelled_ptr;
		}

		auto AwardWeaponLevelUpEvent_ptr = AwardWeaponLevelUpEvent::from_substruct(incoming_type_id, serialized);
		if (AwardWeaponLevelUpEvent_ptr != nullptr) {
			return AwardWeaponLevelUpEvent_ptr;
		}

		auto DeathEraseStartedEvent_ptr = DeathEraseStartedEvent::from_substruct(incoming_type_id, serialized);
		if (DeathEraseStartedEvent_ptr != nullptr) {
			return DeathEraseStartedEvent_ptr;
		}

		auto ClankPackHydropackExtendEvent_ptr = ClankPackHydropackExtendEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHydropackExtendEvent_ptr != nullptr) {
			return ClankPackHydropackExtendEvent_ptr;
		}

		auto ManualBreakEvent_ptr = ManualBreakEvent::from_substruct(incoming_type_id, serialized);
		if (ManualBreakEvent_ptr != nullptr) {
			return ManualBreakEvent_ptr;
		}

		auto FinaleNefWeakspotDestroyedAndAllPortalsClosedEvent_ptr = FinaleNefWeakspotDestroyedAndAllPortalsClosedEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleNefWeakspotDestroyedAndAllPortalsClosedEvent_ptr != nullptr) {
			return FinaleNefWeakspotDestroyedAndAllPortalsClosedEvent_ptr;
		}

		auto PickupSplashEvent_ptr = PickupSplashEvent::from_substruct(incoming_type_id, serialized);
		if (PickupSplashEvent_ptr != nullptr) {
			return PickupSplashEvent_ptr;
		}

		auto PlayDialogFinishedEvent_ptr = PlayDialogFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (PlayDialogFinishedEvent_ptr != nullptr) {
			return PlayDialogFinishedEvent_ptr;
		}

		auto FossilizeZoomChangeEvent_ptr = FossilizeZoomChangeEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeZoomChangeEvent_ptr != nullptr) {
			return FossilizeZoomChangeEvent_ptr;
		}

		auto HoverEffectChangedEvent_ptr = HoverEffectChangedEvent::from_substruct(incoming_type_id, serialized);
		if (HoverEffectChangedEvent_ptr != nullptr) {
			return HoverEffectChangedEvent_ptr;
		}

		auto StartMountSpeedEvent_ptr = StartMountSpeedEvent::from_substruct(incoming_type_id, serialized);
		if (StartMountSpeedEvent_ptr != nullptr) {
			return StartMountSpeedEvent_ptr;
		}

		auto HeroGrindMacroStateOnEvent_ptr = HeroGrindMacroStateOnEvent::from_substruct(incoming_type_id, serialized);
		if (HeroGrindMacroStateOnEvent_ptr != nullptr) {
			return HeroGrindMacroStateOnEvent_ptr;
		}

		auto AimContextOverTheShoulderDeactivateEvent_ptr = AimContextOverTheShoulderDeactivateEvent::from_substruct(incoming_type_id, serialized);
		if (AimContextOverTheShoulderDeactivateEvent_ptr != nullptr) {
			return AimContextOverTheShoulderDeactivateEvent_ptr;
		}

		auto AnimAimOffEvent_ptr = AnimAimOffEvent::from_substruct(incoming_type_id, serialized);
		if (AnimAimOffEvent_ptr != nullptr) {
			return AnimAimOffEvent_ptr;
		}

		auto MountImpactExplodeEvent_ptr = MountImpactExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (MountImpactExplodeEvent_ptr != nullptr) {
			return MountImpactExplodeEvent_ptr;
		}

		auto KamehamehaChargeUpCanceledEvent_ptr = KamehamehaChargeUpCanceledEvent::from_substruct(incoming_type_id, serialized);
		if (KamehamehaChargeUpCanceledEvent_ptr != nullptr) {
			return KamehamehaChargeUpCanceledEvent_ptr;
		}

		auto HeroFootIKOffEvent_ptr = HeroFootIKOffEvent::from_substruct(incoming_type_id, serialized);
		if (HeroFootIKOffEvent_ptr != nullptr) {
			return HeroFootIKOffEvent_ptr;
		}

		auto VanityHelmetForceOffEvent_ptr = VanityHelmetForceOffEvent::from_substruct(incoming_type_id, serialized);
		if (VanityHelmetForceOffEvent_ptr != nullptr) {
			return VanityHelmetForceOffEvent_ptr;
		}

		auto DevstatsEmergentVOFailedEvent_ptr = DevstatsEmergentVOFailedEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsEmergentVOFailedEvent_ptr != nullptr) {
			return DevstatsEmergentVOFailedEvent_ptr;
		}

		auto BotRelativeAnimSetInterruptTypeEvent_ptr = BotRelativeAnimSetInterruptTypeEvent::from_substruct(incoming_type_id, serialized);
		if (BotRelativeAnimSetInterruptTypeEvent_ptr != nullptr) {
			return BotRelativeAnimSetInterruptTypeEvent_ptr;
		}

		auto BotAimSteadyStartEvent_ptr = BotAimSteadyStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotAimSteadyStartEvent_ptr != nullptr) {
			return BotAimSteadyStartEvent_ptr;
		}

		auto AttachmentRemovedEvent_ptr = AttachmentRemovedEvent::from_substruct(incoming_type_id, serialized);
		if (AttachmentRemovedEvent_ptr != nullptr) {
			return AttachmentRemovedEvent_ptr;
		}

		auto BotShootMortarEndEvent_ptr = BotShootMortarEndEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootMortarEndEvent_ptr != nullptr) {
			return BotShootMortarEndEvent_ptr;
		}

		auto BotInvestigateStartEvent_ptr = BotInvestigateStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotInvestigateStartEvent_ptr != nullptr) {
			return BotInvestigateStartEvent_ptr;
		}

		auto SyncedAnimConnectRotEvent_ptr = SyncedAnimConnectRotEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimConnectRotEvent_ptr != nullptr) {
			return SyncedAnimConnectRotEvent_ptr;
		}

		auto UIControllerDisconnectHideEvent_ptr = UIControllerDisconnectHideEvent::from_substruct(incoming_type_id, serialized);
		if (UIControllerDisconnectHideEvent_ptr != nullptr) {
			return UIControllerDisconnectHideEvent_ptr;
		}

		auto PauseMenuDeselectEvent_ptr = PauseMenuDeselectEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuDeselectEvent_ptr != nullptr) {
			return PauseMenuDeselectEvent_ptr;
		}

		auto PauseMapIconHoverEvent_ptr = PauseMapIconHoverEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMapIconHoverEvent_ptr != nullptr) {
			return PauseMapIconHoverEvent_ptr;
		}

		auto BotStartSleepEvent_ptr = BotStartSleepEvent::from_substruct(incoming_type_id, serialized);
		if (BotStartSleepEvent_ptr != nullptr) {
			return BotStartSleepEvent_ptr;
		}

		auto RallyOnEvent_ptr = RallyOnEvent::from_substruct(incoming_type_id, serialized);
		if (RallyOnEvent_ptr != nullptr) {
			return RallyOnEvent_ptr;
		}

		auto InteractAttachPropEvent_ptr = InteractAttachPropEvent::from_substruct(incoming_type_id, serialized);
		if (InteractAttachPropEvent_ptr != nullptr) {
			return InteractAttachPropEvent_ptr;
		}

		auto CinematicCameraOutOptionsEvent_ptr = CinematicCameraOutOptionsEvent::from_substruct(incoming_type_id, serialized);
		if (CinematicCameraOutOptionsEvent_ptr != nullptr) {
			return CinematicCameraOutOptionsEvent_ptr;
		}

		auto UIMenuSelectEvent_ptr = UIMenuSelectEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuSelectEvent_ptr != nullptr) {
			return UIMenuSelectEvent_ptr;
		}

		auto BotStateLungeStopEvent_ptr = BotStateLungeStopEvent::from_substruct(incoming_type_id, serialized);
		if (BotStateLungeStopEvent_ptr != nullptr) {
			return BotStateLungeStopEvent_ptr;
		}

		auto EnergyDeathEvent_ptr = EnergyDeathEvent::from_substruct(incoming_type_id, serialized);
		if (EnergyDeathEvent_ptr != nullptr) {
			return EnergyDeathEvent_ptr;
		}

		auto OfferAcceptedEvent_ptr = OfferAcceptedEvent::from_substruct(incoming_type_id, serialized);
		if (OfferAcceptedEvent_ptr != nullptr) {
			return OfferAcceptedEvent_ptr;
		}

		auto HeroStartPerfTestEvent_ptr = HeroStartPerfTestEvent::from_substruct(incoming_type_id, serialized);
		if (HeroStartPerfTestEvent_ptr != nullptr) {
			return HeroStartPerfTestEvent_ptr;
		}

		auto AnimBurrowEvent_ptr = AnimBurrowEvent::from_substruct(incoming_type_id, serialized);
		if (AnimBurrowEvent_ptr != nullptr) {
			return AnimBurrowEvent_ptr;
		}

		auto PortalOpeningEvent_ptr = PortalOpeningEvent::from_substruct(incoming_type_id, serialized);
		if (PortalOpeningEvent_ptr != nullptr) {
			return PortalOpeningEvent_ptr;
		}

		auto GroovitronDancePartyStartEvent_ptr = GroovitronDancePartyStartEvent::from_substruct(incoming_type_id, serialized);
		if (GroovitronDancePartyStartEvent_ptr != nullptr) {
			return GroovitronDancePartyStartEvent_ptr;
		}

		auto Cinematic2BotGotoEvent_ptr = Cinematic2BotGotoEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2BotGotoEvent_ptr != nullptr) {
			return Cinematic2BotGotoEvent_ptr;
		}

		auto StatusEffectStartEvent_ptr = StatusEffectStartEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectStartEvent_ptr != nullptr) {
			return StatusEffectStartEvent_ptr;
		}

		auto MacroSegmentCompleteEvent_ptr = MacroSegmentCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (MacroSegmentCompleteEvent_ptr != nullptr) {
			return MacroSegmentCompleteEvent_ptr;
		}

		auto TopiarySprinklerStopTurnEvent_ptr = TopiarySprinklerStopTurnEvent::from_substruct(incoming_type_id, serialized);
		if (TopiarySprinklerStopTurnEvent_ptr != nullptr) {
			return TopiarySprinklerStopTurnEvent_ptr;
		}

		auto ManglerMovingStopEvent_ptr = ManglerMovingStopEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerMovingStopEvent_ptr != nullptr) {
			return ManglerMovingStopEvent_ptr;
		}

		auto CurveIntroEndEvent_ptr = CurveIntroEndEvent::from_substruct(incoming_type_id, serialized);
		if (CurveIntroEndEvent_ptr != nullptr) {
			return CurveIntroEndEvent_ptr;
		}

		auto Cinematic2ActivationEvent_ptr = Cinematic2ActivationEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2ActivationEvent_ptr != nullptr) {
			return Cinematic2ActivationEvent_ptr;
		}

		auto VanityBundleCollectedEvent_ptr = VanityBundleCollectedEvent::from_substruct(incoming_type_id, serialized);
		if (VanityBundleCollectedEvent_ptr != nullptr) {
			return VanityBundleCollectedEvent_ptr;
		}

		auto FrozenSlideBumpEvent_ptr = FrozenSlideBumpEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenSlideBumpEvent_ptr != nullptr) {
			return FrozenSlideBumpEvent_ptr;
		}

		auto AnimDecalExplosionEvent_ptr = AnimDecalExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDecalExplosionEvent_ptr != nullptr) {
			return AnimDecalExplosionEvent_ptr;
		}

		auto StartTriggeredEvent_ptr = StartTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (StartTriggeredEvent_ptr != nullptr) {
			return StartTriggeredEvent_ptr;
		}

		auto BotReSpawnedEvent_ptr = BotReSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (BotReSpawnedEvent_ptr != nullptr) {
			return BotReSpawnedEvent_ptr;
		}

		auto DimensionalPulseTargetControlEvent_ptr = DimensionalPulseTargetControlEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetControlEvent_ptr != nullptr) {
			return DimensionalPulseTargetControlEvent_ptr;
		}

		auto AttackStartEvent_ptr = AttackStartEvent::from_substruct(incoming_type_id, serialized);
		if (AttackStartEvent_ptr != nullptr) {
			return AttackStartEvent_ptr;
		}

		auto WeaponBurstStartedEvent_ptr = WeaponBurstStartedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponBurstStartedEvent_ptr != nullptr) {
			return WeaponBurstStartedEvent_ptr;
		}

		auto AnimHammerCrankLightEvent_ptr = AnimHammerCrankLightEvent::from_substruct(incoming_type_id, serialized);
		if (AnimHammerCrankLightEvent_ptr != nullptr) {
			return AnimHammerCrankLightEvent_ptr;
		}

		auto AnimMotionInflectionPointEvent_ptr = AnimMotionInflectionPointEvent::from_substruct(incoming_type_id, serialized);
		if (AnimMotionInflectionPointEvent_ptr != nullptr) {
			return AnimMotionInflectionPointEvent_ptr;
		}

		auto TriggerPadTimedOutEvent_ptr = TriggerPadTimedOutEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerPadTimedOutEvent_ptr != nullptr) {
			return TriggerPadTimedOutEvent_ptr;
		}

		auto AnimMotionQueryStartEvent_ptr = AnimMotionQueryStartEvent::from_substruct(incoming_type_id, serialized);
		if (AnimMotionQueryStartEvent_ptr != nullptr) {
			return AnimMotionQueryStartEvent_ptr;
		}

		auto ArachnodroidMissilesReady_ptr = ArachnodroidMissilesReady::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidMissilesReady_ptr != nullptr) {
			return ArachnodroidMissilesReady_ptr;
		}

		auto MoverLandedEvent_ptr = MoverLandedEvent::from_substruct(incoming_type_id, serialized);
		if (MoverLandedEvent_ptr != nullptr) {
			return MoverLandedEvent_ptr;
		}

		auto AnimPropActionEvent_ptr = AnimPropActionEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPropActionEvent_ptr != nullptr) {
			return AnimPropActionEvent_ptr;
		}

		auto ShipLowOnAmmoEvent_ptr = ShipLowOnAmmoEvent::from_substruct(incoming_type_id, serialized);
		if (ShipLowOnAmmoEvent_ptr != nullptr) {
			return ShipLowOnAmmoEvent_ptr;
		}

		auto BotTelekinesisReadyObjectEvent_ptr = BotTelekinesisReadyObjectEvent::from_substruct(incoming_type_id, serialized);
		if (BotTelekinesisReadyObjectEvent_ptr != nullptr) {
			return BotTelekinesisReadyObjectEvent_ptr;
		}

		auto MountBoostLaunchEndEvent_ptr = MountBoostLaunchEndEvent::from_substruct(incoming_type_id, serialized);
		if (MountBoostLaunchEndEvent_ptr != nullptr) {
			return MountBoostLaunchEndEvent_ptr;
		}

		auto DrNefariousForceDeactivateShieldEvent_ptr = DrNefariousForceDeactivateShieldEvent::from_substruct(incoming_type_id, serialized);
		if (DrNefariousForceDeactivateShieldEvent_ptr != nullptr) {
			return DrNefariousForceDeactivateShieldEvent_ptr;
		}

		auto CinePortalZipLineStart_ptr = CinePortalZipLineStart::from_substruct(incoming_type_id, serialized);
		if (CinePortalZipLineStart_ptr != nullptr) {
			return CinePortalZipLineStart_ptr;
		}

		auto ProtonSeekerAttackEndEvent_ptr = ProtonSeekerAttackEndEvent::from_substruct(incoming_type_id, serialized);
		if (ProtonSeekerAttackEndEvent_ptr != nullptr) {
			return ProtonSeekerAttackEndEvent_ptr;
		}

		auto HeroFinishedRespawnEvent_ptr = HeroFinishedRespawnEvent::from_substruct(incoming_type_id, serialized);
		if (HeroFinishedRespawnEvent_ptr != nullptr) {
			return HeroFinishedRespawnEvent_ptr;
		}

		auto SpawnerStoppedEvent_ptr = SpawnerStoppedEvent::from_substruct(incoming_type_id, serialized);
		if (SpawnerStoppedEvent_ptr != nullptr) {
			return SpawnerStoppedEvent_ptr;
		}

		auto RYNOPortalObjectCreateEvent_ptr = RYNOPortalObjectCreateEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOPortalObjectCreateEvent_ptr != nullptr) {
			return RYNOPortalObjectCreateEvent_ptr;
		}

		auto BataliaTurretChargingEvent_ptr = BataliaTurretChargingEvent::from_substruct(incoming_type_id, serialized);
		if (BataliaTurretChargingEvent_ptr != nullptr) {
			return BataliaTurretChargingEvent_ptr;
		}

		auto ShipHitCollisionEvent_ptr = ShipHitCollisionEvent::from_substruct(incoming_type_id, serialized);
		if (ShipHitCollisionEvent_ptr != nullptr) {
			return ShipHitCollisionEvent_ptr;
		}

		auto BotShotIntroStartEvent_ptr = BotShotIntroStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotShotIntroStartEvent_ptr != nullptr) {
			return BotShotIntroStartEvent_ptr;
		}

		auto UICreditsLongMusicStopEvent_ptr = UICreditsLongMusicStopEvent::from_substruct(incoming_type_id, serialized);
		if (UICreditsLongMusicStopEvent_ptr != nullptr) {
			return UICreditsLongMusicStopEvent_ptr;
		}

		auto HideInteractIconEvent_ptr = HideInteractIconEvent::from_substruct(incoming_type_id, serialized);
		if (HideInteractIconEvent_ptr != nullptr) {
			return HideInteractIconEvent_ptr;
		}

		auto ConduitVFXEvent_ptr = ConduitVFXEvent::from_substruct(incoming_type_id, serialized);
		if (ConduitVFXEvent_ptr != nullptr) {
			return ConduitVFXEvent_ptr;
		}

		auto UIControllerDisconnectShowEvent_ptr = UIControllerDisconnectShowEvent::from_substruct(incoming_type_id, serialized);
		if (UIControllerDisconnectShowEvent_ptr != nullptr) {
			return UIControllerDisconnectShowEvent_ptr;
		}

		auto LaserSightOffEvent_ptr = LaserSightOffEvent::from_substruct(incoming_type_id, serialized);
		if (LaserSightOffEvent_ptr != nullptr) {
			return LaserSightOffEvent_ptr;
		}

		auto PhaseDashBarrierOutOfRangeEvent_ptr = PhaseDashBarrierOutOfRangeEvent::from_substruct(incoming_type_id, serialized);
		if (PhaseDashBarrierOutOfRangeEvent_ptr != nullptr) {
			return PhaseDashBarrierOutOfRangeEvent_ptr;
		}

		auto MeleeComboEndEvent_ptr = MeleeComboEndEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeComboEndEvent_ptr != nullptr) {
			return MeleeComboEndEvent_ptr;
		}

		auto HandBeamStopEvent_ptr = HandBeamStopEvent::from_substruct(incoming_type_id, serialized);
		if (HandBeamStopEvent_ptr != nullptr) {
			return HandBeamStopEvent_ptr;
		}

		auto RuinPlayPickedUpEvent_ptr = RuinPlayPickedUpEvent::from_substruct(incoming_type_id, serialized);
		if (RuinPlayPickedUpEvent_ptr != nullptr) {
			return RuinPlayPickedUpEvent_ptr;
		}

		auto GainRaritaniumEvent_ptr = GainRaritaniumEvent::from_substruct(incoming_type_id, serialized);
		if (GainRaritaniumEvent_ptr != nullptr) {
			return GainRaritaniumEvent_ptr;
		}

		auto HeroLockControlsEvent_ptr = HeroLockControlsEvent::from_substruct(incoming_type_id, serialized);
		if (HeroLockControlsEvent_ptr != nullptr) {
			return HeroLockControlsEvent_ptr;
		}

		auto FlyerTrailsOffEvent_ptr = FlyerTrailsOffEvent::from_substruct(incoming_type_id, serialized);
		if (FlyerTrailsOffEvent_ptr != nullptr) {
			return FlyerTrailsOffEvent_ptr;
		}

		auto UISkipPuzzleEvent_ptr = UISkipPuzzleEvent::from_substruct(incoming_type_id, serialized);
		if (UISkipPuzzleEvent_ptr != nullptr) {
			return UISkipPuzzleEvent_ptr;
		}

		auto ArachnodroidPulseEvent_ptr = ArachnodroidPulseEvent::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidPulseEvent_ptr != nullptr) {
			return ArachnodroidPulseEvent_ptr;
		}

		auto StageTransitionStartEvent_ptr = StageTransitionStartEvent::from_substruct(incoming_type_id, serialized);
		if (StageTransitionStartEvent_ptr != nullptr) {
			return StageTransitionStartEvent_ptr;
		}

		auto LaserSightImpactOnEvent_ptr = LaserSightImpactOnEvent::from_substruct(incoming_type_id, serialized);
		if (LaserSightImpactOnEvent_ptr != nullptr) {
			return LaserSightImpactOnEvent_ptr;
		}

		auto AnimPortalZipLineStartEvent_ptr = AnimPortalZipLineStartEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPortalZipLineStartEvent_ptr != nullptr) {
			return AnimPortalZipLineStartEvent_ptr;
		}

		auto PortalZipHideTargetEvent_ptr = PortalZipHideTargetEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipHideTargetEvent_ptr != nullptr) {
			return PortalZipHideTargetEvent_ptr;
		}

		auto UIEnterDisplayGraphicsMenuEvent_ptr = UIEnterDisplayGraphicsMenuEvent::from_substruct(incoming_type_id, serialized);
		if (UIEnterDisplayGraphicsMenuEvent_ptr != nullptr) {
			return UIEnterDisplayGraphicsMenuEvent_ptr;
		}

		auto VanityHelmetForceOnEvent_ptr = VanityHelmetForceOnEvent::from_substruct(incoming_type_id, serialized);
		if (VanityHelmetForceOnEvent_ptr != nullptr) {
			return VanityHelmetForceOnEvent_ptr;
		}

		auto VanityLookEvent_ptr = VanityLookEvent::from_substruct(incoming_type_id, serialized);
		if (VanityLookEvent_ptr != nullptr) {
			return VanityLookEvent_ptr;
		}

		auto PickupDetachedEvent_ptr = PickupDetachedEvent::from_substruct(incoming_type_id, serialized);
		if (PickupDetachedEvent_ptr != nullptr) {
			return PickupDetachedEvent_ptr;
		}

		auto SkinFullyUpdatedEvent_ptr = SkinFullyUpdatedEvent::from_substruct(incoming_type_id, serialized);
		if (SkinFullyUpdatedEvent_ptr != nullptr) {
			return SkinFullyUpdatedEvent_ptr;
		}

		auto LinearDistanceEvent_ptr = LinearDistanceEvent::from_substruct(incoming_type_id, serialized);
		if (LinearDistanceEvent_ptr != nullptr) {
			return LinearDistanceEvent_ptr;
		}

		auto ShieldDestroyedEvent_ptr = ShieldDestroyedEvent::from_substruct(incoming_type_id, serialized);
		if (ShieldDestroyedEvent_ptr != nullptr) {
			return ShieldDestroyedEvent_ptr;
		}

		auto UIWeaponVendorCellUnlockEvent_ptr = UIWeaponVendorCellUnlockEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorCellUnlockEvent_ptr != nullptr) {
			return UIWeaponVendorCellUnlockEvent_ptr;
		}

		auto LeaveViewEvent_ptr = LeaveViewEvent::from_substruct(incoming_type_id, serialized);
		if (LeaveViewEvent_ptr != nullptr) {
			return LeaveViewEvent_ptr;
		}

		auto OfferBeginAcceptingEvent_ptr = OfferBeginAcceptingEvent::from_substruct(incoming_type_id, serialized);
		if (OfferBeginAcceptingEvent_ptr != nullptr) {
			return OfferBeginAcceptingEvent_ptr;
		}

		auto KamehamehaChargeUpCompletedEvent_ptr = KamehamehaChargeUpCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (KamehamehaChargeUpCompletedEvent_ptr != nullptr) {
			return KamehamehaChargeUpCompletedEvent_ptr;
		}

		auto VinylGunShatterEvent_ptr = VinylGunShatterEvent::from_substruct(incoming_type_id, serialized);
		if (VinylGunShatterEvent_ptr != nullptr) {
			return VinylGunShatterEvent_ptr;
		}

		auto BotForceMoveBaseEvent_ptr = BotForceMoveBaseEvent::from_substruct(incoming_type_id, serialized);
		if (BotForceMoveBaseEvent_ptr != nullptr) {
			return BotForceMoveBaseEvent_ptr;
		}

		auto OnCompleteEvent_ptr = OnCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (OnCompleteEvent_ptr != nullptr) {
			return OnCompleteEvent_ptr;
		}

		auto UIWeaponVendorMoveEvent_ptr = UIWeaponVendorMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorMoveEvent_ptr != nullptr) {
			return UIWeaponVendorMoveEvent_ptr;
		}

		auto BotImpactedEvent_ptr = BotImpactedEvent::from_substruct(incoming_type_id, serialized);
		if (BotImpactedEvent_ptr != nullptr) {
			return BotImpactedEvent_ptr;
		}

		auto UIOptionsMoveEvent_ptr = UIOptionsMoveEvent::from_substruct(incoming_type_id, serialized);
		if (UIOptionsMoveEvent_ptr != nullptr) {
			return UIOptionsMoveEvent_ptr;
		}

		auto EnableDamageVolumeEvent_ptr = EnableDamageVolumeEvent::from_substruct(incoming_type_id, serialized);
		if (EnableDamageVolumeEvent_ptr != nullptr) {
			return EnableDamageVolumeEvent_ptr;
		}

		auto ProtoShotgunShellEjectEvent_ptr = ProtoShotgunShellEjectEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoShotgunShellEjectEvent_ptr != nullptr) {
			return ProtoShotgunShellEjectEvent_ptr;
		}

		auto HeroGrindTransferStartEvent_ptr = HeroGrindTransferStartEvent::from_substruct(incoming_type_id, serialized);
		if (HeroGrindTransferStartEvent_ptr != nullptr) {
			return HeroGrindTransferStartEvent_ptr;
		}

		auto SaveDataAppliedEvent_ptr = SaveDataAppliedEvent::from_substruct(incoming_type_id, serialized);
		if (SaveDataAppliedEvent_ptr != nullptr) {
			return SaveDataAppliedEvent_ptr;
		}

		auto UserEquippedWeaponEvent_ptr = UserEquippedWeaponEvent::from_substruct(incoming_type_id, serialized);
		if (UserEquippedWeaponEvent_ptr != nullptr) {
			return UserEquippedWeaponEvent_ptr;
		}

		auto ArachnodroidShieldOffEvent_ptr = ArachnodroidShieldOffEvent::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidShieldOffEvent_ptr != nullptr) {
			return ArachnodroidShieldOffEvent_ptr;
		}

		auto AnimAdditiveBlendEvent_ptr = AnimAdditiveBlendEvent::from_substruct(incoming_type_id, serialized);
		if (AnimAdditiveBlendEvent_ptr != nullptr) {
			return AnimAdditiveBlendEvent_ptr;
		}

		auto EyeBeamAttackBeginEvent_ptr = EyeBeamAttackBeginEvent::from_substruct(incoming_type_id, serialized);
		if (EyeBeamAttackBeginEvent_ptr != nullptr) {
			return EyeBeamAttackBeginEvent_ptr;
		}

		auto WepHarpoonTurretFireDistantEvent_ptr = WepHarpoonTurretFireDistantEvent::from_substruct(incoming_type_id, serialized);
		if (WepHarpoonTurretFireDistantEvent_ptr != nullptr) {
			return WepHarpoonTurretFireDistantEvent_ptr;
		}

		auto GroundResponseOnEvent_ptr = GroundResponseOnEvent::from_substruct(incoming_type_id, serialized);
		if (GroundResponseOnEvent_ptr != nullptr) {
			return GroundResponseOnEvent_ptr;
		}

		auto TouchedByBeamStopEvent_ptr = TouchedByBeamStopEvent::from_substruct(incoming_type_id, serialized);
		if (TouchedByBeamStopEvent_ptr != nullptr) {
			return TouchedByBeamStopEvent_ptr;
		}

		auto PortalZipTargetInRange_ptr = PortalZipTargetInRange::from_substruct(incoming_type_id, serialized);
		if (PortalZipTargetInRange_ptr != nullptr) {
			return PortalZipTargetInRange_ptr;
		}

		auto JointShrinkStartEvent_ptr = JointShrinkStartEvent::from_substruct(incoming_type_id, serialized);
		if (JointShrinkStartEvent_ptr != nullptr) {
			return JointShrinkStartEvent_ptr;
		}

		auto HUDMessageArenaWaveCompletedEvent_ptr = HUDMessageArenaWaveCompletedEvent::from_substruct(incoming_type_id, serialized);
		if (HUDMessageArenaWaveCompletedEvent_ptr != nullptr) {
			return HUDMessageArenaWaveCompletedEvent_ptr;
		}

		auto VendorPurchaseEvent_ptr = VendorPurchaseEvent::from_substruct(incoming_type_id, serialized);
		if (VendorPurchaseEvent_ptr != nullptr) {
			return VendorPurchaseEvent_ptr;
		}

		auto ProjectileWaveStartEvent_ptr = ProjectileWaveStartEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileWaveStartEvent_ptr != nullptr) {
			return ProjectileWaveStartEvent_ptr;
		}

		auto MeleeHitEvent_ptr = MeleeHitEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeHitEvent_ptr != nullptr) {
			return MeleeHitEvent_ptr;
		}

		auto FossilizeDeathEvent_ptr = FossilizeDeathEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeDeathEvent_ptr != nullptr) {
			return FossilizeDeathEvent_ptr;
		}

		auto ShieldHitEvent_ptr = ShieldHitEvent::from_substruct(incoming_type_id, serialized);
		if (ShieldHitEvent_ptr != nullptr) {
			return ShieldHitEvent_ptr;
		}

		auto ProximityBreachedEvent_ptr = ProximityBreachedEvent::from_substruct(incoming_type_id, serialized);
		if (ProximityBreachedEvent_ptr != nullptr) {
			return ProximityBreachedEvent_ptr;
		}

		auto DestroyScriptedFlockEvent_ptr = DestroyScriptedFlockEvent::from_substruct(incoming_type_id, serialized);
		if (DestroyScriptedFlockEvent_ptr != nullptr) {
			return DestroyScriptedFlockEvent_ptr;
		}

		auto OnArriveEvent_ptr = OnArriveEvent::from_substruct(incoming_type_id, serialized);
		if (OnArriveEvent_ptr != nullptr) {
			return OnArriveEvent_ptr;
		}

		auto MountFlyerDropEvent_ptr = MountFlyerDropEvent::from_substruct(incoming_type_id, serialized);
		if (MountFlyerDropEvent_ptr != nullptr) {
			return MountFlyerDropEvent_ptr;
		}

		auto MaterialConstantFinishedAnimatingEvent_ptr = MaterialConstantFinishedAnimatingEvent::from_substruct(incoming_type_id, serialized);
		if (MaterialConstantFinishedAnimatingEvent_ptr != nullptr) {
			return MaterialConstantFinishedAnimatingEvent_ptr;
		}

		auto BounceSplosionTriggeredEvent_ptr = BounceSplosionTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (BounceSplosionTriggeredEvent_ptr != nullptr) {
			return BounceSplosionTriggeredEvent_ptr;
		}

		auto BouncyActivatingEvent_ptr = BouncyActivatingEvent::from_substruct(incoming_type_id, serialized);
		if (BouncyActivatingEvent_ptr != nullptr) {
			return BouncyActivatingEvent_ptr;
		}

		auto Beam2JointStartEvent_ptr = Beam2JointStartEvent::from_substruct(incoming_type_id, serialized);
		if (Beam2JointStartEvent_ptr != nullptr) {
			return Beam2JointStartEvent_ptr;
		}

		auto UIStartNewGameEvent_ptr = UIStartNewGameEvent::from_substruct(incoming_type_id, serialized);
		if (UIStartNewGameEvent_ptr != nullptr) {
			return UIStartNewGameEvent_ptr;
		}

		auto BotTelekinesisStartedEvent_ptr = BotTelekinesisStartedEvent::from_substruct(incoming_type_id, serialized);
		if (BotTelekinesisStartedEvent_ptr != nullptr) {
			return BotTelekinesisStartedEvent_ptr;
		}

		auto ProjectileLockedOnEvent_ptr = ProjectileLockedOnEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileLockedOnEvent_ptr != nullptr) {
			return ProjectileLockedOnEvent_ptr;
		}

		auto GalacticMapManualSwitchReadyEvent_ptr = GalacticMapManualSwitchReadyEvent::from_substruct(incoming_type_id, serialized);
		if (GalacticMapManualSwitchReadyEvent_ptr != nullptr) {
			return GalacticMapManualSwitchReadyEvent_ptr;
		}

		auto RYNOPortalShotDeactivatedEvent_ptr = RYNOPortalShotDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOPortalShotDeactivatedEvent_ptr != nullptr) {
			return RYNOPortalShotDeactivatedEvent_ptr;
		}

		auto FinaleHeartPartReactTriggeredEvent_ptr = FinaleHeartPartReactTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleHeartPartReactTriggeredEvent_ptr != nullptr) {
			return FinaleHeartPartReactTriggeredEvent_ptr;
		}

		auto HammerCrankTargetReset_ptr = HammerCrankTargetReset::from_substruct(incoming_type_id, serialized);
		if (HammerCrankTargetReset_ptr != nullptr) {
			return HammerCrankTargetReset_ptr;
		}

		auto AccessibilityHighContrastMaterialRemovedEvent_ptr = AccessibilityHighContrastMaterialRemovedEvent::from_substruct(incoming_type_id, serialized);
		if (AccessibilityHighContrastMaterialRemovedEvent_ptr != nullptr) {
			return AccessibilityHighContrastMaterialRemovedEvent_ptr;
		}

		auto CinematicPortalTransitionEnableEvent_ptr = CinematicPortalTransitionEnableEvent::from_substruct(incoming_type_id, serialized);
		if (CinematicPortalTransitionEnableEvent_ptr != nullptr) {
			return CinematicPortalTransitionEnableEvent_ptr;
		}

		auto HeroQuickSandEnteredEvent_ptr = HeroQuickSandEnteredEvent::from_substruct(incoming_type_id, serialized);
		if (HeroQuickSandEnteredEvent_ptr != nullptr) {
			return HeroQuickSandEnteredEvent_ptr;
		}

		auto AnimInvulnerabilityEvent_ptr = AnimInvulnerabilityEvent::from_substruct(incoming_type_id, serialized);
		if (AnimInvulnerabilityEvent_ptr != nullptr) {
			return AnimInvulnerabilityEvent_ptr;
		}

		auto AnimPortalZipReturnEndEvent_ptr = AnimPortalZipReturnEndEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPortalZipReturnEndEvent_ptr != nullptr) {
			return AnimPortalZipReturnEndEvent_ptr;
		}

		auto PauseMenuShowEvent_ptr = PauseMenuShowEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuShowEvent_ptr != nullptr) {
			return PauseMenuShowEvent_ptr;
		}

		auto HazardNestTargetLostEvent_ptr = HazardNestTargetLostEvent::from_substruct(incoming_type_id, serialized);
		if (HazardNestTargetLostEvent_ptr != nullptr) {
			return HazardNestTargetLostEvent_ptr;
		}

		auto PortalZipAddHighlightEvent_ptr = PortalZipAddHighlightEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipAddHighlightEvent_ptr != nullptr) {
			return PortalZipAddHighlightEvent_ptr;
		}

		auto MoverBodyContactEvent_ptr = MoverBodyContactEvent::from_substruct(incoming_type_id, serialized);
		if (MoverBodyContactEvent_ptr != nullptr) {
			return MoverBodyContactEvent_ptr;
		}

		auto UIWeaponVendorChainAcceptEvent_ptr = UIWeaponVendorChainAcceptEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorChainAcceptEvent_ptr != nullptr) {
			return UIWeaponVendorChainAcceptEvent_ptr;
		}

		auto TunnelerLockOnInstantEvent_ptr = TunnelerLockOnInstantEvent::from_substruct(incoming_type_id, serialized);
		if (TunnelerLockOnInstantEvent_ptr != nullptr) {
			return TunnelerLockOnInstantEvent_ptr;
		}

		auto AnimNotationEvent_ptr = AnimNotationEvent::from_substruct(incoming_type_id, serialized);
		if (AnimNotationEvent_ptr != nullptr) {
			return AnimNotationEvent_ptr;
		}

		auto PortalZipHeroWarpEvent_ptr = PortalZipHeroWarpEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipHeroWarpEvent_ptr != nullptr) {
			return PortalZipHeroWarpEvent_ptr;
		}

		auto TargetMarkedUnreachableEvent_ptr = TargetMarkedUnreachableEvent::from_substruct(incoming_type_id, serialized);
		if (TargetMarkedUnreachableEvent_ptr != nullptr) {
			return TargetMarkedUnreachableEvent_ptr;
		}

		auto MissionFailPopUpClosedEvent_ptr = MissionFailPopUpClosedEvent::from_substruct(incoming_type_id, serialized);
		if (MissionFailPopUpClosedEvent_ptr != nullptr) {
			return MissionFailPopUpClosedEvent_ptr;
		}

		auto DifficultyEndEvent_ptr = DifficultyEndEvent::from_substruct(incoming_type_id, serialized);
		if (DifficultyEndEvent_ptr != nullptr) {
			return DifficultyEndEvent_ptr;
		}

		auto SheepExplodedEvent_ptr = SheepExplodedEvent::from_substruct(incoming_type_id, serialized);
		if (SheepExplodedEvent_ptr != nullptr) {
			return SheepExplodedEvent_ptr;
		}

		auto ProjectileWaveEndEvent_ptr = ProjectileWaveEndEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileWaveEndEvent_ptr != nullptr) {
			return ProjectileWaveEndEvent_ptr;
		}

		auto BloodPooledEvent_ptr = BloodPooledEvent::from_substruct(incoming_type_id, serialized);
		if (BloodPooledEvent_ptr != nullptr) {
			return BloodPooledEvent_ptr;
		}

		auto ZurkonDestroyedEvent_ptr = ZurkonDestroyedEvent::from_substruct(incoming_type_id, serialized);
		if (ZurkonDestroyedEvent_ptr != nullptr) {
			return ZurkonDestroyedEvent_ptr;
		}

		auto ZerpPlayPickedUpEvent_ptr = ZerpPlayPickedUpEvent::from_substruct(incoming_type_id, serialized);
		if (ZerpPlayPickedUpEvent_ptr != nullptr) {
			return ZerpPlayPickedUpEvent_ptr;
		}

		auto TimeScaleDeactivatedEvent_ptr = TimeScaleDeactivatedEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleDeactivatedEvent_ptr != nullptr) {
			return TimeScaleDeactivatedEvent_ptr;
		}

		auto ShipMagnetFailTurnOnEvent_ptr = ShipMagnetFailTurnOnEvent::from_substruct(incoming_type_id, serialized);
		if (ShipMagnetFailTurnOnEvent_ptr != nullptr) {
			return ShipMagnetFailTurnOnEvent_ptr;
		}

		auto ChangeShotTargetEvent_ptr = ChangeShotTargetEvent::from_substruct(incoming_type_id, serialized);
		if (ChangeShotTargetEvent_ptr != nullptr) {
			return ChangeShotTargetEvent_ptr;
		}

		auto HealthPickedUpEvent_ptr = HealthPickedUpEvent::from_substruct(incoming_type_id, serialized);
		if (HealthPickedUpEvent_ptr != nullptr) {
			return HealthPickedUpEvent_ptr;
		}

		auto UIWeaponVendorVideoCancelEvent_ptr = UIWeaponVendorVideoCancelEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorVideoCancelEvent_ptr != nullptr) {
			return UIWeaponVendorVideoCancelEvent_ptr;
		}

		auto AnimMotionQueryEndEvent_ptr = AnimMotionQueryEndEvent::from_substruct(incoming_type_id, serialized);
		if (AnimMotionQueryEndEvent_ptr != nullptr) {
			return AnimMotionQueryEndEvent_ptr;
		}

		auto ReloadRequestedEvent_ptr = ReloadRequestedEvent::from_substruct(incoming_type_id, serialized);
		if (ReloadRequestedEvent_ptr != nullptr) {
			return ReloadRequestedEvent_ptr;
		}

		auto WeaponWarpRifleSpinUpCancelledEvent_ptr = WeaponWarpRifleSpinUpCancelledEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponWarpRifleSpinUpCancelledEvent_ptr != nullptr) {
			return WeaponWarpRifleSpinUpCancelledEvent_ptr;
		}

		auto GrindLeanStopEvent_ptr = GrindLeanStopEvent::from_substruct(incoming_type_id, serialized);
		if (GrindLeanStopEvent_ptr != nullptr) {
			return GrindLeanStopEvent_ptr;
		}

		auto UICreditsMusicEvent_ptr = UICreditsMusicEvent::from_substruct(incoming_type_id, serialized);
		if (UICreditsMusicEvent_ptr != nullptr) {
			return UICreditsMusicEvent_ptr;
		}

		auto ShipDodgeRollStopEvent_ptr = ShipDodgeRollStopEvent::from_substruct(incoming_type_id, serialized);
		if (ShipDodgeRollStopEvent_ptr != nullptr) {
			return ShipDodgeRollStopEvent_ptr;
		}

		auto PhotoModeRemoveStickerEvent_ptr = PhotoModeRemoveStickerEvent::from_substruct(incoming_type_id, serialized);
		if (PhotoModeRemoveStickerEvent_ptr != nullptr) {
			return PhotoModeRemoveStickerEvent_ptr;
		}

		auto FinaleNefMechDamageStageFinalEvent_ptr = FinaleNefMechDamageStageFinalEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleNefMechDamageStageFinalEvent_ptr != nullptr) {
			return FinaleNefMechDamageStageFinalEvent_ptr;
		}

		auto DoomBotJumpEndEvent_ptr = DoomBotJumpEndEvent::from_substruct(incoming_type_id, serialized);
		if (DoomBotJumpEndEvent_ptr != nullptr) {
			return DoomBotJumpEndEvent_ptr;
		}

		auto ArachnodroidDashStopEvent_ptr = ArachnodroidDashStopEvent::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidDashStopEvent_ptr != nullptr) {
			return ArachnodroidDashStopEvent_ptr;
		}

		auto NailGunPlantedShotImpactEvent_ptr = NailGunPlantedShotImpactEvent::from_substruct(incoming_type_id, serialized);
		if (NailGunPlantedShotImpactEvent_ptr != nullptr) {
			return NailGunPlantedShotImpactEvent_ptr;
		}

		auto ThrowHeldActorEvent_ptr = ThrowHeldActorEvent::from_substruct(incoming_type_id, serialized);
		if (ThrowHeldActorEvent_ptr != nullptr) {
			return ThrowHeldActorEvent_ptr;
		}

		auto BotDashChargeOnMissedOutroEvent_ptr = BotDashChargeOnMissedOutroEvent::from_substruct(incoming_type_id, serialized);
		if (BotDashChargeOnMissedOutroEvent_ptr != nullptr) {
			return BotDashChargeOnMissedOutroEvent_ptr;
		}

		auto DevstatsPlayerDeathDealtEvent_ptr = DevstatsPlayerDeathDealtEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsPlayerDeathDealtEvent_ptr != nullptr) {
			return DevstatsPlayerDeathDealtEvent_ptr;
		}

		auto SetEmergentVOTriggerEnabledEvent_ptr = SetEmergentVOTriggerEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (SetEmergentVOTriggerEnabledEvent_ptr != nullptr) {
			return SetEmergentVOTriggerEnabledEvent_ptr;
		}

		auto ExplosionWarningEvent_ptr = ExplosionWarningEvent::from_substruct(incoming_type_id, serialized);
		if (ExplosionWarningEvent_ptr != nullptr) {
			return ExplosionWarningEvent_ptr;
		}

		auto DimensionalBarrageAttackBeginEvent_ptr = DimensionalBarrageAttackBeginEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalBarrageAttackBeginEvent_ptr != nullptr) {
			return DimensionalBarrageAttackBeginEvent_ptr;
		}

		auto UIMenuPopupCloseEvent_ptr = UIMenuPopupCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuPopupCloseEvent_ptr != nullptr) {
			return UIMenuPopupCloseEvent_ptr;
		}

		auto HandBeamStartEvent_ptr = HandBeamStartEvent::from_substruct(incoming_type_id, serialized);
		if (HandBeamStartEvent_ptr != nullptr) {
			return HandBeamStartEvent_ptr;
		}

		auto GameAudioStateChangedEvent_ptr = GameAudioStateChangedEvent::from_substruct(incoming_type_id, serialized);
		if (GameAudioStateChangedEvent_ptr != nullptr) {
			return GameAudioStateChangedEvent_ptr;
		}

		auto AimContextOverTheShoulderActivateEvent_ptr = AimContextOverTheShoulderActivateEvent::from_substruct(incoming_type_id, serialized);
		if (AimContextOverTheShoulderActivateEvent_ptr != nullptr) {
			return AimContextOverTheShoulderActivateEvent_ptr;
		}

		auto SyncedAnimStartEvent_ptr = SyncedAnimStartEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimStartEvent_ptr != nullptr) {
			return SyncedAnimStartEvent_ptr;
		}

		auto BreakableUnpooledActivateEvent_ptr = BreakableUnpooledActivateEvent::from_substruct(incoming_type_id, serialized);
		if (BreakableUnpooledActivateEvent_ptr != nullptr) {
			return BreakableUnpooledActivateEvent_ptr;
		}

		auto SyncedAnimSetAnchorTypeEvent_ptr = SyncedAnimSetAnchorTypeEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimSetAnchorTypeEvent_ptr != nullptr) {
			return SyncedAnimSetAnchorTypeEvent_ptr;
		}

		auto MovieDoneEvent_ptr = MovieDoneEvent::from_substruct(incoming_type_id, serialized);
		if (MovieDoneEvent_ptr != nullptr) {
			return MovieDoneEvent_ptr;
		}

		auto SargassoCentipedeLaserChargeEnd_ptr = SargassoCentipedeLaserChargeEnd::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeLaserChargeEnd_ptr != nullptr) {
			return SargassoCentipedeLaserChargeEnd_ptr;
		}

		auto InteractDetachedFromEvent_ptr = InteractDetachedFromEvent::from_substruct(incoming_type_id, serialized);
		if (InteractDetachedFromEvent_ptr != nullptr) {
			return InteractDetachedFromEvent_ptr;
		}

		auto StopCommandEvent_ptr = StopCommandEvent::from_substruct(incoming_type_id, serialized);
		if (StopCommandEvent_ptr != nullptr) {
			return StopCommandEvent_ptr;
		}

		auto AirlockLoadedEvent_ptr = AirlockLoadedEvent::from_substruct(incoming_type_id, serialized);
		if (AirlockLoadedEvent_ptr != nullptr) {
			return AirlockLoadedEvent_ptr;
		}

		auto RYNORocketFiredEvent_ptr = RYNORocketFiredEvent::from_substruct(incoming_type_id, serialized);
		if (RYNORocketFiredEvent_ptr != nullptr) {
			return RYNORocketFiredEvent_ptr;
		}

		auto VaultBeginEvent_ptr = VaultBeginEvent::from_substruct(incoming_type_id, serialized);
		if (VaultBeginEvent_ptr != nullptr) {
			return VaultBeginEvent_ptr;
		}

		auto PortalZipWarpSoundEvent_ptr = PortalZipWarpSoundEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipWarpSoundEvent_ptr != nullptr) {
			return PortalZipWarpSoundEvent_ptr;
		}

		auto ScriptedFlockFinishedSpawningEvent_ptr = ScriptedFlockFinishedSpawningEvent::from_substruct(incoming_type_id, serialized);
		if (ScriptedFlockFinishedSpawningEvent_ptr != nullptr) {
			return ScriptedFlockFinishedSpawningEvent_ptr;
		}

		auto StateUpdateCameraCallbackEvent_ptr = StateUpdateCameraCallbackEvent::from_substruct(incoming_type_id, serialized);
		if (StateUpdateCameraCallbackEvent_ptr != nullptr) {
			return StateUpdateCameraCallbackEvent_ptr;
		}

		auto WallRunOnEvent_ptr = WallRunOnEvent::from_substruct(incoming_type_id, serialized);
		if (WallRunOnEvent_ptr != nullptr) {
			return WallRunOnEvent_ptr;
		}

		auto CollisionCheckerCollisionEvent_ptr = CollisionCheckerCollisionEvent::from_substruct(incoming_type_id, serialized);
		if (CollisionCheckerCollisionEvent_ptr != nullptr) {
			return CollisionCheckerCollisionEvent_ptr;
		}

		auto CineCameraEnableManualZoomEvent_ptr = CineCameraEnableManualZoomEvent::from_substruct(incoming_type_id, serialized);
		if (CineCameraEnableManualZoomEvent_ptr != nullptr) {
			return CineCameraEnableManualZoomEvent_ptr;
		}

		auto SyncedAnimPreserveMotionEvent_ptr = SyncedAnimPreserveMotionEvent::from_substruct(incoming_type_id, serialized);
		if (SyncedAnimPreserveMotionEvent_ptr != nullptr) {
			return SyncedAnimPreserveMotionEvent_ptr;
		}

		auto DevstatsHighContrastBackgroundDisabledEvent_ptr = DevstatsHighContrastBackgroundDisabledEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsHighContrastBackgroundDisabledEvent_ptr != nullptr) {
			return DevstatsHighContrastBackgroundDisabledEvent_ptr;
		}

		auto RefireChargeStopEvent_ptr = RefireChargeStopEvent::from_substruct(incoming_type_id, serialized);
		if (RefireChargeStopEvent_ptr != nullptr) {
			return RefireChargeStopEvent_ptr;
		}

		auto ButtonPressedEvent_ptr = ButtonPressedEvent::from_substruct(incoming_type_id, serialized);
		if (ButtonPressedEvent_ptr != nullptr) {
			return ButtonPressedEvent_ptr;
		}

		auto MeleeTriggeredEvent_ptr = MeleeTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeTriggeredEvent_ptr != nullptr) {
			return MeleeTriggeredEvent_ptr;
		}

		auto SlingshotEndEvent_ptr = SlingshotEndEvent::from_substruct(incoming_type_id, serialized);
		if (SlingshotEndEvent_ptr != nullptr) {
			return SlingshotEndEvent_ptr;
		}

		auto HeroUnlockControlsEvent_ptr = HeroUnlockControlsEvent::from_substruct(incoming_type_id, serialized);
		if (HeroUnlockControlsEvent_ptr != nullptr) {
			return HeroUnlockControlsEvent_ptr;
		}

		auto BotTeleportStartEvent_ptr = BotTeleportStartEvent::from_substruct(incoming_type_id, serialized);
		if (BotTeleportStartEvent_ptr != nullptr) {
			return BotTeleportStartEvent_ptr;
		}

		auto ProximitySpawnerSpawnEvent_ptr = ProximitySpawnerSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (ProximitySpawnerSpawnEvent_ptr != nullptr) {
			return ProximitySpawnerSpawnEvent_ptr;
		}

		auto MagShieldDeployingEvent_ptr = MagShieldDeployingEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldDeployingEvent_ptr != nullptr) {
			return MagShieldDeployingEvent_ptr;
		}

		auto HideMagbootLaunchReticleEvent_ptr = HideMagbootLaunchReticleEvent::from_substruct(incoming_type_id, serialized);
		if (HideMagbootLaunchReticleEvent_ptr != nullptr) {
			return HideMagbootLaunchReticleEvent_ptr;
		}

		auto ScriptedDevstatsEvent_ptr = ScriptedDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (ScriptedDevstatsEvent_ptr != nullptr) {
			return ScriptedDevstatsEvent_ptr;
		}

		auto BotTrappedInBoxEvent_ptr = BotTrappedInBoxEvent::from_substruct(incoming_type_id, serialized);
		if (BotTrappedInBoxEvent_ptr != nullptr) {
			return BotTrappedInBoxEvent_ptr;
		}

		auto UIMenuScrollTextStopEvent_ptr = UIMenuScrollTextStopEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuScrollTextStopEvent_ptr != nullptr) {
			return UIMenuScrollTextStopEvent_ptr;
		}

		auto FinaleBodyArmPortalSyncAnimEvent_ptr = FinaleBodyArmPortalSyncAnimEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleBodyArmPortalSyncAnimEvent_ptr != nullptr) {
			return FinaleBodyArmPortalSyncAnimEvent_ptr;
		}

		auto ConditionStartEvent_ptr = ConditionStartEvent::from_substruct(incoming_type_id, serialized);
		if (ConditionStartEvent_ptr != nullptr) {
			return ConditionStartEvent_ptr;
		}

		auto PyrocitorEquippedFXOffEvent_ptr = PyrocitorEquippedFXOffEvent::from_substruct(incoming_type_id, serialized);
		if (PyrocitorEquippedFXOffEvent_ptr != nullptr) {
			return PyrocitorEquippedFXOffEvent_ptr;
		}

		auto HeadAnimationBeginEvent_ptr = HeadAnimationBeginEvent::from_substruct(incoming_type_id, serialized);
		if (HeadAnimationBeginEvent_ptr != nullptr) {
			return HeadAnimationBeginEvent_ptr;
		}

		auto AttackTransitionEvent_ptr = AttackTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (AttackTransitionEvent_ptr != nullptr) {
			return AttackTransitionEvent_ptr;
		}

		auto PortalStartDeactivatingEvent_ptr = PortalStartDeactivatingEvent::from_substruct(incoming_type_id, serialized);
		if (PortalStartDeactivatingEvent_ptr != nullptr) {
			return PortalStartDeactivatingEvent_ptr;
		}

		auto PredatorFireEvent_ptr = PredatorFireEvent::from_substruct(incoming_type_id, serialized);
		if (PredatorFireEvent_ptr != nullptr) {
			return PredatorFireEvent_ptr;
		}

		auto MeleeEnvironmentEvent_ptr = MeleeEnvironmentEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeEnvironmentEvent_ptr != nullptr) {
			return MeleeEnvironmentEvent_ptr;
		}

		auto EndObjectiveDevstatsEvent_ptr = EndObjectiveDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (EndObjectiveDevstatsEvent_ptr != nullptr) {
			return EndObjectiveDevstatsEvent_ptr;
		}

		auto DevstatsAccessibilityUseShortcutEvent_ptr = DevstatsAccessibilityUseShortcutEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsAccessibilityUseShortcutEvent_ptr != nullptr) {
			return DevstatsAccessibilityUseShortcutEvent_ptr;
		}

		auto ProtonSeekerAttackActiveEndEvent_ptr = ProtonSeekerAttackActiveEndEvent::from_substruct(incoming_type_id, serialized);
		if (ProtonSeekerAttackActiveEndEvent_ptr != nullptr) {
			return ProtonSeekerAttackActiveEndEvent_ptr;
		}

		auto ProtoShotgunTendrilRepositionEvent_ptr = ProtoShotgunTendrilRepositionEvent::from_substruct(incoming_type_id, serialized);
		if (ProtoShotgunTendrilRepositionEvent_ptr != nullptr) {
			return ProtoShotgunTendrilRepositionEvent_ptr;
		}

		auto HarpoonStreamSprayEvent_ptr = HarpoonStreamSprayEvent::from_substruct(incoming_type_id, serialized);
		if (HarpoonStreamSprayEvent_ptr != nullptr) {
			return HarpoonStreamSprayEvent_ptr;
		}

		auto SargassoCentipedeLaserChargeStart_ptr = SargassoCentipedeLaserChargeStart::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeLaserChargeStart_ptr != nullptr) {
			return SargassoCentipedeLaserChargeStart_ptr;
		}

		auto UIFrontEndPressStartEvent_ptr = UIFrontEndPressStartEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndPressStartEvent_ptr != nullptr) {
			return UIFrontEndPressStartEvent_ptr;
		}

		auto BotDodgedEvent_ptr = BotDodgedEvent::from_substruct(incoming_type_id, serialized);
		if (BotDodgedEvent_ptr != nullptr) {
			return BotDodgedEvent_ptr;
		}

		auto AllowDanceOutroEvent_ptr = AllowDanceOutroEvent::from_substruct(incoming_type_id, serialized);
		if (AllowDanceOutroEvent_ptr != nullptr) {
			return AllowDanceOutroEvent_ptr;
		}

		auto BeamOutStartEvent_ptr = BeamOutStartEvent::from_substruct(incoming_type_id, serialized);
		if (BeamOutStartEvent_ptr != nullptr) {
			return BeamOutStartEvent_ptr;
		}

		auto HeroNewAvailableOfferEvent_ptr = HeroNewAvailableOfferEvent::from_substruct(incoming_type_id, serialized);
		if (HeroNewAvailableOfferEvent_ptr != nullptr) {
			return HeroNewAvailableOfferEvent_ptr;
		}

		auto WeaponLaserHittingStopEvent_ptr = WeaponLaserHittingStopEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponLaserHittingStopEvent_ptr != nullptr) {
			return WeaponLaserHittingStopEvent_ptr;
		}

		auto BotShootLaserStopTrackingAnimEvent_ptr = BotShootLaserStopTrackingAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserStopTrackingAnimEvent_ptr != nullptr) {
			return BotShootLaserStopTrackingAnimEvent_ptr;
		}

		auto PlanetChangedEvent_ptr = PlanetChangedEvent::from_substruct(incoming_type_id, serialized);
		if (PlanetChangedEvent_ptr != nullptr) {
			return PlanetChangedEvent_ptr;
		}

		auto PauseArmorUnequipEvent_ptr = PauseArmorUnequipEvent::from_substruct(incoming_type_id, serialized);
		if (PauseArmorUnequipEvent_ptr != nullptr) {
			return PauseArmorUnequipEvent_ptr;
		}

		auto PoleSwingEndEvent_ptr = PoleSwingEndEvent::from_substruct(incoming_type_id, serialized);
		if (PoleSwingEndEvent_ptr != nullptr) {
			return PoleSwingEndEvent_ptr;
		}

		auto PhotomodeDeactivateEvent_ptr = PhotomodeDeactivateEvent::from_substruct(incoming_type_id, serialized);
		if (PhotomodeDeactivateEvent_ptr != nullptr) {
			return PhotomodeDeactivateEvent_ptr;
		}

		auto HeroSpawnedEvent_ptr = HeroSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (HeroSpawnedEvent_ptr != nullptr) {
			return HeroSpawnedEvent_ptr;
		}

		auto DestroyDamageModifierIncomingEvent_ptr = DestroyDamageModifierIncomingEvent::from_substruct(incoming_type_id, serialized);
		if (DestroyDamageModifierIncomingEvent_ptr != nullptr) {
			return DestroyDamageModifierIncomingEvent_ptr;
		}

		auto ProjectileBeamImpactOnEvent_ptr = ProjectileBeamImpactOnEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileBeamImpactOnEvent_ptr != nullptr) {
			return ProjectileBeamImpactOnEvent_ptr;
		}

		auto ZurkonFlyingEndEvent_ptr = ZurkonFlyingEndEvent::from_substruct(incoming_type_id, serialized);
		if (ZurkonFlyingEndEvent_ptr != nullptr) {
			return ZurkonFlyingEndEvent_ptr;
		}

		auto HazardNestSpawnEvent_ptr = HazardNestSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (HazardNestSpawnEvent_ptr != nullptr) {
			return HazardNestSpawnEvent_ptr;
		}

		auto WWiseEvent_ptr = WWiseEvent::from_substruct(incoming_type_id, serialized);
		if (WWiseEvent_ptr != nullptr) {
			return WWiseEvent_ptr;
		}

		auto ShipMagnetTurnedOnEvent_ptr = ShipMagnetTurnedOnEvent::from_substruct(incoming_type_id, serialized);
		if (ShipMagnetTurnedOnEvent_ptr != nullptr) {
			return ShipMagnetTurnedOnEvent_ptr;
		}

		auto BotTelekinesisEndedEvent_ptr = BotTelekinesisEndedEvent::from_substruct(incoming_type_id, serialized);
		if (BotTelekinesisEndedEvent_ptr != nullptr) {
			return BotTelekinesisEndedEvent_ptr;
		}

		auto DimensionPortalRemoveHighlightEvent_ptr = DimensionPortalRemoveHighlightEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionPortalRemoveHighlightEvent_ptr != nullptr) {
			return DimensionPortalRemoveHighlightEvent_ptr;
		}

		auto Cinematic2BlendOutEvent_ptr = Cinematic2BlendOutEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2BlendOutEvent_ptr != nullptr) {
			return Cinematic2BlendOutEvent_ptr;
		}

		auto UIWeaponVendorPurchaseAmmoEvent_ptr = UIWeaponVendorPurchaseAmmoEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorPurchaseAmmoEvent_ptr != nullptr) {
			return UIWeaponVendorPurchaseAmmoEvent_ptr;
		}

		auto UIWeaponVendorPurchaseFailEvent_ptr = UIWeaponVendorPurchaseFailEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorPurchaseFailEvent_ptr != nullptr) {
			return UIWeaponVendorPurchaseFailEvent_ptr;
		}

		auto ShotSpawnerAttachArtEvent_ptr = ShotSpawnerAttachArtEvent::from_substruct(incoming_type_id, serialized);
		if (ShotSpawnerAttachArtEvent_ptr != nullptr) {
			return ShotSpawnerAttachArtEvent_ptr;
		}

		auto BotShootLaserEndAnimEvent_ptr = BotShootLaserEndAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserEndAnimEvent_ptr != nullptr) {
			return BotShootLaserEndAnimEvent_ptr;
		}

		auto DisplayInteractIconEvent_ptr = DisplayInteractIconEvent::from_substruct(incoming_type_id, serialized);
		if (DisplayInteractIconEvent_ptr != nullptr) {
			return DisplayInteractIconEvent_ptr;
		}

		auto KickableAlertEnemiesEvent_ptr = KickableAlertEnemiesEvent::from_substruct(incoming_type_id, serialized);
		if (KickableAlertEnemiesEvent_ptr != nullptr) {
			return KickableAlertEnemiesEvent_ptr;
		}

		auto HeroFallingRespawnEndEvent_ptr = HeroFallingRespawnEndEvent::from_substruct(incoming_type_id, serialized);
		if (HeroFallingRespawnEndEvent_ptr != nullptr) {
			return HeroFallingRespawnEndEvent_ptr;
		}

		auto ClankPuzzleVolumeThrown_ptr = ClankPuzzleVolumeThrown::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeThrown_ptr != nullptr) {
			return ClankPuzzleVolumeThrown_ptr;
		}

		auto WeaponAcquiredAmmoEvent_ptr = WeaponAcquiredAmmoEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponAcquiredAmmoEvent_ptr != nullptr) {
			return WeaponAcquiredAmmoEvent_ptr;
		}

		auto BotComboMoveStartedEvent_ptr = BotComboMoveStartedEvent::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveStartedEvent_ptr != nullptr) {
			return BotComboMoveStartedEvent_ptr;
		}

		auto ShockwaveStopEvent_ptr = ShockwaveStopEvent::from_substruct(incoming_type_id, serialized);
		if (ShockwaveStopEvent_ptr != nullptr) {
			return ShockwaveStopEvent_ptr;
		}

		auto DamageRequest_ptr = DamageRequest::from_substruct(incoming_type_id, serialized);
		if (DamageRequest_ptr != nullptr) {
			return DamageRequest_ptr;
		}

		auto RYNOPortalObjectLandPlayedEvent_ptr = RYNOPortalObjectLandPlayedEvent::from_substruct(incoming_type_id, serialized);
		if (RYNOPortalObjectLandPlayedEvent_ptr != nullptr) {
			return RYNOPortalObjectLandPlayedEvent_ptr;
		}

		auto OnEnabledEvent_ptr = OnEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (OnEnabledEvent_ptr != nullptr) {
			return OnEnabledEvent_ptr;
		}

		auto FinalizeRotationEvent_ptr = FinalizeRotationEvent::from_substruct(incoming_type_id, serialized);
		if (FinalizeRotationEvent_ptr != nullptr) {
			return FinalizeRotationEvent_ptr;
		}

		auto StatusEffectRefreshedEvent_ptr = StatusEffectRefreshedEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectRefreshedEvent_ptr != nullptr) {
			return StatusEffectRefreshedEvent_ptr;
		}

		auto WeaponLaserChargeEndEvent_ptr = WeaponLaserChargeEndEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponLaserChargeEndEvent_ptr != nullptr) {
			return WeaponLaserChargeEndEvent_ptr;
		}

		auto VolumeFitToSpaceEvent_ptr = VolumeFitToSpaceEvent::from_substruct(incoming_type_id, serialized);
		if (VolumeFitToSpaceEvent_ptr != nullptr) {
			return VolumeFitToSpaceEvent_ptr;
		}

		auto HeroPingDevstatsEvent_ptr = HeroPingDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (HeroPingDevstatsEvent_ptr != nullptr) {
			return HeroPingDevstatsEvent_ptr;
		}

		auto WeaponFiringStartedEvent_ptr = WeaponFiringStartedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponFiringStartedEvent_ptr != nullptr) {
			return WeaponFiringStartedEvent_ptr;
		}

		auto UIOptionsButtonRemapEvent_ptr = UIOptionsButtonRemapEvent::from_substruct(incoming_type_id, serialized);
		if (UIOptionsButtonRemapEvent_ptr != nullptr) {
			return UIOptionsButtonRemapEvent_ptr;
		}

		auto AccessibilityHighContrastBackgroundDisableEvent_ptr = AccessibilityHighContrastBackgroundDisableEvent::from_substruct(incoming_type_id, serialized);
		if (AccessibilityHighContrastBackgroundDisableEvent_ptr != nullptr) {
			return AccessibilityHighContrastBackgroundDisableEvent_ptr;
		}

		auto Cinematic2CameraBlendOutEvent_ptr = Cinematic2CameraBlendOutEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2CameraBlendOutEvent_ptr != nullptr) {
			return Cinematic2CameraBlendOutEvent_ptr;
		}

		auto ChargeAttackStartEvent_ptr = ChargeAttackStartEvent::from_substruct(incoming_type_id, serialized);
		if (ChargeAttackStartEvent_ptr != nullptr) {
			return ChargeAttackStartEvent_ptr;
		}

		auto PlayDialogPlayStartedEvent_ptr = PlayDialogPlayStartedEvent::from_substruct(incoming_type_id, serialized);
		if (PlayDialogPlayStartedEvent_ptr != nullptr) {
			return PlayDialogPlayStartedEvent_ptr;
		}

		auto DestroyedEvent_ptr = DestroyedEvent::from_substruct(incoming_type_id, serialized);
		if (DestroyedEvent_ptr != nullptr) {
			return DestroyedEvent_ptr;
		}

		auto TakedownVictimEvent_ptr = TakedownVictimEvent::from_substruct(incoming_type_id, serialized);
		if (TakedownVictimEvent_ptr != nullptr) {
			return TakedownVictimEvent_ptr;
		}

		auto DamageVolumeWarmupEvent_ptr = DamageVolumeWarmupEvent::from_substruct(incoming_type_id, serialized);
		if (DamageVolumeWarmupEvent_ptr != nullptr) {
			return DamageVolumeWarmupEvent_ptr;
		}

		auto ServerChangedEvent_ptr = ServerChangedEvent::from_substruct(incoming_type_id, serialized);
		if (ServerChangedEvent_ptr != nullptr) {
			return ServerChangedEvent_ptr;
		}

		auto UIFrontEndOpenEvent_ptr = UIFrontEndOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndOpenEvent_ptr != nullptr) {
			return UIFrontEndOpenEvent_ptr;
		}

		auto CoverZoneUnloadedEvent_ptr = CoverZoneUnloadedEvent::from_substruct(incoming_type_id, serialized);
		if (CoverZoneUnloadedEvent_ptr != nullptr) {
			return CoverZoneUnloadedEvent_ptr;
		}

		auto PixelizerBlastLineEvent_ptr = PixelizerBlastLineEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizerBlastLineEvent_ptr != nullptr) {
			return PixelizerBlastLineEvent_ptr;
		}

		auto MagShieldCanceledEvent_ptr = MagShieldCanceledEvent::from_substruct(incoming_type_id, serialized);
		if (MagShieldCanceledEvent_ptr != nullptr) {
			return MagShieldCanceledEvent_ptr;
		}

		auto DebugWorldPositionAddedEvent_ptr = DebugWorldPositionAddedEvent::from_substruct(incoming_type_id, serialized);
		if (DebugWorldPositionAddedEvent_ptr != nullptr) {
			return DebugWorldPositionAddedEvent_ptr;
		}

		auto UIWeaponVendorUpgradeTabOpenEvent_ptr = UIWeaponVendorUpgradeTabOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorUpgradeTabOpenEvent_ptr != nullptr) {
			return UIWeaponVendorUpgradeTabOpenEvent_ptr;
		}

		auto BlizonShiftFadeOutEvent_ptr = BlizonShiftFadeOutEvent::from_substruct(incoming_type_id, serialized);
		if (BlizonShiftFadeOutEvent_ptr != nullptr) {
			return BlizonShiftFadeOutEvent_ptr;
		}

		auto AnimTopiaryPosedModelEvent_ptr = AnimTopiaryPosedModelEvent::from_substruct(incoming_type_id, serialized);
		if (AnimTopiaryPosedModelEvent_ptr != nullptr) {
			return AnimTopiaryPosedModelEvent_ptr;
		}

		auto UILeaveDisplayGraphicsMenuEvent_ptr = UILeaveDisplayGraphicsMenuEvent::from_substruct(incoming_type_id, serialized);
		if (UILeaveDisplayGraphicsMenuEvent_ptr != nullptr) {
			return UILeaveDisplayGraphicsMenuEvent_ptr;
		}

		auto BlendInEvent_ptr = BlendInEvent::from_substruct(incoming_type_id, serialized);
		if (BlendInEvent_ptr != nullptr) {
			return BlendInEvent_ptr;
		}

		auto DisableBirdsCineEvent_ptr = DisableBirdsCineEvent::from_substruct(incoming_type_id, serialized);
		if (DisableBirdsCineEvent_ptr != nullptr) {
			return DisableBirdsCineEvent_ptr;
		}

		auto PassiveShiftTranstionEndEvent_ptr = PassiveShiftTranstionEndEvent::from_substruct(incoming_type_id, serialized);
		if (PassiveShiftTranstionEndEvent_ptr != nullptr) {
			return PassiveShiftTranstionEndEvent_ptr;
		}

		auto HandBeamTellEndEvent_ptr = HandBeamTellEndEvent::from_substruct(incoming_type_id, serialized);
		if (HandBeamTellEndEvent_ptr != nullptr) {
			return HandBeamTellEndEvent_ptr;
		}

		auto PickupInitiatedEvent_ptr = PickupInitiatedEvent::from_substruct(incoming_type_id, serialized);
		if (PickupInitiatedEvent_ptr != nullptr) {
			return PickupInitiatedEvent_ptr;
		}

		auto BotDismountEvent_ptr = BotDismountEvent::from_substruct(incoming_type_id, serialized);
		if (BotDismountEvent_ptr != nullptr) {
			return BotDismountEvent_ptr;
		}

		auto PlatformStopAscentEvent_ptr = PlatformStopAscentEvent::from_substruct(incoming_type_id, serialized);
		if (PlatformStopAscentEvent_ptr != nullptr) {
			return PlatformStopAscentEvent_ptr;
		}

		auto MagnetFiredAsProjectileEvent_ptr = MagnetFiredAsProjectileEvent::from_substruct(incoming_type_id, serialized);
		if (MagnetFiredAsProjectileEvent_ptr != nullptr) {
			return MagnetFiredAsProjectileEvent_ptr;
		}

		auto AllowEarlyTransitionEvent_ptr = AllowEarlyTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (AllowEarlyTransitionEvent_ptr != nullptr) {
			return AllowEarlyTransitionEvent_ptr;
		}

		auto DevstatsHighContrastBackgroundEnabledEvent_ptr = DevstatsHighContrastBackgroundEnabledEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsHighContrastBackgroundEnabledEvent_ptr != nullptr) {
			return DevstatsHighContrastBackgroundEnabledEvent_ptr;
		}

		auto UIPhotoModeTabEvent_ptr = UIPhotoModeTabEvent::from_substruct(incoming_type_id, serialized);
		if (UIPhotoModeTabEvent_ptr != nullptr) {
			return UIPhotoModeTabEvent_ptr;
		}

		auto StatusEffectExplosionEvent_ptr = StatusEffectExplosionEvent::from_substruct(incoming_type_id, serialized);
		if (StatusEffectExplosionEvent_ptr != nullptr) {
			return StatusEffectExplosionEvent_ptr;
		}

		auto MissionObjectiveStartedEvent_ptr = MissionObjectiveStartedEvent::from_substruct(incoming_type_id, serialized);
		if (MissionObjectiveStartedEvent_ptr != nullptr) {
			return MissionObjectiveStartedEvent_ptr;
		}

		auto RotationStopEvent_ptr = RotationStopEvent::from_substruct(incoming_type_id, serialized);
		if (RotationStopEvent_ptr != nullptr) {
			return RotationStopEvent_ptr;
		}

		auto ElectrifiedOnEvent_ptr = ElectrifiedOnEvent::from_substruct(incoming_type_id, serialized);
		if (ElectrifiedOnEvent_ptr != nullptr) {
			return ElectrifiedOnEvent_ptr;
		}

		auto HarpoonBottlePopEvent_ptr = HarpoonBottlePopEvent::from_substruct(incoming_type_id, serialized);
		if (HarpoonBottlePopEvent_ptr != nullptr) {
			return HarpoonBottlePopEvent_ptr;
		}

		auto PortalZipLineAttachEvent_ptr = PortalZipLineAttachEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipLineAttachEvent_ptr != nullptr) {
			return PortalZipLineAttachEvent_ptr;
		}

		auto RainDropEvent_ptr = RainDropEvent::from_substruct(incoming_type_id, serialized);
		if (RainDropEvent_ptr != nullptr) {
			return RainDropEvent_ptr;
		}

		auto InteractDetachPropEvent_ptr = InteractDetachPropEvent::from_substruct(incoming_type_id, serialized);
		if (InteractDetachPropEvent_ptr != nullptr) {
			return InteractDetachPropEvent_ptr;
		}

		auto ClankWeaponLockTargetedEvent_ptr = ClankWeaponLockTargetedEvent::from_substruct(incoming_type_id, serialized);
		if (ClankWeaponLockTargetedEvent_ptr != nullptr) {
			return ClankWeaponLockTargetedEvent_ptr;
		}

		auto ReviveBarShowEvent_ptr = ReviveBarShowEvent::from_substruct(incoming_type_id, serialized);
		if (ReviveBarShowEvent_ptr != nullptr) {
			return ReviveBarShowEvent_ptr;
		}

		auto ActivatedEvent_ptr = ActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (ActivatedEvent_ptr != nullptr) {
			return ActivatedEvent_ptr;
		}

		auto HeroSuperMeterFullEvent_ptr = HeroSuperMeterFullEvent::from_substruct(incoming_type_id, serialized);
		if (HeroSuperMeterFullEvent_ptr != nullptr) {
			return HeroSuperMeterFullEvent_ptr;
		}

		auto AnimDamageIdealFrameVictimEvent_ptr = AnimDamageIdealFrameVictimEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDamageIdealFrameVictimEvent_ptr != nullptr) {
			return AnimDamageIdealFrameVictimEvent_ptr;
		}

		auto PlanetMenuCancelEvent_ptr = PlanetMenuCancelEvent::from_substruct(incoming_type_id, serialized);
		if (PlanetMenuCancelEvent_ptr != nullptr) {
			return PlanetMenuCancelEvent_ptr;
		}

		auto ClankPuzzleVolumeEndCompleteEvent_ptr = ClankPuzzleVolumeEndCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeEndCompleteEvent_ptr != nullptr) {
			return ClankPuzzleVolumeEndCompleteEvent_ptr;
		}

		auto UIPhotoModeCloseEvent_ptr = UIPhotoModeCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIPhotoModeCloseEvent_ptr != nullptr) {
			return UIPhotoModeCloseEvent_ptr;
		}

		auto HeroJumpDodgeEndedEvent_ptr = HeroJumpDodgeEndedEvent::from_substruct(incoming_type_id, serialized);
		if (HeroJumpDodgeEndedEvent_ptr != nullptr) {
			return HeroJumpDodgeEndedEvent_ptr;
		}

		auto BotDetachingEvent_ptr = BotDetachingEvent::from_substruct(incoming_type_id, serialized);
		if (BotDetachingEvent_ptr != nullptr) {
			return BotDetachingEvent_ptr;
		}

		auto TopiarySprinklerChangeDirectionEvent_ptr = TopiarySprinklerChangeDirectionEvent::from_substruct(incoming_type_id, serialized);
		if (TopiarySprinklerChangeDirectionEvent_ptr != nullptr) {
			return TopiarySprinklerChangeDirectionEvent_ptr;
		}

		auto WeaponThrownEvent_ptr = WeaponThrownEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponThrownEvent_ptr != nullptr) {
			return WeaponThrownEvent_ptr;
		}

		auto FocusTrackingAddSolverEvent_ptr = FocusTrackingAddSolverEvent::from_substruct(incoming_type_id, serialized);
		if (FocusTrackingAddSolverEvent_ptr != nullptr) {
			return FocusTrackingAddSolverEvent_ptr;
		}

		auto EnableBirdsCineEvent_ptr = EnableBirdsCineEvent::from_substruct(incoming_type_id, serialized);
		if (EnableBirdsCineEvent_ptr != nullptr) {
			return EnableBirdsCineEvent_ptr;
		}

		auto ArmorBrokenEvent_ptr = ArmorBrokenEvent::from_substruct(incoming_type_id, serialized);
		if (ArmorBrokenEvent_ptr != nullptr) {
			return ArmorBrokenEvent_ptr;
		}

		auto JumpTakeoffEvent_ptr = JumpTakeoffEvent::from_substruct(incoming_type_id, serialized);
		if (JumpTakeoffEvent_ptr != nullptr) {
			return JumpTakeoffEvent_ptr;
		}

		auto TriggerPadInvalidStandEvent_ptr = TriggerPadInvalidStandEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerPadInvalidStandEvent_ptr != nullptr) {
			return TriggerPadInvalidStandEvent_ptr;
		}

		auto VolcanicEruptorBurstOffEvent_ptr = VolcanicEruptorBurstOffEvent::from_substruct(incoming_type_id, serialized);
		if (VolcanicEruptorBurstOffEvent_ptr != nullptr) {
			return VolcanicEruptorBurstOffEvent_ptr;
		}

		auto DropshipBotBeamInStartedEvent_ptr = DropshipBotBeamInStartedEvent::from_substruct(incoming_type_id, serialized);
		if (DropshipBotBeamInStartedEvent_ptr != nullptr) {
			return DropshipBotBeamInStartedEvent_ptr;
		}

		auto UnsyncedDeathEvent_ptr = UnsyncedDeathEvent::from_substruct(incoming_type_id, serialized);
		if (UnsyncedDeathEvent_ptr != nullptr) {
			return UnsyncedDeathEvent_ptr;
		}

		auto BounceEvent_ptr = BounceEvent::from_substruct(incoming_type_id, serialized);
		if (BounceEvent_ptr != nullptr) {
			return BounceEvent_ptr;
		}

		auto HandBeamTellBeginEvent_ptr = HandBeamTellBeginEvent::from_substruct(incoming_type_id, serialized);
		if (HandBeamTellBeginEvent_ptr != nullptr) {
			return HandBeamTellBeginEvent_ptr;
		}

		auto SkinManagerChangedEvent_ptr = SkinManagerChangedEvent::from_substruct(incoming_type_id, serialized);
		if (SkinManagerChangedEvent_ptr != nullptr) {
			return SkinManagerChangedEvent_ptr;
		}

		auto Cinematic2TransformUpdatedEvent_ptr = Cinematic2TransformUpdatedEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2TransformUpdatedEvent_ptr != nullptr) {
			return Cinematic2TransformUpdatedEvent_ptr;
		}

		auto ManglerTellTrailActivateEvent_ptr = ManglerTellTrailActivateEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerTellTrailActivateEvent_ptr != nullptr) {
			return ManglerTellTrailActivateEvent_ptr;
		}

		auto MissionCompletedPopUpClosedEvent_ptr = MissionCompletedPopUpClosedEvent::from_substruct(incoming_type_id, serialized);
		if (MissionCompletedPopUpClosedEvent_ptr != nullptr) {
			return MissionCompletedPopUpClosedEvent_ptr;
		}

		auto ZurkieJukeboxSelectEvent_ptr = ZurkieJukeboxSelectEvent::from_substruct(incoming_type_id, serialized);
		if (ZurkieJukeboxSelectEvent_ptr != nullptr) {
			return ZurkieJukeboxSelectEvent_ptr;
		}

		auto VendorCancelEvent_ptr = VendorCancelEvent::from_substruct(incoming_type_id, serialized);
		if (VendorCancelEvent_ptr != nullptr) {
			return VendorCancelEvent_ptr;
		}

		auto BotOnTranslationCancelEvent_ptr = BotOnTranslationCancelEvent::from_substruct(incoming_type_id, serialized);
		if (BotOnTranslationCancelEvent_ptr != nullptr) {
			return BotOnTranslationCancelEvent_ptr;
		}

		auto PortalZipShowTargetEvent_ptr = PortalZipShowTargetEvent::from_substruct(incoming_type_id, serialized);
		if (PortalZipShowTargetEvent_ptr != nullptr) {
			return PortalZipShowTargetEvent_ptr;
		}

		auto InteractOnOutroCompleteEvent_ptr = InteractOnOutroCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (InteractOnOutroCompleteEvent_ptr != nullptr) {
			return InteractOnOutroCompleteEvent_ptr;
		}

		auto MusicIntensityHighEvent_ptr = MusicIntensityHighEvent::from_substruct(incoming_type_id, serialized);
		if (MusicIntensityHighEvent_ptr != nullptr) {
			return MusicIntensityHighEvent_ptr;
		}

		auto WeaponLevelUpEndEvent_ptr = WeaponLevelUpEndEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponLevelUpEndEvent_ptr != nullptr) {
			return WeaponLevelUpEndEvent_ptr;
		}

		auto CameraAutoDeactivateTriggeredEvent_ptr = CameraAutoDeactivateTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (CameraAutoDeactivateTriggeredEvent_ptr != nullptr) {
			return CameraAutoDeactivateTriggeredEvent_ptr;
		}

		auto CombatStateChangedEvent_ptr = CombatStateChangedEvent::from_substruct(incoming_type_id, serialized);
		if (CombatStateChangedEvent_ptr != nullptr) {
			return CombatStateChangedEvent_ptr;
		}

		auto ShieldWithHealthDestoryedEvent_ptr = ShieldWithHealthDestoryedEvent::from_substruct(incoming_type_id, serialized);
		if (ShieldWithHealthDestoryedEvent_ptr != nullptr) {
			return ShieldWithHealthDestoryedEvent_ptr;
		}

		auto ChargeAttackIntroFinishedEvent_ptr = ChargeAttackIntroFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (ChargeAttackIntroFinishedEvent_ptr != nullptr) {
			return ChargeAttackIntroFinishedEvent_ptr;
		}

		auto SoundEvent_ptr = SoundEvent::from_substruct(incoming_type_id, serialized);
		if (SoundEvent_ptr != nullptr) {
			return SoundEvent_ptr;
		}

		auto PeriodicCleanupEvent_ptr = PeriodicCleanupEvent::from_substruct(incoming_type_id, serialized);
		if (PeriodicCleanupEvent_ptr != nullptr) {
			return PeriodicCleanupEvent_ptr;
		}

		auto BotRagdollSettledEvent_ptr = BotRagdollSettledEvent::from_substruct(incoming_type_id, serialized);
		if (BotRagdollSettledEvent_ptr != nullptr) {
			return BotRagdollSettledEvent_ptr;
		}

		auto GroupAlertedEvent_ptr = GroupAlertedEvent::from_substruct(incoming_type_id, serialized);
		if (GroupAlertedEvent_ptr != nullptr) {
			return GroupAlertedEvent_ptr;
		}

		auto BoltCrankTargetCranking_ptr = BoltCrankTargetCranking::from_substruct(incoming_type_id, serialized);
		if (BoltCrankTargetCranking_ptr != nullptr) {
			return BoltCrankTargetCranking_ptr;
		}

		auto GrindWooshOffEvent_ptr = GrindWooshOffEvent::from_substruct(incoming_type_id, serialized);
		if (GrindWooshOffEvent_ptr != nullptr) {
			return GrindWooshOffEvent_ptr;
		}

		auto BossPhaseChangeEvent_ptr = BossPhaseChangeEvent::from_substruct(incoming_type_id, serialized);
		if (BossPhaseChangeEvent_ptr != nullptr) {
			return BossPhaseChangeEvent_ptr;
		}

		auto EnteredVendorEvent_ptr = EnteredVendorEvent::from_substruct(incoming_type_id, serialized);
		if (EnteredVendorEvent_ptr != nullptr) {
			return EnteredVendorEvent_ptr;
		}

		auto HeroQuickSandExitedEvent_ptr = HeroQuickSandExitedEvent::from_substruct(incoming_type_id, serialized);
		if (HeroQuickSandExitedEvent_ptr != nullptr) {
			return HeroQuickSandExitedEvent_ptr;
		}

		auto UIJukeboxCloseEvent_ptr = UIJukeboxCloseEvent::from_substruct(incoming_type_id, serialized);
		if (UIJukeboxCloseEvent_ptr != nullptr) {
			return UIJukeboxCloseEvent_ptr;
		}

		auto MeleeUnTriggeredEvent_ptr = MeleeUnTriggeredEvent::from_substruct(incoming_type_id, serialized);
		if (MeleeUnTriggeredEvent_ptr != nullptr) {
			return MeleeUnTriggeredEvent_ptr;
		}

		auto UIFrontEndPressContinueEvent_ptr = UIFrontEndPressContinueEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndPressContinueEvent_ptr != nullptr) {
			return UIFrontEndPressContinueEvent_ptr;
		}

		auto BotHoverMoveStartedEvent_ptr = BotHoverMoveStartedEvent::from_substruct(incoming_type_id, serialized);
		if (BotHoverMoveStartedEvent_ptr != nullptr) {
			return BotHoverMoveStartedEvent_ptr;
		}

		auto FinaleHeartLaserPhaseHasStartedEvent_ptr = FinaleHeartLaserPhaseHasStartedEvent::from_substruct(incoming_type_id, serialized);
		if (FinaleHeartLaserPhaseHasStartedEvent_ptr != nullptr) {
			return FinaleHeartLaserPhaseHasStartedEvent_ptr;
		}

		auto TriggerPadBlinkEvent_ptr = TriggerPadBlinkEvent::from_substruct(incoming_type_id, serialized);
		if (TriggerPadBlinkEvent_ptr != nullptr) {
			return TriggerPadBlinkEvent_ptr;
		}

		auto IdlingEvent_ptr = IdlingEvent::from_substruct(incoming_type_id, serialized);
		if (IdlingEvent_ptr != nullptr) {
			return IdlingEvent_ptr;
		}

		auto CanceledEvent_ptr = CanceledEvent::from_substruct(incoming_type_id, serialized);
		if (CanceledEvent_ptr != nullptr) {
			return CanceledEvent_ptr;
		}

		auto VehicleHoverJetsOnEvent_ptr = VehicleHoverJetsOnEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleHoverJetsOnEvent_ptr != nullptr) {
			return VehicleHoverJetsOnEvent_ptr;
		}

		auto ArachnodroidSpeedBoostOnEvent_ptr = ArachnodroidSpeedBoostOnEvent::from_substruct(incoming_type_id, serialized);
		if (ArachnodroidSpeedBoostOnEvent_ptr != nullptr) {
			return ArachnodroidSpeedBoostOnEvent_ptr;
		}

		auto PortalTransitionEvent_ptr = PortalTransitionEvent::from_substruct(incoming_type_id, serialized);
		if (PortalTransitionEvent_ptr != nullptr) {
			return PortalTransitionEvent_ptr;
		}

		auto BehaviorMeleeGotoStartEvent_ptr = BehaviorMeleeGotoStartEvent::from_substruct(incoming_type_id, serialized);
		if (BehaviorMeleeGotoStartEvent_ptr != nullptr) {
			return BehaviorMeleeGotoStartEvent_ptr;
		}

		auto WeaponCaughtEvent_ptr = WeaponCaughtEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponCaughtEvent_ptr != nullptr) {
			return WeaponCaughtEvent_ptr;
		}

		auto MagbootLaunchTakeOffEvent_ptr = MagbootLaunchTakeOffEvent::from_substruct(incoming_type_id, serialized);
		if (MagbootLaunchTakeOffEvent_ptr != nullptr) {
			return MagbootLaunchTakeOffEvent_ptr;
		}

		auto TunnelerLockOnStartedEvent_ptr = TunnelerLockOnStartedEvent::from_substruct(incoming_type_id, serialized);
		if (TunnelerLockOnStartedEvent_ptr != nullptr) {
			return TunnelerLockOnStartedEvent_ptr;
		}

		auto HoverbootEndEvent_ptr = HoverbootEndEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootEndEvent_ptr != nullptr) {
			return HoverbootEndEvent_ptr;
		}

		auto FossilizeWalkEndEvent_ptr = FossilizeWalkEndEvent::from_substruct(incoming_type_id, serialized);
		if (FossilizeWalkEndEvent_ptr != nullptr) {
			return FossilizeWalkEndEvent_ptr;
		}

		auto AnimPortalZipLineAttachEvent_ptr = AnimPortalZipLineAttachEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPortalZipLineAttachEvent_ptr != nullptr) {
			return AnimPortalZipLineAttachEvent_ptr;
		}

		auto SwingshotAscendEvent_ptr = SwingshotAscendEvent::from_substruct(incoming_type_id, serialized);
		if (SwingshotAscendEvent_ptr != nullptr) {
			return SwingshotAscendEvent_ptr;
		}

		auto MovieAlmostDoneEvent_ptr = MovieAlmostDoneEvent::from_substruct(incoming_type_id, serialized);
		if (MovieAlmostDoneEvent_ptr != nullptr) {
			return MovieAlmostDoneEvent_ptr;
		}

		auto AnimMountFlyLandEvent_ptr = AnimMountFlyLandEvent::from_substruct(incoming_type_id, serialized);
		if (AnimMountFlyLandEvent_ptr != nullptr) {
			return AnimMountFlyLandEvent_ptr;
		}

		auto BotHoverMoveFinishedEvent_ptr = BotHoverMoveFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BotHoverMoveFinishedEvent_ptr != nullptr) {
			return BotHoverMoveFinishedEvent_ptr;
		}

		auto GameStartedEvent_ptr = GameStartedEvent::from_substruct(incoming_type_id, serialized);
		if (GameStartedEvent_ptr != nullptr) {
			return GameStartedEvent_ptr;
		}

		auto PredatorTargetAcquiredEvent_ptr = PredatorTargetAcquiredEvent::from_substruct(incoming_type_id, serialized);
		if (PredatorTargetAcquiredEvent_ptr != nullptr) {
			return PredatorTargetAcquiredEvent_ptr;
		}

		auto DashEndEvent_ptr = DashEndEvent::from_substruct(incoming_type_id, serialized);
		if (DashEndEvent_ptr != nullptr) {
			return DashEndEvent_ptr;
		}

		auto HammerCrankFinishedEvent_ptr = HammerCrankFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankFinishedEvent_ptr != nullptr) {
			return HammerCrankFinishedEvent_ptr;
		}

		auto ThrusterOffEvent_ptr = ThrusterOffEvent::from_substruct(incoming_type_id, serialized);
		if (ThrusterOffEvent_ptr != nullptr) {
			return ThrusterOffEvent_ptr;
		}

		auto UIMenuScrollTextStartEvent_ptr = UIMenuScrollTextStartEvent::from_substruct(incoming_type_id, serialized);
		if (UIMenuScrollTextStartEvent_ptr != nullptr) {
			return UIMenuScrollTextStartEvent_ptr;
		}

		auto Cinematic2BotReadyEvent_ptr = Cinematic2BotReadyEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2BotReadyEvent_ptr != nullptr) {
			return Cinematic2BotReadyEvent_ptr;
		}

		auto PauseGalleryPanStopEvent_ptr = PauseGalleryPanStopEvent::from_substruct(incoming_type_id, serialized);
		if (PauseGalleryPanStopEvent_ptr != nullptr) {
			return PauseGalleryPanStopEvent_ptr;
		}

		auto PauseGalleryZoomStopEvent_ptr = PauseGalleryZoomStopEvent::from_substruct(incoming_type_id, serialized);
		if (PauseGalleryZoomStopEvent_ptr != nullptr) {
			return PauseGalleryZoomStopEvent_ptr;
		}

		auto AnimUnburrowEvent_ptr = AnimUnburrowEvent::from_substruct(incoming_type_id, serialized);
		if (AnimUnburrowEvent_ptr != nullptr) {
			return AnimUnburrowEvent_ptr;
		}

		auto VehicleHeadLightsOffEvent_ptr = VehicleHeadLightsOffEvent::from_substruct(incoming_type_id, serialized);
		if (VehicleHeadLightsOffEvent_ptr != nullptr) {
			return VehicleHeadLightsOffEvent_ptr;
		}

		auto BurrowMoveStartEvent_ptr = BurrowMoveStartEvent::from_substruct(incoming_type_id, serialized);
		if (BurrowMoveStartEvent_ptr != nullptr) {
			return BurrowMoveStartEvent_ptr;
		}

		auto ShipReticleNeutralEvent_ptr = ShipReticleNeutralEvent::from_substruct(incoming_type_id, serialized);
		if (ShipReticleNeutralEvent_ptr != nullptr) {
			return ShipReticleNeutralEvent_ptr;
		}

		auto BotTelekinesisThrowObjectEvent_ptr = BotTelekinesisThrowObjectEvent::from_substruct(incoming_type_id, serialized);
		if (BotTelekinesisThrowObjectEvent_ptr != nullptr) {
			return BotTelekinesisThrowObjectEvent_ptr;
		}

		auto MissionEndedDevstatsEventBase_ptr = MissionEndedDevstatsEventBase::from_substruct(incoming_type_id, serialized);
		if (MissionEndedDevstatsEventBase_ptr != nullptr) {
			return MissionEndedDevstatsEventBase_ptr;
		}

		auto InteractNotifyPropEvent_ptr = InteractNotifyPropEvent::from_substruct(incoming_type_id, serialized);
		if (InteractNotifyPropEvent_ptr != nullptr) {
			return InteractNotifyPropEvent_ptr;
		}

		auto PauseMenuMoveEvent_ptr = PauseMenuMoveEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuMoveEvent_ptr != nullptr) {
			return PauseMenuMoveEvent_ptr;
		}

		auto AnimHeadAimBlendInEvent_ptr = AnimHeadAimBlendInEvent::from_substruct(incoming_type_id, serialized);
		if (AnimHeadAimBlendInEvent_ptr != nullptr) {
			return AnimHeadAimBlendInEvent_ptr;
		}

		auto BoltCrankTargetReseting_ptr = BoltCrankTargetReseting::from_substruct(incoming_type_id, serialized);
		if (BoltCrankTargetReseting_ptr != nullptr) {
			return BoltCrankTargetReseting_ptr;
		}

		auto UnloadRequestedEvent_ptr = UnloadRequestedEvent::from_substruct(incoming_type_id, serialized);
		if (UnloadRequestedEvent_ptr != nullptr) {
			return UnloadRequestedEvent_ptr;
		}

		auto ClankPuzzleVolumeActivateEvent_ptr = ClankPuzzleVolumeActivateEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeActivateEvent_ptr != nullptr) {
			return ClankPuzzleVolumeActivateEvent_ptr;
		}

		auto InteractAllReadyEvent_ptr = InteractAllReadyEvent::from_substruct(incoming_type_id, serialized);
		if (InteractAllReadyEvent_ptr != nullptr) {
			return InteractAllReadyEvent_ptr;
		}

		auto UIFrontEndSaveSlotsCreateChallengeEvent_ptr = UIFrontEndSaveSlotsCreateChallengeEvent::from_substruct(incoming_type_id, serialized);
		if (UIFrontEndSaveSlotsCreateChallengeEvent_ptr != nullptr) {
			return UIFrontEndSaveSlotsCreateChallengeEvent_ptr;
		}

		auto MultiAttachActivatedEvent_ptr = MultiAttachActivatedEvent::from_substruct(incoming_type_id, serialized);
		if (MultiAttachActivatedEvent_ptr != nullptr) {
			return MultiAttachActivatedEvent_ptr;
		}

		auto AnimScriptEndedEvent_ptr = AnimScriptEndedEvent::from_substruct(incoming_type_id, serialized);
		if (AnimScriptEndedEvent_ptr != nullptr) {
			return AnimScriptEndedEvent_ptr;
		}

		auto CheckpointEventBase_ptr = CheckpointEventBase::from_substruct(incoming_type_id, serialized);
		if (CheckpointEventBase_ptr != nullptr) {
			return CheckpointEventBase_ptr;
		}

		auto StartObjectiveDevstatsEvent_ptr = StartObjectiveDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (StartObjectiveDevstatsEvent_ptr != nullptr) {
			return StartObjectiveDevstatsEvent_ptr;
		}

		auto HexapodWeaponChargeUpCanceledEvent_ptr = HexapodWeaponChargeUpCanceledEvent::from_substruct(incoming_type_id, serialized);
		if (HexapodWeaponChargeUpCanceledEvent_ptr != nullptr) {
			return HexapodWeaponChargeUpCanceledEvent_ptr;
		}

		auto RotationStartEvent_ptr = RotationStartEvent::from_substruct(incoming_type_id, serialized);
		if (RotationStartEvent_ptr != nullptr) {
			return RotationStartEvent_ptr;
		}

		auto MaterialConstantBlendStartedEvent_ptr = MaterialConstantBlendStartedEvent::from_substruct(incoming_type_id, serialized);
		if (MaterialConstantBlendStartedEvent_ptr != nullptr) {
			return MaterialConstantBlendStartedEvent_ptr;
		}

		auto TargetedOffEvent_ptr = TargetedOffEvent::from_substruct(incoming_type_id, serialized);
		if (TargetedOffEvent_ptr != nullptr) {
			return TargetedOffEvent_ptr;
		}

		auto ToggleTeamEvent_ptr = ToggleTeamEvent::from_substruct(incoming_type_id, serialized);
		if (ToggleTeamEvent_ptr != nullptr) {
			return ToggleTeamEvent_ptr;
		}

		auto ChunkingRejectedEvent_ptr = ChunkingRejectedEvent::from_substruct(incoming_type_id, serialized);
		if (ChunkingRejectedEvent_ptr != nullptr) {
			return ChunkingRejectedEvent_ptr;
		}

		auto ExplodedDealtEvent_ptr = ExplodedDealtEvent::from_substruct(incoming_type_id, serialized);
		if (ExplodedDealtEvent_ptr != nullptr) {
			return ExplodedDealtEvent_ptr;
		}

		auto WeaponWarpRifleSpinUpFinishedEvent_ptr = WeaponWarpRifleSpinUpFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponWarpRifleSpinUpFinishedEvent_ptr != nullptr) {
			return WeaponWarpRifleSpinUpFinishedEvent_ptr;
		}

		auto ClankPackHydropackStartEvent_ptr = ClankPackHydropackStartEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHydropackStartEvent_ptr != nullptr) {
			return ClankPackHydropackStartEvent_ptr;
		}

		auto PossibleTargetOffEvent_ptr = PossibleTargetOffEvent::from_substruct(incoming_type_id, serialized);
		if (PossibleTargetOffEvent_ptr != nullptr) {
			return PossibleTargetOffEvent_ptr;
		}

		auto ManglerMoveTellEvent_ptr = ManglerMoveTellEvent::from_substruct(incoming_type_id, serialized);
		if (ManglerMoveTellEvent_ptr != nullptr) {
			return ManglerMoveTellEvent_ptr;
		}

		auto Cinematic2BehaviorPlayAnimEvent_ptr = Cinematic2BehaviorPlayAnimEvent::from_substruct(incoming_type_id, serialized);
		if (Cinematic2BehaviorPlayAnimEvent_ptr != nullptr) {
			return Cinematic2BehaviorPlayAnimEvent_ptr;
		}

		auto HUDObjectiveShowNewEvent_ptr = HUDObjectiveShowNewEvent::from_substruct(incoming_type_id, serialized);
		if (HUDObjectiveShowNewEvent_ptr != nullptr) {
			return HUDObjectiveShowNewEvent_ptr;
		}

		auto UIExitFinaleEvent_ptr = UIExitFinaleEvent::from_substruct(incoming_type_id, serialized);
		if (UIExitFinaleEvent_ptr != nullptr) {
			return UIExitFinaleEvent_ptr;
		}

		auto BotShootLaserStateFinishedEvent_ptr = BotShootLaserStateFinishedEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserStateFinishedEvent_ptr != nullptr) {
			return BotShootLaserStateFinishedEvent_ptr;
		}

		auto GadgetPortDisabledUseEvent_ptr = GadgetPortDisabledUseEvent::from_substruct(incoming_type_id, serialized);
		if (GadgetPortDisabledUseEvent_ptr != nullptr) {
			return GadgetPortDisabledUseEvent_ptr;
		}

		auto UIWeaponVendorPurchaseTabOpenEvent_ptr = UIWeaponVendorPurchaseTabOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorPurchaseTabOpenEvent_ptr != nullptr) {
			return UIWeaponVendorPurchaseTabOpenEvent_ptr;
		}

		auto ReachedEndEvent_ptr = ReachedEndEvent::from_substruct(incoming_type_id, serialized);
		if (ReachedEndEvent_ptr != nullptr) {
			return ReachedEndEvent_ptr;
		}

		auto InteractModelSwapEvent_ptr = InteractModelSwapEvent::from_substruct(incoming_type_id, serialized);
		if (InteractModelSwapEvent_ptr != nullptr) {
			return InteractModelSwapEvent_ptr;
		}

		auto HoverStopEvent_ptr = HoverStopEvent::from_substruct(incoming_type_id, serialized);
		if (HoverStopEvent_ptr != nullptr) {
			return HoverStopEvent_ptr;
		}

		auto FrozenReactStartEvent_ptr = FrozenReactStartEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenReactStartEvent_ptr != nullptr) {
			return FrozenReactStartEvent_ptr;
		}

		auto ActivityClueActivityStoppedEvent_ptr = ActivityClueActivityStoppedEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityClueActivityStoppedEvent_ptr != nullptr) {
			return ActivityClueActivityStoppedEvent_ptr;
		}

		auto DropshipBotLandedEvent_ptr = DropshipBotLandedEvent::from_substruct(incoming_type_id, serialized);
		if (DropshipBotLandedEvent_ptr != nullptr) {
			return DropshipBotLandedEvent_ptr;
		}

		auto JointCrawlerEventBase_ptr = JointCrawlerEventBase::from_substruct(incoming_type_id, serialized);
		if (JointCrawlerEventBase_ptr != nullptr) {
			return JointCrawlerEventBase_ptr;
		}

		auto DirectPathPropagationEvent_ptr = DirectPathPropagationEvent::from_substruct(incoming_type_id, serialized);
		if (DirectPathPropagationEvent_ptr != nullptr) {
			return DirectPathPropagationEvent_ptr;
		}

		auto BotDiveRollStopInvulnerablityAnimEvent_ptr = BotDiveRollStopInvulnerablityAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotDiveRollStopInvulnerablityAnimEvent_ptr != nullptr) {
			return BotDiveRollStopInvulnerablityAnimEvent_ptr;
		}

		auto HammerCrankResetEvent_ptr = HammerCrankResetEvent::from_substruct(incoming_type_id, serialized);
		if (HammerCrankResetEvent_ptr != nullptr) {
			return HammerCrankResetEvent_ptr;
		}

		auto OnCloseEvent_ptr = OnCloseEvent::from_substruct(incoming_type_id, serialized);
		if (OnCloseEvent_ptr != nullptr) {
			return OnCloseEvent_ptr;
		}

		auto UIWeaponSelectTabEvent_ptr = UIWeaponSelectTabEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponSelectTabEvent_ptr != nullptr) {
			return UIWeaponSelectTabEvent_ptr;
		}

		auto OnPoweredEvent_ptr = OnPoweredEvent::from_substruct(incoming_type_id, serialized);
		if (OnPoweredEvent_ptr != nullptr) {
			return OnPoweredEvent_ptr;
		}

		auto DialogDebugRequestEvent_ptr = DialogDebugRequestEvent::from_substruct(incoming_type_id, serialized);
		if (DialogDebugRequestEvent_ptr != nullptr) {
			return DialogDebugRequestEvent_ptr;
		}

		auto PickupEvent_ptr = PickupEvent::from_substruct(incoming_type_id, serialized);
		if (PickupEvent_ptr != nullptr) {
			return PickupEvent_ptr;
		}

		auto AnimPrepareToFireWeaponEvent_ptr = AnimPrepareToFireWeaponEvent::from_substruct(incoming_type_id, serialized);
		if (AnimPrepareToFireWeaponEvent_ptr != nullptr) {
			return AnimPrepareToFireWeaponEvent_ptr;
		}

		auto WeaponEconomySnapshotDevstatsEvent_ptr = WeaponEconomySnapshotDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponEconomySnapshotDevstatsEvent_ptr != nullptr) {
			return WeaponEconomySnapshotDevstatsEvent_ptr;
		}

		auto GlobalSaveTableChangedEvent_ptr = GlobalSaveTableChangedEvent::from_substruct(incoming_type_id, serialized);
		if (GlobalSaveTableChangedEvent_ptr != nullptr) {
			return GlobalSaveTableChangedEvent_ptr;
		}

		auto TraversalInvincibilityStoppedEvent_ptr = TraversalInvincibilityStoppedEvent::from_substruct(incoming_type_id, serialized);
		if (TraversalInvincibilityStoppedEvent_ptr != nullptr) {
			return TraversalInvincibilityStoppedEvent_ptr;
		}

		auto BlizonShiftEndedEvent_ptr = BlizonShiftEndedEvent::from_substruct(incoming_type_id, serialized);
		if (BlizonShiftEndedEvent_ptr != nullptr) {
			return BlizonShiftEndedEvent_ptr;
		}

		auto WeaponLevelUpEvent_ptr = WeaponLevelUpEvent::from_substruct(incoming_type_id, serialized);
		if (WeaponLevelUpEvent_ptr != nullptr) {
			return WeaponLevelUpEvent_ptr;
		}

		auto UIWeaponVendorUpgradeSinglePurchaseEvent_ptr = UIWeaponVendorUpgradeSinglePurchaseEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorUpgradeSinglePurchaseEvent_ptr != nullptr) {
			return UIWeaponVendorUpgradeSinglePurchaseEvent_ptr;
		}

		auto ModelSelectedEvent_ptr = ModelSelectedEvent::from_substruct(incoming_type_id, serialized);
		if (ModelSelectedEvent_ptr != nullptr) {
			return ModelSelectedEvent_ptr;
		}

		auto AnimEquipBeamStartEvent_ptr = AnimEquipBeamStartEvent::from_substruct(incoming_type_id, serialized);
		if (AnimEquipBeamStartEvent_ptr != nullptr) {
			return AnimEquipBeamStartEvent_ptr;
		}

		auto BeamImpactEvent_ptr = BeamImpactEvent::from_substruct(incoming_type_id, serialized);
		if (BeamImpactEvent_ptr != nullptr) {
			return BeamImpactEvent_ptr;
		}

		auto FrozenShatterEvent_ptr = FrozenShatterEvent::from_substruct(incoming_type_id, serialized);
		if (FrozenShatterEvent_ptr != nullptr) {
			return FrozenShatterEvent_ptr;
		}

		auto UIWeaponLevelUpOpenEvent_ptr = UIWeaponLevelUpOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponLevelUpOpenEvent_ptr != nullptr) {
			return UIWeaponLevelUpOpenEvent_ptr;
		}

		auto StackableCrateMaterialOverrideReadyEvent_ptr = StackableCrateMaterialOverrideReadyEvent::from_substruct(incoming_type_id, serialized);
		if (StackableCrateMaterialOverrideReadyEvent_ptr != nullptr) {
			return StackableCrateMaterialOverrideReadyEvent_ptr;
		}

		auto PixelizerChargeUpStartEvent_ptr = PixelizerChargeUpStartEvent::from_substruct(incoming_type_id, serialized);
		if (PixelizerChargeUpStartEvent_ptr != nullptr) {
			return PixelizerChargeUpStartEvent_ptr;
		}

		auto ActivateCameraEvent_ptr = ActivateCameraEvent::from_substruct(incoming_type_id, serialized);
		if (ActivateCameraEvent_ptr != nullptr) {
			return ActivateCameraEvent_ptr;
		}

		auto AutoExplodeEvent_ptr = AutoExplodeEvent::from_substruct(incoming_type_id, serialized);
		if (AutoExplodeEvent_ptr != nullptr) {
			return AutoExplodeEvent_ptr;
		}

		auto PlatformApproachStopEvent_ptr = PlatformApproachStopEvent::from_substruct(incoming_type_id, serialized);
		if (PlatformApproachStopEvent_ptr != nullptr) {
			return PlatformApproachStopEvent_ptr;
		}

		auto ClankWeaponLockReleaseEvent_ptr = ClankWeaponLockReleaseEvent::from_substruct(incoming_type_id, serialized);
		if (ClankWeaponLockReleaseEvent_ptr != nullptr) {
			return ClankWeaponLockReleaseEvent_ptr;
		}

		auto UIOptionsChangeControllerSpeakerEvent_ptr = UIOptionsChangeControllerSpeakerEvent::from_substruct(incoming_type_id, serialized);
		if (UIOptionsChangeControllerSpeakerEvent_ptr != nullptr) {
			return UIOptionsChangeControllerSpeakerEvent_ptr;
		}

		auto BotShootLaserEndSweepAnimEvent_ptr = BotShootLaserEndSweepAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserEndSweepAnimEvent_ptr != nullptr) {
			return BotShootLaserEndSweepAnimEvent_ptr;
		}

		auto MrFunGuyAppearEvent_ptr = MrFunGuyAppearEvent::from_substruct(incoming_type_id, serialized);
		if (MrFunGuyAppearEvent_ptr != nullptr) {
			return MrFunGuyAppearEvent_ptr;
		}

		auto StopMovingEvent_ptr = StopMovingEvent::from_substruct(incoming_type_id, serialized);
		if (StopMovingEvent_ptr != nullptr) {
			return StopMovingEvent_ptr;
		}

		auto GrowthOnEvent_ptr = GrowthOnEvent::from_substruct(incoming_type_id, serialized);
		if (GrowthOnEvent_ptr != nullptr) {
			return GrowthOnEvent_ptr;
		}

		auto ActivityClueDestroyedWithOwnerEvent_ptr = ActivityClueDestroyedWithOwnerEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityClueDestroyedWithOwnerEvent_ptr != nullptr) {
			return ActivityClueDestroyedWithOwnerEvent_ptr;
		}

		auto BotStateFaceStartTurningEvent_ptr = BotStateFaceStartTurningEvent::from_substruct(incoming_type_id, serialized);
		if (BotStateFaceStartTurningEvent_ptr != nullptr) {
			return BotStateFaceStartTurningEvent_ptr;
		}

		auto MissionSystemLoaded_ptr = MissionSystemLoaded::from_substruct(incoming_type_id, serialized);
		if (MissionSystemLoaded_ptr != nullptr) {
			return MissionSystemLoaded_ptr;
		}

		auto InteractUnlockedEvent_ptr = InteractUnlockedEvent::from_substruct(incoming_type_id, serialized);
		if (InteractUnlockedEvent_ptr != nullptr) {
			return InteractUnlockedEvent_ptr;
		}

		auto HoverbootKickHighSpeedStartEvent_ptr = HoverbootKickHighSpeedStartEvent::from_substruct(incoming_type_id, serialized);
		if (HoverbootKickHighSpeedStartEvent_ptr != nullptr) {
			return HoverbootKickHighSpeedStartEvent_ptr;
		}

		auto DimensionalBarrageAttackEndEvent_ptr = DimensionalBarrageAttackEndEvent::from_substruct(incoming_type_id, serialized);
		if (DimensionalBarrageAttackEndEvent_ptr != nullptr) {
			return DimensionalBarrageAttackEndEvent_ptr;
		}

		auto ConduitAnimEvent_ptr = ConduitAnimEvent::from_substruct(incoming_type_id, serialized);
		if (ConduitAnimEvent_ptr != nullptr) {
			return ConduitAnimEvent_ptr;
		}

		auto BotStopSleepEvent_ptr = BotStopSleepEvent::from_substruct(incoming_type_id, serialized);
		if (BotStopSleepEvent_ptr != nullptr) {
			return BotStopSleepEvent_ptr;
		}

		auto MissionCompleteEvent_ptr = MissionCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (MissionCompleteEvent_ptr != nullptr) {
			return MissionCompleteEvent_ptr;
		}

		auto PauseMenuSelectEvent_ptr = PauseMenuSelectEvent::from_substruct(incoming_type_id, serialized);
		if (PauseMenuSelectEvent_ptr != nullptr) {
			return PauseMenuSelectEvent_ptr;
		}

		auto GameEndedEvent_ptr = GameEndedEvent::from_substruct(incoming_type_id, serialized);
		if (GameEndedEvent_ptr != nullptr) {
			return GameEndedEvent_ptr;
		}

		auto HazardNestTargetBeamStartEvent_ptr = HazardNestTargetBeamStartEvent::from_substruct(incoming_type_id, serialized);
		if (HazardNestTargetBeamStartEvent_ptr != nullptr) {
			return HazardNestTargetBeamStartEvent_ptr;
		}

		auto UIWeaponVendorChainUpEvent_ptr = UIWeaponVendorChainUpEvent::from_substruct(incoming_type_id, serialized);
		if (UIWeaponVendorChainUpEvent_ptr != nullptr) {
			return UIWeaponVendorChainUpEvent_ptr;
		}

		auto LoadStateChangedEvent_ptr = LoadStateChangedEvent::from_substruct(incoming_type_id, serialized);
		if (LoadStateChangedEvent_ptr != nullptr) {
			return LoadStateChangedEvent_ptr;
		}

		auto WepHarpoonTurretFireFlashEvent_ptr = WepHarpoonTurretFireFlashEvent::from_substruct(incoming_type_id, serialized);
		if (WepHarpoonTurretFireFlashEvent_ptr != nullptr) {
			return WepHarpoonTurretFireFlashEvent_ptr;
		}

		auto BeamImpactStopEvent_ptr = BeamImpactStopEvent::from_substruct(incoming_type_id, serialized);
		if (BeamImpactStopEvent_ptr != nullptr) {
			return BeamImpactStopEvent_ptr;
		}

		auto FormationChangeTimeOutEvent_ptr = FormationChangeTimeOutEvent::from_substruct(incoming_type_id, serialized);
		if (FormationChangeTimeOutEvent_ptr != nullptr) {
			return FormationChangeTimeOutEvent_ptr;
		}

		auto HeroTeleportEvent_ptr = HeroTeleportEvent::from_substruct(incoming_type_id, serialized);
		if (HeroTeleportEvent_ptr != nullptr) {
			return HeroTeleportEvent_ptr;
		}

		auto ExplosionDecalEvent_ptr = ExplosionDecalEvent::from_substruct(incoming_type_id, serialized);
		if (ExplosionDecalEvent_ptr != nullptr) {
			return ExplosionDecalEvent_ptr;
		}

		auto ShardAttackTellBeginEvent_ptr = ShardAttackTellBeginEvent::from_substruct(incoming_type_id, serialized);
		if (ShardAttackTellBeginEvent_ptr != nullptr) {
			return ShardAttackTellBeginEvent_ptr;
		}

		auto ZurkonSpawnEvent_ptr = ZurkonSpawnEvent::from_substruct(incoming_type_id, serialized);
		if (ZurkonSpawnEvent_ptr != nullptr) {
			return ZurkonSpawnEvent_ptr;
		}

		auto UIJukeboxOpenEvent_ptr = UIJukeboxOpenEvent::from_substruct(incoming_type_id, serialized);
		if (UIJukeboxOpenEvent_ptr != nullptr) {
			return UIJukeboxOpenEvent_ptr;
		}

		auto TimeScaleChannelStopEvent_ptr = TimeScaleChannelStopEvent::from_substruct(incoming_type_id, serialized);
		if (TimeScaleChannelStopEvent_ptr != nullptr) {
			return TimeScaleChannelStopEvent_ptr;
		}

		auto CineActorVoiceCoveredEvent_ptr = CineActorVoiceCoveredEvent::from_substruct(incoming_type_id, serialized);
		if (CineActorVoiceCoveredEvent_ptr != nullptr) {
			return CineActorVoiceCoveredEvent_ptr;
		}

		auto DevstatsSetColorblindFilterEvent_ptr = DevstatsSetColorblindFilterEvent::from_substruct(incoming_type_id, serialized);
		if (DevstatsSetColorblindFilterEvent_ptr != nullptr) {
			return DevstatsSetColorblindFilterEvent_ptr;
		}

		auto BurrowEvent_ptr = BurrowEvent::from_substruct(incoming_type_id, serialized);
		if (BurrowEvent_ptr != nullptr) {
			return BurrowEvent_ptr;
		}

		auto AwarenessLevelChangedEvent_ptr = AwarenessLevelChangedEvent::from_substruct(incoming_type_id, serialized);
		if (AwarenessLevelChangedEvent_ptr != nullptr) {
			return AwarenessLevelChangedEvent_ptr;
		}

		auto ProjectileFlyingStopEvent_ptr = ProjectileFlyingStopEvent::from_substruct(incoming_type_id, serialized);
		if (ProjectileFlyingStopEvent_ptr != nullptr) {
			return ProjectileFlyingStopEvent_ptr;
		}

		auto BotComboStartedEvent_ptr = BotComboStartedEvent::from_substruct(incoming_type_id, serialized);
		if (BotComboStartedEvent_ptr != nullptr) {
			return BotComboStartedEvent_ptr;
		}

		auto AnimAttachHolsterEvent_ptr = AnimAttachHolsterEvent::from_substruct(incoming_type_id, serialized);
		if (AnimAttachHolsterEvent_ptr != nullptr) {
			return AnimAttachHolsterEvent_ptr;
		}

		auto AnimDamageIdealFrameEvent_ptr = AnimDamageIdealFrameEvent::from_substruct(incoming_type_id, serialized);
		if (AnimDamageIdealFrameEvent_ptr != nullptr) {
			return AnimDamageIdealFrameEvent_ptr;
		}

		auto FocusTrackingAddSolverByNameEvent_ptr = FocusTrackingAddSolverByNameEvent::from_substruct(incoming_type_id, serialized);
		if (FocusTrackingAddSolverByNameEvent_ptr != nullptr) {
			return FocusTrackingAddSolverByNameEvent_ptr;
		}

		auto PickupBounceEvent_ptr = PickupBounceEvent::from_substruct(incoming_type_id, serialized);
		if (PickupBounceEvent_ptr != nullptr) {
			return PickupBounceEvent_ptr;
		}

		auto UIObjectivePingEvent_ptr = UIObjectivePingEvent::from_substruct(incoming_type_id, serialized);
		if (UIObjectivePingEvent_ptr != nullptr) {
			return UIObjectivePingEvent_ptr;
		}

		auto RefuelPadGaveFuelEvent_ptr = RefuelPadGaveFuelEvent::from_substruct(incoming_type_id, serialized);
		if (RefuelPadGaveFuelEvent_ptr != nullptr) {
			return RefuelPadGaveFuelEvent_ptr;
		}

		auto BouncyLaunchEvent_ptr = BouncyLaunchEvent::from_substruct(incoming_type_id, serialized);
		if (BouncyLaunchEvent_ptr != nullptr) {
			return BouncyLaunchEvent_ptr;
		}

		auto ActivityClueRequestOutroEvent_ptr = ActivityClueRequestOutroEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityClueRequestOutroEvent_ptr != nullptr) {
			return ActivityClueRequestOutroEvent_ptr;
		}

		auto ScreenResizedEvent_ptr = ScreenResizedEvent::from_substruct(incoming_type_id, serialized);
		if (ScreenResizedEvent_ptr != nullptr) {
			return ScreenResizedEvent_ptr;
		}

		auto StartJumpEvent_ptr = StartJumpEvent::from_substruct(incoming_type_id, serialized);
		if (StartJumpEvent_ptr != nullptr) {
			return StartJumpEvent_ptr;
		}

		auto EndMissionDevstatsEvent_ptr = EndMissionDevstatsEvent::from_substruct(incoming_type_id, serialized);
		if (EndMissionDevstatsEvent_ptr != nullptr) {
			return EndMissionDevstatsEvent_ptr;
		}

		auto ClankPackHydropackActiveEndEvent_ptr = ClankPackHydropackActiveEndEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPackHydropackActiveEndEvent_ptr != nullptr) {
			return ClankPackHydropackActiveEndEvent_ptr;
		}

		auto AwardVanityBundleStatusEvent_ptr = AwardVanityBundleStatusEvent::from_substruct(incoming_type_id, serialized);
		if (AwardVanityBundleStatusEvent_ptr != nullptr) {
			return AwardVanityBundleStatusEvent_ptr;
		}

		auto CameraProximityOffEvent_ptr = CameraProximityOffEvent::from_substruct(incoming_type_id, serialized);
		if (CameraProximityOffEvent_ptr != nullptr) {
			return CameraProximityOffEvent_ptr;
		}

		auto ShotSpawnedEvent_ptr = ShotSpawnedEvent::from_substruct(incoming_type_id, serialized);
		if (ShotSpawnedEvent_ptr != nullptr) {
			return ShotSpawnedEvent_ptr;
		}

		auto BotShootLaserEndPerfectTweakHeadingAnimEvent_ptr = BotShootLaserEndPerfectTweakHeadingAnimEvent::from_substruct(incoming_type_id, serialized);
		if (BotShootLaserEndPerfectTweakHeadingAnimEvent_ptr != nullptr) {
			return BotShootLaserEndPerfectTweakHeadingAnimEvent_ptr;
		}

		auto UIJukeboxSelectEvent_ptr = UIJukeboxSelectEvent::from_substruct(incoming_type_id, serialized);
		if (UIJukeboxSelectEvent_ptr != nullptr) {
			return UIJukeboxSelectEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
