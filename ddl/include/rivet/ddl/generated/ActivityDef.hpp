// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ActivityDefBase.hpp>
#include <rivet/ddl/generated/enums/xca2817ca.hpp>
#include <rivet/ddl/generated/enums/xbd8d5c4d.hpp> 

namespace rivet::ddl::generated {
	struct ActivityReward;
	struct TaskDef; 

	struct RIVET_DDL_SHARED ActivityDef : ActivityDefBase {
		constexpr const static std::string_view type_name = "ActivityDef";
		constexpr const static rivet::rivet_type_id type_id = 0x5ed453fc;

		constexpr const static std::string_view Category_type_name = "Category";
		constexpr const static rivet::rivet_type_id Category_type_id = 0xfc4da4b1;
		constexpr const static std::string_view SubCategory_type_name = "SubCategory";
		constexpr const static rivet::rivet_type_id SubCategory_type_id = 0x797697c5;
		constexpr const static std::string_view LargeImagePath_type_name = "LargeImagePath";
		constexpr const static rivet::rivet_type_id LargeImagePath_type_id = 0xaae1bdcd;
		constexpr const static std::string_view SmallImagePath_type_name = "SmallImagePath";
		constexpr const static rivet::rivet_type_id SmallImagePath_type_id = 0xa4cf1f2e;
		constexpr const static std::string_view Rewards_type_name = "Rewards";
		constexpr const static rivet::rivet_type_id Rewards_type_id = 0xe8c87d0f;
		constexpr const static std::string_view Tasks_type_name = "Tasks";
		constexpr const static rivet::rivet_type_id Tasks_type_id = 0x490ba956; 

		explicit ActivityDef() = default;
		explicit ActivityDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xca2817ca Category {};
		rivet::ddl::generated::xbd8d5c4d SubCategory {};
		std::string_view LargeImagePath {};
		std::string_view SmallImagePath {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ActivityReward>> Rewards {};
		std::vector<std::shared_ptr<rivet::ddl::generated::TaskDef>> Tasks {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActivityDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
