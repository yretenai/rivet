// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ScriptedShotEffectBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED BounceShotEffectPrius : ScriptedShotEffectBasePrius {
		constexpr const static std::string_view type_name = "BounceShotEffectPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x3a27f907;

		constexpr const static std::string_view RollBounceScale_type_name = "RollBounceScale";
		constexpr const static rivet::rivet_type_id RollBounceScale_type_id = 0xc1e53f68;
		constexpr const static std::string_view FlatHitBounceScale_type_name = "FlatHitBounceScale";
		constexpr const static rivet::rivet_type_id FlatHitBounceScale_type_id = 0xd781f505;
		constexpr const static std::string_view ActorRollBounceScale_type_name = "ActorRollBounceScale";
		constexpr const static rivet::rivet_type_id ActorRollBounceScale_type_id = 0x188f7915;
		constexpr const static std::string_view ActorFlatHitBounceScale_type_name = "ActorFlatHitBounceScale";
		constexpr const static rivet::rivet_type_id ActorFlatHitBounceScale_type_id = 0x80ec6e1a;
		constexpr const static std::string_view ActorBounceGravity_type_name = "ActorBounceGravity";
		constexpr const static rivet::rivet_type_id ActorBounceGravity_type_id = 0xcb34d143;
		constexpr const static std::string_view MinVelocity_type_name = "MinVelocity";
		constexpr const static rivet::rivet_type_id MinVelocity_type_id = 0xe6c42512; 

		explicit BounceShotEffectPrius() = default;
		explicit BounceShotEffectPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float RollBounceScale {};
		float FlatHitBounceScale {};
		float ActorRollBounceScale {};
		float ActorFlatHitBounceScale {};
		float ActorBounceGravity {};
		float MinVelocity {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BounceShotEffectPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
