// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HeroBounceConfig : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "HeroBounceConfig";
		constexpr static rivet::rivet_type_id type_id = 0xca61313e;

		constexpr static std::string_view AssistMaxSurfaceNormalAngle_type_name = "AssistMaxSurfaceNormalAngle";
		constexpr static rivet::rivet_type_id AssistMaxSurfaceNormalAngle_type_id = 0xe855014a;
		constexpr static std::string_view AssistRadiusHoriz_type_name = "AssistRadiusHoriz";
		constexpr static rivet::rivet_type_id AssistRadiusHoriz_type_id = 0x2c9bc5ff;
		constexpr static std::string_view AssistRadiusVert_type_name = "AssistRadiusVert";
		constexpr static rivet::rivet_type_id AssistRadiusVert_type_id = 0x9c0cbd67;
		constexpr static std::string_view MinAssistDistHoriz_type_name = "MinAssistDistHoriz";
		constexpr static rivet::rivet_type_id MinAssistDistHoriz_type_id = 0x4ebbc239;
		constexpr static std::string_view MaxAngleAtMinAssistDist_type_name = "MaxAngleAtMinAssistDist";
		constexpr static rivet::rivet_type_id MaxAngleAtMinAssistDist_type_id = 0x4f3feb8b;
		constexpr static std::string_view MaxAngleAtMaxAssistDist_type_name = "MaxAngleAtMaxAssistDist";
		constexpr static rivet::rivet_type_id MaxAngleAtMaxAssistDist_type_id = 0xf7093fd;
		constexpr static std::string_view AssistAngleScoreWeight_type_name = "AssistAngleScoreWeight";
		constexpr static rivet::rivet_type_id AssistAngleScoreWeight_type_id = 0x582a1535;
		constexpr static std::string_view AssistDistScoreWeight_type_name = "AssistDistScoreWeight";
		constexpr static rivet::rivet_type_id AssistDistScoreWeight_type_id = 0x20e48ef7;
		constexpr static std::string_view AssistInputWeight_type_name = "AssistInputWeight";
		constexpr static rivet::rivet_type_id AssistInputWeight_type_id = 0x48416fc4;
		constexpr static std::string_view BonusHeightForButtonPress_type_name = "BonusHeightForButtonPress";
		constexpr static rivet::rivet_type_id BonusHeightForButtonPress_type_id = 0x5ae624ab;
		constexpr static std::string_view CameraShakeConfig_type_name = "CameraShakeConfig";
		constexpr static rivet::rivet_type_id CameraShakeConfig_type_id = 0xb610c5e4;
		constexpr static std::string_view BounceFollowCameraUserConfig_type_name = "BounceFollowCameraUserConfig";
		constexpr static rivet::rivet_type_id BounceFollowCameraUserConfig_type_id = 0xdeb68592;
		constexpr static std::string_view CasualBounceFollowCameraUserConfig_type_name = "CasualBounceFollowCameraUserConfig";
		constexpr static rivet::rivet_type_id CasualBounceFollowCameraUserConfig_type_id = 0x8189dc41;
		constexpr static std::string_view SuperBounceFollowCameraUserConfig_type_name = "SuperBounceFollowCameraUserConfig";
		constexpr static rivet::rivet_type_id SuperBounceFollowCameraUserConfig_type_id = 0x765fc190;
		constexpr static std::string_view CasualSuperBounceFollowCameraUserConfig_type_name = "CasualSuperBounceFollowCameraUserConfig";
		constexpr static rivet::rivet_type_id CasualSuperBounceFollowCameraUserConfig_type_id = 0x1c1b6707; 

		explicit HeroBounceConfig() = default;
		explicit HeroBounceConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float AssistMaxSurfaceNormalAngle {};
		float AssistRadiusHoriz {};
		float AssistRadiusVert {};
		float MinAssistDistHoriz {};
		float MaxAngleAtMinAssistDist {};
		float MaxAngleAtMaxAssistDist {};
		float AssistAngleScoreWeight {};
		float AssistDistScoreWeight {};
		float AssistInputWeight {};
		float BonusHeightForButtonPress {};
		std::string_view CameraShakeConfig {};
		std::string_view BounceFollowCameraUserConfig {};
		std::string_view CasualBounceFollowCameraUserConfig {};
		std::string_view SuperBounceFollowCameraUserConfig {};
		std::string_view CasualSuperBounceFollowCameraUserConfig {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroBounceConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
