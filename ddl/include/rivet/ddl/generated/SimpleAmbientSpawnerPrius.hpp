// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct SimpleSpawnActorAsset; 

	struct RIVET_DDL_SHARED SimpleAmbientSpawnerPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SimpleAmbientSpawnerPrius";
		constexpr static rivet::rivet_type_id type_id = 0xc99ab86d;

		constexpr static std::string_view StartEnabled_type_name = "StartEnabled";
		constexpr static rivet::rivet_type_id StartEnabled_type_id = 0x6f36ca8b;
		constexpr static std::string_view NumToSpawn_type_name = "NumToSpawn";
		constexpr static rivet::rivet_type_id NumToSpawn_type_id = 0xbf9d56a9;
		constexpr static std::string_view NumToSpawnImmed_type_name = "NumToSpawnImmed";
		constexpr static rivet::rivet_type_id NumToSpawnImmed_type_id = 0x8b32437b;
		constexpr static std::string_view SpawnTimeMin_type_name = "SpawnTimeMin";
		constexpr static rivet::rivet_type_id SpawnTimeMin_type_id = 0x8967291a;
		constexpr static std::string_view SpawnTimeMax_type_name = "SpawnTimeMax";
		constexpr static rivet::rivet_type_id SpawnTimeMax_type_id = 0xb56a1643;
		constexpr static std::string_view UsePlayerForward_type_name = "UsePlayerForward";
		constexpr static rivet::rivet_type_id UsePlayerForward_type_id = 0xe5c6e53b;
		constexpr static std::string_view AngleFromPlayerMin_type_name = "AngleFromPlayerMin";
		constexpr static rivet::rivet_type_id AngleFromPlayerMin_type_id = 0x6478809;
		constexpr static std::string_view AngleFromPlayerMax_type_name = "AngleFromPlayerMax";
		constexpr static rivet::rivet_type_id AngleFromPlayerMax_type_id = 0x3a4ab750;
		constexpr static std::string_view DistFromPlayerMin_type_name = "DistFromPlayerMin";
		constexpr static rivet::rivet_type_id DistFromPlayerMin_type_id = 0xb0b8ea99;
		constexpr static std::string_view DistFromPlayerMax_type_name = "DistFromPlayerMax";
		constexpr static rivet::rivet_type_id DistFromPlayerMax_type_id = 0x8cb5d5c0;
		constexpr static std::string_view SpawnActorList_type_name = "SpawnActorList";
		constexpr static rivet::rivet_type_id SpawnActorList_type_id = 0x347df393; 

		explicit SimpleAmbientSpawnerPrius() = default;
		explicit SimpleAmbientSpawnerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool StartEnabled {};
		float NumToSpawn {};
		uint8_t NumToSpawnImmed {};
		float SpawnTimeMin {};
		float SpawnTimeMax {};
		bool UsePlayerForward {};
		float AngleFromPlayerMin {};
		float AngleFromPlayerMax {};
		float DistFromPlayerMin {};
		float DistFromPlayerMax {};
		std::vector<std::shared_ptr<rivet::ddl::generated::SimpleSpawnActorAsset>> SpawnActorList {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleAmbientSpawnerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
