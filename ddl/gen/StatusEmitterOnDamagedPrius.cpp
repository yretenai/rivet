// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StatusEmitterOnDamagedPrius.hpp>

namespace rivet::ddl::generated {
	StatusEmitterOnDamagedPrius::StatusEmitterOnDamagedPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): StatusEmitterBasePrius(serialized) {
		DamageThreshold = serialized->get_float(DamageThreshold_type_id);
		ProcPercent = serialized->get_float(ProcPercent_type_id);
		DamageTypes = serialized->get_enums<rivet::ddl::generated::DamageTypes>(DamageTypes_type_id, rivet::ddl::generated::DamageTypes_values); 
	}

	[[nodiscard]] auto
	StatusEmitterOnDamagedPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StatusEmitterOnDamagedPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StatusEmitterOnDamagedPrius> {
		if (incoming_type_id == StatusEmitterOnDamagedPrius::type_id) {
			return std::make_shared<StatusEmitterOnDamagedPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
