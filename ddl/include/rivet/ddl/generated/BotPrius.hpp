// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/BotBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct ActorBotData;
	struct BotData;
	struct BotConfigData; 

	struct RIVET_DDL_SHARED BotPrius : BotBasePrius {
		constexpr static std::string_view type_name = "BotPrius";
		constexpr static rivet::rivet_type_id type_id = 0xc5c74c42;

		constexpr static std::string_view BotConfigData_type_name = "BotConfigData";
		constexpr static rivet::rivet_type_id BotConfigData_type_id = 0xb9a35604;
		constexpr static std::string_view BotData_type_name = "BotData";
		constexpr static rivet::rivet_type_id BotData_type_id = 0x59da994b;
		constexpr static std::string_view ActorBotData_type_name = "ActorBotData";
		constexpr static rivet::rivet_type_id ActorBotData_type_id = 0x5a76cf5a;
		constexpr static std::string_view AccessibilityHighlightAllyForNeutralAllegiance_type_name = "AccessibilityHighlightAllyForNeutralAllegiance";
		constexpr static rivet::rivet_type_id AccessibilityHighlightAllyForNeutralAllegiance_type_id = 0xe35f9ba0;
		constexpr static std::string_view AccessibilityMonitorAllegiance_type_name = "AccessibilityMonitorAllegiance";
		constexpr static rivet::rivet_type_id AccessibilityMonitorAllegiance_type_id = 0xf96960a8; 

		explicit BotPrius() = default;
		explicit BotPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::BotConfigData> BotConfigData {};
		std::shared_ptr<rivet::ddl::generated::BotData> BotData {};
		std::shared_ptr<rivet::ddl::generated::ActorBotData> ActorBotData {};
		bool AccessibilityHighlightAllyForNeutralAllegiance {};
		bool AccessibilityMonitorAllegiance {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
