// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LunaFtpProjectConfigFile.hpp>

namespace rivet::ddl::generated {
	LunaFtpProjectConfigFile::LunaFtpProjectConfigFile([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ProjectId = serialized->get_string(ProjectId_type_id);
		IgProject = serialized->get_string(IgProject_type_id);
		CodeName = serialized->get_string(CodeName_type_id);
		TitleName = serialized->get_string(TitleName_type_id);
		ProductionBranch = serialized->get_string(ProductionBranch_type_id);
		Platforms = serialized->get_bitset<rivet::ddl::generated::x5753f3c8>(Platforms_type_id, rivet::ddl::generated::x5753f3c8_values); 
	}

	[[nodiscard]] auto
	LunaFtpProjectConfigFile::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LunaFtpProjectConfigFile::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LunaFtpProjectConfigFile> {
		if (incoming_type_id == LunaFtpProjectConfigFile::type_id) {
			return std::make_shared<LunaFtpProjectConfigFile>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
