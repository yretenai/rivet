// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AssetCacheEntry.hpp>

namespace rivet::ddl::generated {
	AssetCacheEntry::AssetCacheEntry([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AssetPath = serialized->get_string(AssetPath_type_id, {});
		ErrorCode = serialized->get_int32(ErrorCode_type_id, 0);
		LastError = serialized->get_string(LastError_type_id, {});
		Size = serialized->get_int64(Size_type_id, 0);
		LastAccessed = serialized->get_int64(LastAccessed_type_id, 0);
		LastModified = serialized->get_int64(LastModified_type_id, 0);
		LastSaved = serialized->get_int64(LastSaved_type_id, 0); 
	}

	[[nodiscard]] auto
	AssetCacheEntry::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AssetCacheEntry::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AssetCacheEntry> {
		if (incoming_type_id == AssetCacheEntry::type_id) {
			return std::make_shared<AssetCacheEntry>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
