// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/EnvelopePointFloat.hpp> 

#include <rivet/ddl/generated/EnvelopeFloatDef.hpp>

namespace rivet::ddl::generated {
	EnvelopeFloatDef::EnvelopeFloatDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CanAddOrRemovePoints = serialized->get_bool(CanAddOrRemovePoints_type_id, false);
		MinX = serialized->get_float(MinX_type_id, -1000000.000000);
		MinY = serialized->get_float(MinY_type_id, -1000000.000000);
		MaxX = serialized->get_float(MaxX_type_id, 1000000.000000);
		MaxY = serialized->get_float(MaxY_type_id, 1000000.000000);
		VisibleMinX = serialized->get_float(VisibleMinX_type_id, -1000000.000000);
		VisibleMinY = serialized->get_float(VisibleMinY_type_id, -1000000.000000);
		VisibleMaxX = serialized->get_float(VisibleMaxX_type_id, 1000000.000000);
		VisibleMaxY = serialized->get_float(VisibleMaxY_type_id, 1000000.000000);
		DefaultPoints = serialized->get_field(DefaultPoints_type_id);
		Points = serialized->unwrap_into_many<rivet::ddl::generated::EnvelopePointFloat>(Points_type_id); 
	}

	[[nodiscard]] auto
	EnvelopeFloatDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	EnvelopeFloatDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EnvelopeFloatDef> {
		if (incoming_type_id == EnvelopeFloatDef::type_id) {
			return std::make_shared<EnvelopeFloatDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
