// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DecalExploderPrius.hpp>

namespace rivet::ddl::generated {
	DecalExploderPrius::DecalExploderPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CheckDistance = serialized->get_float(CheckDistance_type_id, 1.000000f);
		MaxAngle = serialized->get_float(MaxAngle_type_id, 180.000000f);
		UseDirection = serialized->get_enum<rivet::ddl::generated::xf356f148>(UseDirection_type_id, rivet::ddl::generated::xf356f148_values, rivet::ddl::generated::xf356f148::Down);
		MaxDecals = serialized->get_uint8(MaxDecals_type_id, 8u);
		DeathEventMustBeExplosive = serialized->get_bool(DeathEventMustBeExplosive_type_id, false);
		DriverEvents = serialized->get_bitset<rivet::ddl::generated::x27b34de0>(DriverEvents_type_id, rivet::ddl::generated::x27b34de0_values, 5u); 
	}

	[[nodiscard]] auto
	DecalExploderPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DecalExploderPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DecalExploderPrius> {
		if (incoming_type_id == DecalExploderPrius::type_id) {
			return std::make_shared<DecalExploderPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
