// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/SimplePromptPrius.hpp>

namespace rivet::ddl::generated {
	SimplePromptPrius::SimplePromptPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TriggerCount = serialized->get_uint32(TriggerCount_type_id);
		RetriggerDelay = serialized->get_float(RetriggerDelay_type_id);
		PromptText = serialized->get_string(PromptText_type_id);
		Tag = serialized->get_string(Tag_type_id);
		UseRange = serialized->get_float(UseRange_type_id);
		VolumeRange = serialized->get_bool(VolumeRange_type_id);
		AltPromptVolume = serialized->get_uint64(AltPromptVolume_type_id);
		PromptOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(PromptOffset_type_id);
		PromptAngleMin = serialized->get_float(PromptAngleMin_type_id);
		PromptAngleMax = serialized->get_float(PromptAngleMax_type_id);
		UsePOI = serialized->get_bool(UsePOI_type_id);
		POISubtype = serialized->get_enum<rivet::ddl::generated::x275d9b04>(POISubtype_type_id, rivet::ddl::generated::x275d9b04_values);
		PreviewRange = serialized->get_float(PreviewRange_type_id);
		StartActive = serialized->get_bool(StartActive_type_id);
		Priority = serialized->get_float(Priority_type_id); 
	}

	[[nodiscard]] auto
	SimplePromptPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SimplePromptPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimplePromptPrius> {
		if (incoming_type_id == SimplePromptPrius::type_id) {
			return std::make_shared<SimplePromptPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
