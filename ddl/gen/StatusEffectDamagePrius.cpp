// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StatusEffectDamagePrius.hpp>

namespace rivet::ddl::generated {
	StatusEffectDamagePrius::StatusEffectDamagePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): StatusEffectBasePrius(serialized) {
		DamageSelf = serialized->get_bool(DamageSelf_type_id, true);
		DamageFriends = serialized->get_bool(DamageFriends_type_id, true);
		LoS = serialized->get_bool(LoS_type_id, true);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values, rivet::ddl::generated::KnockbackLevels::None);
		Type = serialized->get_enum<rivet::ddl::generated::DamageTypes>(Type_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::None);
		DamageStartTimeRandom = serialized->get_bool(DamageStartTimeRandom_type_id, true);
		DamageLocator = serialized->get_string(DamageLocator_type_id, {});
		IgnoreActor = serialized->get_uint64(IgnoreActor_type_id, 0ull); 
	}

	[[nodiscard]] auto
	StatusEffectDamagePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StatusEffectDamagePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StatusEffectDamagePrius> {
		if (incoming_type_id == StatusEffectDamagePrius::type_id) {
			return std::make_shared<StatusEffectDamagePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
