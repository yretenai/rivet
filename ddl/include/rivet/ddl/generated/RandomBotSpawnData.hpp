// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ActorSpawnData.hpp> 

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED RandomBotSpawnData : ActorSpawnData {
		constexpr static std::string_view type_name = "RandomBotSpawnData";
		constexpr static rivet::rivet_type_id type_id = 0x8b876ba0;

		constexpr static std::string_view SpawnPoint_type_name = "SpawnPoint";
		constexpr static rivet::rivet_type_id SpawnPoint_type_id = 0x6257c096;
		constexpr static std::string_view EncounterControllerActor_type_name = "EncounterControllerActor";
		constexpr static rivet::rivet_type_id EncounterControllerActor_type_id = 0x6e3df2af;
		constexpr static std::string_view HomeArea_type_name = "HomeArea";
		constexpr static rivet::rivet_type_id HomeArea_type_id = 0x52894ce8;
		constexpr static std::string_view BotAssetId_type_name = "BotAssetId";
		constexpr static rivet::rivet_type_id BotAssetId_type_id = 0xa3b23e10; 

		explicit RandomBotSpawnData() = default;
		explicit RandomBotSpawnData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::DDLVector3> SpawnPoint {};
		uint32_t EncounterControllerActor {};
		uint32_t HomeArea {};
		uint64_t BotAssetId {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RandomBotSpawnData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
