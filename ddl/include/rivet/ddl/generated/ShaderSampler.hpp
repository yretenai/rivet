// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct MaterialNodeInputVisibilityCondition; 

	struct RIVET_DDL_SHARED ShaderSampler : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ShaderSampler";
		constexpr static rivet::rivet_type_id type_id = 0x94fe905c;

		constexpr static std::string_view SourcePath_type_name = "SourcePath";
		constexpr static rivet::rivet_type_id SourcePath_type_id = 0x6ccf66b3;
		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view DisplayName_type_name = "DisplayName";
		constexpr static rivet::rivet_type_id DisplayName_type_id = 0xeaf33243;
		constexpr static std::string_view InputInternalName_type_name = "InputInternalName";
		constexpr static rivet::rivet_type_id InputInternalName_type_id = 0xaa785586;
		constexpr static std::string_view Description_type_name = "Description";
		constexpr static rivet::rivet_type_id Description_type_id = 0xe03811fd;
		constexpr static std::string_view Group_type_name = "Group";
		constexpr static rivet::rivet_type_id Group_type_id = 0x74938804;
		constexpr static std::string_view SortOrder_type_name = "SortOrder";
		constexpr static rivet::rivet_type_id SortOrder_type_id = 0xbd9f03f1;
		constexpr static std::string_view SubGraphAncestors_type_name = "SubGraphAncestors";
		constexpr static rivet::rivet_type_id SubGraphAncestors_type_id = 0xaa160e78;
		constexpr static std::string_view HWRegister_type_name = "HWRegister";
		constexpr static rivet::rivet_type_id HWRegister_type_id = 0x2f12a35f;
		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view Exposed_type_name = "Exposed";
		constexpr static rivet::rivet_type_id Exposed_type_id = 0x3c0cbb98;
		constexpr static std::string_view DeveloperMode_type_name = "DeveloperMode";
		constexpr static rivet::rivet_type_id DeveloperMode_type_id = 0xfd8c5200;
		constexpr static std::string_view VisibilityCondition_type_name = "VisibilityCondition";
		constexpr static rivet::rivet_type_id VisibilityCondition_type_id = 0x10b37a44; 

		explicit ShaderSampler() = default;
		explicit ShaderSampler([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view SourcePath {};
		std::string_view Name {};
		std::string_view DisplayName {};
		std::string_view InputInternalName {};
		std::string_view Description {};
		std::string_view Group {};
		std::string_view SortOrder {};
		std::string_view SubGraphAncestors {};
		uint32_t HWRegister {};
		uint32_t Type {};
		bool Exposed {};
		bool DeveloperMode {};
		std::shared_ptr<rivet::ddl::generated::MaterialNodeInputVisibilityCondition> VisibilityCondition {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShaderSampler>;
	};
} // namespace rivet::ddl::generated

// clang-format on
