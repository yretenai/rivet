// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ComponentEmitterBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ComponentEmitterMultiLocatorGamePrius : ComponentEmitterBasePrius {
		constexpr const static std::string_view type_name = "ComponentEmitterMultiLocatorGamePrius";
		constexpr const static rivet::rivet_type_id type_id = 0x1ff647ba;

		constexpr const static std::string_view DefaultLocators_type_name = "DefaultLocators";
		constexpr const static rivet::rivet_type_id DefaultLocators_type_id = 0xba29f75f;
		constexpr const static std::string_view UpgradedLocators_type_name = "UpgradedLocators";
		constexpr const static rivet::rivet_type_id UpgradedLocators_type_id = 0x2fe7ad2; 

		explicit ComponentEmitterMultiLocatorGamePrius() = default;
		explicit ComponentEmitterMultiLocatorGamePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::string_view> DefaultLocators {};
		std::vector<std::string_view> UpgradedLocators {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ComponentEmitterMultiLocatorGamePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
