// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct EventBase; 

	struct RIVET_DDL_SHARED EventMeterPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "EventMeterPrius";
		constexpr static rivet::rivet_type_id type_id = 0xc4c1c584;

		constexpr static std::string_view Event_type_name = "Event";
		constexpr static rivet::rivet_type_id Event_type_id = 0x22fdc666;
		constexpr static std::string_view Radius_type_name = "Radius";
		constexpr static rivet::rivet_type_id Radius_type_id = 0x504203d;
		constexpr static std::string_view IncrementPerEvent_type_name = "IncrementPerEvent";
		constexpr static rivet::rivet_type_id IncrementPerEvent_type_id = 0xc3d652cd;
		constexpr static std::string_view DecayPerSecond_type_name = "DecayPerSecond";
		constexpr static rivet::rivet_type_id DecayPerSecond_type_id = 0x505b2319;
		constexpr static std::string_view SelfEventsOnly_type_name = "SelfEventsOnly";
		constexpr static rivet::rivet_type_id SelfEventsOnly_type_id = 0x64ce7324;
		constexpr static std::string_view OnlyFromSenderHandle_type_name = "OnlyFromSenderHandle";
		constexpr static rivet::rivet_type_id OnlyFromSenderHandle_type_id = 0x5a63f26a; 

		explicit EventMeterPrius() = default;
		explicit EventMeterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::EventBase> Event {};
		float Radius {};
		float IncrementPerEvent {};
		float DecayPerSecond {};
		bool SelfEventsOnly {};
		uint32_t OnlyFromSenderHandle {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EventMeterPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
