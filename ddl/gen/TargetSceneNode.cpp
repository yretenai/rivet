// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/TargetSceneNode.hpp>

namespace rivet::ddl::generated {
	TargetSceneNode::TargetSceneNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id, 0);
		AssetPath = serialized->get_string(AssetPath_type_id, {});
		AdjustCamera = serialized->get_bool(AdjustCamera_type_id, false);
		OldCameraPosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(OldCameraPosition_type_id);
		OldCameraForward = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(OldCameraForward_type_id);
		NewCameraPosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(NewCameraPosition_type_id);
		NewCameraForward = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(NewCameraForward_type_id);
		PreviousSelection = serialized->get_uint64(PreviousSelection_type_id, 0); 
	}

	[[nodiscard]] auto
	TargetSceneNode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TargetSceneNode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TargetSceneNode> {
		if (incoming_type_id == TargetSceneNode::type_id) {
			return std::make_shared<TargetSceneNode>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
