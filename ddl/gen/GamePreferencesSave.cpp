// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GamePreferencesSave.hpp>

namespace rivet::ddl::generated {
	GamePreferencesSave::GamePreferencesSave([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): PreferencesSave(serialized) {
		PerfSpec = serialized->get_enum<rivet::ddl::generated::x11adfe43>(PerfSpec_type_id, rivet::ddl::generated::x11adfe43_values);
		FlyerStickOption = serialized->get_enum<rivet::ddl::generated::FlyerCameraStickOption>(FlyerStickOption_type_id, rivet::ddl::generated::FlyerCameraStickOption_values);
		SubtitleSizeIndex = serialized->get_uint32(SubtitleSizeIndex_type_id);
		SubtitleSpeakerColor = serialized->get_string(SubtitleSpeakerColor_type_id);
		SubtitleTextColor = serialized->get_string(SubtitleTextColor_type_id);
		SubtitleBackgroundColor = serialized->get_string(SubtitleBackgroundColor_type_id);
		EmphasisColor = serialized->get_string(EmphasisColor_type_id);
		AimArcColor = serialized->get_string(AimArcColor_type_id);
		TargetArcColor = serialized->get_string(TargetArcColor_type_id);
		ControllerSpeakerMode = serialized->get_enum<rivet::ddl::generated::x477e8a6a>(ControllerSpeakerMode_type_id, rivet::ddl::generated::x477e8a6a_values);
		RumbleMode = serialized->get_enum<rivet::ddl::generated::x8f9b9ab2>(RumbleMode_type_id, rivet::ddl::generated::x8f9b9ab2_values);
		FollowCameraMode = serialized->get_enum<rivet::ddl::generated::xde3cdb81>(FollowCameraMode_type_id, rivet::ddl::generated::xde3cdb81_values);
		FireMode = serialized->get_enum<rivet::ddl::generated::FireMode>(FireMode_type_id, rivet::ddl::generated::FireMode_values);
		AdaptiveTriggerMode = serialized->get_enum<rivet::ddl::generated::AdaptiveTriggerMode>(AdaptiveTriggerMode_type_id, rivet::ddl::generated::AdaptiveTriggerMode_values);
		AccessibilityShadersOutline = serialized->get_string(AccessibilityShadersOutline_type_id);
		HeroAccessibilityShader = serialized->get_string(HeroAccessibilityShader_type_id);
		AllyAccessibilityShader = serialized->get_string(AllyAccessibilityShader_type_id);
		EnemyAccessibilityShader = serialized->get_string(EnemyAccessibilityShader_type_id);
		BossAccessibilityShader = serialized->get_string(BossAccessibilityShader_type_id);
		HazardAccessibilityShader = serialized->get_string(HazardAccessibilityShader_type_id);
		InteractAccessibilityShader = serialized->get_string(InteractAccessibilityShader_type_id);
		CollectableAccessibilityShader = serialized->get_string(CollectableAccessibilityShader_type_id);
		HeroAccessibilityShaderCustom = serialized->get_string(HeroAccessibilityShaderCustom_type_id);
		AllyAccessibilityShaderCustom = serialized->get_string(AllyAccessibilityShaderCustom_type_id);
		EnemyAccessibilityShaderCustom = serialized->get_string(EnemyAccessibilityShaderCustom_type_id);
		BossAccessibilityShaderCustom = serialized->get_string(BossAccessibilityShaderCustom_type_id);
		HazardAccessibilityShaderCustom = serialized->get_string(HazardAccessibilityShaderCustom_type_id);
		InteractAccessibilityShaderCustom = serialized->get_string(InteractAccessibilityShaderCustom_type_id);
		CollectableAccessibilityShaderCustom = serialized->get_string(CollectableAccessibilityShaderCustom_type_id);
		AccessibilityContrastOptions = serialized->get_uint32(AccessibilityContrastOptions_type_id);
		AccessibilityButtonActionUp = serialized->get_enum<rivet::ddl::generated::x847316cf>(AccessibilityButtonActionUp_type_id, rivet::ddl::generated::x847316cf_values);
		AccessibilityButtonActionRight = serialized->get_enum<rivet::ddl::generated::x847316cf>(AccessibilityButtonActionRight_type_id, rivet::ddl::generated::x847316cf_values);
		AccessibilityButtonActionDown = serialized->get_enum<rivet::ddl::generated::x847316cf>(AccessibilityButtonActionDown_type_id, rivet::ddl::generated::x847316cf_values);
		AccessibilityButtonActionLeft = serialized->get_enum<rivet::ddl::generated::x847316cf>(AccessibilityButtonActionLeft_type_id, rivet::ddl::generated::x847316cf_values); 
	}

	[[nodiscard]] auto
	GamePreferencesSave::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GamePreferencesSave::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GamePreferencesSave> {
		if (incoming_type_id == GamePreferencesSave::type_id) {
			return std::make_shared<GamePreferencesSave>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
