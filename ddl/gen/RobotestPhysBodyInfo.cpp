// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLTransform.hpp> 

#include <rivet/ddl/generated/RobotestPhysBodyInfo.hpp>

namespace rivet::ddl::generated {
	RobotestPhysBodyInfo::RobotestPhysBodyInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BodyId = serialized->get_uint32(BodyId_type_id, 0u);
		BodyFlags = serialized->get_uint32(BodyFlags_type_id, 0u);
		IsActive = serialized->get_bool(IsActive_type_id, false);
		IsDynamic = serialized->get_bool(IsDynamic_type_id, false);
		IsKeyFramed = serialized->get_bool(IsKeyFramed_type_id, false);
		IsStatic = serialized->get_bool(IsStatic_type_id, false);
		CollisionFilterWord = serialized->get_uint32(CollisionFilterWord_type_id, 0u);
		MaterialId = serialized->get_uint16(MaterialId_type_id, 0u);
		Transform = serialized->unwrap_into<rivet::ddl::generated::DDLTransform>(Transform_type_id); 
	}

	[[nodiscard]] auto
	RobotestPhysBodyInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RobotestPhysBodyInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RobotestPhysBodyInfo> {
		if (incoming_type_id == RobotestPhysBodyInfo::type_id) {
			return std::make_shared<RobotestPhysBodyInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
