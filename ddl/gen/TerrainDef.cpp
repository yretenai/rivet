// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RenderOverrides.hpp>
#include <rivet/ddl/generated/NavigationProperties.hpp>
#include <rivet/ddl/generated/TerrainLayer.hpp>
#include <rivet/ddl/generated/VaultMetaData.hpp> 

#include <rivet/ddl/generated/TerrainDef.hpp>

namespace rivet::ddl::generated {
	TerrainDef::TerrainDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VaultMetaData = serialized->unwrap_into<rivet::ddl::generated::VaultMetaData>(VaultMetaData_type_id);
		IconPath = serialized->get_string(IconPath_type_id);
		HeightField = serialized->get_string(HeightField_type_id);
		HeightFieldPaint = serialized->get_string(HeightFieldPaint_type_id);
		SplatMask1 = serialized->get_string(SplatMask1_type_id);
		SplatMask2 = serialized->get_string(SplatMask2_type_id);
		SplatMaskPaint1 = serialized->get_string(SplatMaskPaint1_type_id);
		SplatMaskPaint2 = serialized->get_string(SplatMaskPaint2_type_id);
		SplatMaskPaintDcc = serialized->get_string(SplatMaskPaintDcc_type_id);
		VistaMap = serialized->get_string(VistaMap_type_id);
		Material = serialized->get_string(Material_type_id);
		Height = serialized->get_float(Height_type_id);
		EnableDetailDisplacement = serialized->get_bool(EnableDetailDisplacement_type_id);
		Layers = serialized->unwrap_into_many<rivet::ddl::generated::TerrainLayer>(Layers_type_id);
		NavProperties = serialized->unwrap_into<rivet::ddl::generated::NavigationProperties>(NavProperties_type_id);
		RenderOverrides = serialized->unwrap_into<rivet::ddl::generated::RenderOverrides>(RenderOverrides_type_id);
		ScatterNodeId = serialized->get_uint64(ScatterNodeId_type_id); 
	}

	[[nodiscard]] auto
	TerrainDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TerrainDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TerrainDef> {
		if (incoming_type_id == TerrainDef::type_id) {
			return std::make_shared<TerrainDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
