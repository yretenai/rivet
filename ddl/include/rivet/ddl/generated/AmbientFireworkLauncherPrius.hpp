// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AmbientFireworkLauncherPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AmbientFireworkLauncherPrius";
		constexpr static rivet::rivet_type_id type_id = 0xaf7c4893;

		constexpr static std::string_view MinHeight_type_name = "MinHeight";
		constexpr static rivet::rivet_type_id MinHeight_type_id = 0x9ed620e3;
		constexpr static std::string_view MaxHeight_type_name = "MaxHeight";
		constexpr static rivet::rivet_type_id MaxHeight_type_id = 0x493d92a2;
		constexpr static std::string_view AngleDelta_type_name = "AngleDelta";
		constexpr static rivet::rivet_type_id AngleDelta_type_id = 0xcd99342d;
		constexpr static std::string_view NumFires_type_name = "NumFires";
		constexpr static rivet::rivet_type_id NumFires_type_id = 0x471625a2;
		constexpr static std::string_view MinFireWait_type_name = "MinFireWait";
		constexpr static rivet::rivet_type_id MinFireWait_type_id = 0xde342be8;
		constexpr static std::string_view MaxFireWait_type_name = "MaxFireWait";
		constexpr static rivet::rivet_type_id MaxFireWait_type_id = 0x123950e7;
		constexpr static std::string_view ShotConfig_type_name = "ShotConfig";
		constexpr static rivet::rivet_type_id ShotConfig_type_id = 0xb171e6ae;
		constexpr static std::string_view LaunchLoc_type_name = "LaunchLoc";
		constexpr static rivet::rivet_type_id LaunchLoc_type_id = 0x211229ce; 

		explicit AmbientFireworkLauncherPrius() = default;
		explicit AmbientFireworkLauncherPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MinHeight {};
		float MaxHeight {};
		float AngleDelta {};
		uint32_t NumFires {};
		float MinFireWait {};
		float MaxFireWait {};
		std::string_view ShotConfig {};
		std::string_view LaunchLoc {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AmbientFireworkLauncherPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
