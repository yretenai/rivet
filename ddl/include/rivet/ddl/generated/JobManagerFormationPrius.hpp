// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED JobManagerFormationPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "JobManagerFormationPrius";
		constexpr static rivet::rivet_type_id type_id = 0x3780fe07;

		constexpr static std::string_view ExclusionVolumeGroup_type_name = "ExclusionVolumeGroup";
		constexpr static rivet::rivet_type_id ExclusionVolumeGroup_type_id = 0xf810ef74;
		constexpr static std::string_view MasterBoundsVolume_type_name = "MasterBoundsVolume";
		constexpr static rivet::rivet_type_id MasterBoundsVolume_type_id = 0x924c39fe;
		constexpr static std::string_view OverrideTarget_type_name = "OverrideTarget";
		constexpr static rivet::rivet_type_id OverrideTarget_type_id = 0x2a56c4ff;
		constexpr static std::string_view IsCameraBased_type_name = "IsCameraBased";
		constexpr static rivet::rivet_type_id IsCameraBased_type_id = 0xb3039531;
		constexpr static std::string_view MinTimeBetweenFormations_type_name = "MinTimeBetweenFormations";
		constexpr static rivet::rivet_type_id MinTimeBetweenFormations_type_id = 0x5a41ef7;
		constexpr static std::string_view IsTurretBased_type_name = "IsTurretBased";
		constexpr static rivet::rivet_type_id IsTurretBased_type_id = 0xeeeee111;
		constexpr static std::string_view TurretActor_type_name = "TurretActor";
		constexpr static rivet::rivet_type_id TurretActor_type_id = 0x824b5051;
		constexpr static std::string_view EdgeAngle_type_name = "EdgeAngle";
		constexpr static rivet::rivet_type_id EdgeAngle_type_id = 0x37eb909a; 

		explicit JobManagerFormationPrius() = default;
		explicit JobManagerFormationPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t ExclusionVolumeGroup {};
		uint64_t MasterBoundsVolume {};
		uint64_t OverrideTarget {};
		bool IsCameraBased {};
		float MinTimeBetweenFormations {};
		bool IsTurretBased {};
		uint64_t TurretActor {};
		float EdgeAngle {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<JobManagerFormationPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
