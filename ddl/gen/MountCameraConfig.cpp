// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FollowCameraUserConfig.hpp>
#include <rivet/ddl/generated/SpeedDependentCameraConfigData.hpp>
#include <rivet/ddl/generated/StateDependentCameraConfigData.hpp> 

#include <rivet/ddl/generated/MountCameraConfig.hpp>

namespace rivet::ddl::generated {
	MountCameraConfig::MountCameraConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		StateDependentCameraData = serialized->unwrap_into_many<rivet::ddl::generated::StateDependentCameraConfigData>(StateDependentCameraData_type_id);
		SpeedDependentCameraData = serialized->unwrap_into_many<rivet::ddl::generated::SpeedDependentCameraConfigData>(SpeedDependentCameraData_type_id);
		FollowCameraConfig = serialized->unwrap_into<rivet::ddl::generated::FollowCameraUserConfig>(FollowCameraConfig_type_id);
		CameraUpIsUserUp = serialized->get_bool(CameraUpIsUserUp_type_id, false);
		EnableRotateAroundCollision = serialized->get_bool(EnableRotateAroundCollision_type_id, true);
		AlwaysShowReticle = serialized->get_bool(AlwaysShowReticle_type_id, false);
		UseMoveStickAsInput = serialized->get_bool(UseMoveStickAsInput_type_id, false); 
	}

	[[nodiscard]] auto
	MountCameraConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MountCameraConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MountCameraConfig> {
		if (incoming_type_id == MountCameraConfig::type_id) {
			return std::make_shared<MountCameraConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
