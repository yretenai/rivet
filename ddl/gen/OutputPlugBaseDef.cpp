// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SyncOutputPlugBoolean.hpp>
#include <rivet/ddl/generated/OutputPlugSignal.hpp>
#include <rivet/ddl/generated/OutputPlugFloat.hpp>
#include <rivet/ddl/generated/OutputPlugInt.hpp>
#include <rivet/ddl/generated/OutputPlugVec3.hpp>
#include <rivet/ddl/generated/OutputPlugBoolean.hpp>
#include <rivet/ddl/generated/OutputPlugStringHash.hpp>
#include <rivet/ddl/generated/OutputPlugString.hpp>
#include <rivet/ddl/generated/OutputPlugUInt.hpp>
#include <rivet/ddl/generated/OutputPlugEventInitialization.hpp>
#include <rivet/ddl/generated/OutputPlugActor.hpp>
#include <rivet/ddl/generated/OutputPlugWeaponMacroType.hpp> 

#include <rivet/ddl/generated/OutputPlugBaseDef.hpp>

namespace rivet::ddl::generated {
	OutputPlugBaseDef::OutputPlugBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): NodeGraphItemDef(serialized) {

	}

	[[nodiscard]] auto
	OutputPlugBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	OutputPlugBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OutputPlugBaseDef> {
		if (incoming_type_id == OutputPlugBaseDef::type_id) {
			return std::make_shared<OutputPlugBaseDef>(serialized);
		}

		auto OutputPlugWeaponMacroType_ptr = OutputPlugWeaponMacroType::from_substruct(incoming_type_id, serialized);
		if (OutputPlugWeaponMacroType_ptr != nullptr) {
			return OutputPlugWeaponMacroType_ptr;
		}

		auto OutputPlugEventInitialization_ptr = OutputPlugEventInitialization::from_substruct(incoming_type_id, serialized);
		if (OutputPlugEventInitialization_ptr != nullptr) {
			return OutputPlugEventInitialization_ptr;
		}

		auto OutputPlugUInt_ptr = OutputPlugUInt::from_substruct(incoming_type_id, serialized);
		if (OutputPlugUInt_ptr != nullptr) {
			return OutputPlugUInt_ptr;
		}

		auto OutputPlugString_ptr = OutputPlugString::from_substruct(incoming_type_id, serialized);
		if (OutputPlugString_ptr != nullptr) {
			return OutputPlugString_ptr;
		}

		auto OutputPlugBoolean_ptr = OutputPlugBoolean::from_substruct(incoming_type_id, serialized);
		if (OutputPlugBoolean_ptr != nullptr) {
			return OutputPlugBoolean_ptr;
		}

		auto OutputPlugVec3_ptr = OutputPlugVec3::from_substruct(incoming_type_id, serialized);
		if (OutputPlugVec3_ptr != nullptr) {
			return OutputPlugVec3_ptr;
		}

		auto OutputPlugInt_ptr = OutputPlugInt::from_substruct(incoming_type_id, serialized);
		if (OutputPlugInt_ptr != nullptr) {
			return OutputPlugInt_ptr;
		}

		auto OutputPlugSignal_ptr = OutputPlugSignal::from_substruct(incoming_type_id, serialized);
		if (OutputPlugSignal_ptr != nullptr) {
			return OutputPlugSignal_ptr;
		}

		auto OutputPlugFloat_ptr = OutputPlugFloat::from_substruct(incoming_type_id, serialized);
		if (OutputPlugFloat_ptr != nullptr) {
			return OutputPlugFloat_ptr;
		}

		auto OutputPlugStringHash_ptr = OutputPlugStringHash::from_substruct(incoming_type_id, serialized);
		if (OutputPlugStringHash_ptr != nullptr) {
			return OutputPlugStringHash_ptr;
		}

		auto OutputPlugActor_ptr = OutputPlugActor::from_substruct(incoming_type_id, serialized);
		if (OutputPlugActor_ptr != nullptr) {
			return OutputPlugActor_ptr;
		}

		auto SyncOutputPlugBoolean_ptr = SyncOutputPlugBoolean::from_substruct(incoming_type_id, serialized);
		if (SyncOutputPlugBoolean_ptr != nullptr) {
			return SyncOutputPlugBoolean_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
