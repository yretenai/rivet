// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/DynamicInstanceItem.hpp>

namespace rivet::ddl::generated {
	DynamicInstanceItem::DynamicInstanceItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		InstanceAsset = serialized->get_string(InstanceAsset_type_id, {});
		InstanceOnEndpoints = serialized->get_bool(InstanceOnEndpoints_type_id, false);
		InstanceProbability = serialized->get_float(InstanceProbability_type_id, 1.000000);
		InstanceScaleVariation = serialized->get_float(InstanceScaleVariation_type_id, 0.000000);
		InstanceDistance = serialized->get_float(InstanceDistance_type_id, 0.000000);
		InstanceOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(InstanceOffset_type_id);
		InstanceOffsetVariation = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(InstanceOffsetVariation_type_id);
		InstanceRotation = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(InstanceRotation_type_id);
		InstanceRotationVariation = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(InstanceRotationVariation_type_id);
		InstanceRandomRotation = serialized->get_bool(InstanceRandomRotation_type_id, false);
		InstanceOrientation = serialized->get_enum<rivet::ddl::generated::xc34e772f>(InstanceOrientation_type_id, rivet::ddl::generated::xc34e772f_values, rivet::ddl::generated::xc34e772f::Along_Curve); 
	}

	[[nodiscard]] auto
	DynamicInstanceItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DynamicInstanceItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DynamicInstanceItem> {
		if (incoming_type_id == DynamicInstanceItem::type_id) {
			return std::make_shared<DynamicInstanceItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
