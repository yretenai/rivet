// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MagShieldSpawnData.hpp>
#include <rivet/ddl/generated/DDLTransform.hpp>
#include <rivet/ddl/generated/TopiaryBlasterSprinklerSpawnData.hpp>
#include <rivet/ddl/generated/PlasmaSphereSpawnData.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/AcidSprinklerSpawnData.hpp>
#include <rivet/ddl/generated/HoloDecoySpawnData.hpp>
#include <rivet/ddl/generated/IcicleBlastCloudSpawnData.hpp>
#include <rivet/ddl/generated/VolcanicEruptorGeyserSpawnData.hpp>
#include <rivet/ddl/generated/ShockwaveSpawnData.hpp>
#include <rivet/ddl/generated/MagnaMissileSpawnData.hpp>
#include <rivet/ddl/generated/PulseMineSpawnData.hpp>
#include <rivet/ddl/generated/HoverTurretSpawnData.hpp>
#include <rivet/ddl/generated/ProximityMineSpawnData.hpp>
#include <rivet/ddl/generated/NailGunPlantedShotSpawnData.hpp>
#include <rivet/ddl/generated/SargassoCentipedeAODSpawnData.hpp> 

#include <rivet/ddl/generated/AttachableShotSpawnData.hpp>

namespace rivet::ddl::generated {
	AttachableShotSpawnData::AttachableShotSpawnData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ActorSpawnData(serialized) {
		ShotOwner = serialized->get_uint32(ShotOwner_type_id);
		AssetId = serialized->get_uint64(AssetId_type_id);
		WeaponId = serialized->get_uint32(WeaponId_type_id);
		SpawnTime = serialized->get_float(SpawnTime_type_id);
		VersionIndex = serialized->get_uint8(VersionIndex_type_id);
		AttachActor = serialized->get_uint32(AttachActor_type_id);
		AttachJoint = serialized->get_int32(AttachJoint_type_id);
		RelativeMatrix = serialized->unwrap_into<rivet::ddl::generated::DDLTransform>(RelativeMatrix_type_id);
		RelativeNormal = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(RelativeNormal_type_id);
		AttachMaterial = serialized->get_int32(AttachMaterial_type_id); 
	}

	[[nodiscard]] auto
	AttachableShotSpawnData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AttachableShotSpawnData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AttachableShotSpawnData> {
		if (incoming_type_id == AttachableShotSpawnData::type_id) {
			return std::make_shared<AttachableShotSpawnData>(serialized);
		}

		auto VolcanicEruptorGeyserSpawnData_ptr = VolcanicEruptorGeyserSpawnData::from_substruct(incoming_type_id, serialized);
		if (VolcanicEruptorGeyserSpawnData_ptr != nullptr) {
			return VolcanicEruptorGeyserSpawnData_ptr;
		}

		auto HoloDecoySpawnData_ptr = HoloDecoySpawnData::from_substruct(incoming_type_id, serialized);
		if (HoloDecoySpawnData_ptr != nullptr) {
			return HoloDecoySpawnData_ptr;
		}

		auto AcidSprinklerSpawnData_ptr = AcidSprinklerSpawnData::from_substruct(incoming_type_id, serialized);
		if (AcidSprinklerSpawnData_ptr != nullptr) {
			return AcidSprinklerSpawnData_ptr;
		}

		auto PulseMineSpawnData_ptr = PulseMineSpawnData::from_substruct(incoming_type_id, serialized);
		if (PulseMineSpawnData_ptr != nullptr) {
			return PulseMineSpawnData_ptr;
		}

		auto HoverTurretSpawnData_ptr = HoverTurretSpawnData::from_substruct(incoming_type_id, serialized);
		if (HoverTurretSpawnData_ptr != nullptr) {
			return HoverTurretSpawnData_ptr;
		}

		auto NailGunPlantedShotSpawnData_ptr = NailGunPlantedShotSpawnData::from_substruct(incoming_type_id, serialized);
		if (NailGunPlantedShotSpawnData_ptr != nullptr) {
			return NailGunPlantedShotSpawnData_ptr;
		}

		auto IcicleBlastCloudSpawnData_ptr = IcicleBlastCloudSpawnData::from_substruct(incoming_type_id, serialized);
		if (IcicleBlastCloudSpawnData_ptr != nullptr) {
			return IcicleBlastCloudSpawnData_ptr;
		}

		auto ProximityMineSpawnData_ptr = ProximityMineSpawnData::from_substruct(incoming_type_id, serialized);
		if (ProximityMineSpawnData_ptr != nullptr) {
			return ProximityMineSpawnData_ptr;
		}

		auto ShockwaveSpawnData_ptr = ShockwaveSpawnData::from_substruct(incoming_type_id, serialized);
		if (ShockwaveSpawnData_ptr != nullptr) {
			return ShockwaveSpawnData_ptr;
		}

		auto SargassoCentipedeAODSpawnData_ptr = SargassoCentipedeAODSpawnData::from_substruct(incoming_type_id, serialized);
		if (SargassoCentipedeAODSpawnData_ptr != nullptr) {
			return SargassoCentipedeAODSpawnData_ptr;
		}

		auto MagnaMissileSpawnData_ptr = MagnaMissileSpawnData::from_substruct(incoming_type_id, serialized);
		if (MagnaMissileSpawnData_ptr != nullptr) {
			return MagnaMissileSpawnData_ptr;
		}

		auto MagShieldSpawnData_ptr = MagShieldSpawnData::from_substruct(incoming_type_id, serialized);
		if (MagShieldSpawnData_ptr != nullptr) {
			return MagShieldSpawnData_ptr;
		}

		auto PlasmaSphereSpawnData_ptr = PlasmaSphereSpawnData::from_substruct(incoming_type_id, serialized);
		if (PlasmaSphereSpawnData_ptr != nullptr) {
			return PlasmaSphereSpawnData_ptr;
		}

		auto TopiaryBlasterSprinklerSpawnData_ptr = TopiaryBlasterSprinklerSpawnData::from_substruct(incoming_type_id, serialized);
		if (TopiaryBlasterSprinklerSpawnData_ptr != nullptr) {
			return TopiaryBlasterSprinklerSpawnData_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
