// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x5d60d87e.hpp>
#include <rivet/ddl/generated/enums/x7b720148.hpp>
#include <rivet/ddl/generated/SkinManagerBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct SkinManagerColorPrius; 

	struct RIVET_DDL_SHARED SkinManagerPrius : SkinManagerBasePrius {
		constexpr static std::string_view type_name = "SkinManagerPrius";
		constexpr static rivet::rivet_type_id type_id = 0xcac4304a;

		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view BodyType_type_name = "BodyType";
		constexpr static rivet::rivet_type_id BodyType_type_id = 0x1a1c112a;
		constexpr static std::string_view MaxLayersOverride_type_name = "MaxLayersOverride";
		constexpr static rivet::rivet_type_id MaxLayersOverride_type_id = 0xbae3df2d;
		constexpr static std::string_view AddedDynamically_type_name = "AddedDynamically";
		constexpr static rivet::rivet_type_id AddedDynamically_type_id = 0x82c2bd1c;
		constexpr static std::string_view ApplySkinTint_type_name = "ApplySkinTint";
		constexpr static rivet::rivet_type_id ApplySkinTint_type_id = 0x5a450569;
		constexpr static std::string_view ColorConstantName_type_name = "ColorConstantName";
		constexpr static rivet::rivet_type_id ColorConstantName_type_id = 0x76c51e4c;
		constexpr static std::string_view R_type_name = "R";
		constexpr static rivet::rivet_type_id R_type_id = 0xbee6a893;
		constexpr static std::string_view G_type_name = "G";
		constexpr static rivet::rivet_type_id G_type_id = 0xd33b4c78;
		constexpr static std::string_view B_type_name = "B";
		constexpr static rivet::rivet_type_id B_type_id = 0xa351b8f7;
		constexpr static std::string_view ColorConfig_type_name = "ColorConfig";
		constexpr static rivet::rivet_type_id ColorConfig_type_id = 0xa50ec5bf;
		constexpr static std::string_view ColorConfigName_type_name = "ColorConfigName";
		constexpr static rivet::rivet_type_id ColorConfigName_type_id = 0x351f7eaa;
		constexpr static std::string_view ColorList_type_name = "ColorList";
		constexpr static rivet::rivet_type_id ColorList_type_id = 0xfbc9245f;
		constexpr static std::string_view IgnoreHead_type_name = "IgnoreHead";
		constexpr static rivet::rivet_type_id IgnoreHead_type_id = 0xa46ea954; 

		explicit SkinManagerPrius() = default;
		explicit SkinManagerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x7b720148 Type {};
		rivet::ddl::generated::x5d60d87e BodyType {};
		uint32_t MaxLayersOverride {};
		bool AddedDynamically {};
		bool ApplySkinTint {};
		std::string_view ColorConstantName {};
		uint8_t R {};
		uint8_t G {};
		uint8_t B {};
		std::string_view ColorConfig {};
		std::string_view ColorConfigName {};
		std::vector<std::shared_ptr<rivet::ddl::generated::SkinManagerColorPrius>> ColorList {};
		bool IgnoreHead {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkinManagerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
