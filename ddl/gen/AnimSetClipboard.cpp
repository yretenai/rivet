// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimTriggerEventDef.hpp>
#include <rivet/ddl/generated/AnimTriggerTrack.hpp>
#include <rivet/ddl/generated/AnimDriverDef.hpp>
#include <rivet/ddl/generated/AnimClipGroupEntryDef.hpp>
#include <rivet/ddl/generated/AnimClipGroupElemDef.hpp>
#include <rivet/ddl/generated/AnimSetCommentDef.hpp>
#include <rivet/ddl/generated/AnimClipGroupDef.hpp> 

#include <rivet/ddl/generated/AnimSetClipboard.hpp>

namespace rivet::ddl::generated {
	AnimSetClipboard::AnimSetClipboard([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AnimClipAssetPathArray = serialized->get_strings(AnimClipAssetPathArray_type_id);
		AnimClipGroupArray = serialized->unwrap_into_many<rivet::ddl::generated::AnimClipGroupDef>(AnimClipGroupArray_type_id);
		AnimClipGroupElemArray = serialized->unwrap_into_many<rivet::ddl::generated::AnimClipGroupElemDef>(AnimClipGroupElemArray_type_id);
		AnimClipGroupEntryArray = serialized->unwrap_into_many<rivet::ddl::generated::AnimClipGroupEntryDef>(AnimClipGroupEntryArray_type_id);
		AnimDriverArray = serialized->unwrap_into_many<rivet::ddl::generated::AnimDriverDef>(AnimDriverArray_type_id);
		AnimDriverDataArray = serialized->unwrap_into_many<rivet::ddl::generated::AnimDriverDef>(AnimDriverDataArray_type_id);
		AnimSetComments = serialized->unwrap_into_many<rivet::ddl::generated::AnimSetCommentDef>(AnimSetComments_type_id);
		AnimTriggerTracks = serialized->unwrap_into_many<rivet::ddl::generated::AnimTriggerTrack>(AnimTriggerTracks_type_id);
		AnimTriggers = serialized->unwrap_into_many<rivet::ddl::generated::AnimTriggerEventDef>(AnimTriggers_type_id); 
	}

	[[nodiscard]] auto
	AnimSetClipboard::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimSetClipboard::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimSetClipboard> {
		if (incoming_type_id == AnimSetClipboard::type_id) {
			return std::make_shared<AnimSetClipboard>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
