// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xb40cfc5d.hpp>
#include <rivet/ddl/generated/enums/x91b33164.hpp>
#include <rivet/ddl/generated/enums/x19aa8603.hpp>
#include <rivet/ddl/generated/EventBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SyncedAnimSetAnchorTypeEvent : EventBase {
		constexpr static std::string_view type_name = "SyncedAnimSetAnchorTypeEvent";
		constexpr static rivet::rivet_type_id type_id = 0xc5c71e93;

		constexpr static std::string_view AnchorPosType_type_name = "AnchorPosType";
		constexpr static rivet::rivet_type_id AnchorPosType_type_id = 0x2d0f9dd3;
		constexpr static std::string_view AnchorRotType_type_name = "AnchorRotType";
		constexpr static rivet::rivet_type_id AnchorRotType_type_id = 0x8b050ea;
		constexpr static std::string_view GuestAnchor_type_name = "GuestAnchor";
		constexpr static rivet::rivet_type_id GuestAnchor_type_id = 0x72e73e18;
		constexpr static std::string_view ForcePosBlendTime_type_name = "ForcePosBlendTime";
		constexpr static rivet::rivet_type_id ForcePosBlendTime_type_id = 0x5221dadc;
		constexpr static std::string_view ForceRotBlendTime_type_name = "ForceRotBlendTime";
		constexpr static rivet::rivet_type_id ForceRotBlendTime_type_id = 0x5cc65f3a; 

		explicit SyncedAnimSetAnchorTypeEvent() = default;
		explicit SyncedAnimSetAnchorTypeEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x91b33164 AnchorPosType {};
		rivet::ddl::generated::xb40cfc5d AnchorRotType {};
		rivet::ddl::generated::x19aa8603 GuestAnchor {};
		float ForcePosBlendTime {};
		float ForceRotBlendTime {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SyncedAnimSetAnchorTypeEvent>;
	};
} // namespace rivet::ddl::generated

// clang-format on
