// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AmbientAimingShooterPrius.hpp>

namespace rivet::ddl::generated {
	AmbientAimingShooterPrius::AmbientAimingShooterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): AmbientShooterPrius(serialized) {
		AimAnimName = serialized->get_string(AimAnimName_type_id, "Aim_Move");
		FireAnimName = serialized->get_string(FireAnimName_type_id, "");
		AimLocatorName = serialized->get_string(AimLocatorName_type_id, "");
		DegYawMin = serialized->get_float(DegYawMin_type_id, -90.000000f);
		DegYawMax = serialized->get_float(DegYawMax_type_id, 90.000000f);
		DegPitchMin = serialized->get_float(DegPitchMin_type_id, -90.000000f);
		DegPitchMax = serialized->get_float(DegPitchMax_type_id, 90.000000f);
		GameplayDegYawMin = serialized->get_float(GameplayDegYawMin_type_id, -180.000000f);
		GameplayDegYawMax = serialized->get_float(GameplayDegYawMax_type_id, 180.000000f);
		GameplayDegPitchMin = serialized->get_float(GameplayDegPitchMin_type_id, -180.000000f);
		GameplayDegPitchMax = serialized->get_float(GameplayDegPitchMax_type_id, 180.000000f); 
	}

	[[nodiscard]] auto
	AmbientAimingShooterPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AmbientAimingShooterPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AmbientAimingShooterPrius> {
		if (incoming_type_id == AmbientAimingShooterPrius::type_id) {
			return std::make_shared<AmbientAimingShooterPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
