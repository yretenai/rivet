// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SwingshotTargetSlingPrius.hpp>
#include <rivet/ddl/generated/SwingshotTargetSwingPrius.hpp>
#include <rivet/ddl/generated/SwingshotTargetHookPrius.hpp> 

#include <rivet/ddl/generated/SwingshotTargetBasePrius.hpp>

namespace rivet::ddl::generated {
	SwingshotTargetBasePrius::SwingshotTargetBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EnabledComponentBasePrius(serialized) {
		CableAttachLocator = serialized->get_string(CableAttachLocator_type_id, {});
		MinRangeOverride = serialized->get_float(MinRangeOverride_type_id, 0.000000f);
		MaxRangeOverride = serialized->get_float(MaxRangeOverride_type_id, -1.000000f);
		DisallowGroup = serialized->get_uint64(DisallowGroup_type_id, 0ull); 
	}

	[[nodiscard]] auto
	SwingshotTargetBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SwingshotTargetBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SwingshotTargetBasePrius> {
		if (incoming_type_id == SwingshotTargetBasePrius::type_id) {
			return std::make_shared<SwingshotTargetBasePrius>(serialized);
		}

		auto SwingshotTargetHookPrius_ptr = SwingshotTargetHookPrius::from_substruct(incoming_type_id, serialized);
		if (SwingshotTargetHookPrius_ptr != nullptr) {
			return SwingshotTargetHookPrius_ptr;
		}

		auto SwingshotTargetSwingPrius_ptr = SwingshotTargetSwingPrius::from_substruct(incoming_type_id, serialized);
		if (SwingshotTargetSwingPrius_ptr != nullptr) {
			return SwingshotTargetSwingPrius_ptr;
		}

		auto SwingshotTargetSlingPrius_ptr = SwingshotTargetSlingPrius::from_substruct(incoming_type_id, serialized);
		if (SwingshotTargetSlingPrius_ptr != nullptr) {
			return SwingshotTargetSlingPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
