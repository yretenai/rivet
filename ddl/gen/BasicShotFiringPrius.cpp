// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ContinuousFiringPrius.hpp>
#include <rivet/ddl/generated/SingleShotFiringPrius.hpp>
#include <rivet/ddl/generated/SpreadFiringPrius.hpp>
#include <rivet/ddl/generated/GrappleHookFiringPrius.hpp>
#include <rivet/ddl/generated/ShotBasePrius.hpp> 

#include <rivet/ddl/generated/BasicShotFiringPrius.hpp>

namespace rivet::ddl::generated {
	BasicShotFiringPrius::BasicShotFiringPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): WeaponFiringBasePrius(serialized) {
		ShotAsset = serialized->get_string(ShotAsset_type_id, {});
		ShotPrius = serialized->unwrap_into<rivet::ddl::generated::ShotBasePrius>(ShotPrius_type_id); 
	}

	[[nodiscard]] auto
	BasicShotFiringPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BasicShotFiringPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BasicShotFiringPrius> {
		if (incoming_type_id == BasicShotFiringPrius::type_id) {
			return std::make_shared<BasicShotFiringPrius>(serialized);
		}

		auto GrappleHookFiringPrius_ptr = GrappleHookFiringPrius::from_substruct(incoming_type_id, serialized);
		if (GrappleHookFiringPrius_ptr != nullptr) {
			return GrappleHookFiringPrius_ptr;
		}

		auto SpreadFiringPrius_ptr = SpreadFiringPrius::from_substruct(incoming_type_id, serialized);
		if (SpreadFiringPrius_ptr != nullptr) {
			return SpreadFiringPrius_ptr;
		}

		auto SingleShotFiringPrius_ptr = SingleShotFiringPrius::from_substruct(incoming_type_id, serialized);
		if (SingleShotFiringPrius_ptr != nullptr) {
			return SingleShotFiringPrius_ptr;
		}

		auto ContinuousFiringPrius_ptr = ContinuousFiringPrius::from_substruct(incoming_type_id, serialized);
		if (ContinuousFiringPrius_ptr != nullptr) {
			return ContinuousFiringPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
