// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/ShellCasingDataSingleEmit.hpp>
#include <rivet/ddl/generated/ShellCasingDataMultiEmit.hpp> 

#include <rivet/ddl/generated/ShellCasingData.hpp>

namespace rivet::ddl::generated {
	ShellCasingData::ShellCasingData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ShellAsset = serialized->get_string(ShellAsset_type_id);
		LifetimeMin = serialized->get_float(LifetimeMin_type_id);
		LifetimeMax = serialized->get_float(LifetimeMax_type_id);
		EjectSpeedMin = serialized->get_float(EjectSpeedMin_type_id);
		EjectSpeedMax = serialized->get_float(EjectSpeedMax_type_id);
		EjectSpinMin = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(EjectSpinMin_type_id);
		EjectSpinMax = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(EjectSpinMax_type_id); 
	}

	auto
	ShellCasingData::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	ShellCasingData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShellCasingData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShellCasingData> {
		if (incoming_type_id == ShellCasingData::type_id) {
			return std::make_shared<ShellCasingData>(serialized);
		}

		auto ShellCasingDataSingleEmit_ptr = ShellCasingDataSingleEmit::from_substruct(incoming_type_id, serialized);
		if (ShellCasingDataSingleEmit_ptr != nullptr) {
			return ShellCasingDataSingleEmit_ptr;
		}

		auto ShellCasingDataMultiEmit_ptr = ShellCasingDataMultiEmit::from_substruct(incoming_type_id, serialized);
		if (ShellCasingDataMultiEmit_ptr != nullptr) {
			return ShellCasingDataMultiEmit_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
