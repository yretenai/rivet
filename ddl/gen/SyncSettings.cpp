// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SyncSettings.hpp>

namespace rivet::ddl::generated {
	SyncSettings::SyncSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MaxComponents = serialized->get_uint32(MaxComponents_type_id, 22000u);
		HeapSize = serialized->get_uint32(HeapSize_type_id, 131072u);
		HeapFixedBlockFraction = serialized->get_float(HeapFixedBlockFraction_type_id, 0.000000f);
		HeapFixedBlockSize = serialized->get_uint32(HeapFixedBlockSize_type_id, 0u);
		OutputQueueSize = serialized->get_uint32(OutputQueueSize_type_id, 32768u);
		BroadcastQueueSize = serialized->get_uint32(BroadcastQueueSize_type_id, 32768u);
		ServerHeapSize = serialized->get_uint32(ServerHeapSize_type_id, 1048576u);
		ServerMessageQueueSize = serialized->get_uint32(ServerMessageQueueSize_type_id, 262144u);
		Enabled = serialized->get_bool(Enabled_type_id, false); 
	}

	[[nodiscard]] auto
	SyncSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SyncSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SyncSettings> {
		if (incoming_type_id == SyncSettings::type_id) {
			return std::make_shared<SyncSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
