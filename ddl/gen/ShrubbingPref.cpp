// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ShrubbingPref.hpp>

namespace rivet::ddl::generated {
	ShrubbingPref::ShrubbingPref([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Algorithm = serialized->get_enum<rivet::ddl::generated::x6ad2490c>(Algorithm_type_id, rivet::ddl::generated::x6ad2490c_values, rivet::ddl::generated::x6ad2490c::Fixed_angle);
		Rotation = serialized->get_float(Rotation_type_id, 0.000000);
		RotationRandom = serialized->get_float(RotationRandom_type_id, 1.000000);
		NormalTilt = serialized->get_float(NormalTilt_type_id, 1.000000);
		Scale = serialized->get_float(Scale_type_id, 1.000000);
		ScaleRandom = serialized->get_float(ScaleRandom_type_id, 1.000000);
		WheelControl = serialized->get_enum<rivet::ddl::generated::xc6714fdc>(WheelControl_type_id, rivet::ddl::generated::xc6714fdc_values, rivet::ddl::generated::xc6714fdc::Radius);
		Radius = serialized->get_float(Radius_type_id, 2.000000);
		Height = serialized->get_float(Height_type_id, 2.000000);
		Density = serialized->get_float(Density_type_id, 0.350000);
		Footprint = serialized->get_float(Footprint_type_id, 1.000000); 
	}

	[[nodiscard]] auto
	ShrubbingPref::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShrubbingPref::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShrubbingPref> {
		if (incoming_type_id == ShrubbingPref::type_id) {
			return std::make_shared<ShrubbingPref>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
