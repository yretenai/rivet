// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraShakingWithFallOffData.hpp> 

#include <rivet/ddl/generated/ClankBotPrius.hpp>

namespace rivet::ddl::generated {
	ClankBotPrius::ClankBotPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Role = serialized->get_enum<rivet::ddl::generated::x190611d9>(Role_type_id, rivet::ddl::generated::x190611d9_values, rivet::ddl::generated::x190611d9::Base);
		ClankBot = serialized->get_string(ClankBot_type_id, {});
		PowerBot = serialized->get_string(PowerBot_type_id, {});
		SpringBot = serialized->get_string(SpringBot_type_id, {});
		StretchBot = serialized->get_string(StretchBot_type_id, {});
		StretchPieces = serialized->get_string(StretchPieces_type_id, {});
		StretchPieceVis = serialized->get_string(StretchPieceVis_type_id, {});
		ArcHeight = serialized->get_float(ArcHeight_type_id, 0.500000);
		GravMultiplier = serialized->get_float(GravMultiplier_type_id, 2.000000);
		SpringRadius = serialized->get_float(SpringRadius_type_id, 0.750000);
		ShakeData = serialized->unwrap_into<rivet::ddl::generated::CameraShakingWithFallOffData>(ShakeData_type_id); 
	}

	[[nodiscard]] auto
	ClankBotPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ClankBotPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ClankBotPrius> {
		if (incoming_type_id == ClankBotPrius::type_id) {
			return std::make_shared<ClankBotPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
