// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DenomSettings.hpp> 

#include <rivet/ddl/generated/SwapDataEntry.hpp>

namespace rivet::ddl::generated {
	SwapDataEntry::SwapDataEntry([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BoltModelId = serialized->get_enum<rivet::ddl::generated::BoltReplacementType>(BoltModelId_type_id, rivet::ddl::generated::BoltReplacementType_values);
		BaseModel = serialized->get_string(BaseModel_type_id);
		RndOptModel = serialized->get_strings(RndOptModel_type_id);
		ForceYUpAndRot = serialized->get_bool(ForceYUpAndRot_type_id);
		BronzeSettings = serialized->unwrap_into<rivet::ddl::generated::DenomSettings>(BronzeSettings_type_id);
		SilverSettings = serialized->unwrap_into<rivet::ddl::generated::DenomSettings>(SilverSettings_type_id);
		GoldSettings = serialized->unwrap_into<rivet::ddl::generated::DenomSettings>(GoldSettings_type_id);
		PlatinumSettings = serialized->unwrap_into<rivet::ddl::generated::DenomSettings>(PlatinumSettings_type_id); 
	}

	[[nodiscard]] auto
	SwapDataEntry::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SwapDataEntry::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SwapDataEntry> {
		if (incoming_type_id == SwapDataEntry::type_id) {
			return std::make_shared<SwapDataEntry>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
