// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED NodeGraphSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "NodeGraphSettings";
		constexpr static rivet::rivet_type_id type_id = 0x34a82a24;

		constexpr static std::string_view InstanceMax_type_name = "InstanceMax";
		constexpr static rivet::rivet_type_id InstanceMax_type_id = 0x74f7829f;
		constexpr static std::string_view ConnectionMax_type_name = "ConnectionMax";
		constexpr static rivet::rivet_type_id ConnectionMax_type_id = 0xf1d37ccd;
		constexpr static std::string_view PlugMax_type_name = "PlugMax";
		constexpr static rivet::rivet_type_id PlugMax_type_id = 0xc261be32;
		constexpr static std::string_view NodeMax_type_name = "NodeMax";
		constexpr static rivet::rivet_type_id NodeMax_type_id = 0x849d5db6;
		constexpr static std::string_view EventHandlerMax_type_name = "EventHandlerMax";
		constexpr static rivet::rivet_type_id EventHandlerMax_type_id = 0xe22dcd67;
		constexpr static std::string_view MaxPlugsPerGraph_type_name = "MaxPlugsPerGraph";
		constexpr static rivet::rivet_type_id MaxPlugsPerGraph_type_id = 0x2a1da5e8;
		constexpr static std::string_view MaxNodesPerGraph_type_name = "MaxNodesPerGraph";
		constexpr static rivet::rivet_type_id MaxNodesPerGraph_type_id = 0x78ef1644;
		constexpr static std::string_view PooledInstanceMax_type_name = "PooledInstanceMax";
		constexpr static rivet::rivet_type_id PooledInstanceMax_type_id = 0xcff1bb8a; 

		explicit NodeGraphSettings() = default;
		explicit NodeGraphSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t InstanceMax {};
		uint32_t ConnectionMax {};
		uint32_t PlugMax {};
		uint32_t NodeMax {};
		uint32_t EventHandlerMax {};
		uint32_t MaxPlugsPerGraph {};
		uint32_t MaxNodesPerGraph {};
		uint32_t PooledInstanceMax {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodeGraphSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
