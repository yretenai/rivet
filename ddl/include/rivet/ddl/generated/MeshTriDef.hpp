// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED MeshTriDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "MeshTriDef";
		constexpr static rivet::rivet_type_id type_id = 0x93cd6c1;

		constexpr static std::string_view PositionIds_type_name = "PositionIds";
		constexpr static rivet::rivet_type_id PositionIds_type_id = 0x7e8e5bd5;
		constexpr static std::string_view NormalIds_type_name = "NormalIds";
		constexpr static rivet::rivet_type_id NormalIds_type_id = 0x54779029;
		constexpr static std::string_view UvIds_type_name = "UvIds";
		constexpr static rivet::rivet_type_id UvIds_type_id = 0x17c19349;
		constexpr static std::string_view Uv2Ids_type_name = "Uv2Ids";
		constexpr static rivet::rivet_type_id Uv2Ids_type_id = 0x4f336e99;
		constexpr static std::string_view ColorIds_type_name = "ColorIds";
		constexpr static rivet::rivet_type_id ColorIds_type_id = 0xae0d868d;
		constexpr static std::string_view SkinIds_type_name = "SkinIds";
		constexpr static rivet::rivet_type_id SkinIds_type_id = 0xdb38240f; 

		explicit MeshTriDef() = default;
		explicit MeshTriDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<uint16_t> PositionIds {};
		std::vector<uint16_t> NormalIds {};
		std::vector<uint16_t> UvIds {};
		std::vector<uint16_t> Uv2Ids {};
		std::vector<uint16_t> ColorIds {};
		std::vector<uint16_t> SkinIds {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MeshTriDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
