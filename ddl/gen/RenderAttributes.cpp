// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RenderAttributes.hpp>

namespace rivet::ddl::generated {
	RenderAttributes::RenderAttributes([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActivationChance = serialized->get_float(ActivationChance_type_id);
		PhotoModeStatus = serialized->get_enum<rivet::ddl::generated::PhotoModeStatus>(PhotoModeStatus_type_id, rivet::ddl::generated::PhotoModeStatus_values);
		Roundness = serialized->get_uint32(Roundness_type_id);
		RandomizeInstance = serialized->get_bool(RandomizeInstance_type_id);
		RandomizeSubsets = serialized->get_bool(RandomizeSubsets_type_id);
		OrientOverride = serialized->get_bool(OrientOverride_type_id);
		TrackParticle = serialized->get_bool(TrackParticle_type_id);
		SunDistance2D = serialized->get_float(SunDistance2D_type_id);
		TemporalAAStyle = serialized->get_enum<rivet::ddl::generated::TemporalAAStyle>(TemporalAAStyle_type_id, rivet::ddl::generated::TemporalAAStyle_values);
		FrameGrabStyle = serialized->get_enum<rivet::ddl::generated::FrameGrabStyle>(FrameGrabStyle_type_id, rivet::ddl::generated::FrameGrabStyle_values);
		CompositeStyle = serialized->get_enum<rivet::ddl::generated::CompositeStyle>(CompositeStyle_type_id, rivet::ddl::generated::CompositeStyle_values);
		BlendStyle = serialized->get_enum<rivet::ddl::generated::BlendStyle>(BlendStyle_type_id, rivet::ddl::generated::BlendStyle_values);
		QuadStyle = serialized->get_enum<rivet::ddl::generated::QuadStyle>(QuadStyle_type_id, rivet::ddl::generated::QuadStyle_values);
		SortStyle = serialized->get_enum<rivet::ddl::generated::SortStyle>(SortStyle_type_id, rivet::ddl::generated::SortStyle_values);
		FFOrientStyle = serialized->get_enum<rivet::ddl::generated::FFOrientStyle>(FFOrientStyle_type_id, rivet::ddl::generated::FFOrientStyle_values);
		OrientStyle = serialized->get_enum<rivet::ddl::generated::OrientStyle>(OrientStyle_type_id, rivet::ddl::generated::OrientStyle_values);
		OffsetStyle = serialized->get_enum<rivet::ddl::generated::xfe5100b1>(OffsetStyle_type_id, rivet::ddl::generated::xfe5100b1_values);
		ShadowCastingDistance = serialized->get_float(ShadowCastingDistance_type_id);
		SunLensFlareOccluder = serialized->get_bool(SunLensFlareOccluder_type_id);
		DimensionsAsRatios = serialized->get_bool(DimensionsAsRatios_type_id);
		AttachBeamEnds = serialized->get_bool(AttachBeamEnds_type_id);
		DynamicScaling = serialized->get_bool(DynamicScaling_type_id);
		IgnoreHighContrast = serialized->get_bool(IgnoreHighContrast_type_id);
		IgnorePost = serialized->get_bool(IgnorePost_type_id);
		WaterFoam = serialized->get_bool(WaterFoam_type_id);
		ApplyAlpha = serialized->get_bool(ApplyAlpha_type_id);
		ApplyTint = serialized->get_bool(ApplyTint_type_id);
		Lit = serialized->get_bool(Lit_type_id);
		BaseScale = serialized->get_float(BaseScale_type_id);
		AssetName = serialized->get_string(AssetName_type_id); 
	}

	[[nodiscard]] auto
	RenderAttributes::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RenderAttributes::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RenderAttributes> {
		if (incoming_type_id == RenderAttributes::type_id) {
			return std::make_shared<RenderAttributes>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
