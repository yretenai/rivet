// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct BotMusicValue; 

	struct RIVET_DDL_SHARED MusicIntensityTrackerConfig : ConfigBase {
		constexpr static std::string_view type_name = "MusicIntensityTrackerConfig";
		constexpr static rivet::rivet_type_id type_id = 0x1530d8ed;

		constexpr static std::string_view LowIntensityThreshold_type_name = "LowIntensityThreshold";
		constexpr static rivet::rivet_type_id LowIntensityThreshold_type_id = 0xd96bc793;
		constexpr static std::string_view HighIntensityThreshold_type_name = "HighIntensityThreshold";
		constexpr static rivet::rivet_type_id HighIntensityThreshold_type_id = 0x39f26870;
		constexpr static std::string_view Max_type_name = "Max";
		constexpr static rivet::rivet_type_id Max_type_id = 0xb7230b40;
		constexpr static std::string_view SlewRate_type_name = "SlewRate";
		constexpr static rivet::rivet_type_id SlewRate_type_id = 0xbcbb3fd6;
		constexpr static std::string_view DefaultBotValue_type_name = "DefaultBotValue";
		constexpr static rivet::rivet_type_id DefaultBotValue_type_id = 0x7c6589ba;
		constexpr static std::string_view DefaultBotRadius_type_name = "DefaultBotRadius";
		constexpr static rivet::rivet_type_id DefaultBotRadius_type_id = 0xe31f3d21;
		constexpr static std::string_view OtherValues_type_name = "OtherValues";
		constexpr static rivet::rivet_type_id OtherValues_type_id = 0x525b0339; 

		explicit MusicIntensityTrackerConfig() = default;
		explicit MusicIntensityTrackerConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float LowIntensityThreshold {};
		float HighIntensityThreshold {};
		float Max {};
		float SlewRate {};
		float DefaultBotValue {};
		float DefaultBotRadius {};
		std::vector<std::shared_ptr<rivet::ddl::generated::BotMusicValue>> OtherValues {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MusicIntensityTrackerConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
