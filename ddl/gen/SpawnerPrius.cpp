// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SpawnerScriptActionPrius.hpp> 

#include <rivet/ddl/generated/SpawnerPrius.hpp>

namespace rivet::ddl::generated {
	SpawnerPrius::SpawnerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FactoryGroup = serialized->get_uint64s(FactoryGroup_type_id);
		FactorySelectionMethod = serialized->get_enum<rivet::ddl::generated::FactorySelectionMethod>(FactorySelectionMethod_type_id, rivet::ddl::generated::FactorySelectionMethod_values, rivet::ddl::generated::FactorySelectionMethod::RoundRobin);
		Templates = serialized->get_uint64s(Templates_type_id);
		TemplateSelectionMethod = serialized->get_enum<rivet::ddl::generated::x59f4ecd6>(TemplateSelectionMethod_type_id, rivet::ddl::generated::x59f4ecd6_values, rivet::ddl::generated::x59f4ecd6::InOrder);
		SpawnLocations = serialized->get_uint64s(SpawnLocations_type_id);
		LocationSelectionMethod = serialized->get_enum<rivet::ddl::generated::x14738916>(LocationSelectionMethod_type_id, rivet::ddl::generated::x14738916_values, rivet::ddl::generated::x14738916::InOrder);
		InViewValidate = serialized->get_bool(InViewValidate_type_id, false);
		CheckNoLOS = serialized->get_bool(CheckNoLOS_type_id, false);
		SnapToNav = serialized->get_bool(SnapToNav_type_id, false);
		ForceSpawn = serialized->get_bool(ForceSpawn_type_id, false);
		RandomizeX = serialized->get_bool(RandomizeX_type_id, false);
		RandomizeY = serialized->get_bool(RandomizeY_type_id, false);
		RandomizeZ = serialized->get_bool(RandomizeZ_type_id, false);
		RandomizeT = serialized->get_bool(RandomizeT_type_id, false);
		InitialSpawnDelayMin = serialized->get_float(InitialSpawnDelayMin_type_id, 0.000000);
		InitialSpawnDelayMax = serialized->get_float(InitialSpawnDelayMax_type_id, 0.000000);
		SpawnIntervalMin = serialized->get_float(SpawnIntervalMin_type_id, 0.035000);
		SpawnIntervalMax = serialized->get_float(SpawnIntervalMax_type_id, 0.035000);
		RespawnDelayMin = serialized->get_float(RespawnDelayMin_type_id, 0.000000);
		RespawnDelayMax = serialized->get_float(RespawnDelayMax_type_id, 0.000000);
		NumSpawns = serialized->get_int32(NumSpawns_type_id, 0);
		MaxSimultaneousSpawns = serialized->get_int32(MaxSimultaneousSpawns_type_id, -1);
		MinDistanceFromPlayers = serialized->get_float(MinDistanceFromPlayers_type_id, -1.000000); 
	}

	[[nodiscard]] auto
	SpawnerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SpawnerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SpawnerPrius> {
		if (incoming_type_id == SpawnerPrius::type_id) {
			return std::make_shared<SpawnerPrius>(serialized);
		}

		auto SpawnerScriptActionPrius_ptr = SpawnerScriptActionPrius::from_substruct(incoming_type_id, serialized);
		if (SpawnerScriptActionPrius_ptr != nullptr) {
			return SpawnerScriptActionPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
