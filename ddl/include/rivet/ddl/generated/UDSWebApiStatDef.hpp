// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x884a9c52.hpp>
#include <rivet/ddl/generated/enums/xb2718bea.hpp>
#include <rivet/ddl/generated/enums/x766ef241.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED UDSWebApiStatDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "UDSWebApiStatDef";
		constexpr static rivet::rivet_type_id type_id = 0x98e79489;

		constexpr static std::string_view statName_type_name = "statName";
		constexpr static rivet::rivet_type_id statName_type_id = 0x4c02f6d0;
		constexpr static std::string_view statId_type_name = "statId";
		constexpr static rivet::rivet_type_id statId_type_id = 0xb2f4d275;
		constexpr static std::string_view origin_type_name = "origin";
		constexpr static rivet::rivet_type_id origin_type_id = 0xe7251d4f;
		constexpr static std::string_view dataType_type_name = "dataType";
		constexpr static rivet::rivet_type_id dataType_type_id = 0x267cdf7e;
		constexpr static std::string_view aggregation_type_name = "aggregation";
		constexpr static rivet::rivet_type_id aggregation_type_id = 0x97c8bd9f;
		constexpr static std::string_view minValue_type_name = "minValue";
		constexpr static rivet::rivet_type_id minValue_type_id = 0x1bff5214;
		constexpr static std::string_view maxValue_type_name = "maxValue";
		constexpr static rivet::rivet_type_id maxValue_type_id = 0xfd9ffdf5;
		constexpr static std::string_view initialValue_type_name = "initialValue";
		constexpr static rivet::rivet_type_id initialValue_type_id = 0x1049c01e; 

		explicit UDSWebApiStatDef() = default;
		explicit UDSWebApiStatDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view statName {};
		int32_t statId {};
		rivet::ddl::generated::x766ef241 origin {};
		rivet::ddl::generated::x884a9c52 dataType {};
		rivet::ddl::generated::xb2718bea aggregation {};
		std::string_view minValue {};
		std::string_view maxValue {};
		std::string_view initialValue {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UDSWebApiStatDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
