// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/WeaponObstructionBase.hpp> 

namespace rivet::ddl::generated {
	struct BarrelObstructionBase; 

	struct RIVET_DDL_SHARED WeaponObstructionUpgradable : WeaponObstructionBase {
		constexpr const static std::string_view type_name = "WeaponObstructionUpgradable";
		constexpr const static rivet::rivet_type_id type_id = 0x3e885aae;

		constexpr const static std::string_view WeaponV1_type_name = "WeaponV1";
		constexpr const static rivet::rivet_type_id WeaponV1_type_id = 0x46715e75;
		constexpr const static std::string_view WeaponV5_type_name = "WeaponV5";
		constexpr const static rivet::rivet_type_id WeaponV5_type_id = 0x411c9a6c; 

		explicit WeaponObstructionUpgradable() = default;
		explicit WeaponObstructionUpgradable([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::BarrelObstructionBase> WeaponV1 {};
		std::shared_ptr<rivet::ddl::generated::BarrelObstructionBase> WeaponV5 {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponObstructionUpgradable>;
	};
} // namespace rivet::ddl::generated

// clang-format on
