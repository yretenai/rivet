// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/EngineControlSessionData.hpp>
#include <rivet/ddl/generated/SessionPersistentData.hpp>
#include <rivet/ddl/generated/SessionTransientData.hpp>
#include <rivet/ddl/generated/AnimSetSessionData.hpp>
#include <rivet/ddl/generated/SessionWindowSize.hpp>
#include <rivet/ddl/generated/PerformanceSessionData.hpp>
#include <rivet/ddl/generated/NodeGraphEditorSessionData.hpp>
#include <rivet/ddl/generated/SessionAssetError.hpp>
#include <rivet/ddl/generated/SessionFilesByType.hpp>
#include <rivet/ddl/generated/ZoneSessionData.hpp>
#include <rivet/ddl/generated/NodeGraphSessionData.hpp>
#include <rivet/ddl/generated/Cinematic2SessionData.hpp>
#include <rivet/ddl/generated/MaterialGraphSessionData.hpp>
#include <rivet/ddl/generated/CinematicSessionData.hpp> 

#include <rivet/ddl/generated/SessionData.hpp>

namespace rivet::ddl::generated {
	SessionData::SessionData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PersistentData = serialized->unwrap_into<rivet::ddl::generated::SessionPersistentData>(PersistentData_type_id);
		TransientData = serialized->unwrap_into<rivet::ddl::generated::SessionTransientData>(TransientData_type_id);
		WindowSize = serialized->unwrap_into<rivet::ddl::generated::SessionWindowSize>(WindowSize_type_id);
		OpenAssets = serialized->unwrap_into_many<rivet::ddl::generated::SessionFilesByType>(OpenAssets_type_id);
		RequestOpen = serialized->unwrap_into_many<rivet::ddl::generated::SessionFilesByType>(RequestOpen_type_id);
		AssetErrors = serialized->unwrap_into_many<rivet::ddl::generated::SessionAssetError>(AssetErrors_type_id);
		ZoneData = serialized->unwrap_into<rivet::ddl::generated::ZoneSessionData>(ZoneData_type_id);
		ScriptData = serialized->unwrap_into<rivet::ddl::generated::NodeGraphSessionData>(ScriptData_type_id);
		MaterialGraphData = serialized->unwrap_into<rivet::ddl::generated::MaterialGraphSessionData>(MaterialGraphData_type_id);
		NodeGraphEditorData = serialized->unwrap_into<rivet::ddl::generated::NodeGraphEditorSessionData>(NodeGraphEditorData_type_id);
		PerformanceData = serialized->unwrap_into<rivet::ddl::generated::PerformanceSessionData>(PerformanceData_type_id);
		CinematicData = serialized->unwrap_into<rivet::ddl::generated::CinematicSessionData>(CinematicData_type_id);
		Cinematic2Data = serialized->unwrap_into<rivet::ddl::generated::Cinematic2SessionData>(Cinematic2Data_type_id);
		AnimSetData = serialized->unwrap_into<rivet::ddl::generated::AnimSetSessionData>(AnimSetData_type_id);
		EngineControlData = serialized->unwrap_into<rivet::ddl::generated::EngineControlSessionData>(EngineControlData_type_id); 
	}

	[[nodiscard]] auto
	SessionData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SessionData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SessionData> {
		if (incoming_type_id == SessionData::type_id) {
			return std::make_shared<SessionData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
