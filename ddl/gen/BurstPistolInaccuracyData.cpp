// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BurstPistolInaccuracyData.hpp>

namespace rivet::ddl::generated {
	BurstPistolInaccuracyData::BurstPistolInaccuracyData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		InitialAngle = serialized->get_float(InitialAngle_type_id, 0.500000f);
		MinShotsToIncrease = serialized->get_uint32(MinShotsToIncrease_type_id, 3u);
		AngleMax = serialized->get_float(AngleMax_type_id, 4.000000f);
		IncreaseAnglePerShot = serialized->get_float(IncreaseAnglePerShot_type_id, 0.100000f);
		IncreaseAngleMax = serialized->get_float(IncreaseAngleMax_type_id, 0.500000f);
		DecreaseDelay = serialized->get_float(DecreaseDelay_type_id, 0.200000f);
		DecreaseAnglePerSec = serialized->get_float(DecreaseAnglePerSec_type_id, 5.000000f); 
	}

	[[nodiscard]] auto
	BurstPistolInaccuracyData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BurstPistolInaccuracyData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BurstPistolInaccuracyData> {
		if (incoming_type_id == BurstPistolInaccuracyData::type_id) {
			return std::make_shared<BurstPistolInaccuracyData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
