// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/DDLMatrix4.hpp> 

#include <rivet/ddl/generated/ManipulatorEngineItem.hpp>

namespace rivet::ddl::generated {
	ManipulatorEngineItem::ManipulatorEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		WorldMatrix = serialized->unwrap_into<rivet::ddl::generated::DDLMatrix4>(WorldMatrix_type_id);
		AimPosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(AimPosition_type_id);
		WorldMatrixDragBegin = serialized->unwrap_into<rivet::ddl::generated::DDLMatrix4>(WorldMatrixDragBegin_type_id);
		ManipulatorType = serialized->get_enum<rivet::ddl::generated::ManipulatorType>(ManipulatorType_type_id, rivet::ddl::generated::ManipulatorType_values);
		ManipulatorSpace = serialized->get_enum<rivet::ddl::generated::ManipulatorSpace>(ManipulatorSpace_type_id, rivet::ddl::generated::ManipulatorSpace_values);
		UseLastSelectedNode = serialized->get_bool(UseLastSelectedNode_type_id);
		MoveSelectedNodes = serialized->get_bool(MoveSelectedNodes_type_id);
		UseWorldSpace = serialized->get_bool(UseWorldSpace_type_id); 
	}

	[[nodiscard]] auto
	ManipulatorEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ManipulatorEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ManipulatorEngineItem> {
		if (incoming_type_id == ManipulatorEngineItem::type_id) {
			return std::make_shared<ManipulatorEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
