// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xee077130.hpp>
#include <rivet/ddl/generated/enums/x983059e1.hpp>
#include <rivet/ddl/generated/enums/xe0e71d6c.hpp>
#include <rivet/ddl/generated/enums/xa6a133d1.hpp>
#include <rivet/ddl/generated/enums/DecalMode.hpp> 

namespace rivet::ddl::generated {
	struct DDLVector3;
	struct VaultMetaData; 

	struct RIVET_DDL_SHARED DecalDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "DecalDef";
		constexpr static rivet::rivet_type_id type_id = 0x8206ba3b;

		constexpr static std::string_view VaultMetaData_type_name = "VaultMetaData";
		constexpr static rivet::rivet_type_id VaultMetaData_type_id = 0x37889aa;
		constexpr static std::string_view IconPath_type_name = "IconPath";
		constexpr static rivet::rivet_type_id IconPath_type_id = 0xbf5b007f;
		constexpr static std::string_view Asset_type_name = "Asset";
		constexpr static rivet::rivet_type_id Asset_type_id = 0x1bfc969d;
		constexpr static std::string_view DecalMode_type_name = "DecalMode";
		constexpr static rivet::rivet_type_id DecalMode_type_id = 0xcef8d297;
		constexpr static std::string_view OverlapOverride_type_name = "OverlapOverride";
		constexpr static rivet::rivet_type_id OverlapOverride_type_id = 0x8191c87f;
		constexpr static std::string_view BlendOverride_type_name = "BlendOverride";
		constexpr static rivet::rivet_type_id BlendOverride_type_id = 0x828f8f40;
		constexpr static std::string_view Dynamic_type_name = "Dynamic";
		constexpr static rivet::rivet_type_id Dynamic_type_id = 0x4a41698c;
		constexpr static std::string_view ScreenSpaceTargets_type_name = "ScreenSpaceTargets";
		constexpr static rivet::rivet_type_id ScreenSpaceTargets_type_id = 0x9a472176;
		constexpr static std::string_view RayTracingMode_type_name = "RayTracingMode";
		constexpr static rivet::rivet_type_id RayTracingMode_type_id = 0xdcbd7541;
		constexpr static std::string_view ProjectionLimit_type_name = "ProjectionLimit";
		constexpr static rivet::rivet_type_id ProjectionLimit_type_id = 0x7c4e3b33;
		constexpr static std::string_view FadeDistance_type_name = "FadeDistance";
		constexpr static rivet::rivet_type_id FadeDistance_type_id = 0xa05039a0;
		constexpr static std::string_view LoDDistance_type_name = "LoDDistance";
		constexpr static rivet::rivet_type_id LoDDistance_type_id = 0x9fc1ce80;
		constexpr static std::string_view CustomInput_type_name = "CustomInput";
		constexpr static rivet::rivet_type_id CustomInput_type_id = 0xc866f4ee;
		constexpr static std::string_view Color_type_name = "Color";
		constexpr static rivet::rivet_type_id Color_type_id = 0x7f058428;
		constexpr static std::string_view Alpha_type_name = "Alpha";
		constexpr static rivet::rivet_type_id Alpha_type_id = 0xc9b3f5ab;
		constexpr static std::string_view AlphaTest_type_name = "AlphaTest";
		constexpr static rivet::rivet_type_id AlphaTest_type_id = 0x5d3ca67e;
		constexpr static std::string_view TimeStamp_type_name = "TimeStamp";
		constexpr static rivet::rivet_type_id TimeStamp_type_id = 0xe6ea5636; 

		explicit DecalDef() = default;
		explicit DecalDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::VaultMetaData> VaultMetaData {};
		std::string_view IconPath {};
		std::string_view Asset {};
		rivet::ddl::generated::DecalMode DecalMode {};
		rivet::ddl::generated::xa6a133d1 OverlapOverride {};
		rivet::ddl::generated::xe0e71d6c BlendOverride {};
		bool Dynamic {};
		rivet::ddl::generated::x983059e1 ScreenSpaceTargets {};
		rivet::ddl::generated::xee077130 RayTracingMode {};
		float ProjectionLimit {};
		float FadeDistance {};
		float LoDDistance {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> CustomInput {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> Color {};
		float Alpha {};
		float AlphaTest {};
		float TimeStamp {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DecalDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
