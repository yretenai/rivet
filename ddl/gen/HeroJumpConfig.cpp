// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroDoubleJumpConfig.hpp> 

#include <rivet/ddl/generated/HeroJumpConfig.hpp>

namespace rivet::ddl::generated {
	HeroJumpConfig::HeroJumpConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		HeightMin = serialized->get_float(HeightMin_type_id, 0.750000f);
		HeightMax = serialized->get_float(HeightMax_type_id, 1.500000f);
		TimeToPeak = serialized->get_float(TimeToPeak_type_id, 0.500000f);
		ButtonMinHoldTime = serialized->get_float(ButtonMinHoldTime_type_id, 0.200000f);
		ButtonMaxHoldTime = serialized->get_float(ButtonMaxHoldTime_type_id, 0.400000f);
		MomentumWeightMin = serialized->get_float(MomentumWeightMin_type_id, 0.000000f);
		MomentumWeightMax = serialized->get_float(MomentumWeightMax_type_id, 0.500000f);
		MomentumMinTime = serialized->get_float(MomentumMinTime_type_id, 0.200000f);
		MomentumTransitionTime = serialized->get_float(MomentumTransitionTime_type_id, 0.200000f);
		NoInputTime = serialized->get_float(NoInputTime_type_id, 0.000000f);
		NoGlideTime = serialized->get_float(NoGlideTime_type_id, 0.000000f);
		NoFallTime = serialized->get_float(NoFallTime_type_id, 0.000000f);
		DoubleJumpTimeStart = serialized->get_float(DoubleJumpTimeStart_type_id, 0.200000f);
		DoubleJumpHeightMin = serialized->get_float(DoubleJumpHeightMin_type_id, 1.300000f);
		TerminalVelocity = serialized->get_float(TerminalVelocity_type_id, 50.000000f);
		TimeToPeakIsGravity = serialized->get_bool(TimeToPeakIsGravity_type_id, false); 
	}

	[[nodiscard]] auto
	HeroJumpConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroJumpConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroJumpConfig> {
		if (incoming_type_id == HeroJumpConfig::type_id) {
			return std::make_shared<HeroJumpConfig>(serialized);
		}

		auto HeroDoubleJumpConfig_ptr = HeroDoubleJumpConfig::from_substruct(incoming_type_id, serialized);
		if (HeroDoubleJumpConfig_ptr != nullptr) {
			return HeroDoubleJumpConfig_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
