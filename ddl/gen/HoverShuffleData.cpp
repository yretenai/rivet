// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HoverShuffleData.hpp>

namespace rivet::ddl::generated {
	HoverShuffleData::HoverShuffleData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		HoverShuffleMinRange = serialized->get_float(HoverShuffleMinRange_type_id, 6.000000);
		HoverShuffleMaxRange = serialized->get_float(HoverShuffleMaxRange_type_id, 20.000000);
		HoverShuffleDistShortThreshold = serialized->get_float(HoverShuffleDistShortThreshold_type_id, 13.000000);
		HoverShuffleDistMediumThreshold = serialized->get_float(HoverShuffleDistMediumThreshold_type_id, 13.000000);
		HoverShuffleDesiredMoveSpeed = serialized->get_float(HoverShuffleDesiredMoveSpeed_type_id, -1.000000); 
	}

	[[nodiscard]] auto
	HoverShuffleData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HoverShuffleData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HoverShuffleData> {
		if (incoming_type_id == HoverShuffleData::type_id) {
			return std::make_shared<HoverShuffleData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
