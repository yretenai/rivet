// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraShakingWithFallOffData.hpp> 

#include <rivet/ddl/generated/JumpLandCameraShakeData.hpp>

namespace rivet::ddl::generated {
	JumpLandCameraShakeData::JumpLandCameraShakeData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ShakeWithFallOffData = serialized->unwrap_into<rivet::ddl::generated::CameraShakingWithFallOffData>(ShakeWithFallOffData_type_id);
		MinShakeLandSpeed = serialized->get_float(MinShakeLandSpeed_type_id);
		MaxShakeLandSpeed = serialized->get_float(MaxShakeLandSpeed_type_id);
		MinShakeIntensityScale = serialized->get_float(MinShakeIntensityScale_type_id);
		MaxShakeIntensityScale = serialized->get_float(MaxShakeIntensityScale_type_id); 
	}

	[[nodiscard]] auto
	JumpLandCameraShakeData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	JumpLandCameraShakeData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<JumpLandCameraShakeData> {
		if (incoming_type_id == JumpLandCameraShakeData::type_id) {
			return std::make_shared<JumpLandCameraShakeData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
