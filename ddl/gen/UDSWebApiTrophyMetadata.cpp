// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UBPTrophyUnlock.hpp>
#include <rivet/ddl/generated/UDSWebApiReward.hpp> 

#include <rivet/ddl/generated/UDSWebApiTrophyMetadata.hpp>

namespace rivet::ddl::generated {
	UDSWebApiTrophyMetadata::UDSWebApiTrophyMetadata([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		name = serialized->get_strings(name_type_id);
		Description = serialized->get_strings(Description_type_id);
		grade = serialized->get_enum<rivet::ddl::generated::xfb81cf7c>(grade_type_id, rivet::ddl::generated::xfb81cf7c_values, rivet::ddl::generated::xfb81cf7c::bronze);
		hidden = serialized->get_bool(hidden_type_id, false);
		sortKey = serialized->get_string(sortKey_type_id, {});
		platinumTrophyObjectId = serialized->get_string(platinumTrophyObjectId_type_id, {});
		hasReward = serialized->get_bool(hasReward_type_id, false);
		reward = serialized->unwrap_into<rivet::ddl::generated::UDSWebApiReward>(reward_type_id);
		unlockCondition = serialized->unwrap_into<rivet::ddl::generated::UBPTrophyUnlock>(unlockCondition_type_id); 
	}

	[[nodiscard]] auto
	UDSWebApiTrophyMetadata::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UDSWebApiTrophyMetadata::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UDSWebApiTrophyMetadata> {
		if (incoming_type_id == UDSWebApiTrophyMetadata::type_id) {
			return std::make_shared<UDSWebApiTrophyMetadata>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
