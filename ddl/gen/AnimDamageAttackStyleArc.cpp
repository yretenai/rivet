// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimDamageAttackStyleArc.hpp>

namespace rivet::ddl::generated {
	AnimDamageAttackStyleArc::AnimDamageAttackStyleArc([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): AnimDamageAttackStyleBase(serialized) {
		ArcCenterHeight = serialized->get_float(ArcCenterHeight_type_id, 1.000000);
		DamageJoint = serialized->get_string(DamageJoint_type_id, {});
		DamageRadius = serialized->get_float(DamageRadius_type_id, 1.000000);
		DamageType = serialized->get_enum<rivet::ddl::generated::DamageTypes>(DamageType_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::Melee);
		DamageAmount = serialized->get_float(DamageAmount_type_id, 1.000000);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values, rivet::ddl::generated::KnockbackLevels::None);
		KnockbackAmount = serialized->get_float(KnockbackAmount_type_id, -1.000000); 
	}

	[[nodiscard]] auto
	AnimDamageAttackStyleArc::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimDamageAttackStyleArc::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDamageAttackStyleArc> {
		if (incoming_type_id == AnimDamageAttackStyleArc::type_id) {
			return std::make_shared<AnimDamageAttackStyleArc>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
