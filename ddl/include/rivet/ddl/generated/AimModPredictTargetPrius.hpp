// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/AimModifierPrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AimModPredictTargetPrius : AimModifierPrius {
		constexpr const static std::string_view type_name = "AimModPredictTargetPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x2c038d9a;

		constexpr const static std::string_view TimeToFullAccuracy_type_name = "TimeToFullAccuracy";
		constexpr const static rivet::rivet_type_id TimeToFullAccuracy_type_id = 0x6fe44bf5;
		constexpr const static std::string_view MaxPredictiveSpeed_type_name = "MaxPredictiveSpeed";
		constexpr const static rivet::rivet_type_id MaxPredictiveSpeed_type_id = 0x9af719b0;
		constexpr const static std::string_view AdditionalLeadTime_type_name = "AdditionalLeadTime";
		constexpr const static rivet::rivet_type_id AdditionalLeadTime_type_id = 0x56e81338;
		constexpr const static std::string_view AimAccel_type_name = "AimAccel";
		constexpr const static rivet::rivet_type_id AimAccel_type_id = 0x73393972;
		constexpr const static std::string_view AimSpeedMax_type_name = "AimSpeedMax";
		constexpr const static rivet::rivet_type_id AimSpeedMax_type_id = 0x27cb7f73;
		constexpr const static std::string_view FollowGround_type_name = "FollowGround";
		constexpr const static rivet::rivet_type_id FollowGround_type_id = 0xfc01b8f8; 

		explicit AimModPredictTargetPrius() = default;
		explicit AimModPredictTargetPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float TimeToFullAccuracy {};
		float MaxPredictiveSpeed {};
		float AdditionalLeadTime {};
		float AimAccel {};
		float AimSpeedMax {};
		bool FollowGround {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimModPredictTargetPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
