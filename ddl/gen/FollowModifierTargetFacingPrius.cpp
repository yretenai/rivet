// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FollowModifierTargetSettlePrius.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/FollowModifierTargetFacingPrius.hpp>

namespace rivet::ddl::generated {
	FollowModifierTargetFacingPrius::FollowModifierTargetFacingPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Priority = serialized->get_enum<rivet::ddl::generated::xf94df176>(Priority_type_id, rivet::ddl::generated::xf94df176_values);
		VectorMode = serialized->get_enum<rivet::ddl::generated::x531b18aa>(VectorMode_type_id, rivet::ddl::generated::x531b18aa_values);
		TargetVector = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(TargetVector_type_id);
		TargetActorHandle = serialized->get_uint32(TargetActorHandle_type_id);
		TargetYaw = serialized->get_float(TargetYaw_type_id);
		TargetPitch = serialized->get_float(TargetPitch_type_id);
		TargetTolerance = serialized->get_float(TargetTolerance_type_id);
		AccelOrGain = serialized->get_float(AccelOrGain_type_id);
		DecelOrDamp = serialized->get_float(DecelOrDamp_type_id);
		SpeedMaxYaw = serialized->get_float(SpeedMaxYaw_type_id);
		SpeedMaxPitch = serialized->get_float(SpeedMaxPitch_type_id);
		ApplyDelay = serialized->get_float(ApplyDelay_type_id);
		LockBlendTime = serialized->get_float(LockBlendTime_type_id);
		PeakAngle = serialized->get_float(PeakAngle_type_id);
		BackDeadAngle = serialized->get_float(BackDeadAngle_type_id);
		DestroyOnBlock = serialized->get_bool(DestroyOnBlock_type_id);
		DestroyOnInput = serialized->get_bool(DestroyOnInput_type_id);
		DestroyOnComplete = serialized->get_bool(DestroyOnComplete_type_id);
		UseYawInput = serialized->get_bool(UseYawInput_type_id);
		UsePitchInput = serialized->get_bool(UsePitchInput_type_id);
		ApplyWithInput = serialized->get_bool(ApplyWithInput_type_id);
		MotionMode = serialized->get_enum<rivet::ddl::generated::x79dd0c33>(MotionMode_type_id, rivet::ddl::generated::x79dd0c33_values); 
	}

	[[nodiscard]] auto
	FollowModifierTargetFacingPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FollowModifierTargetFacingPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FollowModifierTargetFacingPrius> {
		if (incoming_type_id == FollowModifierTargetFacingPrius::type_id) {
			return std::make_shared<FollowModifierTargetFacingPrius>(serialized);
		}

		auto FollowModifierTargetSettlePrius_ptr = FollowModifierTargetSettlePrius::from_substruct(incoming_type_id, serialized);
		if (FollowModifierTargetSettlePrius_ptr != nullptr) {
			return FollowModifierTargetSettlePrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
