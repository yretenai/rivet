// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameSettings.hpp>

namespace rivet::ddl::generated {
	GameSettings::GameSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ServerCamEnable = serialized->get_bool(ServerCamEnable_type_id);
		UseLobby = serialized->get_bool(UseLobby_type_id);
		UseFrontend = serialized->get_bool(UseFrontend_type_id);
		AutoLoad = serialized->get_bool(AutoLoad_type_id);
		LanMode = serialized->get_bool(LanMode_type_id);
		LateJoinEnable = serialized->get_bool(LateJoinEnable_type_id);
		UnlockMultiplayer = serialized->get_bool(UnlockMultiplayer_type_id);
		UnlockMultiplayerSave = serialized->get_bool(UnlockMultiplayerSave_type_id);
		UnlockAllMultiplayer = serialized->get_bool(UnlockAllMultiplayer_type_id);
		UnlockAll = serialized->get_bool(UnlockAll_type_id);
		DoLegal = serialized->get_bool(DoLegal_type_id);
		AllowPause = serialized->get_bool(AllowPause_type_id);
		MemorySyncCapture = serialized->get_bool(MemorySyncCapture_type_id);
		JJJEnabled = serialized->get_bool(JJJEnabled_type_id);
		JJJOptional = serialized->get_bool(JJJOptional_type_id);
		JJJDebugUI = serialized->get_bool(JJJDebugUI_type_id);
		JJJTestConfig = serialized->get_bool(JJJTestConfig_type_id);
		NewspaperDebugUI = serialized->get_bool(NewspaperDebugUI_type_id);
		NewspaperConfig = serialized->get_string(NewspaperConfig_type_id);
		UnlockTechWeb = serialized->get_bool(UnlockTechWeb_type_id);
		AFKDisconnectEnable = serialized->get_bool(AFKDisconnectEnable_type_id);
		AFKDisconnectTime = serialized->get_float(AFKDisconnectTime_type_id);
		ContinueGameLoad = serialized->get_bool(ContinueGameLoad_type_id); 
	}

	[[nodiscard]] auto
	GameSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameSettings> {
		if (incoming_type_id == GameSettings::type_id) {
			return std::make_shared<GameSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
