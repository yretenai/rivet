// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SwingshotCameraPitchOverrides : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SwingshotCameraPitchOverrides";
		constexpr static rivet::rivet_type_id type_id = 0x1139855d;

		constexpr static std::string_view DefaultPitchStart_type_name = "DefaultPitchStart";
		constexpr static rivet::rivet_type_id DefaultPitchStart_type_id = 0xd1febc0e;
		constexpr static std::string_view DefaultPitchEnd_type_name = "DefaultPitchEnd";
		constexpr static rivet::rivet_type_id DefaultPitchEnd_type_id = 0xdc4f74c9;
		constexpr static std::string_view OverrideFollowConfig_type_name = "OverrideFollowConfig";
		constexpr static rivet::rivet_type_id OverrideFollowConfig_type_id = 0xe8468cc0;
		constexpr static std::string_view OverrideAimContextConfig_type_name = "OverrideAimContextConfig";
		constexpr static rivet::rivet_type_id OverrideAimContextConfig_type_id = 0xa6b0ffe6; 

		explicit SwingshotCameraPitchOverrides() = default;
		explicit SwingshotCameraPitchOverrides([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float DefaultPitchStart {};
		float DefaultPitchEnd {};
		std::string_view OverrideFollowConfig {};
		std::string_view OverrideAimContextConfig {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SwingshotCameraPitchOverrides>;
	};
} // namespace rivet::ddl::generated

// clang-format on
