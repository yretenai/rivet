// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ScriptedShotEffectBasePrius.hpp> 

#include <rivet/ddl/generated/ScriptedShotEffectListElement.hpp>

namespace rivet::ddl::generated {
	ScriptedShotEffectListElement::ScriptedShotEffectListElement([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		EventType = serialized->get_enum<rivet::ddl::generated::x21e2284d>(EventType_type_id, rivet::ddl::generated::x21e2284d_values, rivet::ddl::generated::x21e2284d::OnSpawn);
		Effect = serialized->unwrap_into<rivet::ddl::generated::ScriptedShotEffectBasePrius>(Effect_type_id); 
	}

	[[nodiscard]] auto
	ScriptedShotEffectListElement::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ScriptedShotEffectListElement::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ScriptedShotEffectListElement> {
		if (incoming_type_id == ScriptedShotEffectListElement::type_id) {
			return std::make_shared<ScriptedShotEffectListElement>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
