// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct AssetReferenceDef; 

	struct RIVET_DDL_SHARED StickersData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "StickersData";
		constexpr static rivet::rivet_type_id type_id = 0x6d7a747a;

		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view MissionLock_type_name = "MissionLock";
		constexpr static rivet::rivet_type_id MissionLock_type_id = 0x7c6feb68;
		constexpr static std::string_view ObjectiveLock_type_name = "ObjectiveLock";
		constexpr static rivet::rivet_type_id ObjectiveLock_type_id = 0x81d88e93;
		constexpr static std::string_view SuitLock_type_name = "SuitLock";
		constexpr static rivet::rivet_type_id SuitLock_type_id = 0x26fcf857;
		constexpr static std::string_view UnlockedByProgression_type_name = "UnlockedByProgression";
		constexpr static rivet::rivet_type_id UnlockedByProgression_type_id = 0x2a7064c9;
		constexpr static std::string_view UnlockedByEntitlement_type_name = "UnlockedByEntitlement";
		constexpr static rivet::rivet_type_id UnlockedByEntitlement_type_id = 0x586b49b;
		constexpr static std::string_view StickerRef_type_name = "StickerRef";
		constexpr static rivet::rivet_type_id StickerRef_type_id = 0xdcc3b907;
		constexpr static std::string_view ThumbnailRef_type_name = "ThumbnailRef";
		constexpr static rivet::rivet_type_id ThumbnailRef_type_id = 0x7412ab61; 

		explicit StickersData() = default;
		explicit StickersData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Name {};
		std::string_view MissionLock {};
		std::string_view ObjectiveLock {};
		std::string_view SuitLock {};
		bool UnlockedByProgression {};
		bool UnlockedByEntitlement {};
		std::shared_ptr<rivet::ddl::generated::AssetReferenceDef> StickerRef {};
		std::shared_ptr<rivet::ddl::generated::AssetReferenceDef> ThumbnailRef {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StickersData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
