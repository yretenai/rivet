// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ExplosionCountdownStage.hpp>

namespace rivet::ddl::generated {
	ExplosionCountdownStage::ExplosionCountdownStage([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TimeUntilNextStage = serialized->get_float(TimeUntilNextStage_type_id, 0.000000f);
		FlashFadeInDuration = serialized->get_float(FlashFadeInDuration_type_id, 0.250000f);
		FlashFadeOutDuration = serialized->get_float(FlashFadeOutDuration_type_id, 0.250000f);
		ShouldPlayBeepAudio = serialized->get_bool(ShouldPlayBeepAudio_type_id, false);
		IsLastBeep = serialized->get_bool(IsLastBeep_type_id, false); 
	}

	[[nodiscard]] auto
	ExplosionCountdownStage::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ExplosionCountdownStage::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ExplosionCountdownStage> {
		if (incoming_type_id == ExplosionCountdownStage::type_id) {
			return std::make_shared<ExplosionCountdownStage>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
