// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xcc761825.hpp>
#include <rivet/ddl/generated/MissionSystemDefaultNodeBaseDef.hpp> 

namespace rivet::ddl::generated {
	struct SyncOutputPlugBoolean;
	struct MissionSaveOptions;
	struct ObjectiveGraphContainer; 

	struct RIVET_DDL_SHARED MissionNodeSharedDef : MissionSystemDefaultNodeBaseDef {
		constexpr static std::string_view type_name = "MissionNodeSharedDef";
		constexpr static rivet::rivet_type_id type_id = 0x6215b09a;

		constexpr static std::string_view ObjectiveGraph_type_name = "ObjectiveGraph";
		constexpr static rivet::rivet_type_id ObjectiveGraph_type_id = 0x55ff52bd;
		constexpr static std::string_view SaveOptions_type_name = "SaveOptions";
		constexpr static rivet::rivet_type_id SaveOptions_type_id = 0x26e8b36e;
		constexpr static std::string_view UnlockBehavior_type_name = "UnlockBehavior";
		constexpr static rivet::rivet_type_id UnlockBehavior_type_id = 0xb4577d57;
		constexpr static std::string_view SyncOutput_type_name = "SyncOutput";
		constexpr static rivet::rivet_type_id SyncOutput_type_id = 0x7c4d29a0; 

		explicit MissionNodeSharedDef() = default;
		explicit MissionNodeSharedDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::ObjectiveGraphContainer> ObjectiveGraph {};
		std::shared_ptr<rivet::ddl::generated::MissionSaveOptions> SaveOptions {};
		rivet::ddl::generated::xcc761825 UnlockBehavior {};
		std::vector<std::shared_ptr<rivet::ddl::generated::SyncOutputPlugBoolean>> SyncOutput {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionNodeSharedDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
