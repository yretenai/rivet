// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UseMagCamInfo.hpp>
#include <rivet/ddl/generated/WarshipFiringRangeDiffValue.hpp> 

#include <rivet/ddl/generated/SpaceshipMagnetConfig.hpp>

namespace rivet::ddl::generated {
	SpaceshipMagnetConfig::SpaceshipMagnetConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		AllowBullets = serialized->get_bool(AllowBullets_type_id, false);
		RestrictTarget = serialized->get_bool(RestrictTarget_type_id, false);
		FireOnlyOnValidTargets = serialized->get_bool(FireOnlyOnValidTargets_type_id, false);
		TowedActorDamage = serialized->get_float(TowedActorDamage_type_id, 10.000000f);
		WarshipFiringRange = serialized->unwrap_into<rivet::ddl::generated::WarshipFiringRangeDiffValue>(WarshipFiringRange_type_id);
		MagnetShipSpeed = serialized->get_float(MagnetShipSpeed_type_id, 10.000000f);
		MagnetPitch = serialized->get_float(MagnetPitch_type_id, 0.000000f);
		MagnetFixed = serialized->get_bool(MagnetFixed_type_id, false);
		MagnetRangeEasy = serialized->get_float(MagnetRangeEasy_type_id, 35.000000f);
		MagnetRadiusEasy = serialized->get_float(MagnetRadiusEasy_type_id, 10.000000f);
		MagnetRange = serialized->get_float(MagnetRange_type_id, 20.000000f);
		MagnetRadius = serialized->get_float(MagnetRadius_type_id, 6.000000f);
		MagnetRangeHard = serialized->get_float(MagnetRangeHard_type_id, 20.000000f);
		MagnetRadiusHard = serialized->get_float(MagnetRadiusHard_type_id, 4.000000f);
		EnergyInit = serialized->get_float(EnergyInit_type_id, 0.000000f);
		EnergyMinThreshold = serialized->get_float(EnergyMinThreshold_type_id, 0.250000f);
		EnergyMaxRegen = serialized->get_float(EnergyMaxRegen_type_id, 0.500000f);
		RegenTime = serialized->get_float(RegenTime_type_id, 10.000000f);
		TowMax = serialized->get_uint8(TowMax_type_id, 20u);
		MaxAttackRuns = serialized->get_uint8(MaxAttackRuns_type_id, 5u);
		AutoDestroyOnMaxRuns = serialized->get_bool(AutoDestroyOnMaxRuns_type_id, true);
		TargetRadius = serialized->get_float(TargetRadius_type_id, 12.000000f);
		UseMagCamInfoEasy = serialized->unwrap_into<rivet::ddl::generated::UseMagCamInfo>(UseMagCamInfoEasy_type_id);
		UseMagCamInfoNormal = serialized->unwrap_into<rivet::ddl::generated::UseMagCamInfo>(UseMagCamInfoNormal_type_id);
		UseMagCamInfoHard = serialized->unwrap_into<rivet::ddl::generated::UseMagCamInfo>(UseMagCamInfoHard_type_id);
		UseMagTransInCamTimeMin = serialized->get_float(UseMagTransInCamTimeMin_type_id, 0.500000f);
		UseMagTransInCamTimeMax = serialized->get_float(UseMagTransInCamTimeMax_type_id, 0.750000f);
		UseMagTransOutCamTimeMin = serialized->get_float(UseMagTransOutCamTimeMin_type_id, 0.600000f);
		UseMagTransOutCamTimeMax = serialized->get_float(UseMagTransOutCamTimeMax_type_id, 1.000000f);
		TowCamCurveConfig = serialized->get_string(TowCamCurveConfig_type_id, {});
		TowCamMaxOffset = serialized->get_float(TowCamMaxOffset_type_id, -30.000000f); 
	}

	[[nodiscard]] auto
	SpaceshipMagnetConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SpaceshipMagnetConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SpaceshipMagnetConfig> {
		if (incoming_type_id == SpaceshipMagnetConfig::type_id) {
			return std::make_shared<SpaceshipMagnetConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
