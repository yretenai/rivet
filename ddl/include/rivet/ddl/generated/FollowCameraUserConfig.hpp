// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct VelocityFollowerData;
	struct CameraTargetTrackData; 

	struct RIVET_DDL_SHARED FollowCameraUserConfig : ConfigBase {
		constexpr static std::string_view type_name = "FollowCameraUserConfig";
		constexpr static rivet::rivet_type_id type_id = 0x245a7f0a;

		constexpr static std::string_view PitchMin_type_name = "PitchMin";
		constexpr static rivet::rivet_type_id PitchMin_type_id = 0xfb99e53b;
		constexpr static std::string_view PitchMax_type_name = "PitchMax";
		constexpr static rivet::rivet_type_id PitchMax_type_id = 0xc794da62;
		constexpr static std::string_view NearClipOverride_type_name = "NearClipOverride";
		constexpr static rivet::rivet_type_id NearClipOverride_type_id = 0xd086a10b;
		constexpr static std::string_view FarClipOverride_type_name = "FarClipOverride";
		constexpr static rivet::rivet_type_id FarClipOverride_type_id = 0xa1b3d3a1;
		constexpr static std::string_view TargetTrackingData_type_name = "TargetTrackingData";
		constexpr static rivet::rivet_type_id TargetTrackingData_type_id = 0x66203f35;
		constexpr static std::string_view VelocityFollowData_type_name = "VelocityFollowData";
		constexpr static rivet::rivet_type_id VelocityFollowData_type_id = 0x91dd2f41; 

		explicit FollowCameraUserConfig() = default;
		explicit FollowCameraUserConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float PitchMin {};
		float PitchMax {};
		float NearClipOverride {};
		float FarClipOverride {};
		std::shared_ptr<rivet::ddl::generated::CameraTargetTrackData> TargetTrackingData {};
		std::shared_ptr<rivet::ddl::generated::VelocityFollowerData> VelocityFollowData {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FollowCameraUserConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
