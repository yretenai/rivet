// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x3376434d.hpp>
#include <rivet/ddl/generated/CommandEvent.hpp> 

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED CommandFollowCurveEvent : CommandEvent {
		constexpr static std::string_view type_name = "CommandFollowCurveEvent";
		constexpr static rivet::rivet_type_id type_id = 0xaef209cf;

		constexpr static std::string_view CurveUid_type_name = "CurveUid";
		constexpr static rivet::rivet_type_id CurveUid_type_id = 0xd7001dad;
		constexpr static std::string_view Destination_type_name = "Destination";
		constexpr static rivet::rivet_type_id Destination_type_id = 0xb31a6f71;
		constexpr static std::string_view DoSmoothTransition_type_name = "DoSmoothTransition";
		constexpr static rivet::rivet_type_id DoSmoothTransition_type_id = 0xa4a1652a;
		constexpr static std::string_view SmoothTransitionType_type_name = "SmoothTransitionType";
		constexpr static rivet::rivet_type_id SmoothTransitionType_type_id = 0x6a6873c0;
		constexpr static std::string_view FaceTarget_type_name = "FaceTarget";
		constexpr static rivet::rivet_type_id FaceTarget_type_id = 0xd8b698ec; 

		explicit CommandFollowCurveEvent() = default;
		explicit CommandFollowCurveEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t CurveUid {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> Destination {};
		bool DoSmoothTransition {};
		rivet::ddl::generated::x3376434d SmoothTransitionType {};
		bool FaceTarget {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CommandFollowCurveEvent>;
	};
} // namespace rivet::ddl::generated

// clang-format on
