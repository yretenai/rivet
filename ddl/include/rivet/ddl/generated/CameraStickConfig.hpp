// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct CameraForceLookSettings; 

	struct RIVET_DDL_SHARED CameraStickConfig : ConfigBase {
		constexpr static std::string_view type_name = "CameraStickConfig";
		constexpr static rivet::rivet_type_id type_id = 0xb3806672;

		constexpr static std::string_view MaxHorizontalSpeed_type_name = "MaxHorizontalSpeed";
		constexpr static rivet::rivet_type_id MaxHorizontalSpeed_type_id = 0xe181fafa;
		constexpr static std::string_view MaxHorizontalAccelSpeed_type_name = "MaxHorizontalAccelSpeed";
		constexpr static rivet::rivet_type_id MaxHorizontalAccelSpeed_type_id = 0xd8228f41;
		constexpr static std::string_view MaxVerticalSpeed_type_name = "MaxVerticalSpeed";
		constexpr static rivet::rivet_type_id MaxVerticalSpeed_type_id = 0xbaf4f6f;
		constexpr static std::string_view MaxVerticalAccelSpeed_type_name = "MaxVerticalAccelSpeed";
		constexpr static rivet::rivet_type_id MaxVerticalAccelSpeed_type_id = 0x7d2ae905;
		constexpr static std::string_view AccelTime_type_name = "AccelTime";
		constexpr static rivet::rivet_type_id AccelTime_type_id = 0x21cf03a7;
		constexpr static std::string_view HorizontalSpeedCurve_type_name = "HorizontalSpeedCurve";
		constexpr static rivet::rivet_type_id HorizontalSpeedCurve_type_id = 0xa5275764;
		constexpr static std::string_view VerticalSpeedCurve_type_name = "VerticalSpeedCurve";
		constexpr static rivet::rivet_type_id VerticalSpeedCurve_type_id = 0xb7fc31a;
		constexpr static std::string_view DiagonalSpeedCurve_type_name = "DiagonalSpeedCurve";
		constexpr static rivet::rivet_type_id DiagonalSpeedCurve_type_id = 0x900ec842;
		constexpr static std::string_view TurnAccel_type_name = "TurnAccel";
		constexpr static rivet::rivet_type_id TurnAccel_type_id = 0x3e1dc75b;
		constexpr static std::string_view TurnDecel_type_name = "TurnDecel";
		constexpr static rivet::rivet_type_id TurnDecel_type_id = 0xd39617f7;
		constexpr static std::string_view TurnAccelAccel_type_name = "TurnAccelAccel";
		constexpr static rivet::rivet_type_id TurnAccelAccel_type_id = 0xab7dedc7;
		constexpr static std::string_view TurnAccelMin_type_name = "TurnAccelMin";
		constexpr static rivet::rivet_type_id TurnAccelMin_type_id = 0xe1236e1d;
		constexpr static std::string_view CardinalBias_type_name = "CardinalBias";
		constexpr static rivet::rivet_type_id CardinalBias_type_id = 0xcd485c00;
		constexpr static std::string_view BaseFOV_type_name = "BaseFOV";
		constexpr static rivet::rivet_type_id BaseFOV_type_id = 0x7073f622;
		constexpr static std::string_view RelativeToFOV_type_name = "RelativeToFOV";
		constexpr static rivet::rivet_type_id RelativeToFOV_type_id = 0xa4fd97e7;
		constexpr static std::string_view AllowMenuMoveStickInput_type_name = "AllowMenuMoveStickInput";
		constexpr static rivet::rivet_type_id AllowMenuMoveStickInput_type_id = 0xa15517af;
		constexpr static std::string_view MouseHorizontalSensitivityScale_type_name = "MouseHorizontalSensitivityScale";
		constexpr static rivet::rivet_type_id MouseHorizontalSensitivityScale_type_id = 0x87dccf8f;
		constexpr static std::string_view MouseVerticalSensitivityScale_type_name = "MouseVerticalSensitivityScale";
		constexpr static rivet::rivet_type_id MouseVerticalSensitivityScale_type_id = 0x68f3df57;
		constexpr static std::string_view ForceLookSettings_type_name = "ForceLookSettings";
		constexpr static rivet::rivet_type_id ForceLookSettings_type_id = 0xdf86b3b3; 

		explicit CameraStickConfig() = default;
		explicit CameraStickConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MaxHorizontalSpeed {};
		float MaxHorizontalAccelSpeed {};
		float MaxVerticalSpeed {};
		float MaxVerticalAccelSpeed {};
		float AccelTime {};
		std::string_view HorizontalSpeedCurve {};
		std::string_view VerticalSpeedCurve {};
		std::string_view DiagonalSpeedCurve {};
		float TurnAccel {};
		float TurnDecel {};
		float TurnAccelAccel {};
		float TurnAccelMin {};
		float CardinalBias {};
		float BaseFOV {};
		bool RelativeToFOV {};
		bool AllowMenuMoveStickInput {};
		float MouseHorizontalSensitivityScale {};
		float MouseVerticalSensitivityScale {};
		std::shared_ptr<rivet::ddl::generated::CameraForceLookSettings> ForceLookSettings {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraStickConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
