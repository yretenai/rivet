// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PerchLOSCheckerPrius.hpp>
#include <rivet/ddl/generated/FirepointLosCheckerPrius.hpp> 

#include <rivet/ddl/generated/LosCheckerPrius.hpp>

namespace rivet::ddl::generated {
	LosCheckerPrius::LosCheckerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Mode = serialized->get_enum<rivet::ddl::generated::xfcda154f>(Mode_type_id, rivet::ddl::generated::xfcda154f_values, rivet::ddl::generated::xfcda154f::BSphere);
		MaxRaycastsPerFrame = serialized->get_uint8(MaxRaycastsPerFrame_type_id, 1u);
		RemoveIfInactive = serialized->get_bool(RemoveIfInactive_type_id, false);
		InactiveAutoRemoveTime = serialized->get_float(InactiveAutoRemoveTime_type_id, 10.000000f); 
	}

	[[nodiscard]] auto
	LosCheckerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LosCheckerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LosCheckerPrius> {
		if (incoming_type_id == LosCheckerPrius::type_id) {
			return std::make_shared<LosCheckerPrius>(serialized);
		}

		auto FirepointLosCheckerPrius_ptr = FirepointLosCheckerPrius::from_substruct(incoming_type_id, serialized);
		if (FirepointLosCheckerPrius_ptr != nullptr) {
			return FirepointLosCheckerPrius_ptr;
		}

		auto PerchLOSCheckerPrius_ptr = PerchLOSCheckerPrius::from_substruct(incoming_type_id, serialized);
		if (PerchLOSCheckerPrius_ptr != nullptr) {
			return PerchLOSCheckerPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
