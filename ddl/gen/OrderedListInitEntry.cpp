// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/OrderedListInitEntry.hpp>

namespace rivet::ddl::generated {
	OrderedListInitEntry::OrderedListInitEntry([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Number = serialized->get_float(Number_type_id, 0.000000);
		String = serialized->get_string(String_type_id, {});
		Actor = serialized->get_uint64(Actor_type_id, 0);
		Vector = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Vector_type_id);
		Boolean = serialized->get_bool(Boolean_type_id, false); 
	}

	[[nodiscard]] auto
	OrderedListInitEntry::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	OrderedListInitEntry::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OrderedListInitEntry> {
		if (incoming_type_id == OrderedListInitEntry::type_id) {
			return std::make_shared<OrderedListInitEntry>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
