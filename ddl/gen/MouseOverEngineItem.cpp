// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/MouseOverEngineItem.hpp>

namespace rivet::ddl::generated {
	MouseOverEngineItem::MouseOverEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Valid = serialized->get_bool(Valid_type_id, false);
		NodeId = serialized->get_uint64(NodeId_type_id, 0ull);
		WorldPosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(WorldPosition_type_id);
		WorldNormal = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(WorldNormal_type_id);
		SubsetIndex = serialized->get_int32(SubsetIndex_type_id, 0u);
		TriangleIndex = serialized->get_int32(TriangleIndex_type_id, 0u); 
	}

	[[nodiscard]] auto
	MouseOverEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MouseOverEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MouseOverEngineItem> {
		if (incoming_type_id == MouseOverEngineItem::type_id) {
			return std::make_shared<MouseOverEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
