// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AttachToWaterSurfaceEvent.hpp>

namespace rivet::ddl::generated {
	AttachToWaterSurfaceEvent::AttachToWaterSurfaceEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		LerpToWaterPosDuration = serialized->get_float(LerpToWaterPosDuration_type_id, 0.000000f);
		EventDuration = serialized->get_float(EventDuration_type_id, -1.000000f);
		BobGain = serialized->get_float(BobGain_type_id, -1.000000f);
		BobDamp = serialized->get_float(BobDamp_type_id, -8.000000f);
		BobMaxSpeed = serialized->get_float(BobMaxSpeed_type_id, 1.000000f);
		MotionDepth = serialized->get_float(MotionDepth_type_id, 0.100000f);
		UpdateOffscreen = serialized->get_bool(UpdateOffscreen_type_id, false); 
	}

	[[nodiscard]] auto
	AttachToWaterSurfaceEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AttachToWaterSurfaceEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AttachToWaterSurfaceEvent> {
		if (incoming_type_id == AttachToWaterSurfaceEvent::type_id) {
			return std::make_shared<AttachToWaterSurfaceEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
