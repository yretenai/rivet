// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PickupTrapItemOfferPrius.hpp>
#include <rivet/ddl/generated/PickupWeaponItemOfferPrius.hpp>
#include <rivet/ddl/generated/PickupPredictableTrajectoryItemOfferPrius.hpp> 

#include <rivet/ddl/generated/PickupBaseOfferPrius.hpp>

namespace rivet::ddl::generated {
	PickupBaseOfferPrius::PickupBaseOfferPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): HoldOfferPrius(serialized) {

	}

	[[nodiscard]] auto
	PickupBaseOfferPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PickupBaseOfferPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PickupBaseOfferPrius> {
		if (incoming_type_id == PickupBaseOfferPrius::type_id) {
			return std::make_shared<PickupBaseOfferPrius>(serialized);
		}

		auto PickupPredictableTrajectoryItemOfferPrius_ptr = PickupPredictableTrajectoryItemOfferPrius::from_substruct(incoming_type_id, serialized);
		if (PickupPredictableTrajectoryItemOfferPrius_ptr != nullptr) {
			return PickupPredictableTrajectoryItemOfferPrius_ptr;
		}

		auto PickupTrapItemOfferPrius_ptr = PickupTrapItemOfferPrius::from_substruct(incoming_type_id, serialized);
		if (PickupTrapItemOfferPrius_ptr != nullptr) {
			return PickupTrapItemOfferPrius_ptr;
		}

		auto PickupWeaponItemOfferPrius_ptr = PickupWeaponItemOfferPrius::from_substruct(incoming_type_id, serialized);
		if (PickupWeaponItemOfferPrius_ptr != nullptr) {
			return PickupWeaponItemOfferPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
