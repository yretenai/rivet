// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ScriptNodesModelMimeData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ScriptNodesModelMimeData";
		constexpr static rivet::rivet_type_id type_id = 0x2b225fca;

		constexpr static std::string_view Comment_type_name = "Comment";
		constexpr static rivet::rivet_type_id Comment_type_id = 0x959e3154;
		constexpr static std::string_view EmbeddedScriptGraphIds_type_name = "EmbeddedScriptGraphIds";
		constexpr static rivet::rivet_type_id EmbeddedScriptGraphIds_type_id = 0xed9fa78d;
		constexpr static std::string_view ScriptActionNames_type_name = "ScriptActionNames";
		constexpr static rivet::rivet_type_id ScriptActionNames_type_id = 0x43ab36c8;
		constexpr static std::string_view ScriptGlobalVariableNames_type_name = "ScriptGlobalVariableNames";
		constexpr static rivet::rivet_type_id ScriptGlobalVariableNames_type_id = 0xa9f79b03;
		constexpr static std::string_view ScriptVariableNames_type_name = "ScriptVariableNames";
		constexpr static rivet::rivet_type_id ScriptVariableNames_type_id = 0x938028c9; 

		explicit ScriptNodesModelMimeData() = default;
		explicit ScriptNodesModelMimeData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool Comment {};
		std::vector<uint64_t> EmbeddedScriptGraphIds {};
		std::vector<std::string_view> ScriptActionNames {};
		std::vector<std::string_view> ScriptGlobalVariableNames {};
		std::vector<std::string_view> ScriptVariableNames {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ScriptNodesModelMimeData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
