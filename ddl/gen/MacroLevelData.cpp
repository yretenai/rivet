// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameMacroLevelData.hpp>
#include <rivet/ddl/generated/MacroLoadpointListItem.hpp>
#include <rivet/ddl/generated/AssetReferenceDef.hpp> 

#include <rivet/ddl/generated/MacroLevelData.hpp>

namespace rivet::ddl::generated {
	MacroLevelData::MacroLevelData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		LevelZone = serialized->unwrap_into<rivet::ddl::generated::AssetReferenceDef>(LevelZone_type_id);
		LevelAreaConfig = serialized->get_string(LevelAreaConfig_type_id, {});
		LevelNameLocTag = serialized->get_string(LevelNameLocTag_type_id, {});
		LevelDescLocTag = serialized->get_string(LevelDescLocTag_type_id, {});
		LevelNumber = serialized->get_int32(LevelNumber_type_id, -1);
		LevelInstallGroup = serialized->get_int32(LevelInstallGroup_type_id, 0);
		Loadpoints = serialized->unwrap_into_many<rivet::ddl::generated::MacroLoadpointListItem>(Loadpoints_type_id); 
	}

	[[nodiscard]] auto
	MacroLevelData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MacroLevelData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MacroLevelData> {
		if (incoming_type_id == MacroLevelData::type_id) {
			return std::make_shared<MacroLevelData>(serialized);
		}

		auto GameMacroLevelData_ptr = GameMacroLevelData::from_substruct(incoming_type_id, serialized);
		if (GameMacroLevelData_ptr != nullptr) {
			return GameMacroLevelData_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
