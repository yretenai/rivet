// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TunnelerJumpParams.hpp> 

#include <rivet/ddl/generated/TunnelerBombPrius.hpp>

namespace rivet::ddl::generated {
	TunnelerBombPrius::TunnelerBombPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Owner = serialized->get_uint32(Owner_type_id);
		TargetHandle = serialized->get_uint32(TargetHandle_type_id);
		WeaponId = serialized->get_uint32(WeaponId_type_id);
		Damage = serialized->get_float(Damage_type_id);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values);
		KnockbackAmount = serialized->get_float(KnockbackAmount_type_id);
		TriggerRadius = serialized->get_float(TriggerRadius_type_id);
		RiseUpDuration = serialized->get_float(RiseUpDuration_type_id);
		RiseUpDistance = serialized->get_float(RiseUpDistance_type_id);
		ExplodeDelay = serialized->get_float(ExplodeDelay_type_id);
		ExplodeRadius = serialized->get_float(ExplodeRadius_type_id);
		ExplodeAngle = serialized->get_float(ExplodeAngle_type_id);
		ExplodeUseLOS = serialized->get_bool(ExplodeUseLOS_type_id);
		AdditionalExplosion = serialized->get_bool(AdditionalExplosion_type_id);
		JumpParams = serialized->unwrap_into<rivet::ddl::generated::TunnelerJumpParams>(JumpParams_type_id); 
	}

	[[nodiscard]] auto
	TunnelerBombPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TunnelerBombPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TunnelerBombPrius> {
		if (incoming_type_id == TunnelerBombPrius::type_id) {
			return std::make_shared<TunnelerBombPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
