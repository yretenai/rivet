// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xee77c9ca.hpp>
#include <rivet/ddl/generated/enums/xbd1cea43.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED VaultSearchRecord : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VaultSearchRecord";
		constexpr static rivet::rivet_type_id type_id = 0x7cae7562;

		constexpr static std::string_view SearchOption_type_name = "SearchOption";
		constexpr static rivet::rivet_type_id SearchOption_type_id = 0x20a91273;
		constexpr static std::string_view SortOption_type_name = "SortOption";
		constexpr static rivet::rivet_type_id SortOption_type_id = 0xbca28051;
		constexpr static std::string_view SearchText_type_name = "SearchText";
		constexpr static rivet::rivet_type_id SearchText_type_id = 0xc95f3b85;
		constexpr static std::string_view ExtensionFilters_type_name = "ExtensionFilters";
		constexpr static rivet::rivet_type_id ExtensionFilters_type_id = 0x202d7af1; 

		explicit VaultSearchRecord() = default;
		explicit VaultSearchRecord([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xbd1cea43 SearchOption {};
		rivet::ddl::generated::xee77c9ca SortOption {};
		std::string_view SearchText {};
		std::vector<std::string_view> ExtensionFilters {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VaultSearchRecord>;
	};
} // namespace rivet::ddl::generated

// clang-format on
