// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ProgressionBonusEntry.hpp>

namespace rivet::ddl::generated {
	ProgressionBonusEntry::ProgressionBonusEntry([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Variable = serialized->get_enum<rivet::ddl::generated::x3f2aac2e>(Variable_type_id, rivet::ddl::generated::x3f2aac2e_values, rivet::ddl::generated::x3f2aac2e::None);
		MidEarlyStartMission = serialized->get_string(MidEarlyStartMission_type_id, "");
		MidEarlyStartObjective = serialized->get_string(MidEarlyStartObjective_type_id, "");
		MidEarlyValue = serialized->get_float(MidEarlyValue_type_id, 0.000000);
		MidLateStartMission = serialized->get_string(MidLateStartMission_type_id, "");
		MidLateStartObjective = serialized->get_string(MidLateStartObjective_type_id, "");
		MidLateValue = serialized->get_float(MidLateValue_type_id, 0.000000);
		LateStartMission = serialized->get_string(LateStartMission_type_id, "");
		LateStartObjective = serialized->get_string(LateStartObjective_type_id, "");
		LateValue = serialized->get_float(LateValue_type_id, 0.000000);
		EasyMultiplier = serialized->get_float(EasyMultiplier_type_id, 1.000000);
		MediumMultiplier = serialized->get_float(MediumMultiplier_type_id, 1.000000);
		HardMultiplier = serialized->get_float(HardMultiplier_type_id, 1.000000);
		HardestMultiplier = serialized->get_float(HardestMultiplier_type_id, 1.000000);
		ThreeDeathsMultiplier = serialized->get_float(ThreeDeathsMultiplier_type_id, 1.000000);
		FiveDeathsMultiplier = serialized->get_float(FiveDeathsMultiplier_type_id, 1.000000);
		ChallengeModeMultiplier = serialized->get_float(ChallengeModeMultiplier_type_id, 1.000000); 
	}

	[[nodiscard]] auto
	ProgressionBonusEntry::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ProgressionBonusEntry::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ProgressionBonusEntry> {
		if (incoming_type_id == ProgressionBonusEntry::type_id) {
			return std::make_shared<ProgressionBonusEntry>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
