// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CinematicShotSpawnerHandlerPrius.hpp>
#include <rivet/ddl/generated/ShotSpawnerForAmbientCurveFollowerPrius.hpp>
#include <rivet/ddl/generated/SpawnShotElement.hpp> 

#include <rivet/ddl/generated/ShotSpawnerHandlerPrius.hpp>

namespace rivet::ddl::generated {
	ShotSpawnerHandlerPrius::ShotSpawnerHandlerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		OwnerMode = serialized->get_enum<rivet::ddl::generated::x9443909f>(OwnerMode_type_id, rivet::ddl::generated::x9443909f_values, rivet::ddl::generated::x9443909f::Actor);
		Shots = serialized->unwrap_into_many<rivet::ddl::generated::SpawnShotElement>(Shots_type_id); 
	}

	[[nodiscard]] auto
	ShotSpawnerHandlerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShotSpawnerHandlerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotSpawnerHandlerPrius> {
		if (incoming_type_id == ShotSpawnerHandlerPrius::type_id) {
			return std::make_shared<ShotSpawnerHandlerPrius>(serialized);
		}

		auto ShotSpawnerForAmbientCurveFollowerPrius_ptr = ShotSpawnerForAmbientCurveFollowerPrius::from_substruct(incoming_type_id, serialized);
		if (ShotSpawnerForAmbientCurveFollowerPrius_ptr != nullptr) {
			return ShotSpawnerForAmbientCurveFollowerPrius_ptr;
		}

		auto CinematicShotSpawnerHandlerPrius_ptr = CinematicShotSpawnerHandlerPrius::from_substruct(incoming_type_id, serialized);
		if (CinematicShotSpawnerHandlerPrius_ptr != nullptr) {
			return CinematicShotSpawnerHandlerPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
