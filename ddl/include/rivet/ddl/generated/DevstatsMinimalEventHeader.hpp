// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DevstatsMinimalEventHeader : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "DevstatsMinimalEventHeader";
		constexpr static rivet::rivet_type_id type_id = 0xaf6c6f95;

		constexpr static std::string_view user_id_type_name = "user_id";
		constexpr static rivet::rivet_type_id user_id_type_id = 0x69398931;
		constexpr static std::string_view session_id_type_name = "session_id";
		constexpr static rivet::rivet_type_id session_id_type_id = 0xf554b136;
		constexpr static std::string_view title_id_type_name = "title_id";
		constexpr static rivet::rivet_type_id title_id_type_id = 0x9e8589b;
		constexpr static std::string_view client_timestamp_type_name = "client_timestamp";
		constexpr static rivet::rivet_type_id client_timestamp_type_id = 0x18c1b68c; 

		explicit DevstatsMinimalEventHeader() = default;
		explicit DevstatsMinimalEventHeader([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view user_id {};
		std::string_view session_id {};
		std::string_view title_id {};
		uint64_t client_timestamp {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DevstatsMinimalEventHeader>;
	};
} // namespace rivet::ddl::generated

// clang-format on
