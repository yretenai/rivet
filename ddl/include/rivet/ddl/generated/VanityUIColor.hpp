// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED VanityUIColor : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "VanityUIColor";
		constexpr const static rivet::rivet_type_id type_id = 0x90e4a08b;

		constexpr const static std::string_view ColorIndex_type_name = "ColorIndex";
		constexpr const static rivet::rivet_type_id ColorIndex_type_id = 0xba765d63;
		constexpr const static std::string_view UIColorPrimary_type_name = "UIColorPrimary";
		constexpr const static rivet::rivet_type_id UIColorPrimary_type_id = 0xb006f9f4;
		constexpr const static std::string_view UIColorSecondary_type_name = "UIColorSecondary";
		constexpr const static rivet::rivet_type_id UIColorSecondary_type_id = 0xc33d9b03; 

		explicit VanityUIColor() = default;
		explicit VanityUIColor([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint8_t ColorIndex {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> UIColorPrimary {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> UIColorSecondary {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VanityUIColor>;
	};
} // namespace rivet::ddl::generated

// clang-format on
