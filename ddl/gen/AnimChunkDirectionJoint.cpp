// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimChunkDirectionJoint.hpp>

namespace rivet::ddl::generated {
	AnimChunkDirectionJoint::AnimChunkDirectionJoint([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): AnimChunkDirection(serialized) {
		JointName = serialized->get_string(JointName_type_id, {});
		Axis = serialized->get_enum<rivet::ddl::generated::x302e143f>(Axis_type_id, rivet::ddl::generated::x302e143f_values, rivet::ddl::generated::x302e143f::Z);
		MirrorAxis = serialized->get_bool(MirrorAxis_type_id, false);
		HalfConeAngle = serialized->get_float(HalfConeAngle_type_id, 0.000000f); 
	}

	[[nodiscard]] auto
	AnimChunkDirectionJoint::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimChunkDirectionJoint::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimChunkDirectionJoint> {
		if (incoming_type_id == AnimChunkDirectionJoint::type_id) {
			return std::make_shared<AnimChunkDirectionJoint>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
