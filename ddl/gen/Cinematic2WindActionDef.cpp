// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2AttachmentDef.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/Cinematic2WindActionDef.hpp>

namespace rivet::ddl::generated {
	Cinematic2WindActionDef::Cinematic2WindActionDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id);
		Time = serialized->get_float(Time_type_id);
		DurationType = serialized->get_enum<rivet::ddl::generated::x29c933e2>(DurationType_type_id, rivet::ddl::generated::x29c933e2_values);
		Duration = serialized->get_float(Duration_type_id);
		Attack = serialized->get_float(Attack_type_id);
		Decay = serialized->get_float(Decay_type_id);
		Speed = serialized->get_float(Speed_type_id);
		Drag = serialized->get_float(Drag_type_id);
		Radius = serialized->get_float(Radius_type_id);
		Height = serialized->get_float(Height_type_id);
		RadialFalloff = serialized->get_float(RadialFalloff_type_id);
		HeightFalloff = serialized->get_float(HeightFalloff_type_id);
		Type = serialized->get_enum<rivet::ddl::generated::x81ba9424>(Type_type_id, rivet::ddl::generated::x81ba9424_values);
		OffsetPos = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(OffsetPos_type_id);
		OffsetRot = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(OffsetRot_type_id);
		AttachToPoint = serialized->get_bool(AttachToPoint_type_id);
		AttachmentPoint = serialized->unwrap_into<rivet::ddl::generated::Cinematic2AttachmentDef>(AttachmentPoint_type_id); 
	}

	[[nodiscard]] auto
	Cinematic2WindActionDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2WindActionDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2WindActionDef> {
		if (incoming_type_id == Cinematic2WindActionDef::type_id) {
			return std::make_shared<Cinematic2WindActionDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
