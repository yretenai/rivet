// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SonicShotPrius.hpp>
#include <rivet/ddl/generated/ShotProtoShotgunPrius.hpp>
#include <rivet/ddl/generated/ZurkonShotPrius.hpp>
#include <rivet/ddl/generated/ExplosiveBulletPrius.hpp>
#include <rivet/ddl/generated/ShotIcicleBombPrius.hpp>
#include <rivet/ddl/generated/ShotIcicleBlastPrius.hpp>
#include <rivet/ddl/generated/BasicBulletPrius.hpp> 

#include <rivet/ddl/generated/SimpleShotPrius.hpp>

namespace rivet::ddl::generated {
	SimpleShotPrius::SimpleShotPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ShotBasePrius(serialized) {

	}

	auto
	SimpleShotPrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	SimpleShotPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SimpleShotPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleShotPrius> {
		if (incoming_type_id == SimpleShotPrius::type_id) {
			return std::make_shared<SimpleShotPrius>(serialized);
		}

		auto ShotProtoShotgunPrius_ptr = ShotProtoShotgunPrius::from_substruct(incoming_type_id, serialized);
		if (ShotProtoShotgunPrius_ptr != nullptr) {
			return ShotProtoShotgunPrius_ptr;
		}

		auto ExplosiveBulletPrius_ptr = ExplosiveBulletPrius::from_substruct(incoming_type_id, serialized);
		if (ExplosiveBulletPrius_ptr != nullptr) {
			return ExplosiveBulletPrius_ptr;
		}

		auto SonicShotPrius_ptr = SonicShotPrius::from_substruct(incoming_type_id, serialized);
		if (SonicShotPrius_ptr != nullptr) {
			return SonicShotPrius_ptr;
		}

		auto ShotIcicleBlastPrius_ptr = ShotIcicleBlastPrius::from_substruct(incoming_type_id, serialized);
		if (ShotIcicleBlastPrius_ptr != nullptr) {
			return ShotIcicleBlastPrius_ptr;
		}

		auto ShotIcicleBombPrius_ptr = ShotIcicleBombPrius::from_substruct(incoming_type_id, serialized);
		if (ShotIcicleBombPrius_ptr != nullptr) {
			return ShotIcicleBombPrius_ptr;
		}

		auto BasicBulletPrius_ptr = BasicBulletPrius::from_substruct(incoming_type_id, serialized);
		if (BasicBulletPrius_ptr != nullptr) {
			return BasicBulletPrius_ptr;
		}

		auto ZurkonShotPrius_ptr = ZurkonShotPrius::from_substruct(incoming_type_id, serialized);
		if (ZurkonShotPrius_ptr != nullptr) {
			return ZurkonShotPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
