// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/OnUpdateIntervalNodeDef.hpp>
#include <rivet/ddl/generated/OnLifetimeExpiredNodeDef.hpp>
#include <rivet/ddl/generated/OnHitAnythingNodeDef.hpp>
#include <rivet/ddl/generated/OnPassMaxRangeNodeDef.hpp>
#include <rivet/ddl/generated/OutputPlugSignal.hpp>
#include <rivet/ddl/generated/OnPostInitNodeDef.hpp>
#include <rivet/ddl/generated/InputPlugEventInitialization.hpp> 

#include <rivet/ddl/generated/NodalShotEventNodeBaseDef.hpp>

namespace rivet::ddl::generated {
	NodalShotEventNodeBaseDef::NodalShotEventNodeBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): NodeBaseDef(serialized) {
		Input = serialized->unwrap_into<rivet::ddl::generated::InputPlugEventInitialization>(Input_type_id);
		Output = serialized->unwrap_into<rivet::ddl::generated::OutputPlugSignal>(Output_type_id); 
	}

	[[nodiscard]] auto
	NodalShotEventNodeBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	NodalShotEventNodeBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodalShotEventNodeBaseDef> {
		if (incoming_type_id == NodalShotEventNodeBaseDef::type_id) {
			return std::make_shared<NodalShotEventNodeBaseDef>(serialized);
		}

		auto OnPassMaxRangeNodeDef_ptr = OnPassMaxRangeNodeDef::from_substruct(incoming_type_id, serialized);
		if (OnPassMaxRangeNodeDef_ptr != nullptr) {
			return OnPassMaxRangeNodeDef_ptr;
		}

		auto OnHitAnythingNodeDef_ptr = OnHitAnythingNodeDef::from_substruct(incoming_type_id, serialized);
		if (OnHitAnythingNodeDef_ptr != nullptr) {
			return OnHitAnythingNodeDef_ptr;
		}

		auto OnLifetimeExpiredNodeDef_ptr = OnLifetimeExpiredNodeDef::from_substruct(incoming_type_id, serialized);
		if (OnLifetimeExpiredNodeDef_ptr != nullptr) {
			return OnLifetimeExpiredNodeDef_ptr;
		}

		auto OnPostInitNodeDef_ptr = OnPostInitNodeDef::from_substruct(incoming_type_id, serialized);
		if (OnPostInitNodeDef_ptr != nullptr) {
			return OnPostInitNodeDef_ptr;
		}

		auto OnUpdateIntervalNodeDef_ptr = OnUpdateIntervalNodeDef::from_substruct(incoming_type_id, serialized);
		if (OnUpdateIntervalNodeDef_ptr != nullptr) {
			return OnUpdateIntervalNodeDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
