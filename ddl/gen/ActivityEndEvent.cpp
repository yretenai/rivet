// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UDSMissionEndEvent.hpp>
#include <rivet/ddl/generated/UDSObjectiveEndEvent.hpp> 

#include <rivet/ddl/generated/ActivityEndEvent.hpp>

namespace rivet::ddl::generated {
	ActivityEndEvent::ActivityEndEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): UDSEventBase(serialized) {
		activityId = serialized->get_string(activityId_type_id, {});
		outcome = serialized->get_enum<rivet::ddl::generated::x57af8350>(outcome_type_id, rivet::ddl::generated::x57af8350_values, rivet::ddl::generated::x57af8350::completed);
		score = serialized->get_int32(score_type_id, 0u);
		zoneId = serialized->get_string(zoneId_type_id, {});
		mapPosition = serialized->get_floats(mapPosition_type_id);
		difficultySetting = serialized->get_int32(difficultySetting_type_id, 0u); 
	}

	[[nodiscard]] auto
	ActivityEndEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ActivityEndEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActivityEndEvent> {
		if (incoming_type_id == ActivityEndEvent::type_id) {
			return std::make_shared<ActivityEndEvent>(serialized);
		}

		auto UDSObjectiveEndEvent_ptr = UDSObjectiveEndEvent::from_substruct(incoming_type_id, serialized);
		if (UDSObjectiveEndEvent_ptr != nullptr) {
			return UDSObjectiveEndEvent_ptr;
		}

		auto UDSMissionEndEvent_ptr = UDSMissionEndEvent::from_substruct(incoming_type_id, serialized);
		if (UDSMissionEndEvent_ptr != nullptr) {
			return UDSMissionEndEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
