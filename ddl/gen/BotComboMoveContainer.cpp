// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotComboMoveBase.hpp>
#include <rivet/ddl/generated/RegisterAttackCooldownData.hpp> 

#include <rivet/ddl/generated/BotComboMoveContainer.hpp>

namespace rivet::ddl::generated {
	BotComboMoveContainer::BotComboMoveContainer([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartDistanceMin = serialized->get_float(StartDistanceMin_type_id, 0.000000);
		StartDistanceMax = serialized->get_float(StartDistanceMax_type_id, 2.000000);
		StartDistanceOffScreen = serialized->get_float(StartDistanceOffScreen_type_id, -1.000000);
		StartHeightMin = serialized->get_float(StartHeightMin_type_id, -2.000000);
		StartHeightMax = serialized->get_float(StartHeightMax_type_id, 2.000000);
		RequireClearNavPath = serialized->get_bool(RequireClearNavPath_type_id, true);
		DistToForceAttackIfNoNav = serialized->get_float(DistToForceAttackIfNoNav_type_id, -1.000000);
		RequireLOS = serialized->get_bool(RequireLOS_type_id, true);
		FailOnNoLOS = serialized->get_bool(FailOnNoLOS_type_id, false);
		RequireOnScreen = serialized->get_bool(RequireOnScreen_type_id, false);
		CanReposition = serialized->get_bool(CanReposition_type_id, false);
		StopComboIfFailed = serialized->get_bool(StopComboIfFailed_type_id, false);
		StopComboIfSuccess = serialized->get_bool(StopComboIfSuccess_type_id, false);
		AbortDistMin = serialized->get_float(AbortDistMin_type_id, -1.000000);
		AbortDistMax = serialized->get_float(AbortDistMax_type_id, -1.000000);
		MaxGotoDuration = serialized->get_float(MaxGotoDuration_type_id, -1.000000);
		MaxWaitDuration = serialized->get_float(MaxWaitDuration_type_id, -1.000000);
		AbortIfOffScreen = serialized->get_bool(AbortIfOffScreen_type_id, false);
		BotComboMoveCooldowns = serialized->unwrap_into_many<rivet::ddl::generated::RegisterAttackCooldownData>(BotComboMoveCooldowns_type_id);
		Move = serialized->unwrap_into<rivet::ddl::generated::BotComboMoveBase>(Move_type_id); 
	}

	[[nodiscard]] auto
	BotComboMoveContainer::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotComboMoveContainer::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboMoveContainer> {
		if (incoming_type_id == BotComboMoveContainer::type_id) {
			return std::make_shared<BotComboMoveContainer>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
