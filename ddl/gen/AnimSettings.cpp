// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimSettings.hpp>

namespace rivet::ddl::generated {
	AnimSettings::AnimSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MaxJobCount = serialized->get_uint32(MaxJobCount_type_id, 1024);
		MaxDriverUserPoseCount = serialized->get_uint32(MaxDriverUserPoseCount_type_id, 128);
		CullAllCullable = serialized->get_bool(CullAllCullable_type_id, false);
		AnimDriverDataAllocBlockSizes = serialized->get_uint16s(AnimDriverDataAllocBlockSizes_type_id);
		AnimDriverDataAllocBlockCounts = serialized->get_uint16s(AnimDriverDataAllocBlockCounts_type_id);
		AnimStreamInitAllocSize = serialized->get_uint32(AnimStreamInitAllocSize_type_id, 18874368);
		DebugDriverMemoryClearing = serialized->get_bool(DebugDriverMemoryClearing_type_id, false);
		DebugDriverMemoryAllocating = serialized->get_bool(DebugDriverMemoryAllocating_type_id, false);
		MorphTargetDeltaChannelPrecision = serialized->get_float(MorphTargetDeltaChannelPrecision_type_id, 0.100000); 
	}

	[[nodiscard]] auto
	AnimSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimSettings> {
		if (incoming_type_id == AnimSettings::type_id) {
			return std::make_shared<AnimSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
