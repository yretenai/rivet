// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ModelAnimZivaDef.hpp>
#include <rivet/ddl/generated/AnimMorphDef.hpp>
#include <rivet/ddl/generated/ModelSplineSubsetDef.hpp>
#include <rivet/ddl/generated/RenderOverrides.hpp>
#include <rivet/ddl/generated/VaultMetaData.hpp>
#include <rivet/ddl/generated/ModelPhysicsSettings.hpp>
#include <rivet/ddl/generated/MaterialMap.hpp>
#include <rivet/ddl/generated/SkelInfo.hpp>
#include <rivet/ddl/generated/IKchain.hpp>
#include <rivet/ddl/generated/LookDef.hpp>
#include <rivet/ddl/generated/RenderData.hpp>
#include <rivet/ddl/generated/AnimDynamicsDef.hpp>
#include <rivet/ddl/generated/LookGroupDef.hpp>
#include <rivet/ddl/generated/AmbientAnimationOverride.hpp>
#include <rivet/ddl/generated/AssetSwap.hpp>
#include <rivet/ddl/generated/RenderFlags.hpp>
#include <rivet/ddl/generated/RayTracing.hpp>
#include <rivet/ddl/generated/PerfProfileLodMaxBase.hpp>
#include <rivet/ddl/generated/NavigationProperties.hpp>
#include <rivet/ddl/generated/MaterialOverrideMap.hpp> 

#include <rivet/ddl/generated/ModelDef.hpp>

namespace rivet::ddl::generated {
	ModelDef::ModelDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VaultMetaData = serialized->unwrap_into<rivet::ddl::generated::VaultMetaData>(VaultMetaData_type_id);
		IconPath = serialized->get_string(IconPath_type_id, "");
		DaeFilename = serialized->get_string(DaeFilename_type_id, {});
		FilterNodeName = serialized->get_string(FilterNodeName_type_id, {});
		GeomLodDist1 = serialized->get_uint16(GeomLodDist1_type_id, 15);
		GeomLodDist2 = serialized->get_uint16(GeomLodDist2_type_id, 30);
		GeomLodDist3 = serialized->get_uint16(GeomLodDist3_type_id, 110);
		GeomLodDist4 = serialized->get_uint16(GeomLodDist4_type_id, 160);
		GeomLodDist5 = serialized->get_uint16(GeomLodDist5_type_id, 210);
		GeomLodMaxJointInfl0 = serialized->get_uint8(GeomLodMaxJointInfl0_type_id, 4);
		GeomLodMaxJointInfl1 = serialized->get_uint8(GeomLodMaxJointInfl1_type_id, 4);
		GeomLodMaxJointInfl2 = serialized->get_uint8(GeomLodMaxJointInfl2_type_id, 4);
		GeomLodMaxJointInfl3 = serialized->get_uint8(GeomLodMaxJointInfl3_type_id, 2);
		GeomLodMaxJointInfl4 = serialized->get_uint8(GeomLodMaxJointInfl4_type_id, 2);
		GeomLodMaxJointInfl5 = serialized->get_uint8(GeomLodMaxJointInfl5_type_id, 1);
		PerfProfileMaxLod = serialized->unwrap_into<rivet::ddl::generated::PerfProfileLodMaxBase>(PerfProfileMaxLod_type_id);
		FadeOutDist = serialized->get_int16(FadeOutDist_type_id, 0);
		ShadowFadeDist = serialized->get_uint16(ShadowFadeDist_type_id, 0);
		ShadowCastingLoD = serialized->get_int16(ShadowCastingLoD_type_id, -1);
		AmbientAnimation = serialized->get_float(AmbientAnimation_type_id, 0.000000);
		MaxDisplacement = serialized->get_float(MaxDisplacement_type_id, 2.000000);
		MaxDynamicForce = serialized->get_float(MaxDynamicForce_type_id, 8.000000);
		MinDynamicForce = serialized->get_float(MinDynamicForce_type_id, 0.000000);
		SkipShadowCast = serialized->get_bool(SkipShadowCast_type_id, false);
		SkipRainSplashes = serialized->get_bool(SkipRainSplashes_type_id, false);
		SkipEnvProbe = serialized->get_bool(SkipEnvProbe_type_id, false);
		OnlyLightCapture = serialized->get_bool(OnlyLightCapture_type_id, false);
		NoEmbeddedSamples = serialized->get_bool(NoEmbeddedSamples_type_id, false);
		SkipImpostorGeometry = serialized->get_bool(SkipImpostorGeometry_type_id, false);
		SkipImpostor = serialized->get_bool(SkipImpostor_type_id, false);
		SkipDecals = serialized->get_bool(SkipDecals_type_id, false);
		SkipStaticDecals = serialized->get_bool(SkipStaticDecals_type_id, false);
		ForceCpuSkinning = serialized->get_bool(ForceCpuSkinning_type_id, false);
		PhysicsSettings = serialized->unwrap_into<rivet::ddl::generated::ModelPhysicsSettings>(PhysicsSettings_type_id);
		IsFacialAnim = serialized->get_bool(IsFacialAnim_type_id, false);
		SplineModel = serialized->get_bool(SplineModel_type_id, false);
		IsShrub = serialized->get_bool(IsShrub_type_id, false);
		HibernateMode = serialized->get_enum<rivet::ddl::generated::HibernateMode>(HibernateMode_type_id, rivet::ddl::generated::HibernateMode_values, rivet::ddl::generated::HibernateMode::None);
		OccluderType = serialized->get_enum<rivet::ddl::generated::OccluderType>(OccluderType_type_id, rivet::ddl::generated::OccluderType_values, rivet::ddl::generated::OccluderType::Occlude_If_Static);
		AmbientShadowType = serialized->get_enum<rivet::ddl::generated::AmbientShadowType>(AmbientShadowType_type_id, rivet::ddl::generated::AmbientShadowType_values, rivet::ddl::generated::AmbientShadowType::None);
		CinematicShadowMode = serialized->get_enum<rivet::ddl::generated::CinematicShadowMode>(CinematicShadowMode_type_id, rivet::ddl::generated::CinematicShadowMode_values, rivet::ddl::generated::CinematicShadowMode::Auto);
		OptimizeUVMode = serialized->get_enum<rivet::ddl::generated::OptimizeUVMode>(OptimizeUVMode_type_id, rivet::ddl::generated::OptimizeUVMode_values, rivet::ddl::generated::OptimizeUVMode::UV0_And_UV1);
		AVMaterial = serialized->get_string(AVMaterial_type_id, {});
		AudioMaterial = serialized->get_string(AudioMaterial_type_id, {});
		VertexRange = serialized->get_float(VertexRange_type_id, 0.000000);
		VertexRangeAnimMult = serialized->get_float(VertexRangeAnimMult_type_id, 2.000000);
		RayTracing = serialized->unwrap_into<rivet::ddl::generated::RayTracing>(RayTracing_type_id);
		MaterialMap = serialized->unwrap_into_many<rivet::ddl::generated::MaterialMap>(MaterialMap_type_id);
		SkelInfo = serialized->unwrap_into<rivet::ddl::generated::SkelInfo>(SkelInfo_type_id);
		Looks = serialized->unwrap_into_many<rivet::ddl::generated::LookDef>(Looks_type_id);
		LookGroups = serialized->unwrap_into_many<rivet::ddl::generated::LookGroupDef>(LookGroups_type_id);
		RenderFlags = serialized->unwrap_into<rivet::ddl::generated::RenderFlags>(RenderFlags_type_id);
		RenderData = serialized->unwrap_into<rivet::ddl::generated::RenderData>(RenderData_type_id);
		AmbientAnimationOverride = serialized->unwrap_into<rivet::ddl::generated::AmbientAnimationOverride>(AmbientAnimationOverride_type_id);
		MaterialOverrides = serialized->unwrap_into_many<rivet::ddl::generated::MaterialOverrideMap>(MaterialOverrides_type_id);
		NavProperties = serialized->unwrap_into<rivet::ddl::generated::NavigationProperties>(NavProperties_type_id);
		IKChains = serialized->unwrap_into_many<rivet::ddl::generated::IKchain>(IKChains_type_id);
		RenderOverrides = serialized->unwrap_into<rivet::ddl::generated::RenderOverrides>(RenderOverrides_type_id);
		ExcludeFromGame = serialized->get_bool(ExcludeFromGame_type_id, false);
		DelayStreaming = serialized->get_bool(DelayStreaming_type_id, false);
		ModelSplineSubsets = serialized->unwrap_into_many<rivet::ddl::generated::ModelSplineSubsetDef>(ModelSplineSubsets_type_id);
		AssetSwaps = serialized->unwrap_into<rivet::ddl::generated::AssetSwap>(AssetSwaps_type_id);
		AnimMorph = serialized->unwrap_into<rivet::ddl::generated::AnimMorphDef>(AnimMorph_type_id);
		AnimDynamics = serialized->unwrap_into<rivet::ddl::generated::AnimDynamicsDef>(AnimDynamics_type_id);
		AnimZiva = serialized->unwrap_into<rivet::ddl::generated::ModelAnimZivaDef>(AnimZiva_type_id); 
	}

	[[nodiscard]] auto
	ModelDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ModelDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ModelDef> {
		if (incoming_type_id == ModelDef::type_id) {
			return std::make_shared<ModelDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
