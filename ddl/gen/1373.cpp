// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AfterimageComponentPrius.hpp>

namespace rivet::ddl::generated {
	AfterimageComponentPrius::AfterimageComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActorMaterial = serialized->get_string(ActorMaterial_type_id);
		ActorMaterialMappingName = serialized->get_string(ActorMaterialMappingName_type_id);
		AfterimageMaterial = serialized->get_string(AfterimageMaterial_type_id);
		AfterimageMaterialMappingName = serialized->get_string(AfterimageMaterialMappingName_type_id);
		Interval = serialized->get_float(Interval_type_id);
		NumAfterimages = serialized->get_uint32(NumAfterimages_type_id);
		MinLoD = serialized->get_uint32(MinLoD_type_id);
		ExpireDuration = serialized->get_float(ExpireDuration_type_id); 
	}

	auto
	AfterimageComponentPrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	AfterimageComponentPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AfterimageComponentPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AfterimageComponentPrius> {
		if (incoming_type_id == AfterimageComponentPrius::type_id) {
			return std::make_shared<AfterimageComponentPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
