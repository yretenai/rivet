// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ScaleData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ScaleData";
		constexpr static rivet::rivet_type_id type_id = 0xdc1e20e6;

		constexpr static std::string_view MinYTranslationScale_type_name = "MinYTranslationScale";
		constexpr static rivet::rivet_type_id MinYTranslationScale_type_id = 0x7796775c;
		constexpr static std::string_view MaxYTranslationScale_type_name = "MaxYTranslationScale";
		constexpr static rivet::rivet_type_id MaxYTranslationScale_type_id = 0x5ee88a44;
		constexpr static std::string_view MinXZTranslationScale_type_name = "MinXZTranslationScale";
		constexpr static rivet::rivet_type_id MinXZTranslationScale_type_id = 0x66d45ba2;
		constexpr static std::string_view MaxXZTranslationScale_type_name = "MaxXZTranslationScale";
		constexpr static rivet::rivet_type_id MaxXZTranslationScale_type_id = 0x7591bd09;
		constexpr static std::string_view MinTimeScale_type_name = "MinTimeScale";
		constexpr static rivet::rivet_type_id MinTimeScale_type_id = 0x53f6eacc;
		constexpr static std::string_view MaxTimeScale_type_name = "MaxTimeScale";
		constexpr static rivet::rivet_type_id MaxTimeScale_type_id = 0xc385fa26; 

		explicit ScaleData() = default;
		explicit ScaleData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MinYTranslationScale {};
		float MaxYTranslationScale {};
		float MinXZTranslationScale {};
		float MaxXZTranslationScale {};
		float MinTimeScale {};
		float MaxTimeScale {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ScaleData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
