// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED SpaceDebrisMotionPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SpaceDebrisMotionPrius";
		constexpr static rivet::rivet_type_id type_id = 0x9bf16aa4;

		constexpr static std::string_view MinRotationRate_type_name = "MinRotationRate";
		constexpr static rivet::rivet_type_id MinRotationRate_type_id = 0xac4ef98e;
		constexpr static std::string_view MaxRotationRate_type_name = "MaxRotationRate";
		constexpr static rivet::rivet_type_id MaxRotationRate_type_id = 0x8bf59ebf;
		constexpr static std::string_view RotateAxis_type_name = "RotateAxis";
		constexpr static rivet::rivet_type_id RotateAxis_type_id = 0x8919b496;
		constexpr static std::string_view UseRandomRotateAxis_type_name = "UseRandomRotateAxis";
		constexpr static rivet::rivet_type_id UseRandomRotateAxis_type_id = 0xadda583e;
		constexpr static std::string_view MinSpeed_type_name = "MinSpeed";
		constexpr static rivet::rivet_type_id MinSpeed_type_id = 0xf0d89680;
		constexpr static std::string_view MaxSpeed_type_name = "MaxSpeed";
		constexpr static rivet::rivet_type_id MaxSpeed_type_id = 0x16b83961;
		constexpr static std::string_view MoveDir_type_name = "MoveDir";
		constexpr static rivet::rivet_type_id MoveDir_type_id = 0x8888db50;
		constexpr static std::string_view UseRandomMoveDir_type_name = "UseRandomMoveDir";
		constexpr static rivet::rivet_type_id UseRandomMoveDir_type_id = 0x4db91f7; 

		explicit SpaceDebrisMotionPrius() = default;
		explicit SpaceDebrisMotionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MinRotationRate {};
		float MaxRotationRate {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> RotateAxis {};
		bool UseRandomRotateAxis {};
		float MinSpeed {};
		float MaxSpeed {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> MoveDir {};
		bool UseRandomMoveDir {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SpaceDebrisMotionPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
