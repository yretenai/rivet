// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraShakingData.hpp> 

#include <rivet/ddl/generated/SpaceshipThrustConfig.hpp>

namespace rivet::ddl::generated {
	SpaceshipThrustConfig::SpaceshipThrustConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		ThrustFOV = serialized->get_float(ThrustFOV_type_id, 85.000000f);
		ThrustCameraOffset = serialized->get_float(ThrustCameraOffset_type_id, 0.000000f);
		ThrustOffsetDuration = serialized->get_float(ThrustOffsetDuration_type_id, 2.000000f);
		ThrustOffsetCurve = serialized->get_string(ThrustOffsetCurve_type_id, {});
		ThrustCameraShake = serialized->unwrap_into<rivet::ddl::generated::CameraShakingData>(ThrustCameraShake_type_id); 
	}

	[[nodiscard]] auto
	SpaceshipThrustConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SpaceshipThrustConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SpaceshipThrustConfig> {
		if (incoming_type_id == SpaceshipThrustConfig::type_id) {
			return std::make_shared<SpaceshipThrustConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
