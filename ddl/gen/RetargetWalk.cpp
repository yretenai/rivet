// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RetargetWalk.hpp>

namespace rivet::ddl::generated {
	RetargetWalk::RetargetWalk([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id, false);
		MinHideTime = serialized->get_float(MinHideTime_type_id, 1.000000);
		DelayBeforeWalk = serialized->get_float(DelayBeforeWalk_type_id, 0.750000);
		WalkTime = serialized->get_float(WalkTime_type_id, 0.500000);
		WaitingAimMul = serialized->get_float(WaitingAimMul_type_id, 0.300000);
		LowCoverOffsetY = serialized->get_float(LowCoverOffsetY_type_id, 0.800000);
		LowCoverOffsetZ = serialized->get_float(LowCoverOffsetZ_type_id, 0.500000);
		HighCoverOffsetY = serialized->get_float(HighCoverOffsetY_type_id, 1.600000);
		HighCoverOffsetZ = serialized->get_float(HighCoverOffsetZ_type_id, 0.600000); 
	}

	[[nodiscard]] auto
	RetargetWalk::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RetargetWalk::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RetargetWalk> {
		if (incoming_type_id == RetargetWalk::type_id) {
			return std::make_shared<RetargetWalk>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
