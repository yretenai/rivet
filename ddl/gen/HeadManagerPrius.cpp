// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CustomJointMapEntry.hpp> 

#include <rivet/ddl/generated/HeadManagerPrius.hpp>

namespace rivet::ddl::generated {
	HeadManagerPrius::HeadManagerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		HeadActor = serialized->get_string(HeadActor_type_id, {});
		HeadModel = serialized->get_string(HeadModel_type_id, {});
		AutoMatchJoints = serialized->get_bool(AutoMatchJoints_type_id, true);
		UseModelVariant = serialized->get_bool(UseModelVariant_type_id, false);
		AllowUpdateAsync = serialized->get_bool(AllowUpdateAsync_type_id, true);
		AllowFastBSphere = serialized->get_bool(AllowFastBSphere_type_id, false);
		DriveAnimMaterialComponent = serialized->get_bool(DriveAnimMaterialComponent_type_id, false);
		ModelVariant = serialized->get_string(ModelVariant_type_id, {});
		VariantName = serialized->get_string(VariantName_type_id, {});
		CustomJointMap = serialized->unwrap_into_many<rivet::ddl::generated::CustomJointMapEntry>(CustomJointMap_type_id); 
	}

	[[nodiscard]] auto
	HeadManagerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeadManagerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeadManagerPrius> {
		if (incoming_type_id == HeadManagerPrius::type_id) {
			return std::make_shared<HeadManagerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
