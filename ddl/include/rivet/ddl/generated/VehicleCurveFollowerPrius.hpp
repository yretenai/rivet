// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED VehicleCurveFollowerPrius : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "VehicleCurveFollowerPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x4dda3ad0;

		constexpr const static std::string_view Accel_type_name = "Accel";
		constexpr const static rivet::rivet_type_id Accel_type_id = 0x44affa24;
		constexpr const static std::string_view Decel_type_name = "Decel";
		constexpr const static rivet::rivet_type_id Decel_type_id = 0xa9242a88;
		constexpr const static std::string_view BankAccel_type_name = "BankAccel";
		constexpr const static rivet::rivet_type_id BankAccel_type_id = 0xe985a478;
		constexpr const static std::string_view MaxBankSpeed_type_name = "MaxBankSpeed";
		constexpr const static rivet::rivet_type_id MaxBankSpeed_type_id = 0x27387af7;
		constexpr const static std::string_view BankLookaheadTime_type_name = "BankLookaheadTime";
		constexpr const static rivet::rivet_type_id BankLookaheadTime_type_id = 0x9b2a0818;
		constexpr const static std::string_view MaxBankAngle_type_name = "MaxBankAngle";
		constexpr const static rivet::rivet_type_id MaxBankAngle_type_id = 0x289fc108; 

		explicit VehicleCurveFollowerPrius() = default;
		explicit VehicleCurveFollowerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float Accel {};
		float Decel {};
		float BankAccel {};
		float MaxBankSpeed {};
		float BankLookaheadTime {};
		float MaxBankAngle {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VehicleCurveFollowerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
