// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/LightingConditions.hpp> 

namespace rivet::ddl::generated {
	struct CaptureGridInfo;
	struct CaptureJobInfo; 

	struct RIVET_DDL_SHARED LightGridCaptureInfo : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "LightGridCaptureInfo";
		constexpr static rivet::rivet_type_id type_id = 0x4b9d00da;

		constexpr static std::string_view JobInfo_type_name = "JobInfo";
		constexpr static rivet::rivet_type_id JobInfo_type_id = 0xe3ef773a;
		constexpr static std::string_view GridInfo_type_name = "GridInfo";
		constexpr static rivet::rivet_type_id GridInfo_type_id = 0x374cc4d3;
		constexpr static std::string_view Zones_type_name = "Zones";
		constexpr static rivet::rivet_type_id Zones_type_id = 0x9c997da9;
		constexpr static std::string_view Atmosphere_type_name = "Atmosphere";
		constexpr static rivet::rivet_type_id Atmosphere_type_id = 0x79fd859a;
		constexpr static std::string_view CaptureDirectOnly_type_name = "CaptureDirectOnly";
		constexpr static rivet::rivet_type_id CaptureDirectOnly_type_id = 0x3fdfd590;
		constexpr static std::string_view CaptureGBufferOnly_type_name = "CaptureGBufferOnly";
		constexpr static rivet::rivet_type_id CaptureGBufferOnly_type_id = 0xf2e4098a;
		constexpr static std::string_view CaptureFromGBuffer_type_name = "CaptureFromGBuffer";
		constexpr static rivet::rivet_type_id CaptureFromGBuffer_type_id = 0x6b6788b0;
		constexpr static std::string_view UseGBufferEmissive_type_name = "UseGBufferEmissive";
		constexpr static rivet::rivet_type_id UseGBufferEmissive_type_id = 0x3e34f8aa;
		constexpr static std::string_view DebugEmbeddedSamples_type_name = "DebugEmbeddedSamples";
		constexpr static rivet::rivet_type_id DebugEmbeddedSamples_type_id = 0x870fe1b2;
		constexpr static std::string_view WriteLightBinsToServer_type_name = "WriteLightBinsToServer";
		constexpr static rivet::rivet_type_id WriteLightBinsToServer_type_id = 0x510bfce;
		constexpr static std::string_view LightingCondition_type_name = "LightingCondition";
		constexpr static rivet::rivet_type_id LightingCondition_type_id = 0xc3b54f69;
		constexpr static std::string_view GBufferServerAddress_type_name = "GBufferServerAddress";
		constexpr static rivet::rivet_type_id GBufferServerAddress_type_id = 0xc82e899a;
		constexpr static std::string_view GBufferServerPort_type_name = "GBufferServerPort";
		constexpr static rivet::rivet_type_id GBufferServerPort_type_id = 0xbfdaf342;
		constexpr static std::string_view LogUrl_type_name = "LogUrl";
		constexpr static rivet::rivet_type_id LogUrl_type_id = 0x7e65d59f; 

		explicit LightGridCaptureInfo() = default;
		explicit LightGridCaptureInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::CaptureJobInfo> JobInfo {};
		std::vector<std::shared_ptr<rivet::ddl::generated::CaptureGridInfo>> GridInfo {};
		std::vector<std::string_view> Zones {};
		std::string_view Atmosphere {};
		bool CaptureDirectOnly {};
		bool CaptureGBufferOnly {};
		bool CaptureFromGBuffer {};
		bool UseGBufferEmissive {};
		bool DebugEmbeddedSamples {};
		bool WriteLightBinsToServer {};
		rivet::ddl::generated::LightingConditions LightingCondition {};
		std::string_view GBufferServerAddress {};
		uint32_t GBufferServerPort {};
		std::string_view LogUrl {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LightGridCaptureInfo>;
	};
} // namespace rivet::ddl::generated

// clang-format on
