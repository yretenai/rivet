// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ScriptSignalMessage : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ScriptSignalMessage";
		constexpr static rivet::rivet_type_id type_id = 0xa5c7735a;

		constexpr static std::string_view fr_type_name = "fr";
		constexpr static rivet::rivet_type_id fr_type_id = 0x6c99c7b1;
		constexpr static std::string_view id_type_name = "id";
		constexpr static rivet::rivet_type_id id_type_id = 0x1fd56e2f;
		constexpr static std::string_view pl_type_name = "pl";
		constexpr static rivet::rivet_type_id pl_type_id = 0x8a0e4f05;
		constexpr static std::string_view outpl_type_name = "outpl";
		constexpr static rivet::rivet_type_id outpl_type_id = 0x61f030e3;
		constexpr static std::string_view src_type_name = "src";
		constexpr static rivet::rivet_type_id src_type_id = 0x725c4ba4;
		constexpr static std::string_view z_type_name = "z";
		constexpr static rivet::rivet_type_id z_type_id = 0x8b530069;
		constexpr static std::string_view comment_type_name = "comment";
		constexpr static rivet::rivet_type_id comment_type_id = 0x5a2308c8;
		constexpr static std::string_view sourceAction_type_name = "sourceAction";
		constexpr static rivet::rivet_type_id sourceAction_type_id = 0x88ef5d7f; 

		explicit ScriptSignalMessage() = default;
		explicit ScriptSignalMessage([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t fr {};
		uint64_t id {};
		uint32_t pl {};
		uint32_t outpl {};
		uint64_t src {};
		uint64_t z {};
		std::string_view comment {};
		std::string_view sourceAction {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ScriptSignalMessage>;
	};
} // namespace rivet::ddl::generated

// clang-format on
