// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED RenamePathObj : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "RenamePathObj";
		constexpr static rivet::rivet_type_id type_id = 0xc0238ba9;

		constexpr static std::string_view ResourcePath_type_name = "ResourcePath";
		constexpr static rivet::rivet_type_id ResourcePath_type_id = 0x5da8b02;
		constexpr static std::string_view OldPath_type_name = "OldPath";
		constexpr static rivet::rivet_type_id OldPath_type_id = 0x78de65cb;
		constexpr static std::string_view NewPath_type_name = "NewPath";
		constexpr static rivet::rivet_type_id NewPath_type_id = 0xdee6d2e5; 

		explicit RenamePathObj() = default;
		explicit RenamePathObj([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view ResourcePath {};
		std::string_view OldPath {};
		std::string_view NewPath {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RenamePathObj>;
	};
} // namespace rivet::ddl::generated

// clang-format on
