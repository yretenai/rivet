// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotComboMoveFinaleBarrage.hpp>
#include <rivet/ddl/generated/BotComboMoveFinaleSweepChase.hpp>
#include <rivet/ddl/generated/BotComboMoveReferenceIndex.hpp>
#include <rivet/ddl/generated/BotComboMoveFinaleProtonSeeker.hpp>
#include <rivet/ddl/generated/BotComboMoveZordoomChaseMelee.hpp>
#include <rivet/ddl/generated/BotComboMove.hpp>
#include <rivet/ddl/generated/BotComboMoveFinaleAimCalibration.hpp>
#include <rivet/ddl/generated/BotComboMoveFinaleEyeBeam.hpp>
#include <rivet/ddl/generated/BotComboMoveFinaleHeadWarp.hpp>
#include <rivet/ddl/generated/BotComboMoveFinaleWeaponMultiAttack.hpp>
#include <rivet/ddl/generated/BotComboMoveFinaleHeadAnimation.hpp> 

#include <rivet/ddl/generated/BotComboMoveBase.hpp>

namespace rivet::ddl::generated {
	BotComboMoveBase::BotComboMoveBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	auto
	BotComboMoveBase::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	BotComboMoveBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotComboMoveBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboMoveBase> {
		if (incoming_type_id == BotComboMoveBase::type_id) {
			return std::make_shared<BotComboMoveBase>(serialized);
		}

		auto BotComboMoveFinaleBarrage_ptr = BotComboMoveFinaleBarrage::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinaleBarrage_ptr != nullptr) {
			return BotComboMoveFinaleBarrage_ptr;
		}

		auto BotComboMoveReferenceIndex_ptr = BotComboMoveReferenceIndex::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveReferenceIndex_ptr != nullptr) {
			return BotComboMoveReferenceIndex_ptr;
		}

		auto BotComboMoveFinaleAimCalibration_ptr = BotComboMoveFinaleAimCalibration::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinaleAimCalibration_ptr != nullptr) {
			return BotComboMoveFinaleAimCalibration_ptr;
		}

		auto BotComboMoveFinaleHeadWarp_ptr = BotComboMoveFinaleHeadWarp::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinaleHeadWarp_ptr != nullptr) {
			return BotComboMoveFinaleHeadWarp_ptr;
		}

		auto BotComboMoveFinaleProtonSeeker_ptr = BotComboMoveFinaleProtonSeeker::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinaleProtonSeeker_ptr != nullptr) {
			return BotComboMoveFinaleProtonSeeker_ptr;
		}

		auto BotComboMove_ptr = BotComboMove::from_substruct(incoming_type_id, serialized);
		if (BotComboMove_ptr != nullptr) {
			return BotComboMove_ptr;
		}

		auto BotComboMoveZordoomChaseMelee_ptr = BotComboMoveZordoomChaseMelee::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveZordoomChaseMelee_ptr != nullptr) {
			return BotComboMoveZordoomChaseMelee_ptr;
		}

		auto BotComboMoveFinaleSweepChase_ptr = BotComboMoveFinaleSweepChase::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinaleSweepChase_ptr != nullptr) {
			return BotComboMoveFinaleSweepChase_ptr;
		}

		auto BotComboMoveFinaleWeaponMultiAttack_ptr = BotComboMoveFinaleWeaponMultiAttack::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinaleWeaponMultiAttack_ptr != nullptr) {
			return BotComboMoveFinaleWeaponMultiAttack_ptr;
		}

		auto BotComboMoveFinaleHeadAnimation_ptr = BotComboMoveFinaleHeadAnimation::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinaleHeadAnimation_ptr != nullptr) {
			return BotComboMoveFinaleHeadAnimation_ptr;
		}

		auto BotComboMoveFinaleEyeBeam_ptr = BotComboMoveFinaleEyeBeam::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinaleEyeBeam_ptr != nullptr) {
			return BotComboMoveFinaleEyeBeam_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
