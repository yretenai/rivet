// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xb62b6a7f.hpp> 

namespace rivet::ddl::generated {
	struct DuckTarget;
	struct WwiseState;
	struct WwiseAuxSend; 

	struct RIVET_DDL_SHARED SoundEnvironmentControllerPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SoundEnvironmentControllerPrius";
		constexpr static rivet::rivet_type_id type_id = 0xf54b371a;

		constexpr static std::string_view TriggerPosition_type_name = "TriggerPosition";
		constexpr static rivet::rivet_type_id TriggerPosition_type_id = 0xccb9b06a;
		constexpr static std::string_view FadeIn_type_name = "FadeIn";
		constexpr static rivet::rivet_type_id FadeIn_type_id = 0x84ac8cf2;
		constexpr static std::string_view FadeOut_type_name = "FadeOut";
		constexpr static rivet::rivet_type_id FadeOut_type_id = 0xa9e43db1;
		constexpr static std::string_view Priority_type_name = "Priority";
		constexpr static rivet::rivet_type_id Priority_type_id = 0x98a76157;
		constexpr static std::string_view IsAdditive_type_name = "IsAdditive";
		constexpr static rivet::rivet_type_id IsAdditive_type_id = 0xa60f98d3;
		constexpr static std::string_view WwiseAuxSends_type_name = "WwiseAuxSends";
		constexpr static rivet::rivet_type_id WwiseAuxSends_type_id = 0xc2c28c0b;
		constexpr static std::string_view WwiseStates_type_name = "WwiseStates";
		constexpr static rivet::rivet_type_id WwiseStates_type_id = 0xa9ea28b0;
		constexpr static std::string_view DuckTargets_type_name = "DuckTargets";
		constexpr static rivet::rivet_type_id DuckTargets_type_id = 0x3cbb22c;
		constexpr static std::string_view ChildEmitters_type_name = "ChildEmitters";
		constexpr static rivet::rivet_type_id ChildEmitters_type_id = 0x9a566859;
		constexpr static std::string_view SateliteEmitters_type_name = "SateliteEmitters";
		constexpr static rivet::rivet_type_id SateliteEmitters_type_id = 0x79a1e898;
		constexpr static std::string_view Volumes_type_name = "Volumes";
		constexpr static rivet::rivet_type_id Volumes_type_id = 0x7b36c92d; 

		explicit SoundEnvironmentControllerPrius() = default;
		explicit SoundEnvironmentControllerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xb62b6a7f TriggerPosition {};
		float FadeIn {};
		float FadeOut {};
		uint32_t Priority {};
		bool IsAdditive {};
		std::vector<std::shared_ptr<rivet::ddl::generated::WwiseAuxSend>> WwiseAuxSends {};
		std::vector<std::shared_ptr<rivet::ddl::generated::WwiseState>> WwiseStates {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DuckTarget>> DuckTargets {};
		std::vector<uint64_t> ChildEmitters {};
		std::vector<uint64_t> SateliteEmitters {};
		std::vector<uint64_t> Volumes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundEnvironmentControllerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
