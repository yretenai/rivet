// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/InteractLocationCameraSettings.hpp>

namespace rivet::ddl::generated {
	InteractLocationCameraSettings::InteractLocationCameraSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		UserCamera = serialized->get_uint64(UserCamera_type_id);
		CameraOnDelay = serialized->get_float(CameraOnDelay_type_id);
		CameraOffDelay = serialized->get_float(CameraOffDelay_type_id);
		CameraOffDistance = serialized->get_float(CameraOffDistance_type_id);
		CameraBlendInTime = serialized->get_float(CameraBlendInTime_type_id);
		CameraBlendTime = serialized->get_float(CameraBlendTime_type_id);
		ActivateOnStart = serialized->get_bool(ActivateOnStart_type_id);
		UseAnimatedCamera = serialized->get_bool(UseAnimatedCamera_type_id);
		AnimatedCameraAnchor = serialized->get_string(AnimatedCameraAnchor_type_id); 
	}

	[[nodiscard]] auto
	InteractLocationCameraSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	InteractLocationCameraSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<InteractLocationCameraSettings> {
		if (incoming_type_id == InteractLocationCameraSettings::type_id) {
			return std::make_shared<InteractLocationCameraSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
