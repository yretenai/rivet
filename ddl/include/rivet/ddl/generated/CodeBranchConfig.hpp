// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct CodeBranchRef; 

	struct RIVET_DDL_SHARED CodeBranchConfig : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CodeBranchConfig";
		constexpr static rivet::rivet_type_id type_id = 0x796abff7;

		constexpr static std::string_view Branches_type_name = "Branches";
		constexpr static rivet::rivet_type_id Branches_type_id = 0x2d616c1f;
		constexpr static std::string_view SelectedBranchIndex_type_name = "SelectedBranchIndex";
		constexpr static rivet::rivet_type_id SelectedBranchIndex_type_id = 0x83b94c92;
		constexpr static std::string_view Timestamp_type_name = "Timestamp";
		constexpr static rivet::rivet_type_id Timestamp_type_id = 0x272b7932;
		constexpr static std::string_view GameBuildCacheDir_type_name = "GameBuildCacheDir";
		constexpr static rivet::rivet_type_id GameBuildCacheDir_type_id = 0xae835a98;
		constexpr static std::string_view GameBuildCacheOrigin_type_name = "GameBuildCacheOrigin";
		constexpr static rivet::rivet_type_id GameBuildCacheOrigin_type_id = 0x6ea74978; 

		explicit CodeBranchConfig() = default;
		explicit CodeBranchConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::CodeBranchRef>> Branches {};
		uint32_t SelectedBranchIndex {};
		uint64_t Timestamp {};
		std::string_view GameBuildCacheDir {};
		std::string_view GameBuildCacheOrigin {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CodeBranchConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
