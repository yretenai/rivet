// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ObjectiveLoadInfo.hpp>

namespace rivet::ddl::generated {
	ObjectiveLoadInfo::ObjectiveLoadInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SpawnCheckpoint = serialized->get_string(SpawnCheckpoint_type_id);
		DimensionCheckpoint = serialized->get_string(DimensionCheckpoint_type_id);
		SpawnAsHero = serialized->get_enum<rivet::ddl::generated::HeroTypes>(SpawnAsHero_type_id, rivet::ddl::generated::HeroTypes_values);
		LightingMode = serialized->get_enum<rivet::ddl::generated::xee0945fb>(LightingMode_type_id, rivet::ddl::generated::xee0945fb_values);
		SpawnLoadout = serialized->get_string(SpawnLoadout_type_id);
		ChallengeSpawnLoadout = serialized->get_string(ChallengeSpawnLoadout_type_id);
		BackpackLoadout = serialized->get_string(BackpackLoadout_type_id); 
	}

	[[nodiscard]] auto
	ObjectiveLoadInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ObjectiveLoadInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ObjectiveLoadInfo> {
		if (incoming_type_id == ObjectiveLoadInfo::type_id) {
			return std::make_shared<ObjectiveLoadInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
