// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ProjectileThrowingConfig.hpp>

namespace rivet::ddl::generated {
	ProjectileThrowingConfig::ProjectileThrowingConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		DesiredFlightTime = serialized->get_float(DesiredFlightTime_type_id, 1.000000);
		MinSpeed = serialized->get_float(MinSpeed_type_id, 10.000000);
		MaxSpeed = serialized->get_float(MaxSpeed_type_id, 50.000000);
		ArcHeights = serialized->get_floats(ArcHeights_type_id);
		CollCheckWidth = serialized->get_float(CollCheckWidth_type_id, 0.100000);
		MaxPredictionSpeed = serialized->get_float(MaxPredictionSpeed_type_id, 5.000000);
		MaxPredictionSpeedTraversal = serialized->get_float(MaxPredictionSpeedTraversal_type_id, 7.000000);
		CameraFacingOffset = serialized->get_float(CameraFacingOffset_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	ProjectileThrowingConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ProjectileThrowingConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ProjectileThrowingConfig> {
		if (incoming_type_id == ProjectileThrowingConfig::type_id) {
			return std::make_shared<ProjectileThrowingConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
