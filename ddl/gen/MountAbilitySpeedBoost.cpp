// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MountAbilitySpeedBoost.hpp>

namespace rivet::ddl::generated {
	MountAbilitySpeedBoost::MountAbilitySpeedBoost([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): MountAbilityBase(serialized) {
		AdditionalBoostSpeed = serialized->get_float(AdditionalBoostSpeed_type_id, 4.000000);
		BoostDuration = serialized->get_float(BoostDuration_type_id, 2.000000);
		HoldToBoost = serialized->get_bool(HoldToBoost_type_id, false);
		BoostIntroAnim = serialized->get_string(BoostIntroAnim_type_id, {});
		BoostLoopingAnim = serialized->get_string(BoostLoopingAnim_type_id, {});
		BoostOutroAnim = serialized->get_string(BoostOutroAnim_type_id, {}); 
	}

	[[nodiscard]] auto
	MountAbilitySpeedBoost::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MountAbilitySpeedBoost::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MountAbilitySpeedBoost> {
		if (incoming_type_id == MountAbilitySpeedBoost::type_id) {
			return std::make_shared<MountAbilitySpeedBoost>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
