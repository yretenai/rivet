// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TimeScaleRampedPrius.hpp> 

#include <rivet/ddl/generated/TimeScaleBasePrius.hpp>

namespace rivet::ddl::generated {
	TimeScaleBasePrius::TimeScaleBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Channel = serialized->get_enum<rivet::ddl::generated::xd4d128f9>(Channel_type_id, rivet::ddl::generated::xd4d128f9_values);
		Context = serialized->get_string(Context_type_id);
		TimeScale = serialized->get_float(TimeScale_type_id);
		Duration = serialized->get_float(Duration_type_id);
		DurationUnits = serialized->get_enum<rivet::ddl::generated::x7d9b794e>(DurationUnits_type_id, rivet::ddl::generated::x7d9b794e_values); 
	}

	auto
	TimeScaleBasePrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	TimeScaleBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TimeScaleBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TimeScaleBasePrius> {
		if (incoming_type_id == TimeScaleBasePrius::type_id) {
			return std::make_shared<TimeScaleBasePrius>(serialized);
		}

		auto TimeScaleRampedPrius_ptr = TimeScaleRampedPrius::from_substruct(incoming_type_id, serialized);
		if (TimeScaleRampedPrius_ptr != nullptr) {
			return TimeScaleRampedPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
