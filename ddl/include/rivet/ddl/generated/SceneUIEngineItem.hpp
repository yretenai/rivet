// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/CameraControlType.hpp>
#include <rivet/ddl/generated/enums/GamepadEnableMode.hpp>
#include <rivet/ddl/generated/enums/ToolMode.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SceneUIEngineItem : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SceneUIEngineItem";
		constexpr static rivet::rivet_type_id type_id = 0x5ee2cf6e;

		constexpr static std::string_view ToolMode_type_name = "ToolMode";
		constexpr static rivet::rivet_type_id ToolMode_type_id = 0x791bd135;
		constexpr static std::string_view EnableSelection_type_name = "EnableSelection";
		constexpr static rivet::rivet_type_id EnableSelection_type_id = 0x6a9652f6;
		constexpr static std::string_view EnableManipulator_type_name = "EnableManipulator";
		constexpr static rivet::rivet_type_id EnableManipulator_type_id = 0xb33b8260;
		constexpr static std::string_view EnableMarquee_type_name = "EnableMarquee";
		constexpr static rivet::rivet_type_id EnableMarquee_type_id = 0x452b2f08;
		constexpr static std::string_view RenderHud_type_name = "RenderHud";
		constexpr static rivet::rivet_type_id RenderHud_type_id = 0x9cbcd07a;
		constexpr static std::string_view RenderLights_type_name = "RenderLights";
		constexpr static rivet::rivet_type_id RenderLights_type_id = 0xf2264635;
		constexpr static std::string_view RenderVolumes_type_name = "RenderVolumes";
		constexpr static rivet::rivet_type_id RenderVolumes_type_id = 0x50767105;
		constexpr static std::string_view RenderCameras_type_name = "RenderCameras";
		constexpr static rivet::rivet_type_id RenderCameras_type_id = 0x41f5fc7a;
		constexpr static std::string_view PointVolumeSize_type_name = "PointVolumeSize";
		constexpr static rivet::rivet_type_id PointVolumeSize_type_id = 0x93193e3b;
		constexpr static std::string_view LightSize_type_name = "LightSize";
		constexpr static rivet::rivet_type_id LightSize_type_id = 0xc155af99;
		constexpr static std::string_view CameraSize_type_name = "CameraSize";
		constexpr static rivet::rivet_type_id CameraSize_type_id = 0x4f1a6c8c;
		constexpr static std::string_view ActiveCameraId_type_name = "ActiveCameraId";
		constexpr static rivet::rivet_type_id ActiveCameraId_type_id = 0x4c528d45;
		constexpr static std::string_view DebugCameraId_type_name = "DebugCameraId";
		constexpr static rivet::rivet_type_id DebugCameraId_type_id = 0xe2407c64;
		constexpr static std::string_view CameraControlType_type_name = "CameraControlType";
		constexpr static rivet::rivet_type_id CameraControlType_type_id = 0xe84ddf61;
		constexpr static std::string_view GamepadEnableMode_type_name = "GamepadEnableMode";
		constexpr static rivet::rivet_type_id GamepadEnableMode_type_id = 0xcfd4e774;
		constexpr static std::string_view SelectableNodes_type_name = "SelectableNodes";
		constexpr static rivet::rivet_type_id SelectableNodes_type_id = 0xe6c7821; 

		explicit SceneUIEngineItem() = default;
		explicit SceneUIEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::ToolMode ToolMode {};
		bool EnableSelection {};
		bool EnableManipulator {};
		bool EnableMarquee {};
		bool RenderHud {};
		bool RenderLights {};
		bool RenderVolumes {};
		bool RenderCameras {};
		float PointVolumeSize {};
		float LightSize {};
		float CameraSize {};
		uint64_t ActiveCameraId {};
		uint64_t DebugCameraId {};
		rivet::ddl::generated::CameraControlType CameraControlType {};
		rivet::ddl::generated::GamepadEnableMode GamepadEnableMode {};
		std::vector<bool> SelectableNodes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SceneUIEngineItem>;
	};
} // namespace rivet::ddl::generated

// clang-format on
