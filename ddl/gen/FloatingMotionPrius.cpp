// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FloatingMotionPrius.hpp>

namespace rivet::ddl::generated {
	FloatingMotionPrius::FloatingMotionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id);
		RockFrequency = serialized->get_float(RockFrequency_type_id);
		RockAmplitude = serialized->get_float(RockAmplitude_type_id);
		RockFrequencyTurning = serialized->get_float(RockFrequencyTurning_type_id);
		RockAmplitudeTurning = serialized->get_float(RockAmplitudeTurning_type_id);
		RollFrequency = serialized->get_float(RollFrequency_type_id);
		RollAmplitude = serialized->get_float(RollAmplitude_type_id);
		RollFrequencyTurning = serialized->get_float(RollFrequencyTurning_type_id);
		RollAmplitudeTurning = serialized->get_float(RollAmplitudeTurning_type_id);
		BankFactor = serialized->get_float(BankFactor_type_id);
		BankAngleMax = serialized->get_float(BankAngleMax_type_id);
		SmoothTurnRate = serialized->get_float(SmoothTurnRate_type_id);
		SmoothTurnInertia = serialized->get_float(SmoothTurnInertia_type_id);
		TweakSortBias = serialized->get_bool(TweakSortBias_type_id);
		SmoothTurning = serialized->get_bool(SmoothTurning_type_id);
		UpdateAsync = serialized->get_bool(UpdateAsync_type_id); 
	}

	[[nodiscard]] auto
	FloatingMotionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FloatingMotionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FloatingMotionPrius> {
		if (incoming_type_id == FloatingMotionPrius::type_id) {
			return std::make_shared<FloatingMotionPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
