// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BattleBrewDeactivationStartEvent.hpp>
#include <rivet/ddl/generated/BattleBrewActivationFinishEvent.hpp>
#include <rivet/ddl/generated/BattleBrewDeactivationFinishEvent.hpp>
#include <rivet/ddl/generated/BattleBrewActivationStartEvent.hpp> 

#include <rivet/ddl/generated/BattleBrewEvent.hpp>

namespace rivet::ddl::generated {
	BattleBrewEvent::BattleBrewEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		BrewName = serialized->get_string(BrewName_type_id, {}); 
	}

	[[nodiscard]] auto
	BattleBrewEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BattleBrewEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BattleBrewEvent> {
		if (incoming_type_id == BattleBrewEvent::type_id) {
			return std::make_shared<BattleBrewEvent>(serialized);
		}

		auto BattleBrewActivationStartEvent_ptr = BattleBrewActivationStartEvent::from_substruct(incoming_type_id, serialized);
		if (BattleBrewActivationStartEvent_ptr != nullptr) {
			return BattleBrewActivationStartEvent_ptr;
		}

		auto BattleBrewDeactivationFinishEvent_ptr = BattleBrewDeactivationFinishEvent::from_substruct(incoming_type_id, serialized);
		if (BattleBrewDeactivationFinishEvent_ptr != nullptr) {
			return BattleBrewDeactivationFinishEvent_ptr;
		}

		auto BattleBrewActivationFinishEvent_ptr = BattleBrewActivationFinishEvent::from_substruct(incoming_type_id, serialized);
		if (BattleBrewActivationFinishEvent_ptr != nullptr) {
			return BattleBrewActivationFinishEvent_ptr;
		}

		auto BattleBrewDeactivationStartEvent_ptr = BattleBrewDeactivationStartEvent::from_substruct(incoming_type_id, serialized);
		if (BattleBrewDeactivationStartEvent_ptr != nullptr) {
			return BattleBrewDeactivationStartEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
