// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DEVOFollowup.hpp>

namespace rivet::ddl::generated {
	DEVOFollowup::DEVOFollowup([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ToWhom = serialized->get_enum<rivet::ddl::generated::xb3a943f0>(ToWhom_type_id, rivet::ddl::generated::xb3a943f0_values, rivet::ddl::generated::xb3a943f0::Any);
		SpecificTargetVoice = serialized->get_enum<rivet::ddl::generated::Voice>(SpecificTargetVoice_type_id, rivet::ddl::generated::Voice_values, rivet::ddl::generated::Voice::unused);
		Radius = serialized->get_float(Radius_type_id, 0.000000);
		FollowupTrigger = serialized->get_enum<rivet::ddl::generated::x6be956dd>(FollowupTrigger_type_id, rivet::ddl::generated::x6be956dd_values, rivet::ddl::generated::x6be956dd::OnAnswer); 
	}

	[[nodiscard]] auto
	DEVOFollowup::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DEVOFollowup::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DEVOFollowup> {
		if (incoming_type_id == DEVOFollowup::type_id) {
			return std::make_shared<DEVOFollowup>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
