// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SceneEditorHotkey.hpp>

namespace rivet::ddl::generated {
	SceneEditorHotkey::SceneEditorHotkey([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ControlName = serialized->get_string(ControlName_type_id, {});
		Description = serialized->get_string(Description_type_id, {});
		Key1 = serialized->get_strings(Key1_type_id);
		Trigger1 = serialized->get_strings(Trigger1_type_id);
		Key2 = serialized->get_strings(Key2_type_id);
		Trigger2 = serialized->get_strings(Trigger2_type_id); 
	}

	[[nodiscard]] auto
	SceneEditorHotkey::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SceneEditorHotkey::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SceneEditorHotkey> {
		if (incoming_type_id == SceneEditorHotkey::type_id) {
			return std::make_shared<SceneEditorHotkey>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
