// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/BaseCustomOverlayTriggerPrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DuringObjectivesTriggerPrius : BaseCustomOverlayTriggerPrius {
		constexpr static std::string_view type_name = "DuringObjectivesTriggerPrius";
		constexpr static rivet::rivet_type_id type_id = 0xf1ec5e41;

		constexpr static std::string_view StartMissionName_type_name = "StartMissionName";
		constexpr static rivet::rivet_type_id StartMissionName_type_id = 0xfe0f742a;
		constexpr static std::string_view StartAtAvailable_type_name = "StartAtAvailable";
		constexpr static rivet::rivet_type_id StartAtAvailable_type_id = 0x1218c4ef;
		constexpr static std::string_view StartObjectiveName_type_name = "StartObjectiveName";
		constexpr static rivet::rivet_type_id StartObjectiveName_type_id = 0xe2320ffa;
		constexpr static std::string_view EndMissionName_type_name = "EndMissionName";
		constexpr static rivet::rivet_type_id EndMissionName_type_id = 0x91d8893e;
		constexpr static std::string_view EndAfterCleanup_type_name = "EndAfterCleanup";
		constexpr static rivet::rivet_type_id EndAfterCleanup_type_id = 0xa0904058;
		constexpr static std::string_view EndObjectiveName_type_name = "EndObjectiveName";
		constexpr static rivet::rivet_type_id EndObjectiveName_type_id = 0xf9039d9; 

		explicit DuringObjectivesTriggerPrius() = default;
		explicit DuringObjectivesTriggerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view StartMissionName {};
		bool StartAtAvailable {};
		std::string_view StartObjectiveName {};
		std::string_view EndMissionName {};
		bool EndAfterCleanup {};
		std::string_view EndObjectiveName {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DuringObjectivesTriggerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
