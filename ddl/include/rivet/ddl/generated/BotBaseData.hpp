// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/x87e08126.hpp> 

namespace rivet::ddl::generated {
	struct BotBaseDataModDef; 

	struct RIVET_DDL_SHARED BotBaseData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "BotBaseData";
		constexpr static rivet::rivet_type_id type_id = 0xd5d88438;

		constexpr static std::string_view Health_type_name = "Health";
		constexpr static rivet::rivet_type_id Health_type_id = 0xf0a26d74;
		constexpr static std::string_view HealthFlags_type_name = "HealthFlags";
		constexpr static rivet::rivet_type_id HealthFlags_type_id = 0x7b898c1;
		constexpr static std::string_view MovementConfig_type_name = "MovementConfig";
		constexpr static rivet::rivet_type_id MovementConfig_type_id = 0xf6fce067;
		constexpr static std::string_view Movement3DConfig_type_name = "Movement3DConfig";
		constexpr static rivet::rivet_type_id Movement3DConfig_type_id = 0xa6821710;
		constexpr static std::string_view MeleeConfig_type_name = "MeleeConfig";
		constexpr static rivet::rivet_type_id MeleeConfig_type_id = 0xd3e3c0f8;
		constexpr static std::string_view HitReactConfig_type_name = "HitReactConfig";
		constexpr static rivet::rivet_type_id HitReactConfig_type_id = 0xeaee95fe;
		constexpr static std::string_view TargetingConfig_type_name = "TargetingConfig";
		constexpr static rivet::rivet_type_id TargetingConfig_type_id = 0x8dd2dde;
		constexpr static std::string_view AwarenessConfig_type_name = "AwarenessConfig";
		constexpr static rivet::rivet_type_id AwarenessConfig_type_id = 0xdea9552a;
		constexpr static std::string_view PropConfig_type_name = "PropConfig";
		constexpr static rivet::rivet_type_id PropConfig_type_id = 0x97e7b151;
		constexpr static std::string_view RandomAttachConfig_type_name = "RandomAttachConfig";
		constexpr static rivet::rivet_type_id RandomAttachConfig_type_id = 0x68e19d6d;
		constexpr static std::string_view DeathConfig_type_name = "DeathConfig";
		constexpr static rivet::rivet_type_id DeathConfig_type_id = 0x8827495f;
		constexpr static std::string_view TargetingAimAngleConfig_type_name = "TargetingAimAngleConfig";
		constexpr static rivet::rivet_type_id TargetingAimAngleConfig_type_id = 0x646d6db0;
		constexpr static std::string_view BotConfigPhysics_type_name = "BotConfigPhysics";
		constexpr static rivet::rivet_type_id BotConfigPhysics_type_id = 0xd2f3fa18;
		constexpr static std::string_view ConfigModDefs_type_name = "ConfigModDefs";
		constexpr static rivet::rivet_type_id ConfigModDefs_type_id = 0x3d4ae417;
		constexpr static std::string_view UseBotStartup_type_name = "UseBotStartup";
		constexpr static rivet::rivet_type_id UseBotStartup_type_id = 0x6251b268;
		constexpr static std::string_view ActivateUserPoseDriverOnInit_type_name = "ActivateUserPoseDriverOnInit";
		constexpr static rivet::rivet_type_id ActivateUserPoseDriverOnInit_type_id = 0x3d8b488f;
		constexpr static std::string_view ApplyActorScaleToSpeed_type_name = "ApplyActorScaleToSpeed";
		constexpr static rivet::rivet_type_id ApplyActorScaleToSpeed_type_id = 0x752c1559; 

		explicit BotBaseData() = default;
		explicit BotBaseData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float Health {};
		rivet::ddl::generated::x87e08126 HealthFlags {};
		std::string_view MovementConfig {};
		std::string_view Movement3DConfig {};
		std::string_view MeleeConfig {};
		std::string_view HitReactConfig {};
		std::string_view TargetingConfig {};
		std::string_view AwarenessConfig {};
		std::string_view PropConfig {};
		std::string_view RandomAttachConfig {};
		std::string_view DeathConfig {};
		std::string_view TargetingAimAngleConfig {};
		std::string_view BotConfigPhysics {};
		std::vector<std::shared_ptr<rivet::ddl::generated::BotBaseDataModDef>> ConfigModDefs {};
		bool UseBotStartup {};
		bool ActivateUserPoseDriverOnInit {};
		bool ApplyActorScaleToSpeed {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotBaseData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
