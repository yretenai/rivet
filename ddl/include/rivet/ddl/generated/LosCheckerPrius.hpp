// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xfcda154f.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED LosCheckerPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "LosCheckerPrius";
		constexpr static rivet::rivet_type_id type_id = 0xc6ccfdf3;

		constexpr static std::string_view Mode_type_name = "Mode";
		constexpr static rivet::rivet_type_id Mode_type_id = 0xa75a871b;
		constexpr static std::string_view MaxRaycastsPerFrame_type_name = "MaxRaycastsPerFrame";
		constexpr static rivet::rivet_type_id MaxRaycastsPerFrame_type_id = 0x42315c03;
		constexpr static std::string_view RemoveIfInactive_type_name = "RemoveIfInactive";
		constexpr static rivet::rivet_type_id RemoveIfInactive_type_id = 0x26cd546b;
		constexpr static std::string_view InactiveAutoRemoveTime_type_name = "InactiveAutoRemoveTime";
		constexpr static rivet::rivet_type_id InactiveAutoRemoveTime_type_id = 0x1070b523; 

		explicit LosCheckerPrius() = default;
		explicit LosCheckerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xfcda154f Mode {};
		uint8_t MaxRaycastsPerFrame {};
		bool RemoveIfInactive {};
		float InactiveAutoRemoveTime {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LosCheckerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
