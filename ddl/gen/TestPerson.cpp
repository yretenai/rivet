// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TestPerson.hpp>

namespace rivet::ddl::generated {
	TestPerson::TestPerson([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FirstName = serialized->get_string(FirstName_type_id, {});
		LastName = serialized->get_string(LastName_type_id, {});
		Age = serialized->get_int32(Age_type_id, 0u);
		Height = serialized->get_int32(Height_type_id, 0u);
		EyeColor = serialized->get_string(EyeColor_type_id, {});
		Address = serialized->get_string(Address_type_id, {});
		Phone = serialized->get_string(Phone_type_id, {});
		Id = serialized->get_int32(Id_type_id, 0u); 
	}

	[[nodiscard]] auto
	TestPerson::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TestPerson::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TestPerson> {
		if (incoming_type_id == TestPerson::type_id) {
			return std::make_shared<TestPerson>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
