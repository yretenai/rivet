// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WeaponModData.hpp>

namespace rivet::ddl::generated {
	WeaponModData::WeaponModData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Type = serialized->get_enum<rivet::ddl::generated::xdbb7aaff>(Type_type_id, rivet::ddl::generated::xdbb7aaff_values);
		IconType = serialized->get_enum<rivet::ddl::generated::x1c87ac4a>(IconType_type_id, rivet::ddl::generated::x1c87ac4a_values);
		IsPercent = serialized->get_bool(IsPercent_type_id);
		Value = serialized->get_float(Value_type_id);
		Cost = serialized->get_uint32(Cost_type_id);
		NameLocTag = serialized->get_string(NameLocTag_type_id);
		DescLocTag = serialized->get_string(DescLocTag_type_id);
		TileIndex = serialized->get_enum<rivet::ddl::generated::x1b1e7614>(TileIndex_type_id, rivet::ddl::generated::x1b1e7614_values); 
	}

	auto
	WeaponModData::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	WeaponModData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeaponModData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponModData> {
		if (incoming_type_id == WeaponModData::type_id) {
			return std::make_shared<WeaponModData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
