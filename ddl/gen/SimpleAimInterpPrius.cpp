// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SimpleAimInterpPrius.hpp>

namespace rivet::ddl::generated {
	SimpleAimInterpPrius::SimpleAimInterpPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TotalTime = serialized->get_float(TotalTime_type_id, 2.000000f);
		StartOn = serialized->get_bool(StartOn_type_id, true);
		ClampedYawMinDeg = serialized->get_float(ClampedYawMinDeg_type_id, -45.000000f);
		ClampedYawMaxDeg = serialized->get_float(ClampedYawMaxDeg_type_id, 45.000000f);
		ClampedPitchMinDeg = serialized->get_float(ClampedPitchMinDeg_type_id, 0.000000f);
		ClampedPitchMaxDeg = serialized->get_float(ClampedPitchMaxDeg_type_id, 0.000000f);
		AnimYawMinDeg = serialized->get_float(AnimYawMinDeg_type_id, -90.000000f);
		AnimYawMaxDeg = serialized->get_float(AnimYawMaxDeg_type_id, 90.000000f);
		AnimPitchMinDeg = serialized->get_float(AnimPitchMinDeg_type_id, -90.000000f);
		AnimPitchMaxDeg = serialized->get_float(AnimPitchMaxDeg_type_id, 90.000000f); 
	}

	[[nodiscard]] auto
	SimpleAimInterpPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SimpleAimInterpPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleAimInterpPrius> {
		if (incoming_type_id == SimpleAimInterpPrius::type_id) {
			return std::make_shared<SimpleAimInterpPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
