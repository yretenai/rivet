// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2MayaShotExportInfo.hpp>

namespace rivet::ddl::generated {
	Cinematic2MayaShotExportInfo::Cinematic2MayaShotExportInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		File = serialized->get_string(File_type_id, {});
		LastExportTime = serialized->get_string(LastExportTime_type_id, {});
		ExportedFrom = serialized->get_string(ExportedFrom_type_id, {});
		Notes = serialized->get_string(Notes_type_id, {});
		UpdateFromMaya = serialized->get_bool(UpdateFromMaya_type_id, false);
		MayaStartFrame = serialized->get_int32(MayaStartFrame_type_id, -1);
		MayaEndFrame = serialized->get_int32(MayaEndFrame_type_id, -1);
		Muid0 = serialized->get_uint64(Muid0_type_id, 0);
		Muid1 = serialized->get_uint64(Muid1_type_id, 0);
		MayaShotSplitOrder = serialized->get_uint16(MayaShotSplitOrder_type_id, 65535); 
	}

	[[nodiscard]] auto
	Cinematic2MayaShotExportInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2MayaShotExportInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2MayaShotExportInfo> {
		if (incoming_type_id == Cinematic2MayaShotExportInfo::type_id) {
			return std::make_shared<Cinematic2MayaShotExportInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
