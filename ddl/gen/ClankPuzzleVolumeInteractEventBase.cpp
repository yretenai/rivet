// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ClankPuzzleVolumeInteractOnFadeOutCompleteEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeInteractOnHoldCompleteEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeInteractOnFadeInCompleteEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeInteractOnEnterEvent.hpp>
#include <rivet/ddl/generated/ClankPuzzleVolumeInteractOnExitEvent.hpp> 

#include <rivet/ddl/generated/ClankPuzzleVolumeInteractEventBase.hpp>

namespace rivet::ddl::generated {
	ClankPuzzleVolumeInteractEventBase::ClankPuzzleVolumeInteractEventBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		VolumeType = serialized->get_enum<rivet::ddl::generated::x17b935fe>(VolumeType_type_id, rivet::ddl::generated::x17b935fe_values); 
	}

	[[nodiscard]] auto
	ClankPuzzleVolumeInteractEventBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ClankPuzzleVolumeInteractEventBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ClankPuzzleVolumeInteractEventBase> {
		if (incoming_type_id == ClankPuzzleVolumeInteractEventBase::type_id) {
			return std::make_shared<ClankPuzzleVolumeInteractEventBase>(serialized);
		}

		auto ClankPuzzleVolumeInteractOnExitEvent_ptr = ClankPuzzleVolumeInteractOnExitEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeInteractOnExitEvent_ptr != nullptr) {
			return ClankPuzzleVolumeInteractOnExitEvent_ptr;
		}

		auto ClankPuzzleVolumeInteractOnEnterEvent_ptr = ClankPuzzleVolumeInteractOnEnterEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeInteractOnEnterEvent_ptr != nullptr) {
			return ClankPuzzleVolumeInteractOnEnterEvent_ptr;
		}

		auto ClankPuzzleVolumeInteractOnHoldCompleteEvent_ptr = ClankPuzzleVolumeInteractOnHoldCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeInteractOnHoldCompleteEvent_ptr != nullptr) {
			return ClankPuzzleVolumeInteractOnHoldCompleteEvent_ptr;
		}

		auto ClankPuzzleVolumeInteractOnFadeOutCompleteEvent_ptr = ClankPuzzleVolumeInteractOnFadeOutCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeInteractOnFadeOutCompleteEvent_ptr != nullptr) {
			return ClankPuzzleVolumeInteractOnFadeOutCompleteEvent_ptr;
		}

		auto ClankPuzzleVolumeInteractOnFadeInCompleteEvent_ptr = ClankPuzzleVolumeInteractOnFadeInCompleteEvent::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleVolumeInteractOnFadeInCompleteEvent_ptr != nullptr) {
			return ClankPuzzleVolumeInteractOnFadeInCompleteEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
