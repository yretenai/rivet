// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED FurProperties : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "FurProperties";
		constexpr static rivet::rivet_type_id type_id = 0xafa8e623;

		constexpr static std::string_view LayerCount_type_name = "LayerCount";
		constexpr static rivet::rivet_type_id LayerCount_type_id = 0x163e9e1e;
		constexpr static std::string_view LoDReduction_type_name = "LoDReduction";
		constexpr static rivet::rivet_type_id LoDReduction_type_id = 0x1461d827;
		constexpr static std::string_view Length_type_name = "Length";
		constexpr static rivet::rivet_type_id Length_type_id = 0x3f05d0d5;
		constexpr static std::string_view Density_type_name = "Density";
		constexpr static rivet::rivet_type_id Density_type_id = 0xc14209c2;
		constexpr static std::string_view OffsetScale_type_name = "OffsetScale";
		constexpr static rivet::rivet_type_id OffsetScale_type_id = 0x56b049ab;
		constexpr static std::string_view GlossScale_type_name = "GlossScale";
		constexpr static rivet::rivet_type_id GlossScale_type_id = 0x388a1a5;
		constexpr static std::string_view SpecularScale_type_name = "SpecularScale";
		constexpr static rivet::rivet_type_id SpecularScale_type_id = 0xb5d495c8;
		constexpr static std::string_view TransmittanceScale_type_name = "TransmittanceScale";
		constexpr static rivet::rivet_type_id TransmittanceScale_type_id = 0xd1b350cc;
		constexpr static std::string_view LightWrap_type_name = "LightWrap";
		constexpr static rivet::rivet_type_id LightWrap_type_id = 0x9aaf5b2e;
		constexpr static std::string_view Wetness_type_name = "Wetness";
		constexpr static rivet::rivet_type_id Wetness_type_id = 0xb9d9094d;
		constexpr static std::string_view BaseMapPath_type_name = "BaseMapPath";
		constexpr static rivet::rivet_type_id BaseMapPath_type_id = 0x146722eb;
		constexpr static std::string_view NormalMapPath_type_name = "NormalMapPath";
		constexpr static rivet::rivet_type_id NormalMapPath_type_id = 0x455116c5;
		constexpr static std::string_view GlossMapPath_type_name = "GlossMapPath";
		constexpr static rivet::rivet_type_id GlossMapPath_type_id = 0xe0c69aad;
		constexpr static std::string_view ControlMapPath_type_name = "ControlMapPath";
		constexpr static rivet::rivet_type_id ControlMapPath_type_id = 0xb6e2ce1d; 

		explicit FurProperties() = default;
		explicit FurProperties([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t LayerCount {};
		float LoDReduction {};
		float Length {};
		float Density {};
		float OffsetScale {};
		float GlossScale {};
		float SpecularScale {};
		float TransmittanceScale {};
		float LightWrap {};
		float Wetness {};
		std::string_view BaseMapPath {};
		std::string_view NormalMapPath {};
		std::string_view GlossMapPath {};
		std::string_view ControlMapPath {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FurProperties>;
	};
} // namespace rivet::ddl::generated

// clang-format on
