// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/BreakableBusterPrius.hpp>

namespace rivet::ddl::generated {
	BreakableBusterPrius::BreakableBusterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Locator = serialized->get_string(Locator_type_id, {});
		LocalOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(LocalOffset_type_id);
		Radius = serialized->get_float(Radius_type_id, 1.000000);
		SpeedThreshold = serialized->get_float(SpeedThreshold_type_id, 5.000000);
		DamagePerSpeed = serialized->get_float(DamagePerSpeed_type_id, 5.000000);
		DamageHash = serialized->get_string(DamageHash_type_id, "BreakableBuster");
		ActorType = serialized->get_enum<rivet::ddl::generated::xad01e8be>(ActorType_type_id, rivet::ddl::generated::xad01e8be_values, rivet::ddl::generated::xad01e8be::Bot);
		RequireEngaged = serialized->get_bool(RequireEngaged_type_id, false);
		DamageInXZPlane = serialized->get_bool(DamageInXZPlane_type_id, true); 
	}

	[[nodiscard]] auto
	BreakableBusterPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BreakableBusterPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BreakableBusterPrius> {
		if (incoming_type_id == BreakableBusterPrius::type_id) {
			return std::make_shared<BreakableBusterPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
