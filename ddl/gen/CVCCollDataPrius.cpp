// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/CVCCollDataPrius.hpp>

namespace rivet::ddl::generated {
	CVCCollDataPrius::CVCCollDataPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PushValue = serialized->get_float(PushValue_type_id, 1.000000);
		PushOnEqual = serialized->get_bool(PushOnEqual_type_id, false);
		AlwaysPushVertical = serialized->get_bool(AlwaysPushVertical_type_id, false);
		AllowSoftCollisions = serialized->get_bool(AllowSoftCollisions_type_id, false);
		UpdateExtents = serialized->get_bool(UpdateExtents_type_id, false);
		ManualUpdateShape = serialized->get_bool(ManualUpdateShape_type_id, false);
		Crucial = serialized->get_bool(Crucial_type_id, false);
		ApplyActorScale = serialized->get_bool(ApplyActorScale_type_id, false);
		MovingEnvironment = serialized->get_bool(MovingEnvironment_type_id, false);
		LocatorOrJointName = serialized->get_string(LocatorOrJointName_type_id, {});
		Type = serialized->get_enum<rivet::ddl::generated::x14f7ad69>(Type_type_id, rivet::ddl::generated::x14f7ad69_values, rivet::ddl::generated::x14f7ad69::Cylinder);
		Radius = serialized->get_float(Radius_type_id, 0.500000);
		SoftRadiusInner = serialized->get_float(SoftRadiusInner_type_id, 0.250000);
		SoftRadiusOuter = serialized->get_float(SoftRadiusOuter_type_id, 0.750000);
		HeightUp = serialized->get_float(HeightUp_type_id, 2.000000);
		HeightDown = serialized->get_float(HeightDown_type_id, 0.000000);
		UseModelOBB = serialized->get_bool(UseModelOBB_type_id, true);
		BoxExtentsX = serialized->get_float(BoxExtentsX_type_id, 1.000000);
		BoxExtentsY = serialized->get_float(BoxExtentsY_type_id, 1.000000);
		BoxExtentsZ = serialized->get_float(BoxExtentsZ_type_id, 1.000000);
		BoxOBBCenter = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(BoxOBBCenter_type_id); 
	}

	[[nodiscard]] auto
	CVCCollDataPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CVCCollDataPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CVCCollDataPrius> {
		if (incoming_type_id == CVCCollDataPrius::type_id) {
			return std::make_shared<CVCCollDataPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
