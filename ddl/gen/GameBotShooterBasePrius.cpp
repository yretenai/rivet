// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameBotShooterNoFiringPrius.hpp>
#include <rivet/ddl/generated/GameBotShooterHeliPrius.hpp>
#include <rivet/ddl/generated/GameBotShooterPrius.hpp>
#include <rivet/ddl/generated/GameBotShooterTurretPrius.hpp>
#include <rivet/ddl/generated/BotIntroData.hpp> 

#include <rivet/ddl/generated/GameBotShooterBasePrius.hpp>

namespace rivet::ddl::generated {
	GameBotShooterBasePrius::GameBotShooterBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotPrius(serialized) {
		IntroData = serialized->unwrap_into<rivet::ddl::generated::BotIntroData>(IntroData_type_id); 
	}

	[[nodiscard]] auto
	GameBotShooterBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameBotShooterBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotShooterBasePrius> {
		if (incoming_type_id == GameBotShooterBasePrius::type_id) {
			return std::make_shared<GameBotShooterBasePrius>(serialized);
		}

		auto GameBotShooterTurretPrius_ptr = GameBotShooterTurretPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterTurretPrius_ptr != nullptr) {
			return GameBotShooterTurretPrius_ptr;
		}

		auto GameBotShooterPrius_ptr = GameBotShooterPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterPrius_ptr != nullptr) {
			return GameBotShooterPrius_ptr;
		}

		auto GameBotShooterHeliPrius_ptr = GameBotShooterHeliPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterHeliPrius_ptr != nullptr) {
			return GameBotShooterHeliPrius_ptr;
		}

		auto GameBotShooterNoFiringPrius_ptr = GameBotShooterNoFiringPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterNoFiringPrius_ptr != nullptr) {
			return GameBotShooterNoFiringPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
