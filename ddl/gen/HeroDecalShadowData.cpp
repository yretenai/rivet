// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/HeroDecalShadowData.hpp>

namespace rivet::ddl::generated {
	HeroDecalShadowData::HeroDecalShadowData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DecalShadowShader = serialized->get_string(DecalShadowShader_type_id, {});
		DecalModel = serialized->get_string(DecalModel_type_id, {});
		MaterialMappingName = serialized->get_string(MaterialMappingName_type_id, {});
		AlphaTextureConstantName = serialized->get_string(AlphaTextureConstantName_type_id, {});
		Tint = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Tint_type_id);
		BlendTime = serialized->get_float(BlendTime_type_id, 0.250000f);
		MinDistance = serialized->get_float(MinDistance_type_id, 1.000000f);
		MaxDistance = serialized->get_float(MaxDistance_type_id, 20.000000f); 
	}

	[[nodiscard]] auto
	HeroDecalShadowData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroDecalShadowData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroDecalShadowData> {
		if (incoming_type_id == HeroDecalShadowData::type_id) {
			return std::make_shared<HeroDecalShadowData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
