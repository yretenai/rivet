// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BounceEffectNodeDef.hpp>
#include <rivet/ddl/generated/SpawnSyncedActorForHitEffectNodeDef.hpp>
#include <rivet/ddl/generated/SpawnHazardDamageAreaEffectNodeDef.hpp>
#include <rivet/ddl/generated/ExplodeEffectNodeDef.hpp>
#include <rivet/ddl/generated/CameraShakeEffectNodeDef.hpp>
#include <rivet/ddl/generated/HealEffectNodeDef.hpp>
#include <rivet/ddl/generated/OutputPlugSignal.hpp>
#include <rivet/ddl/generated/AttachToActorEffectNodeDef.hpp>
#include <rivet/ddl/generated/GiveItemEffectNodeDef.hpp>
#include <rivet/ddl/generated/AttachToHitSurfaceEffectNodeDef.hpp>
#include <rivet/ddl/generated/EnterRagdollStateEffectNodeDef.hpp>
#include <rivet/ddl/generated/DontDestroyShotAfterCollisionEffectNodeDef.hpp>
#include <rivet/ddl/generated/DealDamageEffectNodeDef.hpp>
#include <rivet/ddl/generated/ToggleLightsEffectNodeDef.hpp>
#include <rivet/ddl/generated/SpawnShotEffectNodeDef.hpp>
#include <rivet/ddl/generated/AddStatModifierEffectNodeDef.hpp>
#include <rivet/ddl/generated/DestroyShotEffectNodeDef.hpp>
#include <rivet/ddl/generated/InputPlugSignal.hpp>
#include <rivet/ddl/generated/AddStatusEffectNodeDef.hpp>
#include <rivet/ddl/generated/SpawnSyncedActorEffectNodeDef.hpp>
#include <rivet/ddl/generated/ContinueShotMotionEffectNodeDef.hpp>
#include <rivet/ddl/generated/TriggerConduitEventEffectNodeDef.hpp>
#include <rivet/ddl/generated/PlayAnimEffectNodeDef.hpp>
#include <rivet/ddl/generated/ChangeShotMotionEffectNodeDef.hpp> 

#include <rivet/ddl/generated/NodalShotEffectNodeBaseDef.hpp>

namespace rivet::ddl::generated {
	NodalShotEffectNodeBaseDef::NodalShotEffectNodeBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): NodeBaseDef(serialized) {
		Input = serialized->unwrap_into_many<rivet::ddl::generated::InputPlugSignal>(Input_type_id);
		Output = serialized->unwrap_into<rivet::ddl::generated::OutputPlugSignal>(Output_type_id);
		EffectName = serialized->get_string(EffectName_type_id); 
	}

	[[nodiscard]] auto
	NodalShotEffectNodeBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	NodalShotEffectNodeBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodalShotEffectNodeBaseDef> {
		if (incoming_type_id == NodalShotEffectNodeBaseDef::type_id) {
			return std::make_shared<NodalShotEffectNodeBaseDef>(serialized);
		}

		auto AttachToActorEffectNodeDef_ptr = AttachToActorEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (AttachToActorEffectNodeDef_ptr != nullptr) {
			return AttachToActorEffectNodeDef_ptr;
		}

		auto GiveItemEffectNodeDef_ptr = GiveItemEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (GiveItemEffectNodeDef_ptr != nullptr) {
			return GiveItemEffectNodeDef_ptr;
		}

		auto EnterRagdollStateEffectNodeDef_ptr = EnterRagdollStateEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (EnterRagdollStateEffectNodeDef_ptr != nullptr) {
			return EnterRagdollStateEffectNodeDef_ptr;
		}

		auto PlayAnimEffectNodeDef_ptr = PlayAnimEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (PlayAnimEffectNodeDef_ptr != nullptr) {
			return PlayAnimEffectNodeDef_ptr;
		}

		auto ToggleLightsEffectNodeDef_ptr = ToggleLightsEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (ToggleLightsEffectNodeDef_ptr != nullptr) {
			return ToggleLightsEffectNodeDef_ptr;
		}

		auto AddStatModifierEffectNodeDef_ptr = AddStatModifierEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (AddStatModifierEffectNodeDef_ptr != nullptr) {
			return AddStatModifierEffectNodeDef_ptr;
		}

		auto AddStatusEffectNodeDef_ptr = AddStatusEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (AddStatusEffectNodeDef_ptr != nullptr) {
			return AddStatusEffectNodeDef_ptr;
		}

		auto SpawnShotEffectNodeDef_ptr = SpawnShotEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (SpawnShotEffectNodeDef_ptr != nullptr) {
			return SpawnShotEffectNodeDef_ptr;
		}

		auto DealDamageEffectNodeDef_ptr = DealDamageEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (DealDamageEffectNodeDef_ptr != nullptr) {
			return DealDamageEffectNodeDef_ptr;
		}

		auto TriggerConduitEventEffectNodeDef_ptr = TriggerConduitEventEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (TriggerConduitEventEffectNodeDef_ptr != nullptr) {
			return TriggerConduitEventEffectNodeDef_ptr;
		}

		auto ChangeShotMotionEffectNodeDef_ptr = ChangeShotMotionEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (ChangeShotMotionEffectNodeDef_ptr != nullptr) {
			return ChangeShotMotionEffectNodeDef_ptr;
		}

		auto HealEffectNodeDef_ptr = HealEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (HealEffectNodeDef_ptr != nullptr) {
			return HealEffectNodeDef_ptr;
		}

		auto ContinueShotMotionEffectNodeDef_ptr = ContinueShotMotionEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (ContinueShotMotionEffectNodeDef_ptr != nullptr) {
			return ContinueShotMotionEffectNodeDef_ptr;
		}

		auto CameraShakeEffectNodeDef_ptr = CameraShakeEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (CameraShakeEffectNodeDef_ptr != nullptr) {
			return CameraShakeEffectNodeDef_ptr;
		}

		auto ExplodeEffectNodeDef_ptr = ExplodeEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (ExplodeEffectNodeDef_ptr != nullptr) {
			return ExplodeEffectNodeDef_ptr;
		}

		auto DontDestroyShotAfterCollisionEffectNodeDef_ptr = DontDestroyShotAfterCollisionEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (DontDestroyShotAfterCollisionEffectNodeDef_ptr != nullptr) {
			return DontDestroyShotAfterCollisionEffectNodeDef_ptr;
		}

		auto AttachToHitSurfaceEffectNodeDef_ptr = AttachToHitSurfaceEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (AttachToHitSurfaceEffectNodeDef_ptr != nullptr) {
			return AttachToHitSurfaceEffectNodeDef_ptr;
		}

		auto SpawnHazardDamageAreaEffectNodeDef_ptr = SpawnHazardDamageAreaEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (SpawnHazardDamageAreaEffectNodeDef_ptr != nullptr) {
			return SpawnHazardDamageAreaEffectNodeDef_ptr;
		}

		auto SpawnSyncedActorEffectNodeDef_ptr = SpawnSyncedActorEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (SpawnSyncedActorEffectNodeDef_ptr != nullptr) {
			return SpawnSyncedActorEffectNodeDef_ptr;
		}

		auto SpawnSyncedActorForHitEffectNodeDef_ptr = SpawnSyncedActorForHitEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (SpawnSyncedActorForHitEffectNodeDef_ptr != nullptr) {
			return SpawnSyncedActorForHitEffectNodeDef_ptr;
		}

		auto DestroyShotEffectNodeDef_ptr = DestroyShotEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (DestroyShotEffectNodeDef_ptr != nullptr) {
			return DestroyShotEffectNodeDef_ptr;
		}

		auto BounceEffectNodeDef_ptr = BounceEffectNodeDef::from_substruct(incoming_type_id, serialized);
		if (BounceEffectNodeDef_ptr != nullptr) {
			return BounceEffectNodeDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
