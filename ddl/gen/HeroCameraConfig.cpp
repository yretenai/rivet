// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroCameraConfig.hpp>

namespace rivet::ddl::generated {
	HeroCameraConfig::HeroCameraConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DefaultCameraFollowConfig = serialized->get_string(DefaultCameraFollowConfig_type_id, {});
		DefaultCameraAimContextConfig = serialized->get_string(DefaultCameraAimContextConfig_type_id, {});
		DefaultCameraStickConfig = serialized->get_string(DefaultCameraStickConfig_type_id, {});
		DefaultCameraFollowFastConfig = serialized->get_string(DefaultCameraFollowFastConfig_type_id, {});
		CasualCameraFollowConfig = serialized->get_string(CasualCameraFollowConfig_type_id, {});
		StrafeCameraAimContextConfig = serialized->get_string(StrafeCameraAimContextConfig_type_id, {});
		StrafeCameraStickConfig = serialized->get_string(StrafeCameraStickConfig_type_id, {});
		LookCameraStickConfig = serialized->get_string(LookCameraStickConfig_type_id, {});
		OTSCameraAimContextConfig = serialized->get_string(OTSCameraAimContextConfig_type_id, {});
		OTSCameraStickConfig = serialized->get_string(OTSCameraStickConfig_type_id, {});
		LedgeCameraFollowConfig = serialized->get_string(LedgeCameraFollowConfig_type_id, {});
		LedgeCameraAimContextConfig = serialized->get_string(LedgeCameraAimContextConfig_type_id, {});
		ClimbCameraFollowConfig = serialized->get_string(ClimbCameraFollowConfig_type_id, {});
		ClimbCameraAimContextConfig = serialized->get_string(ClimbCameraAimContextConfig_type_id, {});
		GlideCameraFollowConfig = serialized->get_string(GlideCameraFollowConfig_type_id, {});
		GlideCameraAimContextConfig = serialized->get_string(GlideCameraAimContextConfig_type_id, {});
		SwingshotCameraFollowConfig = serialized->get_string(SwingshotCameraFollowConfig_type_id, {});
		SwingshotCameraAimContextConfig = serialized->get_string(SwingshotCameraAimContextConfig_type_id, {});
		SlingshotCameraAimContextConfig = serialized->get_string(SlingshotCameraAimContextConfig_type_id, {});
		TetherCameraAimContextConfig = serialized->get_string(TetherCameraAimContextConfig_type_id, {});
		SwimCameraFollowConfig = serialized->get_string(SwimCameraFollowConfig_type_id, {});
		SwimCameraAimContextConfig = serialized->get_string(SwimCameraAimContextConfig_type_id, {});
		HydropackCameraFollowConfig = serialized->get_string(HydropackCameraFollowConfig_type_id, {});
		HydropackCameraAimContextConfig = serialized->get_string(HydropackCameraAimContextConfig_type_id, {});
		ConversationCameraAimContextConfig = serialized->get_string(ConversationCameraAimContextConfig_type_id, {});
		WallJumpCameraAimContextConfig = serialized->get_string(WallJumpCameraAimContextConfig_type_id, {});
		TaxiCameraAimContextConfig = serialized->get_string(TaxiCameraAimContextConfig_type_id, {});
		GrindCameraFollowConfig = serialized->get_string(GrindCameraFollowConfig_type_id, {});
		GrindCameraAimContextConfig = serialized->get_string(GrindCameraAimContextConfig_type_id, {});
		RideLedgeCameraAimContextConfig = serialized->get_string(RideLedgeCameraAimContextConfig_type_id, {});
		SlideCameraFollowConfig = serialized->get_string(SlideCameraFollowConfig_type_id, {});
		SlideCameraAimContextConfig = serialized->get_string(SlideCameraAimContextConfig_type_id, {});
		WallRunCameraAimContextConfig = serialized->get_string(WallRunCameraAimContextConfig_type_id, {});
		MagbootLaunchCameraAimContextConfig = serialized->get_string(MagbootLaunchCameraAimContextConfig_type_id, {});
		HoverbootCameraAimContextConfig = serialized->get_string(HoverbootCameraAimContextConfig_type_id, {});
		PassiveShiftCameraAimContextConfig = serialized->get_string(PassiveShiftCameraAimContextConfig_type_id, {}); 
	}

	[[nodiscard]] auto
	HeroCameraConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroCameraConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroCameraConfig> {
		if (incoming_type_id == HeroCameraConfig::type_id) {
			return std::make_shared<HeroCameraConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
