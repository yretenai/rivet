// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RecoilCameraShakeItem.hpp> 

#include <rivet/ddl/generated/BasicRecoilPrius.hpp>

namespace rivet::ddl::generated {
	BasicRecoilPrius::BasicRecoilPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): WeaponRecoilBasePrius(serialized) {
		ShotsToMin = serialized->get_float(ShotsToMin_type_id, 0.000000);
		ShotsToMax = serialized->get_float(ShotsToMax_type_id, 0.000000);
		BumpRamp = serialized->get_float(BumpRamp_type_id, 1.000000);
		BumpAngleMin = serialized->get_float(BumpAngleMin_type_id, 0.000000);
		BumpAngleMax = serialized->get_float(BumpAngleMax_type_id, 0.000000);
		BumpOffsetMin = serialized->get_float(BumpOffsetMin_type_id, 0.000000);
		BumpOffsetMax = serialized->get_float(BumpOffsetMax_type_id, 0.000000);
		BumpSpeedMin = serialized->get_float(BumpSpeedMin_type_id, 1.000000);
		BumpSpeedMax = serialized->get_float(BumpSpeedMax_type_id, 1.000000);
		CooldownStart = serialized->get_float(CooldownStart_type_id, 0.000000);
		CooldownComplete = serialized->get_float(CooldownComplete_type_id, 0.000000);
		SettleDelay = serialized->get_float(SettleDelay_type_id, 0.150000);
		SettleGain = serialized->get_float(SettleGain_type_id, -8.000000);
		SettleDamp = serialized->get_float(SettleDamp_type_id, -13.000000);
		SettlePercent = serialized->get_float(SettlePercent_type_id, 1.000000);
		CameraShake = serialized->unwrap_into<rivet::ddl::generated::RecoilCameraShakeItem>(CameraShake_type_id); 
	}

	[[nodiscard]] auto
	BasicRecoilPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BasicRecoilPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BasicRecoilPrius> {
		if (incoming_type_id == BasicRecoilPrius::type_id) {
			return std::make_shared<BasicRecoilPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
