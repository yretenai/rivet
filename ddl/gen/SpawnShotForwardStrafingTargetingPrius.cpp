// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/SpawnShotForwardStrafingTargetingPrius.hpp>

namespace rivet::ddl::generated {
	SpawnShotForwardStrafingTargetingPrius::SpawnShotForwardStrafingTargetingPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): SpawnShotTargetingPrius(serialized) {
		InitialYaw = serialized->get_float(InitialYaw_type_id, 0.000000);
		PerShotYaw = serialized->get_float(PerShotYaw_type_id, 0.000000);
		InitialPitch = serialized->get_float(InitialPitch_type_id, -20.000000);
		PerShotPitch = serialized->get_float(PerShotPitch_type_id, 5.000000);
		AimOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(AimOffset_type_id);
		AimOffsetSmall = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(AimOffsetSmall_type_id);
		AimOffsetLarge = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(AimOffsetLarge_type_id);
		AlternateOffsetDir = serialized->get_bool(AlternateOffsetDir_type_id, false);
		CentralisePattern = serialized->get_bool(CentralisePattern_type_id, false);
		UseEmitterDir = serialized->get_bool(UseEmitterDir_type_id, true); 
	}

	[[nodiscard]] auto
	SpawnShotForwardStrafingTargetingPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SpawnShotForwardStrafingTargetingPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SpawnShotForwardStrafingTargetingPrius> {
		if (incoming_type_id == SpawnShotForwardStrafingTargetingPrius::type_id) {
			return std::make_shared<SpawnShotForwardStrafingTargetingPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
