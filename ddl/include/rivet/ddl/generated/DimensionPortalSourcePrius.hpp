// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DimensionPortalSourcePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "DimensionPortalSourcePrius";
		constexpr static rivet::rivet_type_id type_id = 0x5b4bb1f1;

		constexpr static std::string_view PossibleTargets_type_name = "PossibleTargets";
		constexpr static rivet::rivet_type_id PossibleTargets_type_id = 0x7d822939;
		constexpr static std::string_view ActivateWhenTargetLoaded_type_name = "ActivateWhenTargetLoaded";
		constexpr static rivet::rivet_type_id ActivateWhenTargetLoaded_type_id = 0xfabb8abc;
		constexpr static std::string_view ActivateOnThrownMeleeHit_type_name = "ActivateOnThrownMeleeHit";
		constexpr static rivet::rivet_type_id ActivateOnThrownMeleeHit_type_id = 0x9da82934;
		constexpr static std::string_view MutuallyExclusive_type_name = "MutuallyExclusive";
		constexpr static rivet::rivet_type_id MutuallyExclusive_type_id = 0x6d342a81;
		constexpr static std::string_view UseAsHexStreamingSource_type_name = "UseAsHexStreamingSource";
		constexpr static rivet::rivet_type_id UseAsHexStreamingSource_type_id = 0xc2f6e72e;
		constexpr static std::string_view AutoDeactivateOutOfRangeDelay_type_name = "AutoDeactivateOutOfRangeDelay";
		constexpr static rivet::rivet_type_id AutoDeactivateOutOfRangeDelay_type_id = 0xa7108a07;
		constexpr static std::string_view AutoDeactivateRange_type_name = "AutoDeactivateRange";
		constexpr static rivet::rivet_type_id AutoDeactivateRange_type_id = 0x904564bb; 

		explicit DimensionPortalSourcePrius() = default;
		explicit DimensionPortalSourcePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::string_view> PossibleTargets {};
		bool ActivateWhenTargetLoaded {};
		bool ActivateOnThrownMeleeHit {};
		bool MutuallyExclusive {};
		bool UseAsHexStreamingSource {};
		float AutoDeactivateOutOfRangeDelay {};
		float AutoDeactivateRange {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DimensionPortalSourcePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
