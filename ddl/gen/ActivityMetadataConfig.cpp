// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RynoActivityData.hpp>
#include <rivet/ddl/generated/ArenaCupActivityData.hpp>
#include <rivet/ddl/generated/ActivitySubCategoryInfo.hpp> 

#include <rivet/ddl/generated/ActivityMetadataConfig.hpp>

namespace rivet::ddl::generated {
	ActivityMetadataConfig::ActivityMetadataConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		SubCategories = serialized->unwrap_into_many<rivet::ddl::generated::ActivitySubCategoryInfo>(SubCategories_type_id);
		BronzeCup = serialized->unwrap_into<rivet::ddl::generated::ArenaCupActivityData>(BronzeCup_type_id);
		SilverCup = serialized->unwrap_into<rivet::ddl::generated::ArenaCupActivityData>(SilverCup_type_id);
		GoldenCup = serialized->unwrap_into<rivet::ddl::generated::ArenaCupActivityData>(GoldenCup_type_id);
		RynoActivityData = serialized->unwrap_into<rivet::ddl::generated::RynoActivityData>(RynoActivityData_type_id);
		FallbackSmallImage = serialized->get_string(FallbackSmallImage_type_id);
		FallbackLargeImage = serialized->get_string(FallbackLargeImage_type_id); 
	}

	[[nodiscard]] auto
	ActivityMetadataConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ActivityMetadataConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActivityMetadataConfig> {
		if (incoming_type_id == ActivityMetadataConfig::type_id) {
			return std::make_shared<ActivityMetadataConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
