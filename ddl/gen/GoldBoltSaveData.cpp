// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GoldBoltSaveData.hpp>

namespace rivet::ddl::generated {
	GoldBoltSaveData::GoldBoltSaveData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CollectedBoltHashes = serialized->get_uint32s(CollectedBoltHashes_type_id);
		InfiniteHealthEnabled = serialized->get_bool(InfiniteHealthEnabled_type_id);
		InfiniteAmmoEnabled = serialized->get_bool(InfiniteAmmoEnabled_type_id);
		RPGEnabled = serialized->get_bool(RPGEnabled_type_id);
		ConfettiHeadshotEnabled = serialized->get_bool(ConfettiHeadshotEnabled_type_id);
		MirrorModeEnabled = serialized->get_bool(MirrorModeEnabled_type_id);
		GoldWeaponsEnabled = serialized->get_bool(GoldWeaponsEnabled_type_id);
		HomeRunHitterEnabled = serialized->get_bool(HomeRunHitterEnabled_type_id);
		BoltReplacementType = serialized->get_enum<rivet::ddl::generated::BoltReplacementType>(BoltReplacementType_type_id, rivet::ddl::generated::BoltReplacementType_values);
		RenderModeIndex = serialized->get_uint32(RenderModeIndex_type_id);
		RenderModeNameHash = serialized->get_uint32(RenderModeNameHash_type_id);
		HeadSizeIndex = serialized->get_int32(HeadSizeIndex_type_id);
		WrenchModelSwapIndex = serialized->get_int32(WrenchModelSwapIndex_type_id);
		HammerModelSwapIndex = serialized->get_int32(HammerModelSwapIndex_type_id);
		ShipSkin = serialized->get_enum<rivet::ddl::generated::x8a806a76>(ShipSkin_type_id, rivet::ddl::generated::x8a806a76_values);
		WrenchSkin = serialized->get_enum<rivet::ddl::generated::x387422ea>(WrenchSkin_type_id, rivet::ddl::generated::x387422ea_values);
		HammerSkin = serialized->get_enum<rivet::ddl::generated::x387422ea>(HammerSkin_type_id, rivet::ddl::generated::x387422ea_values); 
	}

	[[nodiscard]] auto
	GoldBoltSaveData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GoldBoltSaveData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GoldBoltSaveData> {
		if (incoming_type_id == GoldBoltSaveData::type_id) {
			return std::make_shared<GoldBoltSaveData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
