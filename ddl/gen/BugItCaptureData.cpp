// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLMatrix4.hpp> 

#include <rivet/ddl/generated/BugItCaptureData.hpp>

namespace rivet::ddl::generated {
	BugItCaptureData::BugItCaptureData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		lvl = serialized->get_string(lvl_type_id, "");
		chk = serialized->get_string(chk_type_id, "");
		region = serialized->get_string(region_type_id, "");
		campos = serialized->get_floats(campos_type_id);
		camrot = serialized->get_floats(camrot_type_id);
		camup = serialized->get_floats(camup_type_id);
		camright = serialized->get_floats(camright_type_id);
		heropos = serialized->get_floats(heropos_type_id);
		herofwd = serialized->get_floats(herofwd_type_id);
		zoneIds = serialized->get_uint64s(zoneIds_type_id);
		zoneTransforms = serialized->unwrap_into_many<rivet::ddl::generated::DDLMatrix4>(zoneTransforms_type_id);
		activeZoneId = serialized->get_uint64(activeZoneId_type_id, 0ull); 
	}

	[[nodiscard]] auto
	BugItCaptureData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BugItCaptureData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BugItCaptureData> {
		if (incoming_type_id == BugItCaptureData::type_id) {
			return std::make_shared<BugItCaptureData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
