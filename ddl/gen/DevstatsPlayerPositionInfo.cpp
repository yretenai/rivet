// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DevstatsProjSpecificBase.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/DevstatsPlayerPositionInfo.hpp>

namespace rivet::ddl::generated {
	DevstatsPlayerPositionInfo::DevstatsPlayerPositionInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		pos = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(pos_type_id);
		Level = serialized->get_string(Level_type_id, {});
		RegionContainer = serialized->get_string(RegionContainer_type_id, {});
		RegionUnit = serialized->get_string(RegionUnit_type_id, {});
		IsOpenWorld = serialized->get_bool(IsOpenWorld_type_id, false);
		PlaythroughTime = serialized->get_float(PlaythroughTime_type_id, 0.000000f);
		PlaythroughSegmentId = serialized->get_string(PlaythroughSegmentId_type_id, {});
		LastGoldenPathMission = serialized->get_string(LastGoldenPathMission_type_id, {});
		ProjSpecificData = serialized->unwrap_into<rivet::ddl::generated::DevstatsProjSpecificBase>(ProjSpecificData_type_id); 
	}

	[[nodiscard]] auto
	DevstatsPlayerPositionInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DevstatsPlayerPositionInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DevstatsPlayerPositionInfo> {
		if (incoming_type_id == DevstatsPlayerPositionInfo::type_id) {
			return std::make_shared<DevstatsPlayerPositionInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
