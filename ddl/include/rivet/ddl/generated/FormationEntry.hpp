// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED FormationEntry : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "FormationEntry";
		constexpr static rivet::rivet_type_id type_id = 0xb242d68b;

		constexpr static std::string_view StartPoint_type_name = "StartPoint";
		constexpr static rivet::rivet_type_id StartPoint_type_id = 0xcfce9fc0;
		constexpr static std::string_view EntryCurve_type_name = "EntryCurve";
		constexpr static rivet::rivet_type_id EntryCurve_type_id = 0xb4692482;
		constexpr static std::string_view AttackPoint_type_name = "AttackPoint";
		constexpr static rivet::rivet_type_id AttackPoint_type_id = 0x51863c0d;
		constexpr static std::string_view ExitCurve_type_name = "ExitCurve";
		constexpr static rivet::rivet_type_id ExitCurve_type_id = 0xd3520623; 

		explicit FormationEntry() = default;
		explicit FormationEntry([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t StartPoint {};
		uint64_t EntryCurve {};
		uint64_t AttackPoint {};
		uint64_t ExitCurve {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FormationEntry>;
	};
} // namespace rivet::ddl::generated

// clang-format on
