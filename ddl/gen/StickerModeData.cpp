// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StickersCategoryData.hpp>
#include <rivet/ddl/generated/StickersData.hpp> 

#include <rivet/ddl/generated/StickerModeData.hpp>

namespace rivet::ddl::generated {
	StickerModeData::StickerModeData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StickerSpeed = serialized->get_float(StickerSpeed_type_id, 300.000000);
		RotationSpeed = serialized->get_float(RotationSpeed_type_id, 45.000000);
		StickerSpeed4k = serialized->get_float(StickerSpeed4k_type_id, 600.000000);
		ScaleRate = serialized->get_float(ScaleRate_type_id, 0.020000);
		ScaleRate4k = serialized->get_float(ScaleRate4k_type_id, 0.040000);
		EmptyLayer = serialized->unwrap_into<rivet::ddl::generated::StickersData>(EmptyLayer_type_id);
		LockedLayer = serialized->unwrap_into<rivet::ddl::generated::StickersData>(LockedLayer_type_id);
		Categories = serialized->unwrap_into_many<rivet::ddl::generated::StickersCategoryData>(Categories_type_id); 
	}

	[[nodiscard]] auto
	StickerModeData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StickerModeData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StickerModeData> {
		if (incoming_type_id == StickerModeData::type_id) {
			return std::make_shared<StickerModeData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
