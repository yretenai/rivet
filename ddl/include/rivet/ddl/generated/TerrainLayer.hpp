// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3;
	struct EnvelopeColorDef;
	struct DDLVector2; 

	struct RIVET_DDL_SHARED TerrainLayer : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "TerrainLayer";
		constexpr static rivet::rivet_type_id type_id = 0x41d4fed2;

		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view Id_type_name = "Id";
		constexpr static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr static std::string_view Material_type_name = "Material";
		constexpr static rivet::rivet_type_id Material_type_id = 0x86bfc8e5;
		constexpr static std::string_view TileSize_type_name = "TileSize";
		constexpr static rivet::rivet_type_id TileSize_type_id = 0xf1459711;
		constexpr static std::string_view BlendOpacityThreshold_type_name = "BlendOpacityThreshold";
		constexpr static rivet::rivet_type_id BlendOpacityThreshold_type_id = 0x720a8ba9;
		constexpr static std::string_view MaxRotationDegrees_type_name = "MaxRotationDegrees";
		constexpr static rivet::rivet_type_id MaxRotationDegrees_type_id = 0x69cc798;
		constexpr static std::string_view VistaMapColor_type_name = "VistaMapColor";
		constexpr static rivet::rivet_type_id VistaMapColor_type_id = 0xb953d87c;
		constexpr static std::string_view DefaultVistaMapNormalDetail_type_name = "DefaultVistaMapNormalDetail";
		constexpr static rivet::rivet_type_id DefaultVistaMapNormalDetail_type_id = 0xf1b38d60;
		constexpr static std::string_view VistaMapNormalDetail_type_name = "VistaMapNormalDetail";
		constexpr static rivet::rivet_type_id VistaMapNormalDetail_type_id = 0x6518c37a;
		constexpr static std::string_view DefaultVistaMapSpecular_type_name = "DefaultVistaMapSpecular";
		constexpr static rivet::rivet_type_id DefaultVistaMapSpecular_type_id = 0x790bed21;
		constexpr static std::string_view VistaMapSpecular_type_name = "VistaMapSpecular";
		constexpr static rivet::rivet_type_id VistaMapSpecular_type_id = 0xf74dff1a;
		constexpr static std::string_view DefaultVistaMapGlossiness_type_name = "DefaultVistaMapGlossiness";
		constexpr static rivet::rivet_type_id DefaultVistaMapGlossiness_type_id = 0x522621a1;
		constexpr static std::string_view VistaMapGlossiness_type_name = "VistaMapGlossiness";
		constexpr static rivet::rivet_type_id VistaMapGlossiness_type_id = 0x9d2d3197;
		constexpr static std::string_view VistaMapNoise_type_name = "VistaMapNoise";
		constexpr static rivet::rivet_type_id VistaMapNoise_type_id = 0x22ac06bc;
		constexpr static std::string_view VistaMapPeakValleySharpness_type_name = "VistaMapPeakValleySharpness";
		constexpr static rivet::rivet_type_id VistaMapPeakValleySharpness_type_id = 0x3b321127;
		constexpr static std::string_view VistaMapPeakValleyStrength_type_name = "VistaMapPeakValleyStrength";
		constexpr static rivet::rivet_type_id VistaMapPeakValleyStrength_type_id = 0xcd66d391; 

		explicit TerrainLayer() = default;
		explicit TerrainLayer([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Name {};
		uint8_t Id {};
		std::string_view Material {};
		float TileSize {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> BlendOpacityThreshold {};
		float MaxRotationDegrees {};
		std::shared_ptr<rivet::ddl::generated::EnvelopeColorDef> VistaMapColor {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DDLVector3>> DefaultVistaMapNormalDetail {};
		bool VistaMapNormalDetail {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> DefaultVistaMapSpecular {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> VistaMapSpecular {};
		float DefaultVistaMapGlossiness {};
		float VistaMapGlossiness {};
		float VistaMapNoise {};
		float VistaMapPeakValleySharpness {};
		float VistaMapPeakValleyStrength {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TerrainLayer>;
	};
} // namespace rivet::ddl::generated

// clang-format on
