// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UISkinManagerPrius.hpp>
#include <rivet/ddl/generated/HeroSkinManagerPrius.hpp>
#include <rivet/ddl/generated/SkinManagerPrius.hpp> 

#include <rivet/ddl/generated/SkinManagerBasePrius.hpp>

namespace rivet::ddl::generated {
	SkinManagerBasePrius::SkinManagerBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	SkinManagerBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SkinManagerBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkinManagerBasePrius> {
		if (incoming_type_id == SkinManagerBasePrius::type_id) {
			return std::make_shared<SkinManagerBasePrius>(serialized);
		}

		auto SkinManagerPrius_ptr = SkinManagerPrius::from_substruct(incoming_type_id, serialized);
		if (SkinManagerPrius_ptr != nullptr) {
			return SkinManagerPrius_ptr;
		}

		auto HeroSkinManagerPrius_ptr = HeroSkinManagerPrius::from_substruct(incoming_type_id, serialized);
		if (HeroSkinManagerPrius_ptr != nullptr) {
			return HeroSkinManagerPrius_ptr;
		}

		auto UISkinManagerPrius_ptr = UISkinManagerPrius::from_substruct(incoming_type_id, serialized);
		if (UISkinManagerPrius_ptr != nullptr) {
			return UISkinManagerPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
