// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimModSweepPrius.hpp>

namespace rivet::ddl::generated {
	AimModSweepPrius::AimModSweepPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): AimModifierPrius(serialized) {
		SweepHalfAngle = serialized->get_float(SweepHalfAngle_type_id);
		SweepTimeIsBurstTime = serialized->get_bool(SweepTimeIsBurstTime_type_id);
		TotalSweepTime = serialized->get_float(TotalSweepTime_type_id);
		StartDelay = serialized->get_float(StartDelay_type_id);
		SweepType = serialized->get_enum<rivet::ddl::generated::x69c22897>(SweepType_type_id, rivet::ddl::generated::x69c22897_values);
		SweepDirection = serialized->get_enum<rivet::ddl::generated::x52f67dac>(SweepDirection_type_id, rivet::ddl::generated::x52f67dac_values);
		EndClamp = serialized->get_float(EndClamp_type_id); 
	}

	[[nodiscard]] auto
	AimModSweepPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AimModSweepPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimModSweepPrius> {
		if (incoming_type_id == AimModSweepPrius::type_id) {
			return std::make_shared<AimModSweepPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
