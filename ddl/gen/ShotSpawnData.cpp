// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ThrowProjectileSpawnData.hpp>
#include <rivet/ddl/generated/ShotBotSpawnerSpawnData.hpp> 

#include <rivet/ddl/generated/ShotSpawnData.hpp>

namespace rivet::ddl::generated {
	ShotSpawnData::ShotSpawnData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ActorSpawnData(serialized) {
		Owner = serialized->get_uint64(Owner_type_id);
		AttackId = serialized->get_uint32(AttackId_type_id); 
	}

	[[nodiscard]] auto
	ShotSpawnData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShotSpawnData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotSpawnData> {
		if (incoming_type_id == ShotSpawnData::type_id) {
			return std::make_shared<ShotSpawnData>(serialized);
		}

		auto ShotBotSpawnerSpawnData_ptr = ShotBotSpawnerSpawnData::from_substruct(incoming_type_id, serialized);
		if (ShotBotSpawnerSpawnData_ptr != nullptr) {
			return ShotBotSpawnerSpawnData_ptr;
		}

		auto ThrowProjectileSpawnData_ptr = ThrowProjectileSpawnData::from_substruct(incoming_type_id, serialized);
		if (ThrowProjectileSpawnData_ptr != nullptr) {
			return ThrowProjectileSpawnData_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
