// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xc5efdc34.hpp>
#include <rivet/ddl/generated/enums/xfffc3f38.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimAttachmentDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimAttachmentDef";
		constexpr static rivet::rivet_type_id type_id = 0x888517a9;

		constexpr static std::string_view Locator_type_name = "Locator";
		constexpr static rivet::rivet_type_id Locator_type_id = 0x7bac1d57;
		constexpr static std::string_view Asset_type_name = "Asset";
		constexpr static rivet::rivet_type_id Asset_type_id = 0x1bfc969d;
		constexpr static std::string_view LocatorString_type_name = "LocatorString";
		constexpr static rivet::rivet_type_id LocatorString_type_id = 0xfe325c4c;
		constexpr static std::string_view AssetString_type_name = "AssetString";
		constexpr static rivet::rivet_type_id AssetString_type_id = 0xbad249f;
		constexpr static std::string_view AssetLocatorString_type_name = "AssetLocatorString";
		constexpr static rivet::rivet_type_id AssetLocatorString_type_id = 0xf175f855;
		constexpr static std::string_view Scale_type_name = "Scale";
		constexpr static rivet::rivet_type_id Scale_type_id = 0xf515e945; 

		explicit AnimAttachmentDef() = default;
		explicit AnimAttachmentDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xfffc3f38 Locator {};
		rivet::ddl::generated::xc5efdc34 Asset {};
		std::string_view LocatorString {};
		std::string_view AssetString {};
		std::string_view AssetLocatorString {};
		float Scale {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimAttachmentDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
