// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct BotComboMoveBase; 

	struct RIVET_DDL_SHARED BossAttackVolumePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "BossAttackVolumePrius";
		constexpr static rivet::rivet_type_id type_id = 0x2ba6f1b1;

		constexpr static std::string_view CooldownMin_type_name = "CooldownMin";
		constexpr static rivet::rivet_type_id CooldownMin_type_id = 0x7b385fc6;
		constexpr static std::string_view CooldownMax_type_name = "CooldownMax";
		constexpr static rivet::rivet_type_id CooldownMax_type_id = 0x4735609f;
		constexpr static std::string_view ApplyCooldownToTheseVolumes_type_name = "ApplyCooldownToTheseVolumes";
		constexpr static rivet::rivet_type_id ApplyCooldownToTheseVolumes_type_id = 0x6a45d32;
		constexpr static std::string_view GlobalCooldownMin_type_name = "GlobalCooldownMin";
		constexpr static rivet::rivet_type_id GlobalCooldownMin_type_id = 0xd31b7eff;
		constexpr static std::string_view GlobalCooldownMax_type_name = "GlobalCooldownMax";
		constexpr static rivet::rivet_type_id GlobalCooldownMax_type_id = 0xef1641a6;
		constexpr static std::string_view InitialCooldownMin_type_name = "InitialCooldownMin";
		constexpr static rivet::rivet_type_id InitialCooldownMin_type_id = 0x450d41ce;
		constexpr static std::string_view InitialCooldownMax_type_name = "InitialCooldownMax";
		constexpr static rivet::rivet_type_id InitialCooldownMax_type_id = 0x79007e97;
		constexpr static std::string_view OtherCooldownMin_type_name = "OtherCooldownMin";
		constexpr static rivet::rivet_type_id OtherCooldownMin_type_id = 0xe9ee32f8;
		constexpr static std::string_view OtherCooldownMax_type_name = "OtherCooldownMax";
		constexpr static rivet::rivet_type_id OtherCooldownMax_type_id = 0xd5e30da1;
		constexpr static std::string_view ApplyOtherCooldownToTheseVolumes_type_name = "ApplyOtherCooldownToTheseVolumes";
		constexpr static rivet::rivet_type_id ApplyOtherCooldownToTheseVolumes_type_id = 0x5f565b77;
		constexpr static std::string_view RandomWeighting_type_name = "RandomWeighting";
		constexpr static rivet::rivet_type_id RandomWeighting_type_id = 0xf4124721;
		constexpr static std::string_view ForceIfInside_type_name = "ForceIfInside";
		constexpr static rivet::rivet_type_id ForceIfInside_type_id = 0x9c93347f;
		constexpr static std::string_view ForceIfInsideOnce_type_name = "ForceIfInsideOnce";
		constexpr static rivet::rivet_type_id ForceIfInsideOnce_type_id = 0x41ddf8c2;
		constexpr static std::string_view UseBossPosition_type_name = "UseBossPosition";
		constexpr static rivet::rivet_type_id UseBossPosition_type_id = 0x756d9b4e;
		constexpr static std::string_view AttachToBoss_type_name = "AttachToBoss";
		constexpr static rivet::rivet_type_id AttachToBoss_type_id = 0x24255643;
		constexpr static std::string_view AttachToBossLoc_type_name = "AttachToBossLoc";
		constexpr static rivet::rivet_type_id AttachToBossLoc_type_id = 0x9a672e06;
		constexpr static std::string_view MaxConsecutiveUses_type_name = "MaxConsecutiveUses";
		constexpr static rivet::rivet_type_id MaxConsecutiveUses_type_id = 0x4d176d22;
		constexpr static std::string_view StartAsEnabled_type_name = "StartAsEnabled";
		constexpr static rivet::rivet_type_id StartAsEnabled_type_id = 0x6ca53a09;
		constexpr static std::string_view ImmuneFromGlobalCooldown_type_name = "ImmuneFromGlobalCooldown";
		constexpr static rivet::rivet_type_id ImmuneFromGlobalCooldown_type_id = 0x1b8c9f81;
		constexpr static std::string_view GotoAttackPosActor_type_name = "GotoAttackPosActor";
		constexpr static rivet::rivet_type_id GotoAttackPosActor_type_id = 0x7bc7d2c6;
		constexpr static std::string_view UseGotoPosActorFacing_type_name = "UseGotoPosActorFacing";
		constexpr static rivet::rivet_type_id UseGotoPosActorFacing_type_id = 0x2fd45dc2;
		constexpr static std::string_view RepositionToFPPostAttack_type_name = "RepositionToFPPostAttack";
		constexpr static rivet::rivet_type_id RepositionToFPPostAttack_type_id = 0x2931ab3d;
		constexpr static std::string_view AttackMove_type_name = "AttackMove";
		constexpr static rivet::rivet_type_id AttackMove_type_id = 0xa0c76f11; 

		explicit BossAttackVolumePrius() = default;
		explicit BossAttackVolumePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float CooldownMin {};
		float CooldownMax {};
		std::vector<uint64_t> ApplyCooldownToTheseVolumes {};
		float GlobalCooldownMin {};
		float GlobalCooldownMax {};
		float InitialCooldownMin {};
		float InitialCooldownMax {};
		float OtherCooldownMin {};
		float OtherCooldownMax {};
		std::vector<uint64_t> ApplyOtherCooldownToTheseVolumes {};
		float RandomWeighting {};
		bool ForceIfInside {};
		bool ForceIfInsideOnce {};
		bool UseBossPosition {};
		bool AttachToBoss {};
		std::string_view AttachToBossLoc {};
		uint32_t MaxConsecutiveUses {};
		bool StartAsEnabled {};
		bool ImmuneFromGlobalCooldown {};
		uint64_t GotoAttackPosActor {};
		bool UseGotoPosActorFacing {};
		bool RepositionToFPPostAttack {};
		std::shared_ptr<rivet::ddl::generated::BotComboMoveBase> AttackMove {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BossAttackVolumePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
