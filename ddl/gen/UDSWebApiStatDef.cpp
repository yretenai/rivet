// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UDSWebApiStatDef.hpp>

namespace rivet::ddl::generated {
	UDSWebApiStatDef::UDSWebApiStatDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		statName = serialized->get_string(statName_type_id, {});
		statId = serialized->get_int32(statId_type_id, 0u);
		origin = serialized->get_enum<rivet::ddl::generated::x766ef241>(origin_type_id, rivet::ddl::generated::x766ef241_values, rivet::ddl::generated::x766ef241::console);
		dataType = serialized->get_enum<rivet::ddl::generated::x884a9c52>(dataType_type_id, rivet::ddl::generated::x884a9c52_values, rivet::ddl::generated::x884a9c52::int32);
		aggregation = serialized->get_enum<rivet::ddl::generated::xb2718bea>(aggregation_type_id, rivet::ddl::generated::xb2718bea_values, rivet::ddl::generated::xb2718bea::latest);
		minValue = serialized->get_string(minValue_type_id, {});
		maxValue = serialized->get_string(maxValue_type_id, {});
		initialValue = serialized->get_string(initialValue_type_id, {}); 
	}

	[[nodiscard]] auto
	UDSWebApiStatDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UDSWebApiStatDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UDSWebApiStatDef> {
		if (incoming_type_id == UDSWebApiStatDef::type_id) {
			return std::make_shared<UDSWebApiStatDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
