// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/CommandEvent.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CommandGoToEvent : CommandEvent {
		constexpr static std::string_view type_name = "CommandGoToEvent";
		constexpr static rivet::rivet_type_id type_id = 0x11600dd3;

		constexpr static std::string_view Attack_type_name = "Attack";
		constexpr static rivet::rivet_type_id Attack_type_id = 0x79b8635c;
		constexpr static std::string_view Run_type_name = "Run";
		constexpr static rivet::rivet_type_id Run_type_id = 0x7a238d09;
		constexpr static std::string_view FaceDestinationDirectionOnArrival_type_name = "FaceDestinationDirectionOnArrival";
		constexpr static rivet::rivet_type_id FaceDestinationDirectionOnArrival_type_id = 0x570340fb;
		constexpr static std::string_view KeepTrying_type_name = "KeepTrying";
		constexpr static rivet::rivet_type_id KeepTrying_type_id = 0x1eb827f2; 

		explicit CommandGoToEvent() = default;
		explicit CommandGoToEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool Attack {};
		bool Run {};
		bool FaceDestinationDirectionOnArrival {};
		bool KeepTrying {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CommandGoToEvent>;
	};
} // namespace rivet::ddl::generated

// clang-format on
