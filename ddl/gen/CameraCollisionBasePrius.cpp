// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraCollisionPredictivePrius.hpp>
#include <rivet/ddl/generated/CameraCollisionConePrius.hpp>
#include <rivet/ddl/generated/CameraCollisionLinePrius.hpp>
#include <rivet/ddl/generated/CameraCollisionSpaceshipPrius.hpp> 

#include <rivet/ddl/generated/CameraCollisionBasePrius.hpp>

namespace rivet::ddl::generated {
	CameraCollisionBasePrius::CameraCollisionBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		WallClearance = serialized->get_float(WallClearance_type_id);
		GainOut = serialized->get_float(GainOut_type_id);
		GainOutBlend = serialized->get_float(GainOutBlend_type_id);
		GainInMin = serialized->get_float(GainInMin_type_id);
		GainInMax = serialized->get_float(GainInMax_type_id);
		DistInMin = serialized->get_float(DistInMin_type_id);
		DistInMax = serialized->get_float(DistInMax_type_id);
		DistInPower = serialized->get_float(DistInPower_type_id); 
	}

	[[nodiscard]] auto
	CameraCollisionBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraCollisionBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraCollisionBasePrius> {
		if (incoming_type_id == CameraCollisionBasePrius::type_id) {
			return std::make_shared<CameraCollisionBasePrius>(serialized);
		}

		auto CameraCollisionSpaceshipPrius_ptr = CameraCollisionSpaceshipPrius::from_substruct(incoming_type_id, serialized);
		if (CameraCollisionSpaceshipPrius_ptr != nullptr) {
			return CameraCollisionSpaceshipPrius_ptr;
		}

		auto CameraCollisionLinePrius_ptr = CameraCollisionLinePrius::from_substruct(incoming_type_id, serialized);
		if (CameraCollisionLinePrius_ptr != nullptr) {
			return CameraCollisionLinePrius_ptr;
		}

		auto CameraCollisionConePrius_ptr = CameraCollisionConePrius::from_substruct(incoming_type_id, serialized);
		if (CameraCollisionConePrius_ptr != nullptr) {
			return CameraCollisionConePrius_ptr;
		}

		auto CameraCollisionPredictivePrius_ptr = CameraCollisionPredictivePrius::from_substruct(incoming_type_id, serialized);
		if (CameraCollisionPredictivePrius_ptr != nullptr) {
			return CameraCollisionPredictivePrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
