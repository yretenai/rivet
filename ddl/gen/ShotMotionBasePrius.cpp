// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/OrientationMode.hpp>
#include <rivet/ddl/generated/BotLaserShotMotionPrius.hpp>
#include <rivet/ddl/generated/ShotSwingshotMotionPrius.hpp>
#include <rivet/ddl/generated/AttachedShotMotionPrius.hpp>
#include <rivet/ddl/generated/ShotMotionIcicleBombPrius.hpp>
#include <rivet/ddl/generated/ShotMotionTunnelerMeleePrius.hpp>
#include <rivet/ddl/generated/FalloffData.hpp>
#include <rivet/ddl/generated/BeamShotMotionPrius.hpp>
#include <rivet/ddl/generated/BasicShotMotionPrius.hpp>
#include <rivet/ddl/generated/GrappleHookShotMotionPrius.hpp>
#include <rivet/ddl/generated/ShotMotionStationaryPrius.hpp>
#include <rivet/ddl/generated/ShotMotionSchrodingerOrbitPrius.hpp>
#include <rivet/ddl/generated/OffsetReductionMode.hpp>
#include <rivet/ddl/generated/CollideAtGroundPositionShotMotionPrius.hpp> 

#include <rivet/ddl/generated/ShotMotionBasePrius.hpp>

namespace rivet::ddl::generated {
	ShotMotionBasePrius::ShotMotionBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Orientation = serialized->unwrap_into<rivet::ddl::generated::OrientationMode>(Orientation_type_id);
		Range = serialized->get_float(Range_type_id);
		Falloff = serialized->unwrap_into<rivet::ddl::generated::FalloffData>(Falloff_type_id);
		OffsetMode = serialized->unwrap_into<rivet::ddl::generated::OffsetReductionMode>(OffsetMode_type_id);
		RespondToProjectiles = serialized->get_bool(RespondToProjectiles_type_id);
		IgnoreDeadBots = serialized->get_bool(IgnoreDeadBots_type_id);
		SendSyncMotionEvents = serialized->get_bool(SendSyncMotionEvents_type_id);
		HitMoveCollision = serialized->get_bool(HitMoveCollision_type_id);
		HitWaterCollision = serialized->get_bool(HitWaterCollision_type_id);
		HitThrowables = serialized->get_bool(HitThrowables_type_id);
		HitCharacterMove = serialized->get_bool(HitCharacterMove_type_id); 
	}

	[[nodiscard]] auto
	ShotMotionBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShotMotionBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotMotionBasePrius> {
		if (incoming_type_id == ShotMotionBasePrius::type_id) {
			return std::make_shared<ShotMotionBasePrius>(serialized);
		}

		auto AttachedShotMotionPrius_ptr = AttachedShotMotionPrius::from_substruct(incoming_type_id, serialized);
		if (AttachedShotMotionPrius_ptr != nullptr) {
			return AttachedShotMotionPrius_ptr;
		}

		auto BotLaserShotMotionPrius_ptr = BotLaserShotMotionPrius::from_substruct(incoming_type_id, serialized);
		if (BotLaserShotMotionPrius_ptr != nullptr) {
			return BotLaserShotMotionPrius_ptr;
		}

		auto ShotSwingshotMotionPrius_ptr = ShotSwingshotMotionPrius::from_substruct(incoming_type_id, serialized);
		if (ShotSwingshotMotionPrius_ptr != nullptr) {
			return ShotSwingshotMotionPrius_ptr;
		}

		auto ShotMotionTunnelerMeleePrius_ptr = ShotMotionTunnelerMeleePrius::from_substruct(incoming_type_id, serialized);
		if (ShotMotionTunnelerMeleePrius_ptr != nullptr) {
			return ShotMotionTunnelerMeleePrius_ptr;
		}

		auto ShotMotionIcicleBombPrius_ptr = ShotMotionIcicleBombPrius::from_substruct(incoming_type_id, serialized);
		if (ShotMotionIcicleBombPrius_ptr != nullptr) {
			return ShotMotionIcicleBombPrius_ptr;
		}

		auto BeamShotMotionPrius_ptr = BeamShotMotionPrius::from_substruct(incoming_type_id, serialized);
		if (BeamShotMotionPrius_ptr != nullptr) {
			return BeamShotMotionPrius_ptr;
		}

		auto ShotMotionStationaryPrius_ptr = ShotMotionStationaryPrius::from_substruct(incoming_type_id, serialized);
		if (ShotMotionStationaryPrius_ptr != nullptr) {
			return ShotMotionStationaryPrius_ptr;
		}

		auto GrappleHookShotMotionPrius_ptr = GrappleHookShotMotionPrius::from_substruct(incoming_type_id, serialized);
		if (GrappleHookShotMotionPrius_ptr != nullptr) {
			return GrappleHookShotMotionPrius_ptr;
		}

		auto BasicShotMotionPrius_ptr = BasicShotMotionPrius::from_substruct(incoming_type_id, serialized);
		if (BasicShotMotionPrius_ptr != nullptr) {
			return BasicShotMotionPrius_ptr;
		}

		auto CollideAtGroundPositionShotMotionPrius_ptr = CollideAtGroundPositionShotMotionPrius::from_substruct(incoming_type_id, serialized);
		if (CollideAtGroundPositionShotMotionPrius_ptr != nullptr) {
			return CollideAtGroundPositionShotMotionPrius_ptr;
		}

		auto ShotMotionSchrodingerOrbitPrius_ptr = ShotMotionSchrodingerOrbitPrius::from_substruct(incoming_type_id, serialized);
		if (ShotMotionSchrodingerOrbitPrius_ptr != nullptr) {
			return ShotMotionSchrodingerOrbitPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
