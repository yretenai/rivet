// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/AnimDynamicsChainDef.hpp>

namespace rivet::ddl::generated {
	AnimDynamicsChainDef::AnimDynamicsChainDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Name = serialized->get_string(Name_type_id, {});
		JointName = serialized->get_string(JointName_type_id, {});
		IncludeChildren = serialized->get_bool(IncludeChildren_type_id, true);
		JointNameEnd = serialized->get_string(JointNameEnd_type_id, {});
		JointNameEndTetheredParent = serialized->get_string(JointNameEndTetheredParent_type_id, {});
		ConstraintType = serialized->get_enum<rivet::ddl::generated::xcbde7961>(ConstraintType_type_id, rivet::ddl::generated::xcbde7961_values, rivet::ddl::generated::xcbde7961::Simple);
		Gravity = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Gravity_type_id);
		Mass = serialized->get_float(Mass_type_id, 0.100000f);
		Damping = serialized->get_float(Damping_type_id, 0.010000f);
		ConeAngleOuter = serialized->get_float(ConeAngleOuter_type_id, 30.000000f);
		ConeAngleOuterEnd = serialized->get_float(ConeAngleOuterEnd_type_id, 20.000000f);
		ConeAngleNegativeYScale = serialized->get_float(ConeAngleNegativeYScale_type_id, 1.000000f);
		ConeAnglePositiveYScale = serialized->get_float(ConeAnglePositiveYScale_type_id, 1.000000f);
		ConeAngleNegativeZScale = serialized->get_float(ConeAngleNegativeZScale_type_id, 1.000000f);
		ConeAnglePositiveZScale = serialized->get_float(ConeAnglePositiveZScale_type_id, 1.000000f);
		MassEnd = serialized->get_float(MassEnd_type_id, 0.060000f);
		DampingEnd = serialized->get_float(DampingEnd_type_id, 0.010000f);
		LengthElasticity = serialized->get_float(LengthElasticity_type_id, 0.100000f); 
	}

	[[nodiscard]] auto
	AnimDynamicsChainDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimDynamicsChainDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDynamicsChainDef> {
		if (incoming_type_id == AnimDynamicsChainDef::type_id) {
			return std::make_shared<AnimDynamicsChainDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
