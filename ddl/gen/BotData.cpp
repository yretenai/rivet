// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SoundFocusComponentData.hpp> 

#include <rivet/ddl/generated/BotData.hpp>

namespace rivet::ddl::generated {
	BotData::BotData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotSetupData(serialized) {
		VariantSelectMode = serialized->get_enum<rivet::ddl::generated::x363f69e>(VariantSelectMode_type_id, rivet::ddl::generated::x363f69e_values, rivet::ddl::generated::x363f69e::From_System);
		SoundFocusData = serialized->unwrap_into<rivet::ddl::generated::SoundFocusComponentData>(SoundFocusData_type_id);
		AttackJobPool = serialized->get_enum<rivet::ddl::generated::x53ecdc9c>(AttackJobPool_type_id, rivet::ddl::generated::x53ecdc9c_values, rivet::ddl::generated::x53ecdc9c::None); 
	}

	[[nodiscard]] auto
	BotData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotData> {
		if (incoming_type_id == BotData::type_id) {
			return std::make_shared<BotData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
