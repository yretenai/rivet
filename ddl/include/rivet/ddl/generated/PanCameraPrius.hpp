// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/PlacedCameraPrius.hpp> 

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED PanCameraPrius : PlacedCameraPrius {
		constexpr const static std::string_view type_name = "PanCameraPrius";
		constexpr const static rivet::rivet_type_id type_id = 0xa21ab8dc;

		constexpr const static std::string_view SnapOnActivate_type_name = "SnapOnActivate";
		constexpr const static rivet::rivet_type_id SnapOnActivate_type_id = 0x7d0f050e;
		constexpr const static std::string_view PanX_type_name = "PanX";
		constexpr const static rivet::rivet_type_id PanX_type_id = 0xad3081c8;
		constexpr const static std::string_view PanZ_type_name = "PanZ";
		constexpr const static rivet::rivet_type_id PanZ_type_id = 0x433ee0e4;
		constexpr const static std::string_view CameraOffset_type_name = "CameraOffset";
		constexpr const static rivet::rivet_type_id CameraOffset_type_id = 0x68f0fd3d; 

		explicit PanCameraPrius() = default;
		explicit PanCameraPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool SnapOnActivate {};
		bool PanX {};
		bool PanZ {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> CameraOffset {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PanCameraPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
