// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PlayerDeathEvent.hpp>

namespace rivet::ddl::generated {
	PlayerDeathEvent::PlayerDeathEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		ClientIndex = serialized->get_int32(ClientIndex_type_id, 0u);
		Team = serialized->get_enum<rivet::ddl::generated::xc115d639>(Team_type_id, rivet::ddl::generated::xc115d639_values, rivet::ddl::generated::xc115d639::None);
		AnimatedDeath = serialized->get_bool(AnimatedDeath_type_id, false);
		CombatDeath = serialized->get_bool(CombatDeath_type_id, false); 
	}

	[[nodiscard]] auto
	PlayerDeathEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PlayerDeathEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PlayerDeathEvent> {
		if (incoming_type_id == PlayerDeathEvent::type_id) {
			return std::make_shared<PlayerDeathEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
