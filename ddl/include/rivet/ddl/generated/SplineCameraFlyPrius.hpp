// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/CameraPrius.hpp>
#include <rivet/ddl/generated/enums/x73a6f97a.hpp> 

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED SplineCameraFlyPrius : CameraPrius {
		constexpr const static std::string_view type_name = "SplineCameraFlyPrius";
		constexpr const static rivet::rivet_type_id type_id = 0xdb38953a;

		constexpr const static std::string_view MotionSpline_type_name = "MotionSpline";
		constexpr const static rivet::rivet_type_id MotionSpline_type_id = 0x93329739;
		constexpr const static std::string_view TargetActor_type_name = "TargetActor";
		constexpr const static rivet::rivet_type_id TargetActor_type_id = 0x98554e8c;
		constexpr const static std::string_view LookMode_type_name = "LookMode";
		constexpr const static rivet::rivet_type_id LookMode_type_id = 0x646527bb;
		constexpr const static std::string_view StartAtEnd_type_name = "StartAtEnd";
		constexpr const static rivet::rivet_type_id StartAtEnd_type_id = 0x39b65e8c;
		constexpr const static std::string_view TargetOffset_type_name = "TargetOffset";
		constexpr const static rivet::rivet_type_id TargetOffset_type_id = 0xabbb80f6; 

		explicit SplineCameraFlyPrius() = default;
		explicit SplineCameraFlyPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t MotionSpline {};
		uint64_t TargetActor {};
		rivet::ddl::generated::x73a6f97a LookMode {};
		bool StartAtEnd {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> TargetOffset {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SplineCameraFlyPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
