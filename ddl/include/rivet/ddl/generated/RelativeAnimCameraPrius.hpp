// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/CameraPrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED RelativeAnimCameraPrius : CameraPrius {
		constexpr const static std::string_view type_name = "RelativeAnimCameraPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x6f35fc5c;

		constexpr const static std::string_view RelativeActor_type_name = "RelativeActor";
		constexpr const static rivet::rivet_type_id RelativeActor_type_id = 0xc843c120;
		constexpr const static std::string_view CameraAnimList_type_name = "CameraAnimList";
		constexpr const static rivet::rivet_type_id CameraAnimList_type_id = 0x3bb9260b;
		constexpr const static std::string_view DoCollision_type_name = "DoCollision";
		constexpr const static rivet::rivet_type_id DoCollision_type_id = 0x198fefc3; 

		explicit RelativeAnimCameraPrius() = default;
		explicit RelativeAnimCameraPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t RelativeActor {};
		std::vector<std::string_view> CameraAnimList {};
		bool DoCollision {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RelativeAnimCameraPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
