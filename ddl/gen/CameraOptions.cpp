// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraOptions.hpp>

namespace rivet::ddl::generated {
	CameraOptions::CameraOptions([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		RenderObjects = serialized->get_bool(RenderObjects_type_id);
		RenderCameras = serialized->get_bool(RenderCameras_type_id);
		RenderLights = serialized->get_bool(RenderLights_type_id);
		RenderLocators = serialized->get_bool(RenderLocators_type_id);
		RenderModelOutlines = serialized->get_bool(RenderModelOutlines_type_id);
		RenderLightShells = serialized->get_bool(RenderLightShells_type_id);
		ShellMode = serialized->get_enum<rivet::ddl::generated::x41c556d2>(ShellMode_type_id, rivet::ddl::generated::x41c556d2_values);
		FilterType = serialized->get_enum<rivet::ddl::generated::xc8d9a31c>(FilterType_type_id, rivet::ddl::generated::xc8d9a31c_values);
		Group = serialized->get_enum<rivet::ddl::generated::x633f0e50>(Group_type_id, rivet::ddl::generated::x633f0e50_values);
		RenderInnerShells = serialized->get_bool(RenderInnerShells_type_id);
		EnableLightsOnlyFromGroup = serialized->get_bool(EnableLightsOnlyFromGroup_type_id);
		RenderLightsOnlyFromSelection = serialized->get_bool(RenderLightsOnlyFromSelection_type_id); 
	}

	[[nodiscard]] auto
	CameraOptions::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraOptions::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraOptions> {
		if (incoming_type_id == CameraOptions::type_id) {
			return std::make_shared<CameraOptions>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
