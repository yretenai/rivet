// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/x3141d5f2.hpp>
#include <rivet/ddl/generated/enums/x7271a16e.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HeapTemplate : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "HeapTemplate";
		constexpr static rivet::rivet_type_id type_id = 0x7234d044;

		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view Flags_type_name = "Flags";
		constexpr static rivet::rivet_type_id Flags_type_id = 0x12568d7b;
		constexpr static std::string_view Alignment_type_name = "Alignment";
		constexpr static rivet::rivet_type_id Alignment_type_id = 0xae338150;
		constexpr static std::string_view SoftAlignment_type_name = "SoftAlignment";
		constexpr static rivet::rivet_type_id SoftAlignment_type_id = 0x6200b6ec;
		constexpr static std::string_view MaxAllocs_type_name = "MaxAllocs";
		constexpr static rivet::rivet_type_id MaxAllocs_type_id = 0x277f4cf9;
		constexpr static std::string_view SmallBlockFraction_type_name = "SmallBlockFraction";
		constexpr static rivet::rivet_type_id SmallBlockFraction_type_id = 0x660d387;
		constexpr static std::string_view SmallBlockSizes_type_name = "SmallBlockSizes";
		constexpr static rivet::rivet_type_id SmallBlockSizes_type_id = 0x1c0e5bcb;
		constexpr static std::string_view MaxDeferredFrees_type_name = "MaxDeferredFrees";
		constexpr static rivet::rivet_type_id MaxDeferredFrees_type_id = 0xef51fb8; 

		explicit HeapTemplate() = default;
		explicit HeapTemplate([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Name {};
		rivet::ddl::generated::x7271a16e Type {};
		rivet::ddl::generated::x3141d5f2 Flags {};
		uint64_t Alignment {};
		uint64_t SoftAlignment {};
		int32_t MaxAllocs {};
		float SmallBlockFraction {};
		std::vector<uint16_t> SmallBlockSizes {};
		uint32_t MaxDeferredFrees {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeapTemplate>;
	};
} // namespace rivet::ddl::generated

// clang-format on
