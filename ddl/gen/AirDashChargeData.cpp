// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/AirDashChargeData.hpp>

namespace rivet::ddl::generated {
	AirDashChargeData::AirDashChargeData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		IntroDuration = serialized->get_float(IntroDuration_type_id, -1.000000);
		ChargeTurnRate = serialized->get_float(ChargeTurnRate_type_id, 45.000000);
		MoveSpeedMin = serialized->get_float(MoveSpeedMin_type_id, 10.000000);
		MoveSpeedMax = serialized->get_float(MoveSpeedMax_type_id, 45.000000);
		DesiredMoveTime = serialized->get_float(DesiredMoveTime_type_id, 0.500000);
		AllowedChargePastDist = serialized->get_float(AllowedChargePastDist_type_id, 6.000000);
		MaxChargeDuration = serialized->get_float(MaxChargeDuration_type_id, 5.000000);
		HitOutroDuration = serialized->get_float(HitOutroDuration_type_id, -1.000000);
		MissOutroDuration = serialized->get_float(MissOutroDuration_type_id, -1.000000);
		TrackTarget = serialized->get_bool(TrackTarget_type_id, false);
		FaceTargetDuringMiss = serialized->get_bool(FaceTargetDuringMiss_type_id, false);
		FaceTargetDuringHit = serialized->get_bool(FaceTargetDuringHit_type_id, false);
		SyncAnimOutroHit = serialized->get_bool(SyncAnimOutroHit_type_id, false);
		IntroDriver = serialized->get_string(IntroDriver_type_id, {});
		ChargeDriver = serialized->get_string(ChargeDriver_type_id, {});
		HitOutroDriver = serialized->get_string(HitOutroDriver_type_id, {});
		MissOutroDriver = serialized->get_string(MissOutroDriver_type_id, {});
		DamageName = serialized->get_string(DamageName_type_id, {});
		DamageAmount = serialized->get_float(DamageAmount_type_id, 0.000000);
		DamageType = serialized->get_enum<rivet::ddl::generated::DamageTypes>(DamageType_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::Melee);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values, rivet::ddl::generated::KnockbackLevels::None);
		KnockbackAmount = serialized->get_float(KnockbackAmount_type_id, 100.000000);
		DamageLocator = serialized->get_string(DamageLocator_type_id, {});
		LocalOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(LocalOffset_type_id);
		DamageRadius = serialized->get_float(DamageRadius_type_id, 0.500000);
		RequestFlags = serialized->get_bitset<rivet::ddl::generated::x65d7dac2>(RequestFlags_type_id, rivet::ddl::generated::x65d7dac2_values, 0); 
	}

	[[nodiscard]] auto
	AirDashChargeData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AirDashChargeData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AirDashChargeData> {
		if (incoming_type_id == AirDashChargeData::type_id) {
			return std::make_shared<AirDashChargeData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
