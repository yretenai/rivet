// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroLocalPrius.hpp>
#include <rivet/ddl/generated/HeroMoveAbilities.hpp> 

#include <rivet/ddl/generated/HeroCharacterPrius.hpp>

namespace rivet::ddl::generated {
	HeroCharacterPrius::HeroCharacterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		HeroType = serialized->get_enum<rivet::ddl::generated::HeroTypes>(HeroType_type_id, rivet::ddl::generated::HeroTypes_values);
		DisplayName = serialized->get_string(DisplayName_type_id);
		Voice = serialized->get_enum<rivet::ddl::generated::x8d474ebb>(Voice_type_id, rivet::ddl::generated::x8d474ebb_values);
		MoveAbilities = serialized->unwrap_into<rivet::ddl::generated::HeroMoveAbilities>(MoveAbilities_type_id);
		StartElevation = serialized->get_int32(StartElevation_type_id);
		FirstSpawn = serialized->get_bool(FirstSpawn_type_id);
		OrientGravityToUp = serialized->get_bool(OrientGravityToUp_type_id); 
	}

	[[nodiscard]] auto
	HeroCharacterPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroCharacterPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroCharacterPrius> {
		if (incoming_type_id == HeroCharacterPrius::type_id) {
			return std::make_shared<HeroCharacterPrius>(serialized);
		}

		auto HeroLocalPrius_ptr = HeroLocalPrius::from_substruct(incoming_type_id, serialized);
		if (HeroLocalPrius_ptr != nullptr) {
			return HeroLocalPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
