// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UIGalleryEntry.hpp>

namespace rivet::ddl::generated {
	UIGalleryEntry::UIGalleryEntry([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DisplayName = serialized->get_string(DisplayName_type_id, {});
		DisplayDesc = serialized->get_string(DisplayDesc_type_id, {});
		DisplayIcon = serialized->get_string(DisplayIcon_type_id, {});
		DisplayObject = serialized->get_enum<rivet::ddl::generated::xd64fa9b1>(DisplayObject_type_id, rivet::ddl::generated::xd64fa9b1_values, rivet::ddl::generated::xd64fa9b1::None);
		MissionUnlock = serialized->get_string(MissionUnlock_type_id, {});
		ObjectiveUnlock = serialized->get_string(ObjectiveUnlock_type_id, {});
		GoldBoltUnlock = serialized->get_enum<rivet::ddl::generated::xf06c6830>(GoldBoltUnlock_type_id, rivet::ddl::generated::xf06c6830_values, rivet::ddl::generated::xf06c6830::None);
		HasDescUnlock = serialized->get_bool(HasDescUnlock_type_id, false);
		Name2 = serialized->get_string(Name2_type_id, {});
		Desc2 = serialized->get_string(Desc2_type_id, {});
		Desc2Mission = serialized->get_string(Desc2Mission_type_id, {});
		Desc2Objective = serialized->get_string(Desc2Objective_type_id, {}); 
	}

	[[nodiscard]] auto
	UIGalleryEntry::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UIGalleryEntry::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIGalleryEntry> {
		if (incoming_type_id == UIGalleryEntry::type_id) {
			return std::make_shared<UIGalleryEntry>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
