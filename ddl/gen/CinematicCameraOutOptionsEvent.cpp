// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraFreezeOptions.hpp> 

#include <rivet/ddl/generated/CinematicCameraOutOptionsEvent.hpp>

namespace rivet::ddl::generated {
	CinematicCameraOutOptionsEvent::CinematicCameraOutOptionsEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		UseRelativeBlend = serialized->get_bool(UseRelativeBlend_type_id, false);
		UseContextSnapBlend = serialized->get_bool(UseContextSnapBlend_type_id, false);
		UpdateReferenceMatrix = serialized->get_bool(UpdateReferenceMatrix_type_id, false);
		FreezeOptions = serialized->unwrap_into<rivet::ddl::generated::CameraFreezeOptions>(FreezeOptions_type_id); 
	}

	[[nodiscard]] auto
	CinematicCameraOutOptionsEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CinematicCameraOutOptionsEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CinematicCameraOutOptionsEvent> {
		if (incoming_type_id == CinematicCameraOutOptionsEvent::type_id) {
			return std::make_shared<CinematicCameraOutOptionsEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
