// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HoudiniConfigDataFileGroup.hpp>
#include <rivet/ddl/generated/HoudiniConfigDataString.hpp>
#include <rivet/ddl/generated/HoudiniConfigDataFloat.hpp>
#include <rivet/ddl/generated/HoudiniConfigDataInteger.hpp>
#include <rivet/ddl/generated/HoudiniConfigDataFile.hpp> 

#include <rivet/ddl/generated/HoudiniConfigData.hpp>

namespace rivet::ddl::generated {
	HoudiniConfigData::HoudiniConfigData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Tag = serialized->get_string(Tag_type_id); 
	}

	auto
	HoudiniConfigData::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	HoudiniConfigData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HoudiniConfigData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HoudiniConfigData> {
		if (incoming_type_id == HoudiniConfigData::type_id) {
			return std::make_shared<HoudiniConfigData>(serialized);
		}

		auto HoudiniConfigDataString_ptr = HoudiniConfigDataString::from_substruct(incoming_type_id, serialized);
		if (HoudiniConfigDataString_ptr != nullptr) {
			return HoudiniConfigDataString_ptr;
		}

		auto HoudiniConfigDataInteger_ptr = HoudiniConfigDataInteger::from_substruct(incoming_type_id, serialized);
		if (HoudiniConfigDataInteger_ptr != nullptr) {
			return HoudiniConfigDataInteger_ptr;
		}

		auto HoudiniConfigDataFloat_ptr = HoudiniConfigDataFloat::from_substruct(incoming_type_id, serialized);
		if (HoudiniConfigDataFloat_ptr != nullptr) {
			return HoudiniConfigDataFloat_ptr;
		}

		auto HoudiniConfigDataFileGroup_ptr = HoudiniConfigDataFileGroup::from_substruct(incoming_type_id, serialized);
		if (HoudiniConfigDataFileGroup_ptr != nullptr) {
			return HoudiniConfigDataFileGroup_ptr;
		}

		auto HoudiniConfigDataFile_ptr = HoudiniConfigDataFile::from_substruct(incoming_type_id, serialized);
		if (HoudiniConfigDataFile_ptr != nullptr) {
			return HoudiniConfigDataFile_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
