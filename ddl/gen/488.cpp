// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UseOwnerTargetingData.hpp>
#include <rivet/ddl/generated/DontFindTarget.hpp>
#include <rivet/ddl/generated/SphereTargeting.hpp>
#include <rivet/ddl/generated/ConeTargeting.hpp> 

#include <rivet/ddl/generated/SpawnShotTargetingMode.hpp>

namespace rivet::ddl::generated {
	SpawnShotTargetingMode::SpawnShotTargetingMode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VectorMode = serialized->get_enum<rivet::ddl::generated::xfe692fc4>(VectorMode_type_id, rivet::ddl::generated::xfe692fc4_values);
		VectorSource = serialized->get_string(VectorSource_type_id); 
	}

	auto
	SpawnShotTargetingMode::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	SpawnShotTargetingMode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SpawnShotTargetingMode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SpawnShotTargetingMode> {
		if (incoming_type_id == SpawnShotTargetingMode::type_id) {
			return std::make_shared<SpawnShotTargetingMode>(serialized);
		}

		auto DontFindTarget_ptr = DontFindTarget::from_substruct(incoming_type_id, serialized);
		if (DontFindTarget_ptr != nullptr) {
			return DontFindTarget_ptr;
		}

		auto UseOwnerTargetingData_ptr = UseOwnerTargetingData::from_substruct(incoming_type_id, serialized);
		if (UseOwnerTargetingData_ptr != nullptr) {
			return UseOwnerTargetingData_ptr;
		}

		auto SphereTargeting_ptr = SphereTargeting::from_substruct(incoming_type_id, serialized);
		if (SphereTargeting_ptr != nullptr) {
			return SphereTargeting_ptr;
		}

		auto ConeTargeting_ptr = ConeTargeting::from_substruct(incoming_type_id, serialized);
		if (ConeTargeting_ptr != nullptr) {
			return ConeTargeting_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
