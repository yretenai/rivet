// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VanityPerkRaritanium.hpp>
#include <rivet/ddl/generated/VanityPerkXP.hpp>
#include <rivet/ddl/generated/VanityPerkNone.hpp>
#include <rivet/ddl/generated/VanityPerkBolts.hpp>
#include <rivet/ddl/generated/VanityPerkWrenchDamage.hpp>
#include <rivet/ddl/generated/VanityArmorPerk.hpp> 

#include <rivet/ddl/generated/VanityPerkBase.hpp>

namespace rivet::ddl::generated {
	VanityPerkBase::VanityPerkBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DescriptionLoc = serialized->get_string(DescriptionLoc_type_id);
		DisplayIcon = serialized->get_string(DisplayIcon_type_id); 
	}

	auto
	VanityPerkBase::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	VanityPerkBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VanityPerkBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VanityPerkBase> {
		if (incoming_type_id == VanityPerkBase::type_id) {
			return std::make_shared<VanityPerkBase>(serialized);
		}

		auto VanityPerkXP_ptr = VanityPerkXP::from_substruct(incoming_type_id, serialized);
		if (VanityPerkXP_ptr != nullptr) {
			return VanityPerkXP_ptr;
		}

		auto VanityPerkBolts_ptr = VanityPerkBolts::from_substruct(incoming_type_id, serialized);
		if (VanityPerkBolts_ptr != nullptr) {
			return VanityPerkBolts_ptr;
		}

		auto VanityPerkNone_ptr = VanityPerkNone::from_substruct(incoming_type_id, serialized);
		if (VanityPerkNone_ptr != nullptr) {
			return VanityPerkNone_ptr;
		}

		auto VanityPerkWrenchDamage_ptr = VanityPerkWrenchDamage::from_substruct(incoming_type_id, serialized);
		if (VanityPerkWrenchDamage_ptr != nullptr) {
			return VanityPerkWrenchDamage_ptr;
		}

		auto VanityPerkRaritanium_ptr = VanityPerkRaritanium::from_substruct(incoming_type_id, serialized);
		if (VanityPerkRaritanium_ptr != nullptr) {
			return VanityPerkRaritanium_ptr;
		}

		auto VanityArmorPerk_ptr = VanityArmorPerk::from_substruct(incoming_type_id, serialized);
		if (VanityArmorPerk_ptr != nullptr) {
			return VanityArmorPerk_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
