// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SharedFrameBudgetAmortizationSettings.hpp>

namespace rivet::ddl::generated {
	SharedFrameBudgetAmortizationSettings::SharedFrameBudgetAmortizationSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		LosBlockerTargetMaxBlockersPerFrame = serialized->get_int32(LosBlockerTargetMaxBlockersPerFrame_type_id, 8);
		HeroAwarenessMaxRaycastsPerFrame = serialized->get_uint8(HeroAwarenessMaxRaycastsPerFrame_type_id, 1);
		ManualAwarenessMaxRaycastsPerFrame = serialized->get_uint8(ManualAwarenessMaxRaycastsPerFrame_type_id, 2);
		OmniAwarenessMaxRaycastsPerFrame = serialized->get_uint8(OmniAwarenessMaxRaycastsPerFrame_type_id, 1);
		ShuffleHunterMaxRaycastsPerFrame = serialized->get_uint8(ShuffleHunterMaxRaycastsPerFrame_type_id, 1);
		FirepointLosCheckerMaxRaycastsPerFrame = serialized->get_uint8(FirepointLosCheckerMaxRaycastsPerFrame_type_id, 16);
		PerchLOSCheckerMaxRaycastsPerFrame = serialized->get_uint8(PerchLOSCheckerMaxRaycastsPerFrame_type_id, 16);
		GrenadeShotMaxRaycastsPerFrame = serialized->get_uint8(GrenadeShotMaxRaycastsPerFrame_type_id, 5);
		ShotActionProximityTestMaxRaycastsPerFrame = serialized->get_uint8(ShotActionProximityTestMaxRaycastsPerFrame_type_id, 4);
		CorpseManagerMaxRagdollsPerFrame = serialized->get_int32(CorpseManagerMaxRagdollsPerFrame_type_id, 3);
		CorpseManagerMaxDeletePerFrame = serialized->get_int32(CorpseManagerMaxDeletePerFrame_type_id, 3);
		FlewByMaxEventsPerFrame = serialized->get_int32(FlewByMaxEventsPerFrame_type_id, 64);
		ChunkManagerMaxTotalChunks = serialized->get_uint32(ChunkManagerMaxTotalChunks_type_id, 300);
		ChunkManagerMaxLowPrioritySpawnsPerFrame = serialized->get_uint32(ChunkManagerMaxLowPrioritySpawnsPerFrame_type_id, 64); 
	}

	[[nodiscard]] auto
	SharedFrameBudgetAmortizationSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SharedFrameBudgetAmortizationSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SharedFrameBudgetAmortizationSettings> {
		if (incoming_type_id == SharedFrameBudgetAmortizationSettings::type_id) {
			return std::make_shared<SharedFrameBudgetAmortizationSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
