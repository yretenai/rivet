// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UDSMissionStartEvent.hpp>
#include <rivet/ddl/generated/UDSObjectiveStartEvent.hpp> 

#include <rivet/ddl/generated/ActivityStartEvent.hpp>

namespace rivet::ddl::generated {
	ActivityStartEvent::ActivityStartEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): UDSEventBase(serialized) {
		activityId = serialized->get_string(activityId_type_id, {});
		primaryActor = serialized->get_string(primaryActor_type_id, {});
		secondaryActors = serialized->get_strings(secondaryActors_type_id);
		equippedMechanics = serialized->get_strings(equippedMechanics_type_id);
		zoneId = serialized->get_string(zoneId_type_id, {});
		mapPosition = serialized->get_floats(mapPosition_type_id);
		difficultySetting = serialized->get_int32(difficultySetting_type_id, 0); 
	}

	[[nodiscard]] auto
	ActivityStartEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ActivityStartEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActivityStartEvent> {
		if (incoming_type_id == ActivityStartEvent::type_id) {
			return std::make_shared<ActivityStartEvent>(serialized);
		}

		auto UDSObjectiveStartEvent_ptr = UDSObjectiveStartEvent::from_substruct(incoming_type_id, serialized);
		if (UDSObjectiveStartEvent_ptr != nullptr) {
			return UDSObjectiveStartEvent_ptr;
		}

		auto UDSMissionStartEvent_ptr = UDSMissionStartEvent::from_substruct(incoming_type_id, serialized);
		if (UDSMissionStartEvent_ptr != nullptr) {
			return UDSMissionStartEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
