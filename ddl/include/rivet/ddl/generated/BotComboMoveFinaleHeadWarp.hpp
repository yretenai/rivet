// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/BotComboMoveBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED BotComboMoveFinaleHeadWarp : BotComboMoveBase {
		constexpr const static std::string_view type_name = "BotComboMoveFinaleHeadWarp";
		constexpr const static rivet::rivet_type_id type_id = 0xe1f7cd03;

		constexpr const static std::string_view PortalActorAsset_type_name = "PortalActorAsset";
		constexpr const static rivet::rivet_type_id PortalActorAsset_type_id = 0xfec29c86;
		constexpr const static std::string_view HeadActorAsset_type_name = "HeadActorAsset";
		constexpr const static rivet::rivet_type_id HeadActorAsset_type_id = 0x7e95e9fa;
		constexpr const static std::string_view HeadActorVol_type_name = "HeadActorVol";
		constexpr const static rivet::rivet_type_id HeadActorVol_type_id = 0x53f23acb; 

		explicit BotComboMoveFinaleHeadWarp() = default;
		explicit BotComboMoveFinaleHeadWarp([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view PortalActorAsset {};
		std::string_view HeadActorAsset {};
		uint64_t HeadActorVol {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboMoveFinaleHeadWarp>;
	};
} // namespace rivet::ddl::generated

// clang-format on
