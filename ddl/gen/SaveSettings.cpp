// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SaveSettings.hpp>

namespace rivet::ddl::generated {
	SaveSettings::SaveSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		NumUsers = serialized->get_int32(NumUsers_type_id);
		SaveVersion = serialized->get_uint32s(SaveVersion_type_id);
		SaveTypeNames = serialized->get_strings(SaveTypeNames_type_id);
		SaveTypeSizes = serialized->get_uint32s(SaveTypeSizes_type_id);
		NewTypeSizes = serialized->get_uint32s(NewTypeSizes_type_id);
		CRCWriterHeapSize = serialized->get_uint32(CRCWriterHeapSize_type_id);
		SaveTypeSlots = serialized->get_bools(SaveTypeSlots_type_id);
		Title = serialized->get_string(Title_type_id);
		UseCRC = serialized->get_bool(UseCRC_type_id);
		ShowMessages = serialized->get_bool(ShowMessages_type_id);
		CaptureSaveIcons = serialized->get_bool(CaptureSaveIcons_type_id);
		MaxSnapshotsPerSlot = serialized->get_int32(MaxSnapshotsPerSlot_type_id);
		MaxSavesPerSlot = serialized->get_int32(MaxSavesPerSlot_type_id);
		DebugVerbosity = serialized->get_int32(DebugVerbosity_type_id);
		DebugUI = serialized->get_int32(DebugUI_type_id);
		ExtSaveEnable = serialized->get_bool(ExtSaveEnable_type_id);
		ExtLoadEnable = serialized->get_bool(ExtLoadEnable_type_id);
		ShowSaveIcon = serialized->get_bool(ShowSaveIcon_type_id);
		MinSaveIconTime = serialized->get_float(MinSaveIconTime_type_id);
		FatalAssertOnSaveBufferOverflow = serialized->get_bool(FatalAssertOnSaveBufferOverflow_type_id);
		FatalAssertOnSaveIconDeadlock = serialized->get_bool(FatalAssertOnSaveIconDeadlock_type_id); 
	}

	[[nodiscard]] auto
	SaveSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SaveSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SaveSettings> {
		if (incoming_type_id == SaveSettings::type_id) {
			return std::make_shared<SaveSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
