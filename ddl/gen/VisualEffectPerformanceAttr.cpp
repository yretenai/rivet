// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VisualEffectFrameAttr.hpp>
#include <rivet/ddl/generated/VisualEffectSpawnAttr.hpp> 

#include <rivet/ddl/generated/VisualEffectPerformanceAttr.hpp>

namespace rivet::ddl::generated {
	VisualEffectPerformanceAttr::VisualEffectPerformanceAttr([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Source = serialized->get_enum<rivet::ddl::generated::x21f55189>(Source_type_id, rivet::ddl::generated::x21f55189_values, rivet::ddl::generated::x21f55189::Self);
		Spawn = serialized->unwrap_into<rivet::ddl::generated::VisualEffectSpawnAttr>(Spawn_type_id);
		Frame = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFrameAttr>(Frame_type_id); 
	}

	[[nodiscard]] auto
	VisualEffectPerformanceAttr::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VisualEffectPerformanceAttr::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectPerformanceAttr> {
		if (incoming_type_id == VisualEffectPerformanceAttr::type_id) {
			return std::make_shared<VisualEffectPerformanceAttr>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
