// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraAutoDeactivatePrius.hpp>

namespace rivet::ddl::generated {
	CameraAutoDeactivatePrius::CameraAutoDeactivatePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BlendOutTime = serialized->get_float(BlendOutTime_type_id, 1.000000f);
		ExitDistance = serialized->get_float(ExitDistance_type_id, -1.000000f);
		ExitTimeout = serialized->get_float(ExitTimeout_type_id, -1.000000f);
		TestInputDelay = serialized->get_float(TestInputDelay_type_id, 0.500000f);
		ExitOnCameraInput = serialized->get_bool(ExitOnCameraInput_type_id, true);
		ExitOnMotionInput = serialized->get_bool(ExitOnMotionInput_type_id, true);
		ExitOnButtonInput = serialized->get_bool(ExitOnButtonInput_type_id, true); 
	}

	[[nodiscard]] auto
	CameraAutoDeactivatePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraAutoDeactivatePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraAutoDeactivatePrius> {
		if (incoming_type_id == CameraAutoDeactivatePrius::type_id) {
			return std::make_shared<CameraAutoDeactivatePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
