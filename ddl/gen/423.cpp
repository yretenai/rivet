// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HurdleShotAlongGroundMotionPrius.hpp>
#include <rivet/ddl/generated/ShotMotionTunnelerPrius.hpp> 

#include <rivet/ddl/generated/MoveAlongGroundShotMotionPrius.hpp>

namespace rivet::ddl::generated {
	MoveAlongGroundShotMotionPrius::MoveAlongGroundShotMotionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BasicShotMotionPrius(serialized) {

	}

	auto
	MoveAlongGroundShotMotionPrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	MoveAlongGroundShotMotionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MoveAlongGroundShotMotionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MoveAlongGroundShotMotionPrius> {
		if (incoming_type_id == MoveAlongGroundShotMotionPrius::type_id) {
			return std::make_shared<MoveAlongGroundShotMotionPrius>(serialized);
		}

		auto HurdleShotAlongGroundMotionPrius_ptr = HurdleShotAlongGroundMotionPrius::from_substruct(incoming_type_id, serialized);
		if (HurdleShotAlongGroundMotionPrius_ptr != nullptr) {
			return HurdleShotAlongGroundMotionPrius_ptr;
		}

		auto ShotMotionTunnelerPrius_ptr = ShotMotionTunnelerPrius::from_substruct(incoming_type_id, serialized);
		if (ShotMotionTunnelerPrius_ptr != nullptr) {
			return ShotMotionTunnelerPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
