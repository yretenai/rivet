// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xf5eea2a0.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ECMInputNodeDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ECMInputNodeDef";
		constexpr static rivet::rivet_type_id type_id = 0xefe3bc4e;

		constexpr static std::string_view NodeId_type_name = "NodeId";
		constexpr static rivet::rivet_type_id NodeId_type_id = 0x371a59e0;
		constexpr static std::string_view XPos_type_name = "XPos";
		constexpr static rivet::rivet_type_id XPos_type_id = 0xf88aee81;
		constexpr static std::string_view YPos_type_name = "YPos";
		constexpr static rivet::rivet_type_id YPos_type_id = 0x403689e4;
		constexpr static std::string_view Collapsed_type_name = "Collapsed";
		constexpr static rivet::rivet_type_id Collapsed_type_id = 0xf07e7faf;
		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view Value_type_name = "Value";
		constexpr static rivet::rivet_type_id Value_type_id = 0x42494f5;
		constexpr static std::string_view ValueArray_type_name = "ValueArray";
		constexpr static rivet::rivet_type_id ValueArray_type_id = 0x4f31b448;
		constexpr static std::string_view ValueArrayAux_type_name = "ValueArrayAux";
		constexpr static rivet::rivet_type_id ValueArrayAux_type_id = 0xd23024fb; 

		explicit ECMInputNodeDef() = default;
		explicit ECMInputNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t NodeId {};
		int32_t XPos {};
		int32_t YPos {};
		bool Collapsed {};
		rivet::ddl::generated::xf5eea2a0 Type {};
		std::string_view Value {};
		std::vector<std::string_view> ValueArray {};
		std::vector<std::string_view> ValueArrayAux {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ECMInputNodeDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
