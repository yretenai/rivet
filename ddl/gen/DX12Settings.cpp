// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DX12Settings.hpp>

namespace rivet::ddl::generated {
	DX12Settings::DX12Settings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DX12ShowPipelineHitchMessage = serialized->get_bool(DX12ShowPipelineHitchMessage_type_id, true);
		DX12RemoveDuplicateResourceBarriers = serialized->get_bool(DX12RemoveDuplicateResourceBarriers_type_id, true);
		DX12UnrollResourceBarrierSubmission = serialized->get_bool(DX12UnrollResourceBarrierSubmission_type_id, false);
		DX12EnableAsyncResourceCreation = serialized->get_bool(DX12EnableAsyncResourceCreation_type_id, false);
		DX12EnableAsyncPipelineCreation = serialized->get_bool(DX12EnableAsyncPipelineCreation_type_id, true);
		DX12MaxPipelineCreateThreads = serialized->get_uint32(DX12MaxPipelineCreateThreads_type_id, 6);
		DX12UseCopyQueueForUploadPool = serialized->get_bool(DX12UseCopyQueueForUploadPool_type_id, true);
		DX12EnableAutomaticMemoryMoving = serialized->get_bool(DX12EnableAutomaticMemoryMoving_type_id, true);
		DX12EnableSmallReadbackBufferAllocators = serialized->get_bool(DX12EnableSmallReadbackBufferAllocators_type_id, true);
		DX12EnableSmallUploadBufferAllocators = serialized->get_bool(DX12EnableSmallUploadBufferAllocators_type_id, true);
		DX12EnableRayTracingBufferAllocators = serialized->get_bool(DX12EnableRayTracingBufferAllocators_type_id, true);
		DX12EnableRenderTargetAllocators = serialized->get_bool(DX12EnableRenderTargetAllocators_type_id, true);
		DX12EnableAutomaticMemoryMovingStressTest = serialized->get_bool(DX12EnableAutomaticMemoryMovingStressTest_type_id, false);
		DX12AutomaticMemoryMovingMinFreeVideoMemory = serialized->get_uint64(DX12AutomaticMemoryMovingMinFreeVideoMemory_type_id, 268435456);
		DX12AutomaticMemoryMovingMaxFreeVideoMemory = serialized->get_uint64(DX12AutomaticMemoryMovingMaxFreeVideoMemory_type_id, 671088640);
		DX12AutomaticMemoryMovingMinFreeSystemMemory = serialized->get_uint64(DX12AutomaticMemoryMovingMinFreeSystemMemory_type_id, 536870912);
		DX12AutomaticMemoryMovingMaxResourceSize = serialized->get_uint64(DX12AutomaticMemoryMovingMaxResourceSize_type_id, 1073741824);
		DX12AutomaticMemoryMovingMaxSecondsPerFrame = serialized->get_float(DX12AutomaticMemoryMovingMaxSecondsPerFrame_type_id, 0.004000);
		DX12AutomaticMemoryMovingSizePriorityMaxSize = serialized->get_uint64(DX12AutomaticMemoryMovingSizePriorityMaxSize_type_id, 209715200);
		DX12AutomaticMemoryMovingDebugVideoBudget = serialized->get_uint64(DX12AutomaticMemoryMovingDebugVideoBudget_type_id, 0);
		DX12DisplayAutomaticMemoryMovingStats = serialized->get_bool(DX12DisplayAutomaticMemoryMovingStats_type_id, false);
		DX12EnableAutomaticMovingThread = serialized->get_enum<rivet::ddl::generated::xd8ef7ea5>(DX12EnableAutomaticMovingThread_type_id, rivet::ddl::generated::xd8ef7ea5_values, rivet::ddl::generated::xd8ef7ea5::Memory_Thread);
		DX12EnableDeferredReleaseThread = serialized->get_enum<rivet::ddl::generated::xd8ef7ea5>(DX12EnableDeferredReleaseThread_type_id, rivet::ddl::generated::xd8ef7ea5_values, rivet::ddl::generated::xd8ef7ea5::Memory_Thread);
		DX12AllowMultipleFrames = serialized->get_bool(DX12AllowMultipleFrames_type_id, true);
		DX12EnableTimers = serialized->get_bool(DX12EnableTimers_type_id, false);
		DX12DisplayTimers = serialized->get_bool(DX12DisplayTimers_type_id, false);
		DX12EnableUsageTracking = serialized->get_bool(DX12EnableUsageTracking_type_id, false);
		DX12DisplayUsageShort = serialized->get_bool(DX12DisplayUsageShort_type_id, false);
		DX12DisplayUsageGeneral = serialized->get_bool(DX12DisplayUsageGeneral_type_id, false);
		DX12DisplayUsageFine = serialized->get_bool(DX12DisplayUsageFine_type_id, false);
		DX12DisplayUsageDelta = serialized->get_bool(DX12DisplayUsageDelta_type_id, false);
		DX12DisplayUsageHeaps = serialized->get_bool(DX12DisplayUsageHeaps_type_id, false);
		DX12RaytracingSerializeBVHBuilds = serialized->get_bool(DX12RaytracingSerializeBVHBuilds_type_id, false);
		DX12RaytracingRefitSkinnedBVHes = serialized->get_bool(DX12RaytracingRefitSkinnedBVHes_type_id, true);
		DX12RaytracingRefitSkinnedBVHesFromBindPose = serialized->get_bool(DX12RaytracingRefitSkinnedBVHesFromBindPose_type_id, true);
		DX12RaytracingKeepAllPSOsAlive = serialized->get_bool(DX12RaytracingKeepAllPSOsAlive_type_id, false);
		DX12RaytracingEnableAMDHacks = serialized->get_bool(DX12RaytracingEnableAMDHacks_type_id, true);
		DX12CompactZoneBVHs = serialized->get_bool(DX12CompactZoneBVHs_type_id, true);
		DX12MinimizeZoneBVHs = serialized->get_bool(DX12MinimizeZoneBVHs_type_id, true);
		DX12RaytracingMaxModelsPerFrame = serialized->get_uint32(DX12RaytracingMaxModelsPerFrame_type_id, 32);
		DX12RaytracingMaxZonesPerFrame = serialized->get_uint32(DX12RaytracingMaxZonesPerFrame_type_id, 16);
		DX12UseCPUBufferOptimize = serialized->get_bool(DX12UseCPUBufferOptimize_type_id, false); 
	}

	[[nodiscard]] auto
	DX12Settings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DX12Settings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DX12Settings> {
		if (incoming_type_id == DX12Settings::type_id) {
			return std::make_shared<DX12Settings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
