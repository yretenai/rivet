// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/WeaponBlasterPrius.hpp> 

namespace rivet::ddl::generated {
	struct HexapodWeaponTriggerData; 

	struct RIVET_DDL_SHARED WeaponHexapodChargingPrius : WeaponBlasterPrius {
		constexpr static std::string_view type_name = "WeaponHexapodChargingPrius";
		constexpr static rivet::rivet_type_id type_id = 0xd62f8b46;

		constexpr static std::string_view ChargeTimeMax_type_name = "ChargeTimeMax";
		constexpr static rivet::rivet_type_id ChargeTimeMax_type_id = 0xa1c4cc1e;
		constexpr static std::string_view ChargedDamageMultiplier_type_name = "ChargedDamageMultiplier";
		constexpr static rivet::rivet_type_id ChargedDamageMultiplier_type_id = 0x8259e9be;
		constexpr static std::string_view ChargingTriggerData_type_name = "ChargingTriggerData";
		constexpr static rivet::rivet_type_id ChargingTriggerData_type_id = 0x2351960d;
		constexpr static std::string_view BeamActor_type_name = "BeamActor";
		constexpr static rivet::rivet_type_id BeamActor_type_id = 0x5457596a; 

		explicit WeaponHexapodChargingPrius() = default;
		explicit WeaponHexapodChargingPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float ChargeTimeMax {};
		float ChargedDamageMultiplier {};
		std::shared_ptr<rivet::ddl::generated::HexapodWeaponTriggerData> ChargingTriggerData {};
		std::string_view BeamActor {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponHexapodChargingPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
