// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TrampolinePrius.hpp>
#include <rivet/ddl/generated/DamageModifierOutgoingBattleBrewScalePrius.hpp>
#include <rivet/ddl/generated/DamageModifierIncomingBattleBrewScalePrius.hpp> 

#include <rivet/ddl/generated/BattleBrewScalePrius.hpp>

namespace rivet::ddl::generated {
	BattleBrewScalePrius::BattleBrewScalePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BattleBrewBasePrius(serialized) {
		ScaleReactAnimDriver = serialized->get_string(ScaleReactAnimDriver_type_id);
		ShrunkJumpedOnKnockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(ShrunkJumpedOnKnockback_type_id, rivet::ddl::generated::KnockbackLevels_values);
		IncomingDamageModifier = serialized->unwrap_into<rivet::ddl::generated::DamageModifierIncomingBattleBrewScalePrius>(IncomingDamageModifier_type_id);
		OutgoingDamageModifier = serialized->unwrap_into<rivet::ddl::generated::DamageModifierOutgoingBattleBrewScalePrius>(OutgoingDamageModifier_type_id);
		Trampoline = serialized->unwrap_into<rivet::ddl::generated::TrampolinePrius>(Trampoline_type_id); 
	}

	[[nodiscard]] auto
	BattleBrewScalePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BattleBrewScalePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BattleBrewScalePrius> {
		if (incoming_type_id == BattleBrewScalePrius::type_id) {
			return std::make_shared<BattleBrewScalePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
