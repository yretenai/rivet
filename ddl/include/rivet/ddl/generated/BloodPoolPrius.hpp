// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED BloodPoolPrius : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "BloodPoolPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x67c96fc5;

		constexpr const static std::string_view BloodPoolJoints_type_name = "BloodPoolJoints";
		constexpr const static rivet::rivet_type_id BloodPoolJoints_type_id = 0x476a774e;
		constexpr const static std::string_view MaxDist_type_name = "MaxDist";
		constexpr const static rivet::rivet_type_id MaxDist_type_id = 0x7ce74647;
		constexpr const static std::string_view MaxPools_type_name = "MaxPools";
		constexpr const static rivet::rivet_type_id MaxPools_type_id = 0x6e4bf20; 

		explicit BloodPoolPrius() = default;
		explicit BloodPoolPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::string_view> BloodPoolJoints {};
		float MaxDist {};
		uint32_t MaxPools {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BloodPoolPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
