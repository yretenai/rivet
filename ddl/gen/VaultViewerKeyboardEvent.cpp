// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VaultViewerKeyboardEvent.hpp>

namespace rivet::ddl::generated {
	VaultViewerKeyboardEvent::VaultViewerKeyboardEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Key = serialized->get_uint32(Key_type_id, 0);
		Down = serialized->get_bool(Down_type_id, false);
		AltKey = serialized->get_bool(AltKey_type_id, false);
		CtrlKey = serialized->get_bool(CtrlKey_type_id, false);
		ShiftKey = serialized->get_bool(ShiftKey_type_id, false); 
	}

	[[nodiscard]] auto
	VaultViewerKeyboardEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VaultViewerKeyboardEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VaultViewerKeyboardEvent> {
		if (incoming_type_id == VaultViewerKeyboardEvent::type_id) {
			return std::make_shared<VaultViewerKeyboardEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
