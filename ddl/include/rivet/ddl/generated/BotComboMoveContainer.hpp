// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RegisterAttackCooldownData;
	struct BotComboMoveBase; 

	struct RIVET_DDL_SHARED BotComboMoveContainer : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "BotComboMoveContainer";
		constexpr const static rivet::rivet_type_id type_id = 0x5a07c73f;

		constexpr const static std::string_view StartDistanceMin_type_name = "StartDistanceMin";
		constexpr const static rivet::rivet_type_id StartDistanceMin_type_id = 0x3a7e91f2;
		constexpr const static std::string_view StartDistanceMax_type_name = "StartDistanceMax";
		constexpr const static rivet::rivet_type_id StartDistanceMax_type_id = 0x673aeab;
		constexpr const static std::string_view StartDistanceOffScreen_type_name = "StartDistanceOffScreen";
		constexpr const static rivet::rivet_type_id StartDistanceOffScreen_type_id = 0xbb3bb0b3;
		constexpr const static std::string_view StartHeightMin_type_name = "StartHeightMin";
		constexpr const static rivet::rivet_type_id StartHeightMin_type_id = 0x584d5629;
		constexpr const static std::string_view StartHeightMax_type_name = "StartHeightMax";
		constexpr const static rivet::rivet_type_id StartHeightMax_type_id = 0x64406970;
		constexpr const static std::string_view RequireClearNavPath_type_name = "RequireClearNavPath";
		constexpr const static rivet::rivet_type_id RequireClearNavPath_type_id = 0x8c3e8e06;
		constexpr const static std::string_view DistToForceAttackIfNoNav_type_name = "DistToForceAttackIfNoNav";
		constexpr const static rivet::rivet_type_id DistToForceAttackIfNoNav_type_id = 0xcc0893d9;
		constexpr const static std::string_view RequireLOS_type_name = "RequireLOS";
		constexpr const static rivet::rivet_type_id RequireLOS_type_id = 0x5e4c04af;
		constexpr const static std::string_view FailOnNoLOS_type_name = "FailOnNoLOS";
		constexpr const static rivet::rivet_type_id FailOnNoLOS_type_id = 0xefa31cee;
		constexpr const static std::string_view RequireOnScreen_type_name = "RequireOnScreen";
		constexpr const static rivet::rivet_type_id RequireOnScreen_type_id = 0x24d01159;
		constexpr const static std::string_view CanReposition_type_name = "CanReposition";
		constexpr const static rivet::rivet_type_id CanReposition_type_id = 0xba7a26dc;
		constexpr const static std::string_view StopComboIfFailed_type_name = "StopComboIfFailed";
		constexpr const static rivet::rivet_type_id StopComboIfFailed_type_id = 0x213063c9;
		constexpr const static std::string_view StopComboIfSuccess_type_name = "StopComboIfSuccess";
		constexpr const static rivet::rivet_type_id StopComboIfSuccess_type_id = 0x91641574;
		constexpr const static std::string_view AbortDistMin_type_name = "AbortDistMin";
		constexpr const static rivet::rivet_type_id AbortDistMin_type_id = 0x7650fabb;
		constexpr const static std::string_view AbortDistMax_type_name = "AbortDistMax";
		constexpr const static rivet::rivet_type_id AbortDistMax_type_id = 0x4a5dc5e2;
		constexpr const static std::string_view MaxGotoDuration_type_name = "MaxGotoDuration";
		constexpr const static rivet::rivet_type_id MaxGotoDuration_type_id = 0x7a894fda;
		constexpr const static std::string_view MaxWaitDuration_type_name = "MaxWaitDuration";
		constexpr const static rivet::rivet_type_id MaxWaitDuration_type_id = 0xd8225fd4;
		constexpr const static std::string_view AbortIfOffScreen_type_name = "AbortIfOffScreen";
		constexpr const static rivet::rivet_type_id AbortIfOffScreen_type_id = 0x10989aa7;
		constexpr const static std::string_view BotComboMoveCooldowns_type_name = "BotComboMoveCooldowns";
		constexpr const static rivet::rivet_type_id BotComboMoveCooldowns_type_id = 0x797aed73;
		constexpr const static std::string_view Move_type_name = "Move";
		constexpr const static rivet::rivet_type_id Move_type_id = 0xdfaef7c8; 

		explicit BotComboMoveContainer() = default;
		explicit BotComboMoveContainer([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float StartDistanceMin {};
		float StartDistanceMax {};
		float StartDistanceOffScreen {};
		float StartHeightMin {};
		float StartHeightMax {};
		bool RequireClearNavPath {};
		float DistToForceAttackIfNoNav {};
		bool RequireLOS {};
		bool FailOnNoLOS {};
		bool RequireOnScreen {};
		bool CanReposition {};
		bool StopComboIfFailed {};
		bool StopComboIfSuccess {};
		float AbortDistMin {};
		float AbortDistMax {};
		float MaxGotoDuration {};
		float MaxWaitDuration {};
		bool AbortIfOffScreen {};
		std::vector<std::shared_ptr<rivet::ddl::generated::RegisterAttackCooldownData>> BotComboMoveCooldowns {};
		std::shared_ptr<rivet::ddl::generated::BotComboMoveBase> Move {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboMoveContainer>;
	};
} // namespace rivet::ddl::generated

// clang-format on
