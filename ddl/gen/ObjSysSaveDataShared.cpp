// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ObjSysSaveDataGame.hpp>
#include <rivet/ddl/generated/ActiveObjective.hpp> 

#include <rivet/ddl/generated/ObjSysSaveDataShared.hpp>

namespace rivet::ddl::generated {
	ObjSysSaveDataShared::ObjSysSaveDataShared([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		RequestedGraphs = serialized->get_uint64s(RequestedGraphs_type_id);
		PrimaryObjective = serialized->unwrap_into<rivet::ddl::generated::ActiveObjective>(PrimaryObjective_type_id); 
	}

	[[nodiscard]] auto
	ObjSysSaveDataShared::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ObjSysSaveDataShared::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ObjSysSaveDataShared> {
		if (incoming_type_id == ObjSysSaveDataShared::type_id) {
			return std::make_shared<ObjSysSaveDataShared>(serialized);
		}

		auto ObjSysSaveDataGame_ptr = ObjSysSaveDataGame::from_substruct(incoming_type_id, serialized);
		if (ObjSysSaveDataGame_ptr != nullptr) {
			return ObjSysSaveDataGame_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
