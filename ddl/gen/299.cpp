// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotReactionBucket.hpp>

namespace rivet::ddl::generated {
	BotReactionBucket::BotReactionBucket([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Comment = serialized->get_string(Comment_type_id);
		MinKnockbackLevel = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(MinKnockbackLevel_type_id, rivet::ddl::generated::KnockbackLevels_values);
		MaxKnockbackLevel = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(MaxKnockbackLevel_type_id, rivet::ddl::generated::KnockbackLevels_values);
		KnockbackFillThreshhold = serialized->get_float(KnockbackFillThreshhold_type_id);
		InitialFill = serialized->get_float(InitialFill_type_id);
		ReactCooldown = serialized->get_float(ReactCooldown_type_id);
		RefillRate = serialized->get_float(RefillRate_type_id);
		EmptyLowerBucketsOnReact = serialized->get_bool(EmptyLowerBucketsOnReact_type_id);
		Reaction = serialized->get_enum<rivet::ddl::generated::xf7b2e7be>(Reaction_type_id, rivet::ddl::generated::xf7b2e7be_values); 
	}

	auto
	BotReactionBucket::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	BotReactionBucket::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotReactionBucket::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotReactionBucket> {
		if (incoming_type_id == BotReactionBucket::type_id) {
			return std::make_shared<BotReactionBucket>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
