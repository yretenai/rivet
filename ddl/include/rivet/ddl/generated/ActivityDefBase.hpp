// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct ActivityLinkBase;
	struct ActivityHintWithId; 

	struct RIVET_DDL_SHARED ActivityDefBase : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "ActivityDefBase";
		constexpr const static rivet::rivet_type_id type_id = 0x8a0fcb5d;

		constexpr const static std::string_view ActivityId_type_name = "ActivityId";
		constexpr const static rivet::rivet_type_id ActivityId_type_id = 0xc803bcc5;
		constexpr const static std::string_view ActivityLink_type_name = "ActivityLink";
		constexpr const static rivet::rivet_type_id ActivityLink_type_id = 0x6a428937;
		constexpr const static std::string_view SendLocationOnEnd_type_name = "SendLocationOnEnd";
		constexpr const static rivet::rivet_type_id SendLocationOnEnd_type_id = 0xaf619063;
		constexpr const static std::string_view DefaultPlaytimeEstimate_type_name = "DefaultPlaytimeEstimate";
		constexpr const static rivet::rivet_type_id DefaultPlaytimeEstimate_type_id = 0xa76d47a6;
		constexpr const static std::string_view Hints_type_name = "Hints";
		constexpr const static rivet::rivet_type_id Hints_type_id = 0xf00bc587; 

		explicit ActivityDefBase() = default;
		explicit ActivityDefBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view ActivityId {};
		std::shared_ptr<rivet::ddl::generated::ActivityLinkBase> ActivityLink {};
		bool SendLocationOnEnd {};
		uint32_t DefaultPlaytimeEstimate {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ActivityHintWithId>> Hints {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActivityDefBase>;
	};
} // namespace rivet::ddl::generated

// clang-format on
