// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x8f1591df.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED RobotestPhysBreakableChunkInfo : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "RobotestPhysBreakableChunkInfo";
		constexpr static rivet::rivet_type_id type_id = 0xc8c09b3b;

		constexpr static std::string_view ModelName_type_name = "ModelName";
		constexpr static rivet::rivet_type_id ModelName_type_id = 0x64443d31;
		constexpr static std::string_view ActorName_type_name = "ActorName";
		constexpr static rivet::rivet_type_id ActorName_type_id = 0xcc4a4d21;
		constexpr static std::string_view ActorAssetId_type_name = "ActorAssetId";
		constexpr static rivet::rivet_type_id ActorAssetId_type_id = 0xb54bdec6;
		constexpr static std::string_view ModelAssetId_type_name = "ModelAssetId";
		constexpr static rivet::rivet_type_id ModelAssetId_type_id = 0x61ea29ef;
		constexpr static std::string_view IsDebris_type_name = "IsDebris";
		constexpr static rivet::rivet_type_id IsDebris_type_id = 0xf375d0a6;
		constexpr static std::string_view Radius_type_name = "Radius";
		constexpr static rivet::rivet_type_id Radius_type_id = 0x504203d;
		constexpr static std::string_view SpawnStatus_type_name = "SpawnStatus";
		constexpr static rivet::rivet_type_id SpawnStatus_type_id = 0x8cb8aa02; 

		explicit RobotestPhysBreakableChunkInfo() = default;
		explicit RobotestPhysBreakableChunkInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view ModelName {};
		std::string_view ActorName {};
		uint64_t ActorAssetId {};
		uint64_t ModelAssetId {};
		bool IsDebris {};
		float Radius {};
		rivet::ddl::generated::x8f1591df SpawnStatus {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RobotestPhysBreakableChunkInfo>;
	};
} // namespace rivet::ddl::generated

// clang-format on
