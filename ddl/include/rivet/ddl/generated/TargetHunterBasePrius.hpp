// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct TargetHunterCustomCheck; 

	struct RIVET_DDL_SHARED TargetHunterBasePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "TargetHunterBasePrius";
		constexpr static rivet::rivet_type_id type_id = 0x9d2bc08;

		constexpr static std::string_view TargetHunterName_type_name = "TargetHunterName";
		constexpr static rivet::rivet_type_id TargetHunterName_type_id = 0x35cbe49a;
		constexpr static std::string_view StartOnInit_type_name = "StartOnInit";
		constexpr static rivet::rivet_type_id StartOnInit_type_id = 0x5c7de3d6;
		constexpr static std::string_view MinRange_type_name = "MinRange";
		constexpr static rivet::rivet_type_id MinRange_type_id = 0x6c79323f;
		constexpr static std::string_view MaxRange_type_name = "MaxRange";
		constexpr static rivet::rivet_type_id MaxRange_type_id = 0x8a199dde;
		constexpr static std::string_view TestNav_type_name = "TestNav";
		constexpr static rivet::rivet_type_id TestNav_type_id = 0x39335566;
		constexpr static std::string_view TestGround_type_name = "TestGround";
		constexpr static rivet::rivet_type_id TestGround_type_id = 0xfa8392f0;
		constexpr static std::string_view MustBeInHomeArea_type_name = "MustBeInHomeArea";
		constexpr static rivet::rivet_type_id MustBeInHomeArea_type_id = 0x7b29b20e;
		constexpr static std::string_view TargetTimeout_type_name = "TargetTimeout";
		constexpr static rivet::rivet_type_id TargetTimeout_type_id = 0x81bcaea8;
		constexpr static std::string_view RecheckTime_type_name = "RecheckTime";
		constexpr static rivet::rivet_type_id RecheckTime_type_id = 0x46d572d3;
		constexpr static std::string_view Checks_type_name = "Checks";
		constexpr static rivet::rivet_type_id Checks_type_id = 0xa1f44e1e; 

		explicit TargetHunterBasePrius() = default;
		explicit TargetHunterBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view TargetHunterName {};
		bool StartOnInit {};
		float MinRange {};
		float MaxRange {};
		bool TestNav {};
		bool TestGround {};
		bool MustBeInHomeArea {};
		float TargetTimeout {};
		float RecheckTime {};
		std::vector<std::shared_ptr<rivet::ddl::generated::TargetHunterCustomCheck>> Checks {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TargetHunterBasePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
