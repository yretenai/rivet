// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PortalZipTrajectoryDrawerPrius.hpp>
#include <rivet/ddl/generated/ShotMotionTrajectoryDrawerPrius.hpp>
#include <rivet/ddl/generated/PointOfImpactActorData.hpp>
#include <rivet/ddl/generated/TrajectoryDrawerArcData.hpp>
#include <rivet/ddl/generated/TrajectorDrawerKnotData.hpp> 

#include <rivet/ddl/generated/WeaponTrajectoryDrawerPrius.hpp>

namespace rivet::ddl::generated {
	WeaponTrajectoryDrawerPrius::WeaponTrajectoryDrawerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ArcStyle = serialized->get_enum<rivet::ddl::generated::x399b7397>(ArcStyle_type_id, rivet::ddl::generated::x399b7397_values);
		KnotData = serialized->unwrap_into<rivet::ddl::generated::TrajectorDrawerKnotData>(KnotData_type_id);
		Arc = serialized->unwrap_into<rivet::ddl::generated::TrajectoryDrawerArcData>(Arc_type_id);
		AimArc = serialized->unwrap_into<rivet::ddl::generated::TrajectoryDrawerArcData>(AimArc_type_id);
		HighlightArc = serialized->unwrap_into<rivet::ddl::generated::TrajectoryDrawerArcData>(HighlightArc_type_id);
		ArcWidth = serialized->get_float(ArcWidth_type_id);
		OnlyDrawArcOnCollision = serialized->get_bool(OnlyDrawArcOnCollision_type_id);
		DecalTexture = serialized->get_string(DecalTexture_type_id);
		DecalMaterial = serialized->get_string(DecalMaterial_type_id);
		DecalSize = serialized->get_float(DecalSize_type_id);
		DecalAlpha = serialized->get_float(DecalAlpha_type_id);
		CameraOrient = serialized->get_bool(CameraOrient_type_id);
		PointOfImpactActor = serialized->get_string(PointOfImpactActor_type_id);
		ScalePointOfImpactActor = serialized->get_bool(ScalePointOfImpactActor_type_id);
		PointOfImpactSize = serialized->get_float(PointOfImpactSize_type_id);
		ImpactActorSkipDepth = serialized->get_bool(ImpactActorSkipDepth_type_id);
		ApplyMaterialToImpactActor = serialized->get_bool(ApplyMaterialToImpactActor_type_id);
		ActorOrientation = serialized->get_enum<rivet::ddl::generated::ActorOrientation>(ActorOrientation_type_id, rivet::ddl::generated::ActorOrientation_values);
		AimPointOfImpactActor = serialized->unwrap_into<rivet::ddl::generated::PointOfImpactActorData>(AimPointOfImpactActor_type_id);
		AltPointOfImpactActors = serialized->unwrap_into_many<rivet::ddl::generated::PointOfImpactActorData>(AltPointOfImpactActors_type_id);
		TriggerIndex = serialized->get_uint32(TriggerIndex_type_id);
		ShotIndex = serialized->get_uint32(ShotIndex_type_id);
		IgnoreCollDist = serialized->get_float(IgnoreCollDist_type_id); 
	}

	[[nodiscard]] auto
	WeaponTrajectoryDrawerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeaponTrajectoryDrawerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponTrajectoryDrawerPrius> {
		if (incoming_type_id == WeaponTrajectoryDrawerPrius::type_id) {
			return std::make_shared<WeaponTrajectoryDrawerPrius>(serialized);
		}

		auto ShotMotionTrajectoryDrawerPrius_ptr = ShotMotionTrajectoryDrawerPrius::from_substruct(incoming_type_id, serialized);
		if (ShotMotionTrajectoryDrawerPrius_ptr != nullptr) {
			return ShotMotionTrajectoryDrawerPrius_ptr;
		}

		auto PortalZipTrajectoryDrawerPrius_ptr = PortalZipTrajectoryDrawerPrius::from_substruct(incoming_type_id, serialized);
		if (PortalZipTrajectoryDrawerPrius_ptr != nullptr) {
			return PortalZipTrajectoryDrawerPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
