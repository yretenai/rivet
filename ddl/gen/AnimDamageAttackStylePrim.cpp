// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/AnimDamageAttackStylePrim.hpp>

namespace rivet::ddl::generated {
	AnimDamageAttackStylePrim::AnimDamageAttackStylePrim([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): AnimDamageAttackStyleBase(serialized) {
		PrimType = serialized->get_enum<rivet::ddl::generated::xaabf8cd7>(PrimType_type_id, rivet::ddl::generated::xaabf8cd7_values);
		DamageJoint = serialized->get_string(DamageJoint_type_id);
		LocalOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(LocalOffset_type_id);
		DamageJointSecondary = serialized->get_string(DamageJointSecondary_type_id);
		LocalOffsetSecondary = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(LocalOffsetSecondary_type_id);
		SweepFromLastPosition = serialized->get_bool(SweepFromLastPosition_type_id);
		DamageRadius = serialized->get_float(DamageRadius_type_id);
		LerpRadius = serialized->get_bool(LerpRadius_type_id);
		DamagePrimLength = serialized->get_float(DamagePrimLength_type_id);
		LerpLength = serialized->get_bool(LerpLength_type_id);
		DamageType = serialized->get_enum<rivet::ddl::generated::x8d7e44cf>(DamageType_type_id, rivet::ddl::generated::x8d7e44cf_values);
		DamageAmount = serialized->get_float(DamageAmount_type_id);
		ArmorPassThroughPercentage = serialized->get_float(ArmorPassThroughPercentage_type_id);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values);
		KnockbackAmount = serialized->get_float(KnockbackAmount_type_id);
		KnockbackForce = serialized->get_float(KnockbackForce_type_id);
		FriendlyKnockback = serialized->get_bool(FriendlyKnockback_type_id);
		Condition = serialized->get_enum<rivet::ddl::generated::x257872aa>(Condition_type_id, rivet::ddl::generated::x257872aa_values);
		ConditionDuration = serialized->get_float(ConditionDuration_type_id);
		StatusAmount = serialized->get_float(StatusAmount_type_id);
		DurationOverride = serialized->get_float(DurationOverride_type_id);
		HitPauseTime = serialized->get_float(HitPauseTime_type_id);
		RequestFlags = serialized->get_bitset<rivet::ddl::generated::x65d7dac2>(RequestFlags_type_id, rivet::ddl::generated::x65d7dac2_values); 
	}

	[[nodiscard]] auto
	AnimDamageAttackStylePrim::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimDamageAttackStylePrim::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDamageAttackStylePrim> {
		if (incoming_type_id == AnimDamageAttackStylePrim::type_id) {
			return std::make_shared<AnimDamageAttackStylePrim>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
