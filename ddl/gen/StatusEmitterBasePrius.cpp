// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StatusEffectsData.hpp>
#include <rivet/ddl/generated/StatusEmitterOnDamagedPrius.hpp>
#include <rivet/ddl/generated/StatusEmitterSelfPrius.hpp>
#include <rivet/ddl/generated/StatusEmitterVolumePrius.hpp>
#include <rivet/ddl/generated/StatusEmitterRequestPrius.hpp>
#include <rivet/ddl/generated/StatusEmitterScriptActionPrius.hpp>
#include <rivet/ddl/generated/StatusEmitterDamagePrius.hpp>
#include <rivet/ddl/generated/StatusEmitterOnDeathPrius.hpp>
#include <rivet/ddl/generated/StatusEmitterAuraPrius.hpp> 

#include <rivet/ddl/generated/StatusEmitterBasePrius.hpp>

namespace rivet::ddl::generated {
	StatusEmitterBasePrius::StatusEmitterBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StatusEffectsData = serialized->unwrap_into<rivet::ddl::generated::StatusEffectsData>(StatusEffectsData_type_id);
		ApplyEffectsWhileDead = serialized->get_bool(ApplyEffectsWhileDead_type_id); 
	}

	[[nodiscard]] auto
	StatusEmitterBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StatusEmitterBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StatusEmitterBasePrius> {
		if (incoming_type_id == StatusEmitterBasePrius::type_id) {
			return std::make_shared<StatusEmitterBasePrius>(serialized);
		}

		auto StatusEmitterOnDamagedPrius_ptr = StatusEmitterOnDamagedPrius::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterOnDamagedPrius_ptr != nullptr) {
			return StatusEmitterOnDamagedPrius_ptr;
		}

		auto StatusEmitterSelfPrius_ptr = StatusEmitterSelfPrius::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterSelfPrius_ptr != nullptr) {
			return StatusEmitterSelfPrius_ptr;
		}

		auto StatusEmitterDamagePrius_ptr = StatusEmitterDamagePrius::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterDamagePrius_ptr != nullptr) {
			return StatusEmitterDamagePrius_ptr;
		}

		auto StatusEmitterOnDeathPrius_ptr = StatusEmitterOnDeathPrius::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterOnDeathPrius_ptr != nullptr) {
			return StatusEmitterOnDeathPrius_ptr;
		}

		auto StatusEmitterVolumePrius_ptr = StatusEmitterVolumePrius::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterVolumePrius_ptr != nullptr) {
			return StatusEmitterVolumePrius_ptr;
		}

		auto StatusEmitterScriptActionPrius_ptr = StatusEmitterScriptActionPrius::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterScriptActionPrius_ptr != nullptr) {
			return StatusEmitterScriptActionPrius_ptr;
		}

		auto StatusEmitterRequestPrius_ptr = StatusEmitterRequestPrius::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterRequestPrius_ptr != nullptr) {
			return StatusEmitterRequestPrius_ptr;
		}

		auto StatusEmitterAuraPrius_ptr = StatusEmitterAuraPrius::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterAuraPrius_ptr != nullptr) {
			return StatusEmitterAuraPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
