// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED StickyConfig : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "StickyConfig";
		constexpr static rivet::rivet_type_id type_id = 0x7bfdbcbd;

		constexpr static std::string_view WindowX_type_name = "WindowX";
		constexpr static rivet::rivet_type_id WindowX_type_id = 0x4eb11fe3;
		constexpr static std::string_view WindowY_type_name = "WindowY";
		constexpr static rivet::rivet_type_id WindowY_type_id = 0x39b62f75;
		constexpr static std::string_view WindowWidth_type_name = "WindowWidth";
		constexpr static rivet::rivet_type_id WindowWidth_type_id = 0x3c90e0c9;
		constexpr static std::string_view WindowHeight_type_name = "WindowHeight";
		constexpr static rivet::rivet_type_id WindowHeight_type_id = 0x6e96c76a;
		constexpr static std::string_view WindowMaximized_type_name = "WindowMaximized";
		constexpr static rivet::rivet_type_id WindowMaximized_type_id = 0x8c4953c8; 

		explicit StickyConfig() = default;
		explicit StickyConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t WindowX {};
		int32_t WindowY {};
		int32_t WindowWidth {};
		int32_t WindowHeight {};
		bool WindowMaximized {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StickyConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
