// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LightStat.hpp> 

#include <rivet/ddl/generated/LightStats.hpp>

namespace rivet::ddl::generated {
	LightStats::LightStats([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Sun = serialized->unwrap_into<rivet::ddl::generated::LightStat>(Sun_type_id);
		Point = serialized->unwrap_into<rivet::ddl::generated::LightStat>(Point_type_id);
		Spot = serialized->unwrap_into<rivet::ddl::generated::LightStat>(Spot_type_id);
		Shaft = serialized->unwrap_into<rivet::ddl::generated::LightStat>(Shaft_type_id);
		Pyramid = serialized->unwrap_into<rivet::ddl::generated::LightStat>(Pyramid_type_id);
		Modulate = serialized->unwrap_into<rivet::ddl::generated::LightStat>(Modulate_type_id); 
	}

	[[nodiscard]] auto
	LightStats::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LightStats::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LightStats> {
		if (incoming_type_id == LightStats::type_id) {
			return std::make_shared<LightStats>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
