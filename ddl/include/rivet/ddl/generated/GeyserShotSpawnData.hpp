// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED GeyserShotSpawnData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "GeyserShotSpawnData";
		constexpr static rivet::rivet_type_id type_id = 0x969c950e;

		constexpr static std::string_view ShotConfig_type_name = "ShotConfig";
		constexpr static rivet::rivet_type_id ShotConfig_type_id = 0xb171e6ae;
		constexpr static std::string_view RangeHorizontal_type_name = "RangeHorizontal";
		constexpr static rivet::rivet_type_id RangeHorizontal_type_id = 0x1db8d0f3;
		constexpr static std::string_view RangeVertical_type_name = "RangeVertical";
		constexpr static rivet::rivet_type_id RangeVertical_type_id = 0x4a1de2c0;
		constexpr static std::string_view IntervalMin_type_name = "IntervalMin";
		constexpr static rivet::rivet_type_id IntervalMin_type_id = 0x22f1fbf5;
		constexpr static std::string_view IntervalMax_type_name = "IntervalMax";
		constexpr static rivet::rivet_type_id IntervalMax_type_id = 0x1efcc4ac;
		constexpr static std::string_view TargetBotCooldownMin_type_name = "TargetBotCooldownMin";
		constexpr static rivet::rivet_type_id TargetBotCooldownMin_type_id = 0xf01aeae7;
		constexpr static std::string_view TargetBotCooldownMax_type_name = "TargetBotCooldownMax";
		constexpr static rivet::rivet_type_id TargetBotCooldownMax_type_id = 0xcc17d5be; 

		explicit GeyserShotSpawnData() = default;
		explicit GeyserShotSpawnData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view ShotConfig {};
		float RangeHorizontal {};
		float RangeVertical {};
		float IntervalMin {};
		float IntervalMax {};
		float TargetBotCooldownMin {};
		float TargetBotCooldownMax {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GeyserShotSpawnData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
