// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector2.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/ModelGeneratorItem.hpp>

namespace rivet::ddl::generated {
	ModelGeneratorItem::ModelGeneratorItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MergeMethod = serialized->get_enum<rivet::ddl::generated::xea6549e1>(MergeMethod_type_id, rivet::ddl::generated::xea6549e1_values);
		ModelSource = serialized->get_enum<rivet::ddl::generated::xcba6be41>(ModelSource_type_id, rivet::ddl::generated::xcba6be41_values);
		VertexColor = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(VertexColor_type_id);
		VertexAlpha = serialized->get_float(VertexAlpha_type_id);
		VertexSpacing = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(VertexSpacing_type_id);
		ReverseU = serialized->get_bool(ReverseU_type_id);
		ReverseV = serialized->get_bool(ReverseV_type_id);
		UVTilingDistance = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(UVTilingDistance_type_id);
		UVOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(UVOffset_type_id);
		Material = serialized->get_string(Material_type_id);
		Collision = serialized->get_bool(Collision_type_id);
		CollisionFlags = serialized->get_bitset<rivet::ddl::generated::PhysicsCollFlags>(CollisionFlags_type_id, rivet::ddl::generated::PhysicsCollFlags_values);
		LOD1 = serialized->get_bool(LOD1_type_id);
		GeomLodDist1 = serialized->get_float(GeomLodDist1_type_id);
		LOD2 = serialized->get_bool(LOD2_type_id);
		GeomLodDist2 = serialized->get_float(GeomLodDist2_type_id); 
	}

	[[nodiscard]] auto
	ModelGeneratorItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ModelGeneratorItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ModelGeneratorItem> {
		if (incoming_type_id == ModelGeneratorItem::type_id) {
			return std::make_shared<ModelGeneratorItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
