// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AccessibilityOption.hpp>
#include <rivet/ddl/generated/AccessibilityColorData.hpp> 

#include <rivet/ddl/generated/AccessibilitySystemConfigGame.hpp>

namespace rivet::ddl::generated {
	AccessibilitySystemConfigGame::AccessibilitySystemConfigGame([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): AccessibilitySystemConfig(serialized) {
		HighContrastPingMaterial = serialized->get_string(HighContrastPingMaterial_type_id);
		ChaseAssistVehicleSpeedMult = serialized->get_float(ChaseAssistVehicleSpeedMult_type_id);
		ChaseAssistStopDistance = serialized->get_float(ChaseAssistStopDistance_type_id);
		DefaultHeroAccesibilityHighlightConfig = serialized->get_string(DefaultHeroAccesibilityHighlightConfig_type_id);
		AccessibilityOptions = serialized->unwrap_into_many<rivet::ddl::generated::AccessibilityOption>(AccessibilityOptions_type_id);
		ArcColors = serialized->unwrap_into_many<rivet::ddl::generated::AccessibilityColorData>(ArcColors_type_id); 
	}

	auto
	AccessibilitySystemConfigGame::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	AccessibilitySystemConfigGame::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AccessibilitySystemConfigGame::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AccessibilitySystemConfigGame> {
		if (incoming_type_id == AccessibilitySystemConfigGame::type_id) {
			return std::make_shared<AccessibilitySystemConfigGame>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
