// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimFlagsEngineItem.hpp>

namespace rivet::ddl::generated {
	AnimFlagsEngineItem::AnimFlagsEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AlwaysLoop = serialized->get_bool(AlwaysLoop_type_id);
		AnimationCompleted = serialized->get_bool(AnimationCompleted_type_id);
		AnimClipHasPhaseData = serialized->get_bool(AnimClipHasPhaseData_type_id);
		ApplyRotation = serialized->get_bool(ApplyRotation_type_id);
		ApplyTranslation = serialized->get_bool(ApplyTranslation_type_id);
		ClothEnabled = serialized->get_bool(ClothEnabled_type_id);
		LinkCameraToActor = serialized->get_bool(LinkCameraToActor_type_id);
		PlayingAnimClip = serialized->get_bool(PlayingAnimClip_type_id);
		PlayingAnimDriver = serialized->get_bool(PlayingAnimDriver_type_id);
		RenderMotionArrow = serialized->get_bool(RenderMotionArrow_type_id);
		RenderMotionData = serialized->get_bool(RenderMotionData_type_id);
		RenderPhaseData = serialized->get_bool(RenderPhaseData_type_id);
		Rewind = serialized->get_bool(Rewind_type_id);
		SendUpdateData = serialized->get_bool(SendUpdateData_type_id);
		ShowDebugControllerHud = serialized->get_bool(ShowDebugControllerHud_type_id);
		ShowDebugHud = serialized->get_bool(ShowDebugHud_type_id);
		ShowDebugMorphHud = serialized->get_bool(ShowDebugMorphHud_type_id);
		ShowDebugDynamicsHud = serialized->get_bool(ShowDebugDynamicsHud_type_id);
		ShowVisData = serialized->get_bool(ShowVisData_type_id);
		TriggerEvents = serialized->get_bool(TriggerEvents_type_id); 
	}

	[[nodiscard]] auto
	AnimFlagsEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimFlagsEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimFlagsEngineItem> {
		if (incoming_type_id == AnimFlagsEngineItem::type_id) {
			return std::make_shared<AnimFlagsEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
