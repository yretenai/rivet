// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MissionGraphGameDef.hpp>
#include <rivet/ddl/generated/DemoBranchStartNodeDef.hpp>
#include <rivet/ddl/generated/OutputNodeBooleanDef.hpp>
#include <rivet/ddl/generated/DemoBranchEndNodeDef.hpp>
#include <rivet/ddl/generated/AndMissionSystemNodeDef.hpp>
#include <rivet/ddl/generated/InputCountMissionSystemNodeDef.hpp>
#include <rivet/ddl/generated/XOrStartGroupNodeDef.hpp>
#include <rivet/ddl/generated/DebugMarkerNodeDef.hpp>
#include <rivet/ddl/generated/NotMissionSystemNodeDef.hpp>
#include <rivet/ddl/generated/OrMissionSystemNodeDef.hpp>
#include <rivet/ddl/generated/DebugChainEndNodeDef.hpp>
#include <rivet/ddl/generated/GlobalSaveTableNodeDef.hpp>
#include <rivet/ddl/generated/XOrEndGroupNodeDef.hpp>
#include <rivet/ddl/generated/DebugChainStartNodeDef.hpp>
#include <rivet/ddl/generated/InputNodeBooleanDef.hpp> 

#include <rivet/ddl/generated/MissionGraphSharedDef.hpp>

namespace rivet::ddl::generated {
	MissionGraphSharedDef::MissionGraphSharedDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): GameplayNodeGraphBaseDef(serialized) {
		OrNodes = serialized->unwrap_into_many<rivet::ddl::generated::OrMissionSystemNodeDef>(OrNodes_type_id);
		AndNodes = serialized->unwrap_into_many<rivet::ddl::generated::AndMissionSystemNodeDef>(AndNodes_type_id);
		InputCountNodes = serialized->unwrap_into_many<rivet::ddl::generated::InputCountMissionSystemNodeDef>(InputCountNodes_type_id);
		NotNodes = serialized->unwrap_into_many<rivet::ddl::generated::NotMissionSystemNodeDef>(NotNodes_type_id);
		GSTNodes = serialized->unwrap_into_many<rivet::ddl::generated::GlobalSaveTableNodeDef>(GSTNodes_type_id);
		XorStartNodes = serialized->unwrap_into_many<rivet::ddl::generated::XOrStartGroupNodeDef>(XorStartNodes_type_id);
		XorEndNodes = serialized->unwrap_into_many<rivet::ddl::generated::XOrEndGroupNodeDef>(XorEndNodes_type_id);
		DebugChainStartNodes = serialized->unwrap_into_many<rivet::ddl::generated::DebugChainStartNodeDef>(DebugChainStartNodes_type_id);
		DebugChainEndNodes = serialized->unwrap_into_many<rivet::ddl::generated::DebugChainEndNodeDef>(DebugChainEndNodes_type_id);
		DemoStartNodes = serialized->unwrap_into_many<rivet::ddl::generated::DemoBranchStartNodeDef>(DemoStartNodes_type_id);
		DemoEndNodes = serialized->unwrap_into_many<rivet::ddl::generated::DemoBranchEndNodeDef>(DemoEndNodes_type_id);
		DebugMarkerNodes = serialized->unwrap_into_many<rivet::ddl::generated::DebugMarkerNodeDef>(DebugMarkerNodes_type_id);
		InputNodes = serialized->unwrap_into_many<rivet::ddl::generated::InputNodeBooleanDef>(InputNodes_type_id);
		OutputNodes = serialized->unwrap_into_many<rivet::ddl::generated::OutputNodeBooleanDef>(OutputNodes_type_id); 
	}

	[[nodiscard]] auto
	MissionGraphSharedDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MissionGraphSharedDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionGraphSharedDef> {
		if (incoming_type_id == MissionGraphSharedDef::type_id) {
			return std::make_shared<MissionGraphSharedDef>(serialized);
		}

		auto MissionGraphGameDef_ptr = MissionGraphGameDef::from_substruct(incoming_type_id, serialized);
		if (MissionGraphGameDef_ptr != nullptr) {
			return MissionGraphGameDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
