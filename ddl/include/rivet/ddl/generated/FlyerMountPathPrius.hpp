// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED FlyerMountPathPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "FlyerMountPathPrius";
		constexpr static rivet::rivet_type_id type_id = 0x810ae3ac;

		constexpr static std::string_view HorizontalExtent_type_name = "HorizontalExtent";
		constexpr static rivet::rivet_type_id HorizontalExtent_type_id = 0xdc375565;
		constexpr static std::string_view VerticalExtent_type_name = "VerticalExtent";
		constexpr static rivet::rivet_type_id VerticalExtent_type_id = 0x8c33ce75;
		constexpr static std::string_view CameraMaxHorizontalOffset_type_name = "CameraMaxHorizontalOffset";
		constexpr static rivet::rivet_type_id CameraMaxHorizontalOffset_type_id = 0x7f00e1f5;
		constexpr static std::string_view CameraForwardOffset_type_name = "CameraForwardOffset";
		constexpr static rivet::rivet_type_id CameraForwardOffset_type_id = 0xd0f83896;
		constexpr static std::string_view CameraPivotHeight_type_name = "CameraPivotHeight";
		constexpr static rivet::rivet_type_id CameraPivotHeight_type_id = 0x6cb5b490;
		constexpr static std::string_view CameraPitch_type_name = "CameraPitch";
		constexpr static rivet::rivet_type_id CameraPitch_type_id = 0xbc4ccc51;
		constexpr static std::string_view CameraFOV_type_name = "CameraFOV";
		constexpr static rivet::rivet_type_id CameraFOV_type_id = 0x2e75509a; 

		explicit FlyerMountPathPrius() = default;
		explicit FlyerMountPathPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float HorizontalExtent {};
		float VerticalExtent {};
		float CameraMaxHorizontalOffset {};
		float CameraForwardOffset {};
		float CameraPivotHeight {};
		float CameraPitch {};
		float CameraFOV {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FlyerMountPathPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
