// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MechanicUseByEvent.hpp>
#include <rivet/ddl/generated/MechanicImpactByEvent.hpp>
#include <rivet/ddl/generated/CustomEvent.hpp>
#include <rivet/ddl/generated/ActivityStartEvent.hpp>
#include <rivet/ddl/generated/MechanicMitigateEvent.hpp>
#include <rivet/ddl/generated/MechanicUseEvent.hpp>
#include <rivet/ddl/generated/ActivityResumeEvent.hpp>
#include <rivet/ddl/generated/ActorChangeEvent.hpp>
#include <rivet/ddl/generated/LocationChangeEvent.hpp>
#include <rivet/ddl/generated/ActivityTerminateEvent.hpp>
#include <rivet/ddl/generated/ActivityPriorityChangeEvent.hpp>
#include <rivet/ddl/generated/ChangeModeEvent.hpp>
#include <rivet/ddl/generated/MechanicImpactEvent.hpp>
#include <rivet/ddl/generated/ActivityEndEvent.hpp> 

#include <rivet/ddl/generated/UDSEventBase.hpp>

namespace rivet::ddl::generated {
	UDSEventBase::UDSEventBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		Critical = serialized->get_bool(Critical_type_id, false); 
	}

	[[nodiscard]] auto
	UDSEventBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UDSEventBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UDSEventBase> {
		if (incoming_type_id == UDSEventBase::type_id) {
			return std::make_shared<UDSEventBase>(serialized);
		}

		auto MechanicImpactByEvent_ptr = MechanicImpactByEvent::from_substruct(incoming_type_id, serialized);
		if (MechanicImpactByEvent_ptr != nullptr) {
			return MechanicImpactByEvent_ptr;
		}

		auto CustomEvent_ptr = CustomEvent::from_substruct(incoming_type_id, serialized);
		if (CustomEvent_ptr != nullptr) {
			return CustomEvent_ptr;
		}

		auto MechanicMitigateEvent_ptr = MechanicMitigateEvent::from_substruct(incoming_type_id, serialized);
		if (MechanicMitigateEvent_ptr != nullptr) {
			return MechanicMitigateEvent_ptr;
		}

		auto ActivityResumeEvent_ptr = ActivityResumeEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityResumeEvent_ptr != nullptr) {
			return ActivityResumeEvent_ptr;
		}

		auto ActivityStartEvent_ptr = ActivityStartEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityStartEvent_ptr != nullptr) {
			return ActivityStartEvent_ptr;
		}

		auto MechanicUseEvent_ptr = MechanicUseEvent::from_substruct(incoming_type_id, serialized);
		if (MechanicUseEvent_ptr != nullptr) {
			return MechanicUseEvent_ptr;
		}

		auto ActivityTerminateEvent_ptr = ActivityTerminateEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityTerminateEvent_ptr != nullptr) {
			return ActivityTerminateEvent_ptr;
		}

		auto ChangeModeEvent_ptr = ChangeModeEvent::from_substruct(incoming_type_id, serialized);
		if (ChangeModeEvent_ptr != nullptr) {
			return ChangeModeEvent_ptr;
		}

		auto ActorChangeEvent_ptr = ActorChangeEvent::from_substruct(incoming_type_id, serialized);
		if (ActorChangeEvent_ptr != nullptr) {
			return ActorChangeEvent_ptr;
		}

		auto ActivityPriorityChangeEvent_ptr = ActivityPriorityChangeEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityPriorityChangeEvent_ptr != nullptr) {
			return ActivityPriorityChangeEvent_ptr;
		}

		auto MechanicImpactEvent_ptr = MechanicImpactEvent::from_substruct(incoming_type_id, serialized);
		if (MechanicImpactEvent_ptr != nullptr) {
			return MechanicImpactEvent_ptr;
		}

		auto ActivityEndEvent_ptr = ActivityEndEvent::from_substruct(incoming_type_id, serialized);
		if (ActivityEndEvent_ptr != nullptr) {
			return ActivityEndEvent_ptr;
		}

		auto LocationChangeEvent_ptr = LocationChangeEvent::from_substruct(incoming_type_id, serialized);
		if (LocationChangeEvent_ptr != nullptr) {
			return LocationChangeEvent_ptr;
		}

		auto MechanicUseByEvent_ptr = MechanicUseByEvent::from_substruct(incoming_type_id, serialized);
		if (MechanicUseByEvent_ptr != nullptr) {
			return MechanicUseByEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
