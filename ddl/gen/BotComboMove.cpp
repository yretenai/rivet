// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotComboMoveThrowProjectile.hpp>
#include <rivet/ddl/generated/BotComboMoveMeleeAirDashCharge.hpp>
#include <rivet/ddl/generated/BotComboMoveTelekinesis.hpp>
#include <rivet/ddl/generated/BotComboMoveFinaleLaserSweep.hpp>
#include <rivet/ddl/generated/BotComboMoveLunge.hpp>
#include <rivet/ddl/generated/BotComboMoveStandAndShoot.hpp>
#include <rivet/ddl/generated/BotComboLaserShot.hpp>
#include <rivet/ddl/generated/BotComboFlyOver.hpp>
#include <rivet/ddl/generated/BotComboMovePlayAnim.hpp>
#include <rivet/ddl/generated/BotComboMoveShootAtMortarCurve.hpp>
#include <rivet/ddl/generated/BotComboMoveMelee.hpp>
#include <rivet/ddl/generated/BotComboMoveCharge.hpp> 

#include <rivet/ddl/generated/BotComboMove.hpp>

namespace rivet::ddl::generated {
	BotComboMove::BotComboMove([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotComboMoveBase(serialized) {
		Name = serialized->get_string(Name_type_id); 
	}

	[[nodiscard]] auto
	BotComboMove::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotComboMove::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboMove> {
		if (incoming_type_id == BotComboMove::type_id) {
			return std::make_shared<BotComboMove>(serialized);
		}

		auto BotComboMoveCharge_ptr = BotComboMoveCharge::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveCharge_ptr != nullptr) {
			return BotComboMoveCharge_ptr;
		}

		auto BotComboMoveShootAtMortarCurve_ptr = BotComboMoveShootAtMortarCurve::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveShootAtMortarCurve_ptr != nullptr) {
			return BotComboMoveShootAtMortarCurve_ptr;
		}

		auto BotComboMovePlayAnim_ptr = BotComboMovePlayAnim::from_substruct(incoming_type_id, serialized);
		if (BotComboMovePlayAnim_ptr != nullptr) {
			return BotComboMovePlayAnim_ptr;
		}

		auto BotComboFlyOver_ptr = BotComboFlyOver::from_substruct(incoming_type_id, serialized);
		if (BotComboFlyOver_ptr != nullptr) {
			return BotComboFlyOver_ptr;
		}

		auto BotComboMoveLunge_ptr = BotComboMoveLunge::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveLunge_ptr != nullptr) {
			return BotComboMoveLunge_ptr;
		}

		auto BotComboMoveFinaleLaserSweep_ptr = BotComboMoveFinaleLaserSweep::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveFinaleLaserSweep_ptr != nullptr) {
			return BotComboMoveFinaleLaserSweep_ptr;
		}

		auto BotComboMoveTelekinesis_ptr = BotComboMoveTelekinesis::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveTelekinesis_ptr != nullptr) {
			return BotComboMoveTelekinesis_ptr;
		}

		auto BotComboLaserShot_ptr = BotComboLaserShot::from_substruct(incoming_type_id, serialized);
		if (BotComboLaserShot_ptr != nullptr) {
			return BotComboLaserShot_ptr;
		}

		auto BotComboMoveStandAndShoot_ptr = BotComboMoveStandAndShoot::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveStandAndShoot_ptr != nullptr) {
			return BotComboMoveStandAndShoot_ptr;
		}

		auto BotComboMoveThrowProjectile_ptr = BotComboMoveThrowProjectile::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveThrowProjectile_ptr != nullptr) {
			return BotComboMoveThrowProjectile_ptr;
		}

		auto BotComboMoveMeleeAirDashCharge_ptr = BotComboMoveMeleeAirDashCharge::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveMeleeAirDashCharge_ptr != nullptr) {
			return BotComboMoveMeleeAirDashCharge_ptr;
		}

		auto BotComboMoveMelee_ptr = BotComboMoveMelee::from_substruct(incoming_type_id, serialized);
		if (BotComboMoveMelee_ptr != nullptr) {
			return BotComboMoveMelee_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
