// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimChunkDirectionRandom.hpp>
#include <rivet/ddl/generated/AnimChunkDirectionLocalOffset.hpp>
#include <rivet/ddl/generated/AnimChunkDirectionJoint.hpp> 

#include <rivet/ddl/generated/AnimChunkDirection.hpp>

namespace rivet::ddl::generated {
	AnimChunkDirection::AnimChunkDirection([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	AnimChunkDirection::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimChunkDirection::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimChunkDirection> {
		if (incoming_type_id == AnimChunkDirection::type_id) {
			return std::make_shared<AnimChunkDirection>(serialized);
		}

		auto AnimChunkDirectionJoint_ptr = AnimChunkDirectionJoint::from_substruct(incoming_type_id, serialized);
		if (AnimChunkDirectionJoint_ptr != nullptr) {
			return AnimChunkDirectionJoint_ptr;
		}

		auto AnimChunkDirectionLocalOffset_ptr = AnimChunkDirectionLocalOffset::from_substruct(incoming_type_id, serialized);
		if (AnimChunkDirectionLocalOffset_ptr != nullptr) {
			return AnimChunkDirectionLocalOffset_ptr;
		}

		auto AnimChunkDirectionRandom_ptr = AnimChunkDirectionRandom::from_substruct(incoming_type_id, serialized);
		if (AnimChunkDirectionRandom_ptr != nullptr) {
			return AnimChunkDirectionRandom_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
