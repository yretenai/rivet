// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/NodalShotTransitionStateNodeDef.hpp>
#include <rivet/ddl/generated/NodalShotInitFirstStateNodeDef.hpp>
#include <rivet/ddl/generated/NodalShotInitNewStateNodeDef.hpp> 

#include <rivet/ddl/generated/NodalShotStateNodeBaseDef.hpp>

namespace rivet::ddl::generated {
	NodalShotStateNodeBaseDef::NodalShotStateNodeBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): NodeBaseDef(serialized) {

	}

	[[nodiscard]] auto
	NodalShotStateNodeBaseDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	NodalShotStateNodeBaseDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodalShotStateNodeBaseDef> {
		if (incoming_type_id == NodalShotStateNodeBaseDef::type_id) {
			return std::make_shared<NodalShotStateNodeBaseDef>(serialized);
		}

		auto NodalShotInitNewStateNodeDef_ptr = NodalShotInitNewStateNodeDef::from_substruct(incoming_type_id, serialized);
		if (NodalShotInitNewStateNodeDef_ptr != nullptr) {
			return NodalShotInitNewStateNodeDef_ptr;
		}

		auto NodalShotInitFirstStateNodeDef_ptr = NodalShotInitFirstStateNodeDef::from_substruct(incoming_type_id, serialized);
		if (NodalShotInitFirstStateNodeDef_ptr != nullptr) {
			return NodalShotInitFirstStateNodeDef_ptr;
		}

		auto NodalShotTransitionStateNodeDef_ptr = NodalShotTransitionStateNodeDef::from_substruct(incoming_type_id, serialized);
		if (NodalShotTransitionStateNodeDef_ptr != nullptr) {
			return NodalShotTransitionStateNodeDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
