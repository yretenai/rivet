// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/EngineDebugConfig.hpp>

namespace rivet::ddl::generated {
	EngineDebugConfig::EngineDebugConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MarketingFov = serialized->get_float(MarketingFov_type_id, 82.000000f);
		MarketingCameraRoll = serialized->get_float(MarketingCameraRoll_type_id, 0.000000f);
		MarketingCameraPitch = serialized->get_float(MarketingCameraPitch_type_id, 0.000000f);
		MarketingCameraYaw = serialized->get_float(MarketingCameraYaw_type_id, 0.000000f);
		MarketingCameraXOffset = serialized->get_float(MarketingCameraXOffset_type_id, 0.000000f);
		MarketingCameraYOffset = serialized->get_float(MarketingCameraYOffset_type_id, 0.000000f);
		MarketingCameraZOffset = serialized->get_float(MarketingCameraZOffset_type_id, 0.000000f);
		MarketingShakeIntensity = serialized->get_float(MarketingShakeIntensity_type_id, 0.000000f);
		MarketingShakeFrequency = serialized->get_float(MarketingShakeFrequency_type_id, 0.000000f);
		MarketingNearFocusDistance = serialized->get_float(MarketingNearFocusDistance_type_id, 0.000000f);
		MarketingNearApertureScale = serialized->get_float(MarketingNearApertureScale_type_id, 0.000000f);
		MarketingFarFocusDistance = serialized->get_float(MarketingFarFocusDistance_type_id, 0.000000f);
		MarketingFarApertureScale = serialized->get_float(MarketingFarApertureScale_type_id, 0.000000f); 
	}

	[[nodiscard]] auto
	EngineDebugConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	EngineDebugConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EngineDebugConfig> {
		if (incoming_type_id == EngineDebugConfig::type_id) {
			return std::make_shared<EngineDebugConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
