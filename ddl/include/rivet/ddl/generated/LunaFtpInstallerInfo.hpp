// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED LunaFtpInstallerInfo : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "LunaFtpInstallerInfo";
		constexpr static rivet::rivet_type_id type_id = 0xf1bba626;

		constexpr static std::string_view FileName_type_name = "FileName";
		constexpr static rivet::rivet_type_id FileName_type_id = 0x6638fb2b;
		constexpr static std::string_view FileSize_type_name = "FileSize";
		constexpr static rivet::rivet_type_id FileSize_type_id = 0xcfdba147;
		constexpr static std::string_view VersionMajor_type_name = "VersionMajor";
		constexpr static rivet::rivet_type_id VersionMajor_type_id = 0xd34e8692;
		constexpr static std::string_view VersionMinor_type_name = "VersionMinor";
		constexpr static rivet::rivet_type_id VersionMinor_type_id = 0x11f306a1;
		constexpr static std::string_view VersionPatch_type_name = "VersionPatch";
		constexpr static rivet::rivet_type_id VersionPatch_type_id = 0xc51edad;
		constexpr static std::string_view CompatabilityVersion_type_name = "CompatabilityVersion";
		constexpr static rivet::rivet_type_id CompatabilityVersion_type_id = 0xa50b4749; 

		explicit LunaFtpInstallerInfo() = default;
		explicit LunaFtpInstallerInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view FileName {};
		uint64_t FileSize {};
		int32_t VersionMajor {};
		int32_t VersionMinor {};
		int32_t VersionPatch {};
		std::string_view CompatabilityVersion {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LunaFtpInstallerInfo>;
	};
} // namespace rivet::ddl::generated

// clang-format on
