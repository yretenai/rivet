// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HeroJumpConfig : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "HeroJumpConfig";
		constexpr const static rivet::rivet_type_id type_id = 0xd228f2ff;

		constexpr const static std::string_view HeightMin_type_name = "HeightMin";
		constexpr const static rivet::rivet_type_id HeightMin_type_id = 0x3bf3b970;
		constexpr const static std::string_view HeightMax_type_name = "HeightMax";
		constexpr const static rivet::rivet_type_id HeightMax_type_id = 0x7fe8629;
		constexpr const static std::string_view TimeToPeak_type_name = "TimeToPeak";
		constexpr const static rivet::rivet_type_id TimeToPeak_type_id = 0xa54bc58;
		constexpr const static std::string_view ButtonMinHoldTime_type_name = "ButtonMinHoldTime";
		constexpr const static rivet::rivet_type_id ButtonMinHoldTime_type_id = 0xcb427caa;
		constexpr const static std::string_view ButtonMaxHoldTime_type_name = "ButtonMaxHoldTime";
		constexpr const static rivet::rivet_type_id ButtonMaxHoldTime_type_id = 0x74f07a5;
		constexpr const static std::string_view MomentumWeightMin_type_name = "MomentumWeightMin";
		constexpr const static rivet::rivet_type_id MomentumWeightMin_type_id = 0x36cc3cb4;
		constexpr const static std::string_view MomentumWeightMax_type_name = "MomentumWeightMax";
		constexpr const static rivet::rivet_type_id MomentumWeightMax_type_id = 0xac103ed;
		constexpr const static std::string_view MomentumMinTime_type_name = "MomentumMinTime";
		constexpr const static rivet::rivet_type_id MomentumMinTime_type_id = 0x8772be2e;
		constexpr const static std::string_view MomentumTransitionTime_type_name = "MomentumTransitionTime";
		constexpr const static rivet::rivet_type_id MomentumTransitionTime_type_id = 0x9db8bf3f;
		constexpr const static std::string_view NoInputTime_type_name = "NoInputTime";
		constexpr const static rivet::rivet_type_id NoInputTime_type_id = 0x2672e710;
		constexpr const static std::string_view NoGlideTime_type_name = "NoGlideTime";
		constexpr const static rivet::rivet_type_id NoGlideTime_type_id = 0xcbd98dee;
		constexpr const static std::string_view NoFallTime_type_name = "NoFallTime";
		constexpr const static rivet::rivet_type_id NoFallTime_type_id = 0x7b6d7dc8;
		constexpr const static std::string_view DoubleJumpTimeStart_type_name = "DoubleJumpTimeStart";
		constexpr const static rivet::rivet_type_id DoubleJumpTimeStart_type_id = 0x638180f8;
		constexpr const static std::string_view DoubleJumpHeightMin_type_name = "DoubleJumpHeightMin";
		constexpr const static rivet::rivet_type_id DoubleJumpHeightMin_type_id = 0x74afa539;
		constexpr const static std::string_view TerminalVelocity_type_name = "TerminalVelocity";
		constexpr const static rivet::rivet_type_id TerminalVelocity_type_id = 0x8424e464;
		constexpr const static std::string_view TimeToPeakIsGravity_type_name = "TimeToPeakIsGravity";
		constexpr const static rivet::rivet_type_id TimeToPeakIsGravity_type_id = 0x66f02e2e; 

		explicit HeroJumpConfig() = default;
		explicit HeroJumpConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float HeightMin {};
		float HeightMax {};
		float TimeToPeak {};
		float ButtonMinHoldTime {};
		float ButtonMaxHoldTime {};
		float MomentumWeightMin {};
		float MomentumWeightMax {};
		float MomentumMinTime {};
		float MomentumTransitionTime {};
		float NoInputTime {};
		float NoGlideTime {};
		float NoFallTime {};
		float DoubleJumpTimeStart {};
		float DoubleJumpHeightMin {};
		float TerminalVelocity {};
		bool TimeToPeakIsGravity {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroJumpConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
