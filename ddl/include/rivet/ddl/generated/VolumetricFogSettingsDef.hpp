// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED VolumetricFogSettingsDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VolumetricFogSettingsDef";
		constexpr static rivet::rivet_type_id type_id = 0x14457309;

		constexpr static std::string_view Enabled_type_name = "Enabled";
		constexpr static rivet::rivet_type_id Enabled_type_id = 0x5113d8bc;
		constexpr static std::string_view Color_type_name = "Color";
		constexpr static rivet::rivet_type_id Color_type_id = 0x7f058428;
		constexpr static std::string_view Opacity_type_name = "Opacity";
		constexpr static rivet::rivet_type_id Opacity_type_id = 0x42170e5e;
		constexpr static std::string_view BottomHeight_type_name = "BottomHeight";
		constexpr static rivet::rivet_type_id BottomHeight_type_id = 0x4d7a0715;
		constexpr static std::string_view TopHeight_type_name = "TopHeight";
		constexpr static rivet::rivet_type_id TopHeight_type_id = 0x6f3b3add;
		constexpr static std::string_view NearDistance_type_name = "NearDistance";
		constexpr static rivet::rivet_type_id NearDistance_type_id = 0x380dd820;
		constexpr static std::string_view FarDistance_type_name = "FarDistance";
		constexpr static rivet::rivet_type_id FarDistance_type_id = 0x3e8c1fef;
		constexpr static std::string_view SunLightScale_type_name = "SunLightScale";
		constexpr static rivet::rivet_type_id SunLightScale_type_id = 0xe45f363c;
		constexpr static std::string_view LightsScale_type_name = "LightsScale";
		constexpr static rivet::rivet_type_id LightsScale_type_id = 0xd45feadb;
		constexpr static std::string_view GIScale_type_name = "GIScale";
		constexpr static rivet::rivet_type_id GIScale_type_id = 0x11656814;
		constexpr static std::string_view NoiseVSpeed_type_name = "NoiseVSpeed";
		constexpr static rivet::rivet_type_id NoiseVSpeed_type_id = 0x1d960d3f;
		constexpr static std::string_view NoiseSpeed_type_name = "NoiseSpeed";
		constexpr static rivet::rivet_type_id NoiseSpeed_type_id = 0x369085d9;
		constexpr static std::string_view NoiseScale_type_name = "NoiseScale";
		constexpr static rivet::rivet_type_id NoiseScale_type_id = 0xd5f05eab; 

		explicit VolumetricFogSettingsDef() = default;
		explicit VolumetricFogSettingsDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool Enabled {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> Color {};
		float Opacity {};
		float BottomHeight {};
		float TopHeight {};
		float NearDistance {};
		float FarDistance {};
		float SunLightScale {};
		float LightsScale {};
		float GIScale {};
		float NoiseVSpeed {};
		float NoiseSpeed {};
		float NoiseScale {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VolumetricFogSettingsDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
