// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED GameUIDebugSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "GameUIDebugSettings";
		constexpr static rivet::rivet_type_id type_id = 0x80e2dfec;

		constexpr static std::string_view AllowPause_type_name = "AllowPause";
		constexpr static rivet::rivet_type_id AllowPause_type_id = 0x802ad5c4;
		constexpr static std::string_view AllowHUD_type_name = "AllowHUD";
		constexpr static rivet::rivet_type_id AllowHUD_type_id = 0x953ca3d5;
		constexpr static std::string_view UnlockVendorWeapons_type_name = "UnlockVendorWeapons";
		constexpr static rivet::rivet_type_id UnlockVendorWeapons_type_id = 0x9a67e1ca;
		constexpr static std::string_view UnlockGalleryEntries_type_name = "UnlockGalleryEntries";
		constexpr static rivet::rivet_type_id UnlockGalleryEntries_type_id = 0x54ca45ab;
		constexpr static std::string_view UnlockAudioLogs_type_name = "UnlockAudioLogs";
		constexpr static rivet::rivet_type_id UnlockAudioLogs_type_id = 0x9fdb1ab0; 

		explicit GameUIDebugSettings() = default;
		explicit GameUIDebugSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool AllowPause {};
		bool AllowHUD {};
		bool UnlockVendorWeapons {};
		bool UnlockGalleryEntries {};
		bool UnlockAudioLogs {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameUIDebugSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
