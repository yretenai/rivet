// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DevstatsPlayerPositionInfo.hpp> 

#include <rivet/ddl/generated/DevstatsOpenWorldTaskCompletedEvent.hpp>

namespace rivet::ddl::generated {
	DevstatsOpenWorldTaskCompletedEvent::DevstatsOpenWorldTaskCompletedEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		EventId = serialized->get_string(EventId_type_id, {});
		LastGoldenPathMission = serialized->get_string(LastGoldenPathMission_type_id, {});
		TaskType = serialized->get_string(TaskType_type_id, {});
		TaskName = serialized->get_string(TaskName_type_id, {});
		TaskDuration = serialized->get_float(TaskDuration_type_id, 0.000000);
		PlayerPosInfo = serialized->unwrap_into<rivet::ddl::generated::DevstatsPlayerPositionInfo>(PlayerPosInfo_type_id); 
	}

	[[nodiscard]] auto
	DevstatsOpenWorldTaskCompletedEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DevstatsOpenWorldTaskCompletedEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DevstatsOpenWorldTaskCompletedEvent> {
		if (incoming_type_id == DevstatsOpenWorldTaskCompletedEvent::type_id) {
			return std::make_shared<DevstatsOpenWorldTaskCompletedEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
