// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/GameplayNodeGraphBaseDef.hpp> 

namespace rivet::ddl::generated {
	struct AndMissionSystemNodeDef;
	struct DemoBranchStartNodeDef;
	struct InputCountMissionSystemNodeDef;
	struct OrMissionSystemNodeDef;
	struct GlobalSaveTableNodeDef;
	struct DebugChainStartNodeDef;
	struct XOrEndGroupNodeDef;
	struct DebugChainEndNodeDef;
	struct DemoBranchEndNodeDef;
	struct OutputNodeBooleanDef;
	struct NotMissionSystemNodeDef;
	struct DebugMarkerNodeDef;
	struct XOrStartGroupNodeDef;
	struct InputNodeBooleanDef; 

	struct RIVET_DDL_SHARED MissionGraphSharedDef : GameplayNodeGraphBaseDef {
		constexpr static std::string_view type_name = "MissionGraphSharedDef";
		constexpr static rivet::rivet_type_id type_id = 0x4a3bfcfb;

		constexpr static std::string_view OrNodes_type_name = "OrNodes";
		constexpr static rivet::rivet_type_id OrNodes_type_id = 0xbd4cf165;
		constexpr static std::string_view AndNodes_type_name = "AndNodes";
		constexpr static rivet::rivet_type_id AndNodes_type_id = 0xd150652d;
		constexpr static std::string_view InputCountNodes_type_name = "InputCountNodes";
		constexpr static rivet::rivet_type_id InputCountNodes_type_id = 0xacd738f6;
		constexpr static std::string_view NotNodes_type_name = "NotNodes";
		constexpr static rivet::rivet_type_id NotNodes_type_id = 0xadd17eae;
		constexpr static std::string_view GSTNodes_type_name = "GSTNodes";
		constexpr static rivet::rivet_type_id GSTNodes_type_id = 0xdaf1af95;
		constexpr static std::string_view XorStartNodes_type_name = "XorStartNodes";
		constexpr static rivet::rivet_type_id XorStartNodes_type_id = 0x3ec54f32;
		constexpr static std::string_view XorEndNodes_type_name = "XorEndNodes";
		constexpr static rivet::rivet_type_id XorEndNodes_type_id = 0x6f4c8cb7;
		constexpr static std::string_view DebugChainStartNodes_type_name = "DebugChainStartNodes";
		constexpr static rivet::rivet_type_id DebugChainStartNodes_type_id = 0xb8940154;
		constexpr static std::string_view DebugChainEndNodes_type_name = "DebugChainEndNodes";
		constexpr static rivet::rivet_type_id DebugChainEndNodes_type_id = 0xfb0a9de1;
		constexpr static std::string_view DemoStartNodes_type_name = "DemoStartNodes";
		constexpr static rivet::rivet_type_id DemoStartNodes_type_id = 0x6228b283;
		constexpr static std::string_view DemoEndNodes_type_name = "DemoEndNodes";
		constexpr static rivet::rivet_type_id DemoEndNodes_type_id = 0x260039cf;
		constexpr static std::string_view DebugMarkerNodes_type_name = "DebugMarkerNodes";
		constexpr static rivet::rivet_type_id DebugMarkerNodes_type_id = 0x524ff51c;
		constexpr static std::string_view InputNodes_type_name = "InputNodes";
		constexpr static rivet::rivet_type_id InputNodes_type_id = 0x1982bfed;
		constexpr static std::string_view OutputNodes_type_name = "OutputNodes";
		constexpr static rivet::rivet_type_id OutputNodes_type_id = 0x35a2e2; 

		explicit MissionGraphSharedDef() = default;
		explicit MissionGraphSharedDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::OrMissionSystemNodeDef>> OrNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AndMissionSystemNodeDef>> AndNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::InputCountMissionSystemNodeDef>> InputCountNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::NotMissionSystemNodeDef>> NotNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::GlobalSaveTableNodeDef>> GSTNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::XOrStartGroupNodeDef>> XorStartNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::XOrEndGroupNodeDef>> XorEndNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DebugChainStartNodeDef>> DebugChainStartNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DebugChainEndNodeDef>> DebugChainEndNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DemoBranchStartNodeDef>> DemoStartNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DemoBranchEndNodeDef>> DemoEndNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DebugMarkerNodeDef>> DebugMarkerNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::InputNodeBooleanDef>> InputNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::OutputNodeBooleanDef>> OutputNodes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionGraphSharedDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
