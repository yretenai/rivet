// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DamagePrimCapsule.hpp>
#include <rivet/ddl/generated/DamagePrimSphere.hpp>
#include <rivet/ddl/generated/DamagePrimFan.hpp>
#include <rivet/ddl/generated/DamagePrimSweptSphere.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/DamagePrimBase.hpp>

namespace rivet::ddl::generated {
	DamagePrimBase::DamagePrimBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DamageLocator = serialized->get_string(DamageLocator_type_id, {});
		LocalOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(LocalOffset_type_id); 
	}

	[[nodiscard]] auto
	DamagePrimBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DamagePrimBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DamagePrimBase> {
		if (incoming_type_id == DamagePrimBase::type_id) {
			return std::make_shared<DamagePrimBase>(serialized);
		}

		auto DamagePrimSweptSphere_ptr = DamagePrimSweptSphere::from_substruct(incoming_type_id, serialized);
		if (DamagePrimSweptSphere_ptr != nullptr) {
			return DamagePrimSweptSphere_ptr;
		}

		auto DamagePrimFan_ptr = DamagePrimFan::from_substruct(incoming_type_id, serialized);
		if (DamagePrimFan_ptr != nullptr) {
			return DamagePrimFan_ptr;
		}

		auto DamagePrimSphere_ptr = DamagePrimSphere::from_substruct(incoming_type_id, serialized);
		if (DamagePrimSphere_ptr != nullptr) {
			return DamagePrimSphere_ptr;
		}

		auto DamagePrimCapsule_ptr = DamagePrimCapsule::from_substruct(incoming_type_id, serialized);
		if (DamagePrimCapsule_ptr != nullptr) {
			return DamagePrimCapsule_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
