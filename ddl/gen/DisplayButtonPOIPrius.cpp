// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/DisplayButtonPOIPrius.hpp>

namespace rivet::ddl::generated {
	DisplayButtonPOIPrius::DisplayButtonPOIPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EnabledComponentBasePrius(serialized) {
		Button = serialized->get_enum<rivet::ddl::generated::x89e6bc43>(Button_type_id, rivet::ddl::generated::x89e6bc43_values, rivet::ddl::generated::x89e6bc43::Interact);
		POIOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(POIOffset_type_id);
		Range = serialized->get_float(Range_type_id, 15.000000);
		PreviewRange = serialized->get_float(PreviewRange_type_id, 0.000000);
		RequiredHeroType = serialized->get_enum<rivet::ddl::generated::HeroTypes>(RequiredHeroType_type_id, rivet::ddl::generated::HeroTypes_values, rivet::ddl::generated::HeroTypes::None); 
	}

	[[nodiscard]] auto
	DisplayButtonPOIPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DisplayButtonPOIPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DisplayButtonPOIPrius> {
		if (incoming_type_id == DisplayButtonPOIPrius::type_id) {
			return std::make_shared<DisplayButtonPOIPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
