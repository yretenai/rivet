// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/KillVolumePrius.hpp>

namespace rivet::ddl::generated {
	KillVolumePrius::KillVolumePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		KillHeroes = serialized->get_bool(KillHeroes_type_id);
		KillBots = serialized->get_bool(KillBots_type_id);
		FallToDeath = serialized->get_bool(FallToDeath_type_id);
		CreditLastDamager = serialized->get_bool(CreditLastDamager_type_id);
		MaxCreditTime = serialized->get_float(MaxCreditTime_type_id);
		SourceAllegiance = serialized->get_enum<rivet::ddl::generated::x6bdf4ba1>(SourceAllegiance_type_id, rivet::ddl::generated::x6bdf4ba1_values);
		Relationship = serialized->get_enum<rivet::ddl::generated::AllegianceRelation>(Relationship_type_id, rivet::ddl::generated::AllegianceRelation_values); 
	}

	[[nodiscard]] auto
	KillVolumePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	KillVolumePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<KillVolumePrius> {
		if (incoming_type_id == KillVolumePrius::type_id) {
			return std::make_shared<KillVolumePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
