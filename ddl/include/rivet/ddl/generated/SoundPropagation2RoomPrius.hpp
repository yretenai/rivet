// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct SoundPropagation2RoomParamsDef; 

	struct RIVET_DDL_SHARED SoundPropagation2RoomPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SoundPropagation2RoomPrius";
		constexpr static rivet::rivet_type_id type_id = 0x37c8d1ac;

		constexpr static std::string_view EffectName_type_name = "EffectName";
		constexpr static rivet::rivet_type_id EffectName_type_id = 0xb266fef4;
		constexpr static std::string_view Priority_type_name = "Priority";
		constexpr static rivet::rivet_type_id Priority_type_id = 0x98a76157;
		constexpr static std::string_view Params_type_name = "Params";
		constexpr static rivet::rivet_type_id Params_type_id = 0xb1b64094;
		constexpr static std::string_view Shapes_type_name = "Shapes";
		constexpr static rivet::rivet_type_id Shapes_type_id = 0xada3eb75; 

		explicit SoundPropagation2RoomPrius() = default;
		explicit SoundPropagation2RoomPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view EffectName {};
		float Priority {};
		std::shared_ptr<rivet::ddl::generated::SoundPropagation2RoomParamsDef> Params {};
		std::vector<uint64_t> Shapes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundPropagation2RoomPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
