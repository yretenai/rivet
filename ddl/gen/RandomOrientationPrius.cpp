// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RandomOrientationPrius.hpp>

namespace rivet::ddl::generated {
	RandomOrientationPrius::RandomOrientationPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartEnabled = serialized->get_bool(StartEnabled_type_id, true);
		XAngleMin = serialized->get_float(XAngleMin_type_id, 0.000000f);
		XAngleMax = serialized->get_float(XAngleMax_type_id, 360.000000f);
		YAngleMin = serialized->get_float(YAngleMin_type_id, 0.000000f);
		YAngleMax = serialized->get_float(YAngleMax_type_id, 360.000000f);
		ZAngleMin = serialized->get_float(ZAngleMin_type_id, 0.000000f);
		ZAngleMax = serialized->get_float(ZAngleMax_type_id, 360.000000f); 
	}

	[[nodiscard]] auto
	RandomOrientationPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RandomOrientationPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RandomOrientationPrius> {
		if (incoming_type_id == RandomOrientationPrius::type_id) {
			return std::make_shared<RandomOrientationPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
