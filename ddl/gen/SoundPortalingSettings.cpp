// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SoundPortalingSettings.hpp>

namespace rivet::ddl::generated {
	SoundPortalingSettings::SoundPortalingSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id);
		MaxPortals = serialized->get_uint8(MaxPortals_type_id);
		MaxPortalsBetweenTwoVolumes = serialized->get_uint8(MaxPortalsBetweenTwoVolumes_type_id);
		MaxPortaledPositionsPerSource = serialized->get_uint8(MaxPortaledPositionsPerSource_type_id);
		MaxFadingPositionsPerSource = serialized->get_uint8(MaxFadingPositionsPerSource_type_id);
		MaxVolumes = serialized->get_uint32(MaxVolumes_type_id);
		PortalInterpolationSpeed = serialized->get_float(PortalInterpolationSpeed_type_id);
		PortalInterpolationMode = serialized->get_enum<rivet::ddl::generated::x652a90fd>(PortalInterpolationMode_type_id, rivet::ddl::generated::x652a90fd_values);
		PortalRTPC = serialized->get_string(PortalRTPC_type_id); 
	}

	[[nodiscard]] auto
	SoundPortalingSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SoundPortalingSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundPortalingSettings> {
		if (incoming_type_id == SoundPortalingSettings::type_id) {
			return std::make_shared<SoundPortalingSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
