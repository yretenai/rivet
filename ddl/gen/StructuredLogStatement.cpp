// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StructuredLogStatementNumber.hpp>
#include <rivet/ddl/generated/StructuredLogStatementActorLooks.hpp>
#include <rivet/ddl/generated/StructuredLogAnimDriverVar.hpp>
#include <rivet/ddl/generated/StructuredLogAnimTreeNode.hpp>
#include <rivet/ddl/generated/StructuredLogStatementString.hpp>
#include <rivet/ddl/generated/StructuredLogStatementVector.hpp>
#include <rivet/ddl/generated/StructuredLogStatementActorPhysics.hpp> 

#include <rivet/ddl/generated/StructuredLogStatement.hpp>

namespace rivet::ddl::generated {
	StructuredLogStatement::StructuredLogStatement([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TestName = serialized->get_string(TestName_type_id);
		VariableName = serialized->get_string(VariableName_type_id); 
	}

	[[nodiscard]] auto
	StructuredLogStatement::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StructuredLogStatement::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StructuredLogStatement> {
		if (incoming_type_id == StructuredLogStatement::type_id) {
			return std::make_shared<StructuredLogStatement>(serialized);
		}

		auto StructuredLogStatementActorPhysics_ptr = StructuredLogStatementActorPhysics::from_substruct(incoming_type_id, serialized);
		if (StructuredLogStatementActorPhysics_ptr != nullptr) {
			return StructuredLogStatementActorPhysics_ptr;
		}

		auto StructuredLogStatementString_ptr = StructuredLogStatementString::from_substruct(incoming_type_id, serialized);
		if (StructuredLogStatementString_ptr != nullptr) {
			return StructuredLogStatementString_ptr;
		}

		auto StructuredLogAnimTreeNode_ptr = StructuredLogAnimTreeNode::from_substruct(incoming_type_id, serialized);
		if (StructuredLogAnimTreeNode_ptr != nullptr) {
			return StructuredLogAnimTreeNode_ptr;
		}

		auto StructuredLogAnimDriverVar_ptr = StructuredLogAnimDriverVar::from_substruct(incoming_type_id, serialized);
		if (StructuredLogAnimDriverVar_ptr != nullptr) {
			return StructuredLogAnimDriverVar_ptr;
		}

		auto StructuredLogStatementVector_ptr = StructuredLogStatementVector::from_substruct(incoming_type_id, serialized);
		if (StructuredLogStatementVector_ptr != nullptr) {
			return StructuredLogStatementVector_ptr;
		}

		auto StructuredLogStatementActorLooks_ptr = StructuredLogStatementActorLooks::from_substruct(incoming_type_id, serialized);
		if (StructuredLogStatementActorLooks_ptr != nullptr) {
			return StructuredLogStatementActorLooks_ptr;
		}

		auto StructuredLogStatementNumber_ptr = StructuredLogStatementNumber::from_substruct(incoming_type_id, serialized);
		if (StructuredLogStatementNumber_ptr != nullptr) {
			return StructuredLogStatementNumber_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
