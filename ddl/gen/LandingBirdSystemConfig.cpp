// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LandingBirdType.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetFlockPrius.hpp> 

#include <rivet/ddl/generated/LandingBirdSystemConfig.hpp>

namespace rivet::ddl::generated {
	LandingBirdSystemConfig::LandingBirdSystemConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		InitialLoadDelay = serialized->get_float(InitialLoadDelay_type_id);
		PostFleeCooldown = serialized->get_float(PostFleeCooldown_type_id);
		MaxIdleSpeed = serialized->get_float(MaxIdleSpeed_type_id);
		IdleSpawnDelay = serialized->get_float(IdleSpawnDelay_type_id);
		LandCircleOffsetXZ = serialized->get_float(LandCircleOffsetXZ_type_id);
		LandCircleRadiusXZ = serialized->get_float(LandCircleRadiusXZ_type_id);
		MaxLandHeightDiff = serialized->get_float(MaxLandHeightDiff_type_id);
		MaxLandNormalAngle = serialized->get_float(MaxLandNormalAngle_type_id);
		FleeDestroyOffscreenDelay = serialized->get_float(FleeDestroyOffscreenDelay_type_id);
		FleeFromPulses = serialized->get_bool(FleeFromPulses_type_id);
		PulseFlockTargetPrius = serialized->unwrap_into<rivet::ddl::generated::DimensionalPulseTargetFlockPrius>(PulseFlockTargetPrius_type_id);
		BirdTypes = serialized->unwrap_into_many<rivet::ddl::generated::LandingBirdType>(BirdTypes_type_id); 
	}

	[[nodiscard]] auto
	LandingBirdSystemConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LandingBirdSystemConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LandingBirdSystemConfig> {
		if (incoming_type_id == LandingBirdSystemConfig::type_id) {
			return std::make_shared<LandingBirdSystemConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
