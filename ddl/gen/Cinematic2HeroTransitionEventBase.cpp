// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2HeroTransitionEventGame.hpp>
#include <rivet/ddl/generated/HeroCinematicTransitionDataBase.hpp> 

#include <rivet/ddl/generated/Cinematic2HeroTransitionEventBase.hpp>

namespace rivet::ddl::generated {
	Cinematic2HeroTransitionEventBase::Cinematic2HeroTransitionEventBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		CurrentShotOnly = serialized->get_bool(CurrentShotOnly_type_id, false);
		TransitionData = serialized->unwrap_into<rivet::ddl::generated::HeroCinematicTransitionDataBase>(TransitionData_type_id); 
	}

	[[nodiscard]] auto
	Cinematic2HeroTransitionEventBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2HeroTransitionEventBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2HeroTransitionEventBase> {
		if (incoming_type_id == Cinematic2HeroTransitionEventBase::type_id) {
			return std::make_shared<Cinematic2HeroTransitionEventBase>(serialized);
		}

		auto Cinematic2HeroTransitionEventGame_ptr = Cinematic2HeroTransitionEventGame::from_substruct(incoming_type_id, serialized);
		if (Cinematic2HeroTransitionEventGame_ptr != nullptr) {
			return Cinematic2HeroTransitionEventGame_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
