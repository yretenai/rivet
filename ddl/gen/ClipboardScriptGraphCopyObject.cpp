// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GraphNode.hpp>
#include <rivet/ddl/generated/NodeGraphContents.hpp>
#include <rivet/ddl/generated/GraphConnection.hpp>
#include <rivet/ddl/generated/ClipboardScriptGraphCenter.hpp> 

#include <rivet/ddl/generated/ClipboardScriptGraphCopyObject.hpp>

namespace rivet::ddl::generated {
	ClipboardScriptGraphCopyObject::ClipboardScriptGraphCopyObject([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AssetId = serialized->get_uint64(AssetId_type_id, 0);
		Center = serialized->unwrap_into<rivet::ddl::generated::ClipboardScriptGraphCenter>(Center_type_id);
		ClipboardId = serialized->get_uint64(ClipboardId_type_id, 0);
		Connections = serialized->unwrap_into_many<rivet::ddl::generated::GraphConnection>(Connections_type_id);
		EmbeddedSubGraphs = serialized->unwrap_into_many<rivet::ddl::generated::NodeGraphContents>(EmbeddedSubGraphs_type_id);
		GraphId = serialized->get_uint64(GraphId_type_id, 0);
		Nodes = serialized->unwrap_into_many<rivet::ddl::generated::GraphNode>(Nodes_type_id); 
	}

	[[nodiscard]] auto
	ClipboardScriptGraphCopyObject::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ClipboardScriptGraphCopyObject::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ClipboardScriptGraphCopyObject> {
		if (incoming_type_id == ClipboardScriptGraphCopyObject::type_id) {
			return std::make_shared<ClipboardScriptGraphCopyObject>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
