// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x33afe7f4.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED UIPresetOption : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "UIPresetOption";
		constexpr const static rivet::rivet_type_id type_id = 0xdf26b1d0;

		constexpr const static std::string_view OptionID_type_name = "OptionID";
		constexpr const static rivet::rivet_type_id OptionID_type_id = 0xf172a74;
		constexpr const static std::string_view NumberValue_type_name = "NumberValue";
		constexpr const static rivet::rivet_type_id NumberValue_type_id = 0x4e8b9d45;
		constexpr const static std::string_view StringValue_type_name = "StringValue";
		constexpr const static rivet::rivet_type_id StringValue_type_id = 0xbb242993; 

		explicit UIPresetOption() = default;
		explicit UIPresetOption([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x33afe7f4 OptionID {};
		float NumberValue {};
		std::string_view StringValue {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIPresetOption>;
	};
} // namespace rivet::ddl::generated

// clang-format on
