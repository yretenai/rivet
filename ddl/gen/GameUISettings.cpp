// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameUISettings.hpp>

namespace rivet::ddl::generated {
	GameUISettings::GameUISettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ForceNoUnload = serialized->get_bool(ForceNoUnload_type_id, false);
		EnableHUD = serialized->get_bool(EnableHUD_type_id, true);
		EnablePauseMenu = serialized->get_bool(EnablePauseMenu_type_id, true);
		EnableOverlay = serialized->get_bool(EnableOverlay_type_id, true);
		Enable3DText = serialized->get_bool(Enable3DText_type_id, true);
		EnablePlanetMenu = serialized->get_bool(EnablePlanetMenu_type_id, true);
		EnableVendor = serialized->get_bool(EnableVendor_type_id, true);
		EnableZurkie = serialized->get_bool(EnableZurkie_type_id, true);
		EnableMessages = serialized->get_bool(EnableMessages_type_id, true);
		EnableLobby = serialized->get_bool(EnableLobby_type_id, true);
		EnableDisplayGraphicsPC = serialized->get_bool(EnableDisplayGraphicsPC_type_id, true); 
	}

	[[nodiscard]] auto
	GameUISettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameUISettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameUISettings> {
		if (incoming_type_id == GameUISettings::type_id) {
			return std::make_shared<GameUISettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
