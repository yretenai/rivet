// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLMatrix4.hpp>
#include <rivet/ddl/generated/MaterialDef.hpp> 

#include <rivet/ddl/generated/MaterialInstEngineItem.hpp>

namespace rivet::ddl::generated {
	MaterialInstEngineItem::MaterialInstEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AssetPath = serialized->get_string(AssetPath_type_id, {});
		MaterialDef = serialized->unwrap_into<rivet::ddl::generated::MaterialDef>(MaterialDef_type_id);
		Matrix = serialized->unwrap_into<rivet::ddl::generated::DDLMatrix4>(Matrix_type_id);
		LiveUpdate = serialized->get_bool(LiveUpdate_type_id, false);
		PreviewModelOverride = serialized->get_enum<rivet::ddl::generated::ModelInstType>(PreviewModelOverride_type_id, rivet::ddl::generated::ModelInstType_values, rivet::ddl::generated::ModelInstType::Model); 
	}

	[[nodiscard]] auto
	MaterialInstEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MaterialInstEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialInstEngineItem> {
		if (incoming_type_id == MaterialInstEngineItem::type_id) {
			return std::make_shared<MaterialInstEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
