// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameBotGrunthorPrius.hpp>
#include <rivet/ddl/generated/GameBotMeleeSwarmerPrius.hpp>
#include <rivet/ddl/generated/GameBotDoomPrius.hpp>
#include <rivet/ddl/generated/GameBotMeleeLargePrius.hpp>
#include <rivet/ddl/generated/GameBotMeleeFlierPrius.hpp>
#include <rivet/ddl/generated/GameBotMrFunGuyPrius.hpp> 

#include <rivet/ddl/generated/GameBotMeleeBasePrius.hpp>

namespace rivet::ddl::generated {
	GameBotMeleeBasePrius::GameBotMeleeBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotPrius(serialized) {

	}

	[[nodiscard]] auto
	GameBotMeleeBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameBotMeleeBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotMeleeBasePrius> {
		if (incoming_type_id == GameBotMeleeBasePrius::type_id) {
			return std::make_shared<GameBotMeleeBasePrius>(serialized);
		}

		auto GameBotMrFunGuyPrius_ptr = GameBotMrFunGuyPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMrFunGuyPrius_ptr != nullptr) {
			return GameBotMrFunGuyPrius_ptr;
		}

		auto GameBotMeleeFlierPrius_ptr = GameBotMeleeFlierPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMeleeFlierPrius_ptr != nullptr) {
			return GameBotMeleeFlierPrius_ptr;
		}

		auto GameBotMeleeLargePrius_ptr = GameBotMeleeLargePrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMeleeLargePrius_ptr != nullptr) {
			return GameBotMeleeLargePrius_ptr;
		}

		auto GameBotDoomPrius_ptr = GameBotDoomPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotDoomPrius_ptr != nullptr) {
			return GameBotDoomPrius_ptr;
		}

		auto GameBotMeleeSwarmerPrius_ptr = GameBotMeleeSwarmerPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotMeleeSwarmerPrius_ptr != nullptr) {
			return GameBotMeleeSwarmerPrius_ptr;
		}

		auto GameBotGrunthorPrius_ptr = GameBotGrunthorPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotGrunthorPrius_ptr != nullptr) {
			return GameBotGrunthorPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
