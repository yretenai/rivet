// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AuthoredNodeData.hpp>

namespace rivet::ddl::generated {
	AuthoredNodeData::AuthoredNodeData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VehicleDensity = serialized->get_enum<rivet::ddl::generated::VehicleDensity>(VehicleDensity_type_id, rivet::ddl::generated::VehicleDensity_values);
		SpeedLimit = serialized->get_enum<rivet::ddl::generated::x9aa61c3c>(SpeedLimit_type_id, rivet::ddl::generated::x9aa61c3c_values);
		AllowedVehicleClasses = serialized->get_bitset<rivet::ddl::generated::x9fc5ebb3>(AllowedVehicleClasses_type_id, rivet::ddl::generated::x9fc5ebb3_values); 
	}

	[[nodiscard]] auto
	AuthoredNodeData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AuthoredNodeData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AuthoredNodeData> {
		if (incoming_type_id == AuthoredNodeData::type_id) {
			return std::make_shared<AuthoredNodeData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
