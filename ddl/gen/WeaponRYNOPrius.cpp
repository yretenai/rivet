// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RYNOPortalPrius.hpp>
#include <rivet/ddl/generated/RYNOPortalObjectPrius.hpp>
#include <rivet/ddl/generated/AssertPortalInfo.hpp> 

#include <rivet/ddl/generated/WeaponRYNOPrius.hpp>

namespace rivet::ddl::generated {
	WeaponRYNOPrius::WeaponRYNOPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): WeaponGamePrius(serialized) {
		PortalPrius = serialized->unwrap_into<rivet::ddl::generated::RYNOPortalPrius>(PortalPrius_type_id);
		PortalObjectPrius = serialized->unwrap_into<rivet::ddl::generated::RYNOPortalObjectPrius>(PortalObjectPrius_type_id);
		PreFireTime = serialized->get_float(PreFireTime_type_id);
		PortalObjectInitialSpeed = serialized->get_float(PortalObjectInitialSpeed_type_id);
		PortalObjectAccel = serialized->get_float(PortalObjectAccel_type_id);
		BeamShotSpeed = serialized->get_float(BeamShotSpeed_type_id);
		PortalActor = serialized->get_string(PortalActor_type_id);
		SmallPortalObjectRefs = serialized->unwrap_into_many<rivet::ddl::generated::AssertPortalInfo>(SmallPortalObjectRefs_type_id);
		MediumPortalObjectRefs = serialized->unwrap_into_many<rivet::ddl::generated::AssertPortalInfo>(MediumPortalObjectRefs_type_id);
		LargePortalObjectRefs = serialized->unwrap_into_many<rivet::ddl::generated::AssertPortalInfo>(LargePortalObjectRefs_type_id);
		SmallShockwaveCameraShake = serialized->get_string(SmallShockwaveCameraShake_type_id);
		MediumShockwaveCameraShake = serialized->get_string(MediumShockwaveCameraShake_type_id);
		LargeShockwaveCameraShake = serialized->get_string(LargeShockwaveCameraShake_type_id); 
	}

	[[nodiscard]] auto
	WeaponRYNOPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeaponRYNOPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponRYNOPrius> {
		if (incoming_type_id == WeaponRYNOPrius::type_id) {
			return std::make_shared<WeaponRYNOPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
