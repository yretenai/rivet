// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CinematicTrackState.hpp>
#include <rivet/ddl/generated/DDLMatrix4.hpp>
#include <rivet/ddl/generated/Cinematic2Def.hpp> 

#include <rivet/ddl/generated/CinematicStateEngineItem.hpp>

namespace rivet::ddl::generated {
	CinematicStateEngineItem::CinematicStateEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AssetPath = serialized->get_string(AssetPath_type_id);
		Cinematic2Def = serialized->unwrap_into<rivet::ddl::generated::Cinematic2Def>(Cinematic2Def_type_id);
		Focused = serialized->get_bool(Focused_type_id);
		Loaded = serialized->get_bool(Loaded_type_id);
		ObjToWorld = serialized->unwrap_into<rivet::ddl::generated::DDLMatrix4>(ObjToWorld_type_id);
		Playing = serialized->get_bool(Playing_type_id);
		Time = serialized->get_double(Time_type_id);
		TracksInactive = serialized->get_uint64s(TracksInactive_type_id);
		TrackState = serialized->unwrap_into_many<rivet::ddl::generated::CinematicTrackState>(TrackState_type_id); 
	}

	[[nodiscard]] auto
	CinematicStateEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CinematicStateEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CinematicStateEngineItem> {
		if (incoming_type_id == CinematicStateEngineItem::type_id) {
			return std::make_shared<CinematicStateEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
