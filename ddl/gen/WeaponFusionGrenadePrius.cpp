// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WeaponGloveOfDoomPrius.hpp>
#include <rivet/ddl/generated/WeaponVolcanicEruptorPrius.hpp>
#include <rivet/ddl/generated/WeaponProtoGrenadePrius.hpp> 

#include <rivet/ddl/generated/WeaponFusionGrenadePrius.hpp>

namespace rivet::ddl::generated {
	WeaponFusionGrenadePrius::WeaponFusionGrenadePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): WeaponGamePrius(serialized) {

	}

	[[nodiscard]] auto
	WeaponFusionGrenadePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeaponFusionGrenadePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponFusionGrenadePrius> {
		if (incoming_type_id == WeaponFusionGrenadePrius::type_id) {
			return std::make_shared<WeaponFusionGrenadePrius>(serialized);
		}

		auto WeaponGloveOfDoomPrius_ptr = WeaponGloveOfDoomPrius::from_substruct(incoming_type_id, serialized);
		if (WeaponGloveOfDoomPrius_ptr != nullptr) {
			return WeaponGloveOfDoomPrius_ptr;
		}

		auto WeaponVolcanicEruptorPrius_ptr = WeaponVolcanicEruptorPrius::from_substruct(incoming_type_id, serialized);
		if (WeaponVolcanicEruptorPrius_ptr != nullptr) {
			return WeaponVolcanicEruptorPrius_ptr;
		}

		auto WeaponProtoGrenadePrius_ptr = WeaponProtoGrenadePrius::from_substruct(incoming_type_id, serialized);
		if (WeaponProtoGrenadePrius_ptr != nullptr) {
			return WeaponProtoGrenadePrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
