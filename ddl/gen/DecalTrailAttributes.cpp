// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DecalTrailAttributes.hpp>

namespace rivet::ddl::generated {
	DecalTrailAttributes::DecalTrailAttributes([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		KeyFrameAccessType = serialized->get_enum<rivet::ddl::generated::KeyFrameAccessType>(KeyFrameAccessType_type_id, rivet::ddl::generated::KeyFrameAccessType_values, rivet::ddl::generated::KeyFrameAccessType::Age);
		DisplayTrailBounds = serialized->get_bool(DisplayTrailBounds_type_id, true);
		SkipSkinnedMeshes = serialized->get_bool(SkipSkinnedMeshes_type_id, true);
		SegmentLifetime = serialized->get_float(SegmentLifetime_type_id, 1.000000f);
		SegmentSize = serialized->get_float(SegmentSize_type_id, 0.100000f);
		MaxLength = serialized->get_float(MaxLength_type_id, 16.000000f); 
	}

	[[nodiscard]] auto
	DecalTrailAttributes::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DecalTrailAttributes::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DecalTrailAttributes> {
		if (incoming_type_id == DecalTrailAttributes::type_id) {
			return std::make_shared<DecalTrailAttributes>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
