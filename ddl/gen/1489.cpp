// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/ThrowProjectileData.hpp>

namespace rivet::ddl::generated {
	ThrowProjectileData::ThrowProjectileData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ShotConfig = serialized->get_string(ShotConfig_type_id);
		DamageRequestId = serialized->get_string(DamageRequestId_type_id);
		IntroDriver = serialized->get_string(IntroDriver_type_id);
		ThrowDriver = serialized->get_string(ThrowDriver_type_id);
		EmitLocator = serialized->get_string(EmitLocator_type_id);
		IntroDuration = serialized->get_float(IntroDuration_type_id);
		WindUpDuration = serialized->get_float(WindUpDuration_type_id);
		ActiveDuration = serialized->get_float(ActiveDuration_type_id);
		RecoveryDuration = serialized->get_float(RecoveryDuration_type_id);
		EnableTrackingDuringThrow = serialized->get_bool(EnableTrackingDuringThrow_type_id);
		EnableTrackingWhenRotationIsDisabled = serialized->get_bool(EnableTrackingWhenRotationIsDisabled_type_id);
		AimInXZ = serialized->get_bool(AimInXZ_type_id);
		CanDropProjectile = serialized->get_bool(CanDropProjectile_type_id);
		UseTargetDataForAim = serialized->get_bool(UseTargetDataForAim_type_id);
		AimIsEmitForward = serialized->get_bool(AimIsEmitForward_type_id);
		UseLastNavPosition = serialized->get_bool(UseLastNavPosition_type_id);
		RequireClearArc = serialized->get_bool(RequireClearArc_type_id);
		DropOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(DropOffset_type_id);
		OnDodgeWindUpMult = serialized->get_float(OnDodgeWindUpMult_type_id);
		DesiredLandOffset = serialized->get_float(DesiredLandOffset_type_id);
		OffScreenLandOffset = serialized->get_float(OffScreenLandOffset_type_id);
		MaxRotation = serialized->get_float(MaxRotation_type_id);
		CollIgnoreDist = serialized->get_float(CollIgnoreDist_type_id);
		ShotCount = serialized->get_int32(ShotCount_type_id);
		ShotOffsetSide = serialized->get_float(ShotOffsetSide_type_id);
		ShotWarningActorAsset = serialized->get_string(ShotWarningActorAsset_type_id);
		ShotWarningInterval = serialized->get_float(ShotWarningInterval_type_id);
		TargetPredictionAddTime = serialized->get_float(TargetPredictionAddTime_type_id);
		TargetPredictionMaxTime = serialized->get_float(TargetPredictionMaxTime_type_id); 
	}

	auto
	ThrowProjectileData::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	ThrowProjectileData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ThrowProjectileData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ThrowProjectileData> {
		if (incoming_type_id == ThrowProjectileData::type_id) {
			return std::make_shared<ThrowProjectileData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
