// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct HazardLaserNodePrius; 

	struct RIVET_DDL_SHARED HazardLaserPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "HazardLaserPrius";
		constexpr static rivet::rivet_type_id type_id = 0x88277df6;

		constexpr static std::string_view SourceNode_type_name = "SourceNode";
		constexpr static rivet::rivet_type_id SourceNode_type_id = 0xe2e405f9;
		constexpr static std::string_view TargetNode_type_name = "TargetNode";
		constexpr static rivet::rivet_type_id TargetNode_type_id = 0x7c00224d;
		constexpr static std::string_view Capped_type_name = "Capped";
		constexpr static rivet::rivet_type_id Capped_type_id = 0xc8133ea2;
		constexpr static std::string_view SyncNodes_type_name = "SyncNodes";
		constexpr static rivet::rivet_type_id SyncNodes_type_id = 0x51f269a0;
		constexpr static std::string_view CanBreak_type_name = "CanBreak";
		constexpr static rivet::rivet_type_id CanBreak_type_id = 0xd5e764f9;
		constexpr static std::string_view IgnoreEnvironment_type_name = "IgnoreEnvironment";
		constexpr static rivet::rivet_type_id IgnoreEnvironment_type_id = 0xe24326dd; 

		explicit HazardLaserPrius() = default;
		explicit HazardLaserPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::HazardLaserNodePrius> SourceNode {};
		std::shared_ptr<rivet::ddl::generated::HazardLaserNodePrius> TargetNode {};
		bool Capped {};
		bool SyncNodes {};
		bool CanBreak {};
		bool IgnoreEnvironment {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HazardLaserPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
