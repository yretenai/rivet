// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroSlideConfig.hpp>

namespace rivet::ddl::generated {
	HeroSlideConfig::HeroSlideConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		SlopeMinDegrees = serialized->get_float(SlopeMinDegrees_type_id, 0.500000);
		SlopeMaxDegrees = serialized->get_float(SlopeMaxDegrees_type_id, 59.000000);
		SlideGravity = serialized->get_float(SlideGravity_type_id, 50.000000);
		SlideAirGravity = serialized->get_float(SlideAirGravity_type_id, 30.000000);
		SlideFriction = serialized->get_float(SlideFriction_type_id, 0.050000);
		SlideOffFriction = serialized->get_float(SlideOffFriction_type_id, 0.250000);
		SlideTerminalSpeed = serialized->get_float(SlideTerminalSpeed_type_id, 30.000000);
		LateralSpeedBrakeFactor = serialized->get_float(LateralSpeedBrakeFactor_type_id, 0.750000);
		MinSlideSpeed = serialized->get_float(MinSlideSpeed_type_id, 5.000000);
		InputLateralSpeed = serialized->get_float(InputLateralSpeed_type_id, 4.000000);
		InputLateralAccel = serialized->get_float(InputLateralAccel_type_id, 8.000000);
		PathPullLateralSpeed = serialized->get_float(PathPullLateralSpeed_type_id, 20.000000);
		PathPullLateralAccel = serialized->get_float(PathPullLateralAccel_type_id, 8.000000);
		SlidePathDistanceForward = serialized->get_float(SlidePathDistanceForward_type_id, 3.000000);
		SlidePathDistanceSide = serialized->get_float(SlidePathDistanceSide_type_id, 5.000000);
		SlidePathHeightMin = serialized->get_float(SlidePathHeightMin_type_id, 3.000000);
		SlidePathHeightMax = serialized->get_float(SlidePathHeightMax_type_id, 3.000000);
		HopLaunchSpeed = serialized->get_float(HopLaunchSpeed_type_id, 1.500000);
		HopGravity = serialized->get_float(HopGravity_type_id, 10.000000);
		AnimVarLeanDirBlendSpeed = serialized->get_float(AnimVarLeanDirBlendSpeed_type_id, 5.000000);
		AnimVarSlideDirBlendSpeed = serialized->get_float(AnimVarSlideDirBlendSpeed_type_id, 1.000000);
		AnimVarSlideSlopeBlendSpeed = serialized->get_float(AnimVarSlideSlopeBlendSpeed_type_id, 1.000000);
		AnimVarSlideSlopeMinPitchDegrees = serialized->get_float(AnimVarSlideSlopeMinPitchDegrees_type_id, 10.000000);
		AnimVarSlideSlopeMaxPitchDegrees = serialized->get_float(AnimVarSlideSlopeMaxPitchDegrees_type_id, 50.000000);
		AnimImpactDriverMinAngleDiffDegrees = serialized->get_float(AnimImpactDriverMinAngleDiffDegrees_type_id, 5.000000);
		SlideMaterials = serialized->get_enums<rivet::ddl::generated::x10b3c4cf>(SlideMaterials_type_id, rivet::ddl::generated::x10b3c4cf_values);
		CameraShakeConfig = serialized->get_string(CameraShakeConfig_type_id, {});
		CameraForwardHorizontalBlendT = serialized->get_float(CameraForwardHorizontalBlendT_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	HeroSlideConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroSlideConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroSlideConfig> {
		if (incoming_type_id == HeroSlideConfig::type_id) {
			return std::make_shared<HeroSlideConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
