// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/WeaponGamePrius.hpp> 

namespace rivet::ddl::generated {
	struct BurstPistolInaccuracyData;
	struct ShellCasingDataSingleEmit; 

	struct RIVET_DDL_SHARED WeaponBurstPistolPrius : WeaponGamePrius {
		constexpr const static std::string_view type_name = "WeaponBurstPistolPrius";
		constexpr const static rivet::rivet_type_id type_id = 0xd687d27f;

		constexpr const static std::string_view NumShotsSlowToFast_type_name = "NumShotsSlowToFast";
		constexpr const static rivet::rivet_type_id NumShotsSlowToFast_type_id = 0x30d2490c;
		constexpr const static std::string_view SlowInaccuracyData_type_name = "SlowInaccuracyData";
		constexpr const static rivet::rivet_type_id SlowInaccuracyData_type_id = 0x5cfeb341;
		constexpr const static std::string_view InaccuracyData_type_name = "InaccuracyData";
		constexpr const static rivet::rivet_type_id InaccuracyData_type_id = 0x3acb6ae4;
		constexpr const static std::string_view ShellCasingData_type_name = "ShellCasingData";
		constexpr const static rivet::rivet_type_id ShellCasingData_type_id = 0x2fda4eac; 

		explicit WeaponBurstPistolPrius() = default;
		explicit WeaponBurstPistolPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t NumShotsSlowToFast {};
		std::shared_ptr<rivet::ddl::generated::BurstPistolInaccuracyData> SlowInaccuracyData {};
		std::shared_ptr<rivet::ddl::generated::BurstPistolInaccuracyData> InaccuracyData {};
		std::shared_ptr<rivet::ddl::generated::ShellCasingDataSingleEmit> ShellCasingData {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponBurstPistolPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
