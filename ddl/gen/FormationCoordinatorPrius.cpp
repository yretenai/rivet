// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FormationMotionInfo.hpp>
#include <rivet/ddl/generated/FormationEntry.hpp> 

#include <rivet/ddl/generated/FormationCoordinatorPrius.hpp>

namespace rivet::ddl::generated {
	FormationCoordinatorPrius::FormationCoordinatorPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SpawnIntoGroup = serialized->get_uint64(SpawnIntoGroup_type_id, 0);
		WaitDuration = serialized->get_float(WaitDuration_type_id, 4.000000);
		AttackDuration = serialized->get_float(AttackDuration_type_id, 0.500000);
		NumCycles = serialized->get_float(NumCycles_type_id, 1.000000);
		Entries = serialized->unwrap_into_many<rivet::ddl::generated::FormationEntry>(Entries_type_id);
		MotionInfo = serialized->unwrap_into_many<rivet::ddl::generated::FormationMotionInfo>(MotionInfo_type_id);
		MotionPivotActor = serialized->get_uint64(MotionPivotActor_type_id, 0);
		BotTemplate = serialized->get_uint64(BotTemplate_type_id, 0); 
	}

	[[nodiscard]] auto
	FormationCoordinatorPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FormationCoordinatorPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FormationCoordinatorPrius> {
		if (incoming_type_id == FormationCoordinatorPrius::type_id) {
			return std::make_shared<FormationCoordinatorPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
