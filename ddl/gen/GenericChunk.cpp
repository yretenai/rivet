// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GenericChunk.hpp>

namespace rivet::ddl::generated {
	GenericChunk::GenericChunk([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ChunkModel = serialized->get_string(ChunkModel_type_id);
		TriggerSpawnEvent = serialized->get_bool(TriggerSpawnEvent_type_id);
		UsesFXConduit = serialized->get_bool(UsesFXConduit_type_id);
		UsesAudioConduit = serialized->get_bool(UsesAudioConduit_type_id); 
	}

	[[nodiscard]] auto
	GenericChunk::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GenericChunk::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GenericChunk> {
		if (incoming_type_id == GenericChunk::type_id) {
			return std::make_shared<GenericChunk>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
