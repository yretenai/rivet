// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraRotatorTargetedPrius.hpp>
#include <rivet/ddl/generated/CameraRotatorSplinePrius.hpp> 

#include <rivet/ddl/generated/CameraRotatorBasePrius.hpp>

namespace rivet::ddl::generated {
	CameraRotatorBasePrius::CameraRotatorBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TurnSpeedAccel = serialized->get_float(TurnSpeedAccel_type_id, 2000.000000f);
		TurnSpeedDecel = serialized->get_float(TurnSpeedDecel_type_id, 1000.000000f);
		TurnSpeedMax = serialized->get_float(TurnSpeedMax_type_id, 2000.000000f); 
	}

	[[nodiscard]] auto
	CameraRotatorBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraRotatorBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraRotatorBasePrius> {
		if (incoming_type_id == CameraRotatorBasePrius::type_id) {
			return std::make_shared<CameraRotatorBasePrius>(serialized);
		}

		auto CameraRotatorSplinePrius_ptr = CameraRotatorSplinePrius::from_substruct(incoming_type_id, serialized);
		if (CameraRotatorSplinePrius_ptr != nullptr) {
			return CameraRotatorSplinePrius_ptr;
		}

		auto CameraRotatorTargetedPrius_ptr = CameraRotatorTargetedPrius::from_substruct(incoming_type_id, serialized);
		if (CameraRotatorTargetedPrius_ptr != nullptr) {
			return CameraRotatorTargetedPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
