// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VisualEffectCamGlobalAttr.hpp>

namespace rivet::ddl::generated {
	VisualEffectCamGlobalAttr::VisualEffectCamGlobalAttr([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		KillCulled = serialized->get_bool(KillCulled_type_id, false);
		SpawnCulled = serialized->get_bool(SpawnCulled_type_id, true);
		Source = serialized->get_enum<rivet::ddl::generated::x21f55189>(Source_type_id, rivet::ddl::generated::x21f55189_values, rivet::ddl::generated::x21f55189::Self);
		MaterialLoDDistance = serialized->get_float(MaterialLoDDistance_type_id, 40.000000f);
		FarClip = serialized->get_float(FarClip_type_id, 60.000000f);
		FarFadeStart = serialized->get_float(FarFadeStart_type_id, 40.000000f);
		NearFadeStart = serialized->get_float(NearFadeStart_type_id, 1.000000f);
		NearClip = serialized->get_float(NearClip_type_id, 0.000000f); 
	}

	[[nodiscard]] auto
	VisualEffectCamGlobalAttr::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VisualEffectCamGlobalAttr::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectCamGlobalAttr> {
		if (incoming_type_id == VisualEffectCamGlobalAttr::type_id) {
			return std::make_shared<VisualEffectCamGlobalAttr>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
