// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimDamageAttack.hpp> 

#include <rivet/ddl/generated/AnimDamageHandlerPrius.hpp>

namespace rivet::ddl::generated {
	AnimDamageHandlerPrius::AnimDamageHandlerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DeferAnimDamageWarning = serialized->get_string(DeferAnimDamageWarning_type_id, "Must Use Multi Prim To Defer Anim Damage");
		DeferAnimDamage = serialized->get_bool(DeferAnimDamage_type_id, false);
		ApplyActorScale = serialized->get_bool(ApplyActorScale_type_id, true);
		AttackIndices = serialized->unwrap_into_many<rivet::ddl::generated::AnimDamageAttack>(AttackIndices_type_id); 
	}

	[[nodiscard]] auto
	AnimDamageHandlerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimDamageHandlerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDamageHandlerPrius> {
		if (incoming_type_id == AnimDamageHandlerPrius::type_id) {
			return std::make_shared<AnimDamageHandlerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
