// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x10228b34.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HeroPlayScriptedAnimActionPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "HeroPlayScriptedAnimActionPrius";
		constexpr static rivet::rivet_type_id type_id = 0x6a757aaa;

		constexpr static std::string_view ActionType_type_name = "ActionType";
		constexpr static rivet::rivet_type_id ActionType_type_id = 0x874b2194;
		constexpr static std::string_view AllowOffers_type_name = "AllowOffers";
		constexpr static rivet::rivet_type_id AllowOffers_type_id = 0x4aa1c381;
		constexpr static std::string_view AsOverlapPartial_type_name = "AsOverlapPartial";
		constexpr static rivet::rivet_type_id AsOverlapPartial_type_id = 0xe27ddabd;
		constexpr static std::string_view StopOnPlayerInput_type_name = "StopOnPlayerInput";
		constexpr static rivet::rivet_type_id StopOnPlayerInput_type_id = 0x103b7361;
		constexpr static std::string_view ExitToRelaxedIdle_type_name = "ExitToRelaxedIdle";
		constexpr static rivet::rivet_type_id ExitToRelaxedIdle_type_id = 0xf8d8eeb8;
		constexpr static std::string_view AllowEarlyTransition_type_name = "AllowEarlyTransition";
		constexpr static rivet::rivet_type_id AllowEarlyTransition_type_id = 0x4450f120; 

		explicit HeroPlayScriptedAnimActionPrius() = default;
		explicit HeroPlayScriptedAnimActionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x10228b34 ActionType {};
		bool AllowOffers {};
		bool AsOverlapPartial {};
		bool StopOnPlayerInput {};
		bool ExitToRelaxedIdle {};
		bool AllowEarlyTransition {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroPlayScriptedAnimActionPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
