// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED VisualEffectLumAttr : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VisualEffectLumAttr";
		constexpr static rivet::rivet_type_id type_id = 0xe12b0ef6;

		constexpr static std::string_view Enable_type_name = "Enable";
		constexpr static rivet::rivet_type_id Enable_type_id = 0xcdd88655;
		constexpr static std::string_view AdaptationAnchor_type_name = "AdaptationAnchor";
		constexpr static rivet::rivet_type_id AdaptationAnchor_type_id = 0xe3f74ff1;
		constexpr static std::string_view AdaptationResponse_type_name = "AdaptationResponse";
		constexpr static rivet::rivet_type_id AdaptationResponse_type_id = 0x64473616;
		constexpr static std::string_view UseActualLuminance_type_name = "UseActualLuminance";
		constexpr static rivet::rivet_type_id UseActualLuminance_type_id = 0xc3f19bd; 

		explicit VisualEffectLumAttr() = default;
		explicit VisualEffectLumAttr([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool Enable {};
		float AdaptationAnchor {};
		float AdaptationResponse {};
		bool UseActualLuminance {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectLumAttr>;
	};
} // namespace rivet::ddl::generated

// clang-format on
