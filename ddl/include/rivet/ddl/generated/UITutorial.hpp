// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xb60d46be.hpp> 

namespace rivet::ddl::generated {
	struct UITutorialStep; 

	struct RIVET_DDL_SHARED UITutorial : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "UITutorial";
		constexpr const static rivet::rivet_type_id type_id = 0xd28f19;

		constexpr const static std::string_view TutorialID_type_name = "TutorialID";
		constexpr const static rivet::rivet_type_id TutorialID_type_id = 0x685b5c40;
		constexpr const static std::string_view Name_type_name = "Name";
		constexpr const static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr const static std::string_view Mission_type_name = "Mission";
		constexpr const static rivet::rivet_type_id Mission_type_id = 0x918d9104;
		constexpr const static std::string_view Objective_type_name = "Objective";
		constexpr const static rivet::rivet_type_id Objective_type_id = 0x3b6b6e0d;
		constexpr const static std::string_view ChallengeMode_type_name = "ChallengeMode";
		constexpr const static rivet::rivet_type_id ChallengeMode_type_id = 0x5ca1bef6;
		constexpr const static std::string_view TutorialSteps_type_name = "TutorialSteps";
		constexpr const static rivet::rivet_type_id TutorialSteps_type_id = 0xe87930b5; 

		explicit UITutorial() = default;
		explicit UITutorial([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xb60d46be TutorialID {};
		std::string_view Name {};
		std::string_view Mission {};
		std::string_view Objective {};
		bool ChallengeMode {};
		std::vector<std::shared_ptr<rivet::ddl::generated::UITutorialStep>> TutorialSteps {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UITutorial>;
	};
} // namespace rivet::ddl::generated

// clang-format on
