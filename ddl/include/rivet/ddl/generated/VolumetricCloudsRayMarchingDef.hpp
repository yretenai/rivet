// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED VolumetricCloudsRayMarchingDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VolumetricCloudsRayMarchingDef";
		constexpr static rivet::rivet_type_id type_id = 0xf21d0454;

		constexpr static std::string_view HighFrequencyNoiseTex_type_name = "HighFrequencyNoiseTex";
		constexpr static rivet::rivet_type_id HighFrequencyNoiseTex_type_id = 0xbe22eef4;
		constexpr static std::string_view LowFrequencyNoiseTex_type_name = "LowFrequencyNoiseTex";
		constexpr static rivet::rivet_type_id LowFrequencyNoiseTex_type_id = 0xf26413fe;
		constexpr static std::string_view DownSampling_type_name = "DownSampling";
		constexpr static rivet::rivet_type_id DownSampling_type_id = 0x75994a48;
		constexpr static std::string_view MinSampleCount_type_name = "MinSampleCount";
		constexpr static rivet::rivet_type_id MinSampleCount_type_id = 0xb8d11fba;
		constexpr static std::string_view MaxSampleCount_type_name = "MaxSampleCount";
		constexpr static rivet::rivet_type_id MaxSampleCount_type_id = 0x1f784cb;
		constexpr static std::string_view MinStepSize_type_name = "MinStepSize";
		constexpr static rivet::rivet_type_id MinStepSize_type_id = 0xd09b64f7;
		constexpr static std::string_view MaxStepSize_type_name = "MaxStepSize";
		constexpr static rivet::rivet_type_id MaxStepSize_type_id = 0x1c961ff8;
		constexpr static std::string_view MaxSampleDistance_type_name = "MaxSampleDistance";
		constexpr static rivet::rivet_type_id MaxSampleDistance_type_id = 0x2256ff79;
		constexpr static std::string_view EnabledTemporalRayOffset_type_name = "EnabledTemporalRayOffset";
		constexpr static rivet::rivet_type_id EnabledTemporalRayOffset_type_id = 0x5d90ed2f;
		constexpr static std::string_view EnabledEdgeBlur_type_name = "EnabledEdgeBlur";
		constexpr static rivet::rivet_type_id EnabledEdgeBlur_type_id = 0x5f704475; 

		explicit VolumetricCloudsRayMarchingDef() = default;
		explicit VolumetricCloudsRayMarchingDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view HighFrequencyNoiseTex {};
		std::string_view LowFrequencyNoiseTex {};
		int8_t DownSampling {};
		int16_t MinSampleCount {};
		int16_t MaxSampleCount {};
		float MinStepSize {};
		float MaxStepSize {};
		float MaxSampleDistance {};
		bool EnabledTemporalRayOffset {};
		bool EnabledEdgeBlur {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VolumetricCloudsRayMarchingDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
