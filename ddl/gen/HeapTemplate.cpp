// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeapTemplate.hpp>

namespace rivet::ddl::generated {
	HeapTemplate::HeapTemplate([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Name = serialized->get_string(Name_type_id, "");
		Type = serialized->get_enum<rivet::ddl::generated::x7271a16e>(Type_type_id, rivet::ddl::generated::x7271a16e_values, rivet::ddl::generated::x7271a16e::Default);
		Flags = serialized->get_bitset<rivet::ddl::generated::x3141d5f2>(Flags_type_id, rivet::ddl::generated::x3141d5f2_values, 0u);
		Alignment = serialized->get_uint64(Alignment_type_id, 8ull);
		SoftAlignment = serialized->get_uint64(SoftAlignment_type_id, 8ull);
		MaxAllocs = serialized->get_int32(MaxAllocs_type_id, 4096u);
		SmallBlockFraction = serialized->get_float(SmallBlockFraction_type_id, 0.000000f);
		SmallBlockSizes = serialized->get_uint16s(SmallBlockSizes_type_id);
		MaxDeferredFrees = serialized->get_uint32(MaxDeferredFrees_type_id, 0u); 
	}

	[[nodiscard]] auto
	HeapTemplate::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeapTemplate::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeapTemplate> {
		if (incoming_type_id == HeapTemplate::type_id) {
			return std::make_shared<HeapTemplate>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
