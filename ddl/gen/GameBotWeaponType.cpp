// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameBotWeaponNone.hpp>
#include <rivet/ddl/generated/GameBotWeaponEquip.hpp>
#include <rivet/ddl/generated/GameBotWeaponMelee.hpp>
#include <rivet/ddl/generated/GameBotWeaponShoot.hpp> 

#include <rivet/ddl/generated/GameBotWeaponType.hpp>

namespace rivet::ddl::generated {
	GameBotWeaponType::GameBotWeaponType([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	GameBotWeaponType::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameBotWeaponType::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotWeaponType> {
		if (incoming_type_id == GameBotWeaponType::type_id) {
			return std::make_shared<GameBotWeaponType>(serialized);
		}

		auto GameBotWeaponShoot_ptr = GameBotWeaponShoot::from_substruct(incoming_type_id, serialized);
		if (GameBotWeaponShoot_ptr != nullptr) {
			return GameBotWeaponShoot_ptr;
		}

		auto GameBotWeaponMelee_ptr = GameBotWeaponMelee::from_substruct(incoming_type_id, serialized);
		if (GameBotWeaponMelee_ptr != nullptr) {
			return GameBotWeaponMelee_ptr;
		}

		auto GameBotWeaponEquip_ptr = GameBotWeaponEquip::from_substruct(incoming_type_id, serialized);
		if (GameBotWeaponEquip_ptr != nullptr) {
			return GameBotWeaponEquip_ptr;
		}

		auto GameBotWeaponNone_ptr = GameBotWeaponNone::from_substruct(incoming_type_id, serialized);
		if (GameBotWeaponNone_ptr != nullptr) {
			return GameBotWeaponNone_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
