// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ShotDebugSettings.hpp>

namespace rivet::ddl::generated {
	ShotDebugSettings::ShotDebugSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DisplayMenu = serialized->get_bool(DisplayMenu_type_id, false);
		EnableTracking = serialized->get_bool(EnableTracking_type_id, false);
		MaxTrackedShots = serialized->get_uint32(MaxTrackedShots_type_id, 50);
		MaxFramesPerShot = serialized->get_uint32(MaxFramesPerShot_type_id, 120);
		MaxLifetimeAfterDestroy = serialized->get_uint32(MaxLifetimeAfterDestroy_type_id, 0);
		DrawShotHistory = serialized->get_bool(DrawShotHistory_type_id, false);
		DrawSelectedShotHistoryOnly = serialized->get_bool(DrawSelectedShotHistoryOnly_type_id, false);
		DrawProjectedForward = serialized->get_bool(DrawProjectedForward_type_id, true);
		DrawCollRadiusImpact = serialized->get_bool(DrawCollRadiusImpact_type_id, false);
		DrawCollRadiusDamage = serialized->get_bool(DrawCollRadiusDamage_type_id, false);
		ShotListSortOrder = serialized->get_enum<rivet::ddl::generated::xd2478acb>(ShotListSortOrder_type_id, rivet::ddl::generated::xd2478acb_values, rivet::ddl::generated::xd2478acb::Descending);
		FrameListSortOrder = serialized->get_enum<rivet::ddl::generated::xd2478acb>(FrameListSortOrder_type_id, rivet::ddl::generated::xd2478acb_values, rivet::ddl::generated::xd2478acb::Descending);
		DisplayedAllegiance = serialized->get_bitset<rivet::ddl::generated::x8f57801d>(DisplayedAllegiance_type_id, rivet::ddl::generated::x8f57801d_values, 7);
		ShotDisplay = serialized->get_bitset<rivet::ddl::generated::xbb69786>(ShotDisplay_type_id, rivet::ddl::generated::xbb69786_values, 15); 
	}

	[[nodiscard]] auto
	ShotDebugSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShotDebugSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotDebugSettings> {
		if (incoming_type_id == ShotDebugSettings::type_id) {
			return std::make_shared<ShotDebugSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
