// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PirateData.hpp> 

#include <rivet/ddl/generated/PirateChallengeControllerPrius.hpp>

namespace rivet::ddl::generated {
	PirateChallengeControllerPrius::PirateChallengeControllerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		InactiveAnim = serialized->get_string(InactiveAnim_type_id);
		ActivateAnim = serialized->get_string(ActivateAnim_type_id);
		InterruptAnim = serialized->get_string(InterruptAnim_type_id);
		ReadyOffAnim = serialized->get_string(ReadyOffAnim_type_id);
		ReadyOnAnim = serialized->get_string(ReadyOnAnim_type_id);
		PerformAnim = serialized->get_string(PerformAnim_type_id);
		InstructionAnim = serialized->get_string(InstructionAnim_type_id);
		CelebrateAnim = serialized->get_string(CelebrateAnim_type_id);
		TauntAnim = serialized->get_string(TauntAnim_type_id);
		DeactivateAnim = serialized->get_string(DeactivateAnim_type_id);
		PirateData = serialized->unwrap_into_many<rivet::ddl::generated::PirateData>(PirateData_type_id); 
	}

	[[nodiscard]] auto
	PirateChallengeControllerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PirateChallengeControllerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PirateChallengeControllerPrius> {
		if (incoming_type_id == PirateChallengeControllerPrius::type_id) {
			return std::make_shared<PirateChallengeControllerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
