// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ChangeBatch.hpp> 

#include <rivet/ddl/generated/ModifyRequest.hpp>

namespace rivet::ddl::generated {
	ModifyRequest::ModifyRequest([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SessionId = serialized->get_uint64(SessionId_type_id);
		Replayable = serialized->get_bool(Replayable_type_id);
		Batch = serialized->unwrap_into<rivet::ddl::generated::ChangeBatch>(Batch_type_id);
		MergeJson = serialized->get_field(MergeJson_type_id);
		ClientData = serialized->get_field(ClientData_type_id);
		Source = serialized->get_string(Source_type_id); 
	}

	[[nodiscard]] auto
	ModifyRequest::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ModifyRequest::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ModifyRequest> {
		if (incoming_type_id == ModifyRequest::type_id) {
			return std::make_shared<ModifyRequest>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
