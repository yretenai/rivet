// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED IncinerateConfig : ConfigBase {
		constexpr const static std::string_view type_name = "IncinerateConfig";
		constexpr const static rivet::rivet_type_id type_id = 0x552a26f1;

		constexpr const static std::string_view PreMaterialGraph_type_name = "PreMaterialGraph";
		constexpr const static rivet::rivet_type_id PreMaterialGraph_type_id = 0xa9b2b374;
		constexpr const static std::string_view PostMaterialGraph_type_name = "PostMaterialGraph";
		constexpr const static rivet::rivet_type_id PostMaterialGraph_type_id = 0xcaf646bf;
		constexpr const static std::string_view DefaultDuration_type_name = "DefaultDuration";
		constexpr const static rivet::rivet_type_id DefaultDuration_type_id = 0xfa0f8223;
		constexpr const static std::string_view DefaultDelay_type_name = "DefaultDelay";
		constexpr const static rivet::rivet_type_id DefaultDelay_type_id = 0xa801dc02;
		constexpr const static std::string_view UseJointCrawl_type_name = "UseJointCrawl";
		constexpr const static rivet::rivet_type_id UseJointCrawl_type_id = 0xd85731c6; 

		explicit IncinerateConfig() = default;
		explicit IncinerateConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view PreMaterialGraph {};
		std::string_view PostMaterialGraph {};
		float DefaultDuration {};
		float DefaultDelay {};
		bool UseJointCrawl {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<IncinerateConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
