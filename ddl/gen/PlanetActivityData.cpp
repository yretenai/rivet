// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PlanetGoldBolt.hpp>
#include <rivet/ddl/generated/PlanetRYNOPlan.hpp>
#include <rivet/ddl/generated/PlanetDimension.hpp> 

#include <rivet/ddl/generated/PlanetActivityData.hpp>

namespace rivet::ddl::generated {
	PlanetActivityData::PlanetActivityData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PocketDimensions = serialized->unwrap_into_many<rivet::ddl::generated::PlanetDimension>(PocketDimensions_type_id);
		GoldBoltsCardEnabled = serialized->get_bool(GoldBoltsCardEnabled_type_id);
		GoldBoltsCardNameTag = serialized->get_string(GoldBoltsCardNameTag_type_id);
		GoldBoltsCardDescTag = serialized->get_string(GoldBoltsCardDescTag_type_id);
		GoldBoltsCardSmallImage = serialized->get_string(GoldBoltsCardSmallImage_type_id);
		GoldBoltsCardLargeImage = serialized->get_string(GoldBoltsCardLargeImage_type_id);
		GoldBoltsPlaytimeEstimate = serialized->get_uint32(GoldBoltsPlaytimeEstimate_type_id);
		GoldBolts = serialized->unwrap_into_many<rivet::ddl::generated::PlanetGoldBolt>(GoldBolts_type_id);
		RYNOPlans = serialized->unwrap_into_many<rivet::ddl::generated::PlanetRYNOPlan>(RYNOPlans_type_id); 
	}

	[[nodiscard]] auto
	PlanetActivityData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PlanetActivityData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PlanetActivityData> {
		if (incoming_type_id == PlanetActivityData::type_id) {
			return std::make_shared<PlanetActivityData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
