// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BreakableVariantDifficultyEntry.hpp>

namespace rivet::ddl::generated {
	BreakableVariantDifficultyEntry::BreakableVariantDifficultyEntry([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Variant = serialized->get_enum<rivet::ddl::generated::xc3e5efea>(Variant_type_id, rivet::ddl::generated::xc3e5efea_values, rivet::ddl::generated::xc3e5efea::V1);
		StartMission = serialized->get_string(StartMission_type_id, "");
		StartObjective = serialized->get_string(StartObjective_type_id, "");
		Health = serialized->get_float(Health_type_id, 1.000000f);
		EasyMultiplier = serialized->get_float(EasyMultiplier_type_id, 1.000000f);
		MediumMultiplier = serialized->get_float(MediumMultiplier_type_id, 1.000000f);
		HardMultiplier = serialized->get_float(HardMultiplier_type_id, 1.000000f);
		HardestMultiplier = serialized->get_float(HardestMultiplier_type_id, 1.000000f);
		ThreeDeathsMultiplier = serialized->get_float(ThreeDeathsMultiplier_type_id, 1.000000f);
		FiveDeathsMultiplier = serialized->get_float(FiveDeathsMultiplier_type_id, 1.000000f);
		ChallengeModeMultiplier = serialized->get_float(ChallengeModeMultiplier_type_id, 1.000000f); 
	}

	[[nodiscard]] auto
	BreakableVariantDifficultyEntry::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BreakableVariantDifficultyEntry::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BreakableVariantDifficultyEntry> {
		if (incoming_type_id == BreakableVariantDifficultyEntry::type_id) {
			return std::make_shared<BreakableVariantDifficultyEntry>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
