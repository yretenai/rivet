// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/GraphNodeNotesDef.hpp> 

#include <rivet/ddl/generated/ScriptVarNodeAux.hpp>

namespace rivet::ddl::generated {
	ScriptVarNodeAux::ScriptVarNodeAux([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VarType = serialized->get_string(VarType_type_id, {});
		ReadOnly = serialized->get_bool(ReadOnly_type_id, false);
		GlobalName = serialized->get_string(GlobalName_type_id, {});
		Notes = serialized->unwrap_into<rivet::ddl::generated::GraphNodeNotesDef>(Notes_type_id);
		IsGlobal = serialized->get_bool(IsGlobal_type_id, false);
		BoolValue = serialized->get_bool(BoolValue_type_id, false);
		FloatValue = serialized->get_float(FloatValue_type_id, 0.000000f);
		VecValue = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(VecValue_type_id);
		StringValue = serialized->get_string(StringValue_type_id, {});
		ActorValue = serialized->get_uint64(ActorValue_type_id, 0ull); 
	}

	[[nodiscard]] auto
	ScriptVarNodeAux::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ScriptVarNodeAux::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ScriptVarNodeAux> {
		if (incoming_type_id == ScriptVarNodeAux::type_id) {
			return std::make_shared<ScriptVarNodeAux>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
