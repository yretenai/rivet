// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ModelPhysicsSettings.hpp>

namespace rivet::ddl::generated {
	ModelPhysicsSettings::ModelPhysicsSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CollisionType = serialized->get_enum<rivet::ddl::generated::CollisionType>(CollisionType_type_id, rivet::ddl::generated::CollisionType_values, rivet::ddl::generated::CollisionType::Static);
		CollisionOnly = serialized->get_bool(CollisionOnly_type_id, false);
		IsOnlyStatic = serialized->get_bool(IsOnlyStatic_type_id, true);
		PhysicsPerformance = serialized->get_enum<rivet::ddl::generated::x21a0df30>(PhysicsPerformance_type_id, rivet::ddl::generated::x21a0df30_values, rivet::ddl::generated::x21a0df30::Good); 
	}

	[[nodiscard]] auto
	ModelPhysicsSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ModelPhysicsSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ModelPhysicsSettings> {
		if (incoming_type_id == ModelPhysicsSettings::type_id) {
			return std::make_shared<ModelPhysicsSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
