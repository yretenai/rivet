// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/OrbitCamData.hpp>

namespace rivet::ddl::generated {
	OrbitCamData::OrbitCamData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TetherDistance = serialized->get_float(TetherDistance_type_id, 10.000000);
		MinDistance = serialized->get_float(MinDistance_type_id, 1.000000);
		ZoomSpeed = serialized->get_float(ZoomSpeed_type_id, 8.000000);
		ZoomAccel = serialized->get_float(ZoomAccel_type_id, 400.000000);
		ZoomDecel = serialized->get_float(ZoomDecel_type_id, 10000.000000);
		StickConfig = serialized->get_string(StickConfig_type_id, {}); 
	}

	[[nodiscard]] auto
	OrbitCamData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	OrbitCamData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OrbitCamData> {
		if (incoming_type_id == OrbitCamData::type_id) {
			return std::make_shared<OrbitCamData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
