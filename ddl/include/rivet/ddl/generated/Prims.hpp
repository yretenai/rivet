// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED Prims : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "Prims";
		constexpr static rivet::rivet_type_id type_id = 0xb9cc76c7;

		constexpr static std::string_view BOOL_type_name = "BOOL";
		constexpr static rivet::rivet_type_id BOOL_type_id = 0xf3b6b4a8;
		constexpr static std::string_view F32_type_name = "F32";
		constexpr static rivet::rivet_type_id F32_type_id = 0xa5f273f9;
		constexpr static std::string_view F64_type_name = "F64";
		constexpr static rivet::rivet_type_id F64_type_id = 0x31e62289;
		constexpr static std::string_view I8_type_name = "I8";
		constexpr static rivet::rivet_type_id I8_type_id = 0xe88c5752;
		constexpr static std::string_view I16_type_name = "I16";
		constexpr static rivet::rivet_type_id I16_type_id = 0x9bf5925f;
		constexpr static std::string_view I32_type_name = "I32";
		constexpr static rivet::rivet_type_id I32_type_id = 0xaeae34c4;
		constexpr static std::string_view I64_type_name = "I64";
		constexpr static rivet::rivet_type_id I64_type_id = 0x3aba65b4;
		constexpr static std::string_view U8_type_name = "U8";
		constexpr static rivet::rivet_type_id U8_type_id = 0xefb0a0f;
		constexpr static std::string_view U16_type_name = "U16";
		constexpr static rivet::rivet_type_id U16_type_id = 0x8ec9c84b;
		constexpr static std::string_view U32_type_name = "U32";
		constexpr static rivet::rivet_type_id U32_type_id = 0xbb926ed0;
		constexpr static std::string_view U64_type_name = "U64";
		constexpr static rivet::rivet_type_id U64_type_id = 0x2f863fa0; 

		explicit Prims() = default;
		explicit Prims([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool BOOL {};
		float F32 {};
		double F64 {};
		int8_t I8 {};
		int16_t I16 {};
		int32_t I32 {};
		int64_t I64 {};
		uint8_t U8 {};
		uint16_t U16 {};
		uint32_t U32 {};
		uint64_t U64 {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Prims>;
	};
} // namespace rivet::ddl::generated

// clang-format on
