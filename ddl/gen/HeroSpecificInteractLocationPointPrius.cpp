// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroSpecificInteractLocationPointPrius.hpp>

namespace rivet::ddl::generated {
	HeroSpecificInteractLocationPointPrius::HeroSpecificInteractLocationPointPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): InteractLocationPointPrius(serialized) {
		HeroType = serialized->get_enum<rivet::ddl::generated::HeroTypes>(HeroType_type_id, rivet::ddl::generated::HeroTypes_values);
		ControlBinding = serialized->get_enum<rivet::ddl::generated::HeroControl>(ControlBinding_type_id, rivet::ddl::generated::HeroControl_values); 
	}

	[[nodiscard]] auto
	HeroSpecificInteractLocationPointPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroSpecificInteractLocationPointPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroSpecificInteractLocationPointPrius> {
		if (incoming_type_id == HeroSpecificInteractLocationPointPrius::type_id) {
			return std::make_shared<HeroSpecificInteractLocationPointPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
