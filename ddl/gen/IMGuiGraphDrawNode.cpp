// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/IMGuiConnectionData.hpp> 

#include <rivet/ddl/generated/IMGuiGraphDrawNode.hpp>

namespace rivet::ddl::generated {
	IMGuiGraphDrawNode::IMGuiGraphDrawNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DrawType = serialized->get_enum<rivet::ddl::generated::xb2c512b4>(DrawType_type_id, rivet::ddl::generated::xb2c512b4_values);
		NodeId = serialized->get_uint64(NodeId_type_id);
		IsDebugMarker = serialized->get_bool(IsDebugMarker_type_id);
		SortPriority = serialized->get_int32(SortPriority_type_id);
		DrawSizeX = serialized->get_float(DrawSizeX_type_id);
		DrawSizeY = serialized->get_float(DrawSizeY_type_id);
		ParentConnections = serialized->unwrap_into_many<rivet::ddl::generated::IMGuiConnectionData>(ParentConnections_type_id);
		ChildConnections = serialized->unwrap_into_many<rivet::ddl::generated::IMGuiConnectionData>(ChildConnections_type_id); 
	}

	[[nodiscard]] auto
	IMGuiGraphDrawNode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	IMGuiGraphDrawNode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<IMGuiGraphDrawNode> {
		if (incoming_type_id == IMGuiGraphDrawNode::type_id) {
			return std::make_shared<IMGuiGraphDrawNode>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
