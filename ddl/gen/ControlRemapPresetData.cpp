// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ControlRemapSet.hpp>
#include <rivet/ddl/generated/ControlRemapPresetDataGame.hpp> 

#include <rivet/ddl/generated/ControlRemapPresetData.hpp>

namespace rivet::ddl::generated {
	ControlRemapPresetData::ControlRemapPresetData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_enum<rivet::ddl::generated::xcc18a97d>(Id_type_id, rivet::ddl::generated::xcc18a97d_values);
		DisplayName = serialized->get_string(DisplayName_type_id);
		RemapSet = serialized->unwrap_into<rivet::ddl::generated::ControlRemapSet>(RemapSet_type_id); 
	}

	[[nodiscard]] auto
	ControlRemapPresetData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ControlRemapPresetData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ControlRemapPresetData> {
		if (incoming_type_id == ControlRemapPresetData::type_id) {
			return std::make_shared<ControlRemapPresetData>(serialized);
		}

		auto ControlRemapPresetDataGame_ptr = ControlRemapPresetDataGame::from_substruct(incoming_type_id, serialized);
		if (ControlRemapPresetDataGame_ptr != nullptr) {
			return ControlRemapPresetDataGame_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
