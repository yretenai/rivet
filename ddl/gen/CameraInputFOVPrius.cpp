// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraInputFOVPrius.hpp>

namespace rivet::ddl::generated {
	CameraInputFOVPrius::CameraInputFOVPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FOVMin = serialized->get_float(FOVMin_type_id, 20.000000f);
		FOVMax = serialized->get_float(FOVMax_type_id, 90.000000f);
		FOVSpeedAccel = serialized->get_float(FOVSpeedAccel_type_id, 300.000000f);
		FOVSpeedMax = serialized->get_float(FOVSpeedMax_type_id, 30.000000f);
		FOVSpeedSoftZone = serialized->get_float(FOVSpeedSoftZone_type_id, 10.000000f);
		FromCinematic = serialized->get_bool(FromCinematic_type_id, false); 
	}

	[[nodiscard]] auto
	CameraInputFOVPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraInputFOVPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraInputFOVPrius> {
		if (incoming_type_id == CameraInputFOVPrius::type_id) {
			return std::make_shared<CameraInputFOVPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
