// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameItemPrius.hpp>
#include <rivet/ddl/generated/SkinItemPrius.hpp>
#include <rivet/ddl/generated/GridItemPrius.hpp> 

#include <rivet/ddl/generated/ItemPrius.hpp>

namespace rivet::ddl::generated {
	ItemPrius::ItemPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ItemGuid = serialized->get_uint64(ItemGuid_type_id, 0);
		ItemConfigHash = serialized->get_uint64(ItemConfigHash_type_id, 0);
		ItemCount = serialized->get_uint32(ItemCount_type_id, 1);
		ItemId = serialized->get_uint16(ItemId_type_id, 0); 
	}

	[[nodiscard]] auto
	ItemPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ItemPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ItemPrius> {
		if (incoming_type_id == ItemPrius::type_id) {
			return std::make_shared<ItemPrius>(serialized);
		}

		auto GridItemPrius_ptr = GridItemPrius::from_substruct(incoming_type_id, serialized);
		if (GridItemPrius_ptr != nullptr) {
			return GridItemPrius_ptr;
		}

		auto SkinItemPrius_ptr = SkinItemPrius::from_substruct(incoming_type_id, serialized);
		if (SkinItemPrius_ptr != nullptr) {
			return SkinItemPrius_ptr;
		}

		auto GameItemPrius_ptr = GameItemPrius::from_substruct(incoming_type_id, serialized);
		if (GameItemPrius_ptr != nullptr) {
			return GameItemPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
