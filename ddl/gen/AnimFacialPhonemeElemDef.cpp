// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimFacialPhonemeElemDef.hpp>

namespace rivet::ddl::generated {
	AnimFacialPhonemeElemDef::AnimFacialPhonemeElemDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id, 0);
		PhonemeId = serialized->get_enum<rivet::ddl::generated::x9c9e2a0a>(PhonemeId_type_id, rivet::ddl::generated::x9c9e2a0a_values, rivet::ddl::generated::x9c9e2a0a::x);
		StartTime = serialized->get_float(StartTime_type_id, 0.000000);
		EndTime = serialized->get_float(EndTime_type_id, 0.000000);
		Weight = serialized->get_float(Weight_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	AnimFacialPhonemeElemDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimFacialPhonemeElemDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimFacialPhonemeElemDef> {
		if (incoming_type_id == AnimFacialPhonemeElemDef::type_id) {
			return std::make_shared<AnimFacialPhonemeElemDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
