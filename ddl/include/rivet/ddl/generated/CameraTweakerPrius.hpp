// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct CameraSafeZoneTweak;
	struct CameraPitchTweak;
	struct CameraForwardTweak;
	struct CameraHeightTweak;
	struct CameraDistanceTweak; 

	struct RIVET_DDL_SHARED CameraTweakerPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CameraTweakerPrius";
		constexpr static rivet::rivet_type_id type_id = 0x4bf5c69;

		constexpr static std::string_view StartActive_type_name = "StartActive";
		constexpr static rivet::rivet_type_id StartActive_type_id = 0x3e035e82;
		constexpr static std::string_view CasualModeOnly_type_name = "CasualModeOnly";
		constexpr static rivet::rivet_type_id CasualModeOnly_type_id = 0x94978c32;
		constexpr static std::string_view DistanceTweak_type_name = "DistanceTweak";
		constexpr static rivet::rivet_type_id DistanceTweak_type_id = 0x6c21a67a;
		constexpr static std::string_view HeightTweak_type_name = "HeightTweak";
		constexpr static rivet::rivet_type_id HeightTweak_type_id = 0xea6791a5;
		constexpr static std::string_view PitchTweak_type_name = "PitchTweak";
		constexpr static rivet::rivet_type_id PitchTweak_type_id = 0x9b37dade;
		constexpr static std::string_view ForwardTweak_type_name = "ForwardTweak";
		constexpr static rivet::rivet_type_id ForwardTweak_type_id = 0xfd5498f8;
		constexpr static std::string_view SafeZoneTweak_type_name = "SafeZoneTweak";
		constexpr static rivet::rivet_type_id SafeZoneTweak_type_id = 0xb58dcd08; 

		explicit CameraTweakerPrius() = default;
		explicit CameraTweakerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool StartActive {};
		bool CasualModeOnly {};
		std::shared_ptr<rivet::ddl::generated::CameraDistanceTweak> DistanceTweak {};
		std::shared_ptr<rivet::ddl::generated::CameraHeightTweak> HeightTweak {};
		std::shared_ptr<rivet::ddl::generated::CameraPitchTweak> PitchTweak {};
		std::shared_ptr<rivet::ddl::generated::CameraForwardTweak> ForwardTweak {};
		std::shared_ptr<rivet::ddl::generated::CameraSafeZoneTweak> SafeZoneTweak {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraTweakerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
