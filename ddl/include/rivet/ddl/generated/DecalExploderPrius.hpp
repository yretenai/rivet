// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/x27b34de0.hpp>
#include <rivet/ddl/generated/enums/xf356f148.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DecalExploderPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "DecalExploderPrius";
		constexpr static rivet::rivet_type_id type_id = 0x3b7ecb8b;

		constexpr static std::string_view CheckDistance_type_name = "CheckDistance";
		constexpr static rivet::rivet_type_id CheckDistance_type_id = 0xe8c9b5bf;
		constexpr static std::string_view MaxAngle_type_name = "MaxAngle";
		constexpr static rivet::rivet_type_id MaxAngle_type_id = 0x191f829e;
		constexpr static std::string_view UseDirection_type_name = "UseDirection";
		constexpr static rivet::rivet_type_id UseDirection_type_id = 0xe0eb473;
		constexpr static std::string_view MaxDecals_type_name = "MaxDecals";
		constexpr static rivet::rivet_type_id MaxDecals_type_id = 0xafc79ea8;
		constexpr static std::string_view DeathEventMustBeExplosive_type_name = "DeathEventMustBeExplosive";
		constexpr static rivet::rivet_type_id DeathEventMustBeExplosive_type_id = 0x56a7a54a;
		constexpr static std::string_view DriverEvents_type_name = "DriverEvents";
		constexpr static rivet::rivet_type_id DriverEvents_type_id = 0x9d1f4b4d; 

		explicit DecalExploderPrius() = default;
		explicit DecalExploderPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float CheckDistance {};
		float MaxAngle {};
		rivet::ddl::generated::xf356f148 UseDirection {};
		uint8_t MaxDecals {};
		bool DeathEventMustBeExplosive {};
		rivet::ddl::generated::x27b34de0 DriverEvents {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DecalExploderPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
