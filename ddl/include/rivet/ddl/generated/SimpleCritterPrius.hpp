// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SimpleCritterPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SimpleCritterPrius";
		constexpr static rivet::rivet_type_id type_id = 0x865e0157;

		constexpr static std::string_view MinSpeed_type_name = "MinSpeed";
		constexpr static rivet::rivet_type_id MinSpeed_type_id = 0xf0d89680;
		constexpr static std::string_view MaxSpeed_type_name = "MaxSpeed";
		constexpr static rivet::rivet_type_id MaxSpeed_type_id = 0x16b83961;
		constexpr static std::string_view Accel_type_name = "Accel";
		constexpr static rivet::rivet_type_id Accel_type_id = 0x44affa24;
		constexpr static std::string_view Decel_type_name = "Decel";
		constexpr static rivet::rivet_type_id Decel_type_id = 0xa9242a88;
		constexpr static std::string_view TurnSpeed_type_name = "TurnSpeed";
		constexpr static rivet::rivet_type_id TurnSpeed_type_id = 0x6cc70f48;
		constexpr static std::string_view MinTurnAngle_type_name = "MinTurnAngle";
		constexpr static rivet::rivet_type_id MinTurnAngle_type_id = 0x6f74b2c1;
		constexpr static std::string_view MinIdleTime_type_name = "MinIdleTime";
		constexpr static rivet::rivet_type_id MinIdleTime_type_id = 0x4d6520cf;
		constexpr static std::string_view MaxIdleTime_type_name = "MaxIdleTime";
		constexpr static rivet::rivet_type_id MaxIdleTime_type_id = 0x81685bc0;
		constexpr static std::string_view MaxSurvivableFallDistance_type_name = "MaxSurvivableFallDistance";
		constexpr static rivet::rivet_type_id MaxSurvivableFallDistance_type_id = 0x704cc9d2;
		constexpr static std::string_view PanicFeelerForwardOffset_type_name = "PanicFeelerForwardOffset";
		constexpr static rivet::rivet_type_id PanicFeelerForwardOffset_type_id = 0xc8fe3371;
		constexpr static std::string_view PanicFeelerStartUpOffset_type_name = "PanicFeelerStartUpOffset";
		constexpr static rivet::rivet_type_id PanicFeelerStartUpOffset_type_id = 0x4b14d268;
		constexpr static std::string_view PanicFeelerSideOffset_type_name = "PanicFeelerSideOffset";
		constexpr static rivet::rivet_type_id PanicFeelerSideOffset_type_id = 0x3cbb3a5b;
		constexpr static std::string_view PanicMaxSurfaceAngle_type_name = "PanicMaxSurfaceAngle";
		constexpr static rivet::rivet_type_id PanicMaxSurfaceAngle_type_id = 0x801e5a2e;
		constexpr static std::string_view MinPanicMoveSpeedForAnim_type_name = "MinPanicMoveSpeedForAnim";
		constexpr static rivet::rivet_type_id MinPanicMoveSpeedForAnim_type_id = 0xda673f2d;
		constexpr static std::string_view IdleAnim_type_name = "IdleAnim";
		constexpr static rivet::rivet_type_id IdleAnim_type_id = 0xe747921a;
		constexpr static std::string_view MoveAnim_type_name = "MoveAnim";
		constexpr static rivet::rivet_type_id MoveAnim_type_id = 0xc347e9e7;
		constexpr static std::string_view TurnRightAnim_type_name = "TurnRightAnim";
		constexpr static rivet::rivet_type_id TurnRightAnim_type_id = 0x4cf0e45a;
		constexpr static std::string_view TurnLeftAnim_type_name = "TurnLeftAnim";
		constexpr static rivet::rivet_type_id TurnLeftAnim_type_id = 0xe5e1bf97; 

		explicit SimpleCritterPrius() = default;
		explicit SimpleCritterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MinSpeed {};
		float MaxSpeed {};
		float Accel {};
		float Decel {};
		float TurnSpeed {};
		float MinTurnAngle {};
		float MinIdleTime {};
		float MaxIdleTime {};
		float MaxSurvivableFallDistance {};
		float PanicFeelerForwardOffset {};
		float PanicFeelerStartUpOffset {};
		float PanicFeelerSideOffset {};
		float PanicMaxSurfaceAngle {};
		float MinPanicMoveSpeedForAnim {};
		std::string_view IdleAnim {};
		std::string_view MoveAnim {};
		std::string_view TurnRightAnim {};
		std::string_view TurnLeftAnim {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleCritterPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
