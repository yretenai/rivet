// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector2.hpp> 

#include <rivet/ddl/generated/OrderedListUIActionPrius.hpp>

namespace rivet::ddl::generated {
	OrderedListUIActionPrius::OrderedListUIActionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActionType = serialized->get_enum<rivet::ddl::generated::x10228b34>(ActionType_type_id, rivet::ddl::generated::x10228b34_values);
		WindowPosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(WindowPosition_type_id);
		WindowPosition3D = serialized->get_bool(WindowPosition3D_type_id);
		WindowSize = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(WindowSize_type_id);
		NumColumns = serialized->get_int32(NumColumns_type_id);
		ItemWidth = serialized->get_int32(ItemWidth_type_id);
		ItemHeight = serialized->get_int32(ItemHeight_type_id);
		IndexNumbers = serialized->get_bool(IndexNumbers_type_id);
		LabelType = serialized->get_enum<rivet::ddl::generated::x940d80bd>(LabelType_type_id, rivet::ddl::generated::x940d80bd_values);
		AutoFocus = serialized->get_bool(AutoFocus_type_id);
		ShowTitlebar = serialized->get_bool(ShowTitlebar_type_id);
		AllowResize = serialized->get_bool(AllowResize_type_id);
		AllowReposition = serialized->get_bool(AllowReposition_type_id); 
	}

	[[nodiscard]] auto
	OrderedListUIActionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	OrderedListUIActionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OrderedListUIActionPrius> {
		if (incoming_type_id == OrderedListUIActionPrius::type_id) {
			return std::make_shared<OrderedListUIActionPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
