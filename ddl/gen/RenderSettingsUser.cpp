// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/DDLVector2.hpp> 

#include <rivet/ddl/generated/RenderSettingsUser.hpp>

namespace rivet::ddl::generated {
	RenderSettingsUser::RenderSettingsUser([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		RenderEnable = serialized->get_bool(RenderEnable_type_id, true);
		PrintGPURes = serialized->get_bool(PrintGPURes_type_id, false);
		CombineProfileEntries = serialized->get_bool(CombineProfileEntries_type_id, false);
		SortProfileEntries = serialized->get_bool(SortProfileEntries_type_id, false);
		MotionBlurEnable = serialized->get_bool(MotionBlurEnable_type_id, true);
		TemporalAaEnable = serialized->get_bool(TemporalAaEnable_type_id, true);
		HdrEnableByDefault = serialized->get_bool(HdrEnableByDefault_type_id, true);
		AllowLcDebugAdjust = serialized->get_bool(AllowLcDebugAdjust_type_id, false);
		DegenerateOcclusionCameraCut = serialized->get_bool(DegenerateOcclusionCameraCut_type_id, true);
		BlendDefaultEnvProbeTextures = serialized->get_bool(BlendDefaultEnvProbeTextures_type_id, false);
		DoNotInitRedundantRenderTargets = serialized->get_bool(DoNotInitRedundantRenderTargets_type_id, true);
		MinGoboMaterialTextureSize = serialized->get_int32(MinGoboMaterialTextureSize_type_id, 128);
		MinGoboUntexturedSize = serialized->get_float(MinGoboUntexturedSize_type_id, 16.000000);
		ModelSubsetGpuRegistrySize = serialized->get_int32(ModelSubsetGpuRegistrySize_type_id, 49152);
		MaterialGpuRegistryUpdates = serialized->get_int32(MaterialGpuRegistryUpdates_type_id, 3072);
		MaterialGpuRegistrySize = serialized->get_int32(MaterialGpuRegistrySize_type_id, 8192);
		ImpostorDrawDistanceRuntimeEnvProbe = serialized->get_float(ImpostorDrawDistanceRuntimeEnvProbe_type_id, 70.000000);
		ImpostorDrawDistanceDefaultHFov = serialized->get_float(ImpostorDrawDistanceDefaultHFov_type_id, 65.000000);
		ImpostorHQBaseDistance = serialized->get_float(ImpostorHQBaseDistance_type_id, 600.000000);
		ImpostorDrawDistance = serialized->get_float(ImpostorDrawDistance_type_id, 145.000000);
		HibernateInstLongDrawDistance = serialized->get_float(HibernateInstLongDrawDistance_type_id, 5120.000000);
		HibernateInstLongDrawDistance60Hz = serialized->get_float(HibernateInstLongDrawDistance60Hz_type_id, 5120.000000);
		HibernateInstDrawDistance = serialized->get_float(HibernateInstDrawDistance_type_id, 1280.000000);
		HibernateInstDrawDistance60Hz = serialized->get_float(HibernateInstDrawDistance60Hz_type_id, 1280.000000);
		HibernateInstOffScrDrawDistance = serialized->get_float(HibernateInstOffScrDrawDistance_type_id, 300.000000);
		HibernateInstOffScrDrawDistance60Hz = serialized->get_float(HibernateInstOffScrDrawDistance60Hz_type_id, 300.000000);
		HibernateFXDrawDistance = serialized->get_float(HibernateFXDrawDistance_type_id, 256.000000);
		HibernateFXDrawDistance60Hz = serialized->get_float(HibernateFXDrawDistance60Hz_type_id, 256.000000);
		HibernateATestFadeDistance = serialized->get_float(HibernateATestFadeDistance_type_id, 512.000000);
		HibernateATestFadeDistance60Hz = serialized->get_float(HibernateATestFadeDistance60Hz_type_id, 512.000000);
		HibernateInstRadiusFactor = serialized->get_float(HibernateInstRadiusFactor_type_id, 80.000000);
		HibernateInstRadiusFactor60Hz = serialized->get_float(HibernateInstRadiusFactor60Hz_type_id, 80.000000);
		HibernateUIMinRadius = serialized->get_float(HibernateUIMinRadius_type_id, 8.000000);
		HibernateFXMaxCount = serialized->get_uint32(HibernateFXMaxCount_type_id, 3000);
		AmbientAnimationFadeDistance = serialized->get_float(AmbientAnimationFadeDistance_type_id, 128.000000);
		CsmUseModelsInFarLodCache = serialized->get_bool(CsmUseModelsInFarLodCache_type_id, true);
		CsmFarLodTransitionDist = serialized->get_float(CsmFarLodTransitionDist_type_id, 150.000000);
		RenderAllocPreCommitMB = serialized->get_int32(RenderAllocPreCommitMB_type_id, 4);
		RenderAllocGrowPercent = serialized->get_int32(RenderAllocGrowPercent_type_id, 25);
		ViewContextMax = serialized->get_int32(ViewContextMax_type_id, 1);
		PerViewRenderQueries = serialized->get_int32(PerViewRenderQueries_type_id, 1024);
		RenderQueryDeferredFreeCount = serialized->get_int32(RenderQueryDeferredFreeCount_type_id, 12);
		DeferredRenderQueries = serialized->get_bool(DeferredRenderQueries_type_id, false);
		PerfAdaptationFovHigh = serialized->get_float(PerfAdaptationFovHigh_type_id, 76.000000);
		PerfAdaptationFovVeryHigh = serialized->get_float(PerfAdaptationFovVeryHigh_type_id, 90.000000);
		PerfAdaptationFovExtreme = serialized->get_float(PerfAdaptationFovExtreme_type_id, 100.000000);
		PerfAdaptationRotationHigh = serialized->get_float(PerfAdaptationRotationHigh_type_id, 6.000000);
		PerfAdaptationRotationVeryHigh = serialized->get_float(PerfAdaptationRotationVeryHigh_type_id, 15.000000);
		PerfAdaptationRotationExtreme = serialized->get_float(PerfAdaptationRotationExtreme_type_id, 40.000000);
		PerfAdaptationMovementHigh = serialized->get_float(PerfAdaptationMovementHigh_type_id, 2.000000);
		PerfAdaptationMovementVeryHigh = serialized->get_float(PerfAdaptationMovementVeryHigh_type_id, 6.000000);
		PerfAdaptationMovementExtreme = serialized->get_float(PerfAdaptationMovementExtreme_type_id, 20.000000);
		PerfAdaptationHeightHigh = serialized->get_float(PerfAdaptationHeightHigh_type_id, 12.000000);
		PerfAdaptationHeightVeryHigh = serialized->get_float(PerfAdaptationHeightVeryHigh_type_id, 50.000000);
		PerfAdaptationHeightExtreme = serialized->get_float(PerfAdaptationHeightExtreme_type_id, 100.000000);
		VFXDisableCameraOrientation = serialized->get_bool(VFXDisableCameraOrientation_type_id, false);
		VFXTessellationCamStep = serialized->get_float(VFXTessellationCamStep_type_id, 16.000000);
		VFXLightingOverScan = serialized->get_float(VFXLightingOverScan_type_id, 0.050000);
		VFXLightingBlurSize = serialized->get_float(VFXLightingBlurSize_type_id, 1.500000);
		VFXTessellationAdd = serialized->get_float(VFXTessellationAdd_type_id, 0.100000);
		VFXStreamingFade = serialized->get_float(VFXStreamingFade_type_id, 1.000000);
		VFXWakeUpFade = serialized->get_float(VFXWakeUpFade_type_id, 1.000000);
		MaxVFXCustomStreams = serialized->get_int32(MaxVFXCustomStreams_type_id, 1536);
		MaxVFXVectorFields = serialized->get_int32(MaxVFXVectorFields_type_id, 128);
		MaxVFXGPUParticles = serialized->get_int32(MaxVFXGPUParticles_type_id, 32768);
		MaxVFXGPUEmitters = serialized->get_int32(MaxVFXGPUEmitters_type_id, 768);
		LightPlacedCasterMin = serialized->get_float(LightPlacedCasterMin_type_id, 1024.000000);
		LightPlacedCasterMax = serialized->get_float(LightPlacedCasterMax_type_id, 40960.000000);
		LightPlacedCasterDensitySmall = serialized->get_float(LightPlacedCasterDensitySmall_type_id, 4.000000);
		LightPlacedCasterDensityLarge = serialized->get_float(LightPlacedCasterDensityLarge_type_id, 2.000000);
		LightGridBleedReduction = serialized->get_float(LightGridBleedReduction_type_id, 0.300000);
		LightGridFadeTime = serialized->get_float(LightGridFadeTime_type_id, 0.500000);
		LightGridStagingSlotMax = serialized->get_int32(LightGridStagingSlotMax_type_id, 32);
		LightGridStreamSlotMax = serialized->get_int32(LightGridStreamSlotMax_type_id, 12);
		WaterFoamEmissiveScale = serialized->get_float(WaterFoamEmissiveScale_type_id, 8.000000);
		VolumetricFogLargeNoiseTiling = serialized->get_float(VolumetricFogLargeNoiseTiling_type_id, 0.125000);
		VolumetricFogLargeNoiseSpeed = serialized->get_float(VolumetricFogLargeNoiseSpeed_type_id, 0.500000);
		VolumetricFogSmallNoiseTiling = serialized->get_float(VolumetricFogSmallNoiseTiling_type_id, 1.500000);
		VolumetricFogSmallNoiseSpeed = serialized->get_float(VolumetricFogSmallNoiseSpeed_type_id, 1.000000);
		NeededDisplaySafeArea = serialized->get_float(NeededDisplaySafeArea_type_id, 0.000000);
		ExtraFlushesEnabled = serialized->get_bool(ExtraFlushesEnabled_type_id, true);
		WindowTitle = serialized->get_string(WindowTitle_type_id, "No window title has been set");
		UseStickyConfig = serialized->get_bool(UseStickyConfig_type_id, false);
		FullscreenArg = serialized->get_bool(FullscreenArg_type_id, false);
		BorderlessWindow = serialized->get_bool(BorderlessWindow_type_id, false);
		StartMaximized = serialized->get_bool(StartMaximized_type_id, false);
		AllowFullScreenModeSwitch = serialized->get_bool(AllowFullScreenModeSwitch_type_id, true);
		AspectRatioOverride = serialized->get_enum<rivet::ddl::generated::x30866c77>(AspectRatioOverride_type_id, rivet::ddl::generated::x30866c77_values, rivet::ddl::generated::x30866c77::None);
		EnableAspectBlur = serialized->get_bool(EnableAspectBlur_type_id, true);
		D3dDebug = serialized->get_bool(D3dDebug_type_id, false);
		EnableCommandRingReclamation = serialized->get_bool(EnableCommandRingReclamation_type_id, true);
		D3dPrintLabels = serialized->get_bool(D3dPrintLabels_type_id, false);
		DisableGPUProfilerCost = serialized->get_bool(DisableGPUProfilerCost_type_id, false);
		RequestDx11_1Device = serialized->get_bool(RequestDx11_1Device_type_id, true);
		TextureStreamingEnabled = serialized->get_bool(TextureStreamingEnabled_type_id, true);
		TextureStreamingLegacyMode = serialized->get_bool(TextureStreamingLegacyMode_type_id, false);
		Max2DCanvasSize = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(Max2DCanvasSize_type_id);
		CanvasDpiScalingFactor = serialized->get_float(CanvasDpiScalingFactor_type_id, 1.000000);
		UseCanvasDpiScalingFactor = serialized->get_bool(UseCanvasDpiScalingFactor_type_id, false);
		PauseMapAllowMats = serialized->get_bool(PauseMapAllowMats_type_id, false);
		SupportWaterBrushes = serialized->get_bool(SupportWaterBrushes_type_id, false);
		UI3DOccludesLensFlare = serialized->get_bool(UI3DOccludesLensFlare_type_id, false);
		EnableSubsurfaceBrdf = serialized->get_bool(EnableSubsurfaceBrdf_type_id, false);
		EnableAmbientShadows = serialized->get_bool(EnableAmbientShadows_type_id, true);
		RippleDisplacment = serialized->get_float(RippleDisplacment_type_id, 0.100000);
		RippleAmplitude = serialized->get_float(RippleAmplitude_type_id, 0.100000);
		RippleRate = serialized->get_float(RippleRate_type_id, 128.000000);
		ImpulseMaxCamera = serialized->get_float(ImpulseMaxCamera_type_id, 50.000000);
		ImpulseMaxRadius = serialized->get_float(ImpulseMaxRadius_type_id, 0.250000);
		ImpulseMinMove = serialized->get_float(ImpulseMinMove_type_id, 0.100000);
		BrushMinMove = serialized->get_float(BrushMinMove_type_id, 0.100000);
		EstTimeToRenderEnvProbeFaceCpu = serialized->get_float(EstTimeToRenderEnvProbeFaceCpu_type_id, 0.001250);
		EstTimeToRenderEnvProbeFaceGpu = serialized->get_float(EstTimeToRenderEnvProbeFaceGpu_type_id, 0.002500);
		ForceFieldsEdgeSize = serialized->get_float(ForceFieldsEdgeSize_type_id, 64.000000);
		VolumetricFogResolution = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(VolumetricFogResolution_type_id); 
	}

	[[nodiscard]] auto
	RenderSettingsUser::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RenderSettingsUser::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RenderSettingsUser> {
		if (incoming_type_id == RenderSettingsUser::type_id) {
			return std::make_shared<RenderSettingsUser>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
