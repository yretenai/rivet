// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct IndActorList;
	struct EventBase; 

	struct RIVET_DDL_SHARED EventEnablePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "EventEnablePrius";
		constexpr static rivet::rivet_type_id type_id = 0x9185920a;

		constexpr static std::string_view Event_type_name = "Event";
		constexpr static rivet::rivet_type_id Event_type_id = 0x22fdc666;
		constexpr static std::string_view IsSelfEvent_type_name = "IsSelfEvent";
		constexpr static rivet::rivet_type_id IsSelfEvent_type_id = 0xad9ebd15;
		constexpr static std::string_view EnableActorGroup_type_name = "EnableActorGroup";
		constexpr static rivet::rivet_type_id EnableActorGroup_type_id = 0x5ffbe5a4;
		constexpr static std::string_view DisableActorGroup_type_name = "DisableActorGroup";
		constexpr static rivet::rivet_type_id DisableActorGroup_type_id = 0x6d23cf00;
		constexpr static std::string_view ToggleActorGroup_type_name = "ToggleActorGroup";
		constexpr static rivet::rivet_type_id ToggleActorGroup_type_id = 0x4ba269e6;
		constexpr static std::string_view ActorList_type_name = "ActorList";
		constexpr static rivet::rivet_type_id ActorList_type_id = 0xd6a1cb3f; 

		explicit EventEnablePrius() = default;
		explicit EventEnablePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::EventBase> Event {};
		bool IsSelfEvent {};
		uint64_t EnableActorGroup {};
		uint64_t DisableActorGroup {};
		uint64_t ToggleActorGroup {};
		std::vector<std::shared_ptr<rivet::ddl::generated::IndActorList>> ActorList {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EventEnablePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
