// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/EnabledComponentBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HoverbootOmniBoostPadPrius : EnabledComponentBasePrius {
		constexpr static std::string_view type_name = "HoverbootOmniBoostPadPrius";
		constexpr static rivet::rivet_type_id type_id = 0x8af4ed2a;

		constexpr static std::string_view RotationJointName_type_name = "RotationJointName";
		constexpr static rivet::rivet_type_id RotationJointName_type_id = 0x640db3ed;
		constexpr static std::string_view DetectRangeMin_type_name = "DetectRangeMin";
		constexpr static rivet::rivet_type_id DetectRangeMin_type_id = 0xddbfbfc9;
		constexpr static std::string_view DetectRangeMaxSlow_type_name = "DetectRangeMaxSlow";
		constexpr static rivet::rivet_type_id DetectRangeMaxSlow_type_id = 0xe9fae50f;
		constexpr static std::string_view DetectRangeMaxFast_type_name = "DetectRangeMaxFast";
		constexpr static rivet::rivet_type_id DetectRangeMaxFast_type_id = 0xf99bdd16;
		constexpr static std::string_view DetectSlowSpeed_type_name = "DetectSlowSpeed";
		constexpr static rivet::rivet_type_id DetectSlowSpeed_type_id = 0x47ab25a2;
		constexpr static std::string_view DetectFastSpeed_type_name = "DetectFastSpeed";
		constexpr static rivet::rivet_type_id DetectFastSpeed_type_id = 0x1c13b359; 

		explicit HoverbootOmniBoostPadPrius() = default;
		explicit HoverbootOmniBoostPadPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view RotationJointName {};
		float DetectRangeMin {};
		float DetectRangeMaxSlow {};
		float DetectRangeMaxFast {};
		float DetectSlowSpeed {};
		float DetectFastSpeed {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HoverbootOmniBoostPadPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
