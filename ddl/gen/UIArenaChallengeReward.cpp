// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UIArenaChallengeRewardRaritanium.hpp>
#include <rivet/ddl/generated/UIArenaChallengeRewardVanity.hpp>
#include <rivet/ddl/generated/UIArenaChallengeRewardGeneric.hpp>
#include <rivet/ddl/generated/UIArenaChallengeRewardBolts.hpp>
#include <rivet/ddl/generated/UIArenaChallengeRewardGoldBolt.hpp> 

#include <rivet/ddl/generated/UIArenaChallengeReward.hpp>

namespace rivet::ddl::generated {
	UIArenaChallengeReward::UIArenaChallengeReward([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	UIArenaChallengeReward::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UIArenaChallengeReward::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIArenaChallengeReward> {
		if (incoming_type_id == UIArenaChallengeReward::type_id) {
			return std::make_shared<UIArenaChallengeReward>(serialized);
		}

		auto UIArenaChallengeRewardRaritanium_ptr = UIArenaChallengeRewardRaritanium::from_substruct(incoming_type_id, serialized);
		if (UIArenaChallengeRewardRaritanium_ptr != nullptr) {
			return UIArenaChallengeRewardRaritanium_ptr;
		}

		auto UIArenaChallengeRewardGeneric_ptr = UIArenaChallengeRewardGeneric::from_substruct(incoming_type_id, serialized);
		if (UIArenaChallengeRewardGeneric_ptr != nullptr) {
			return UIArenaChallengeRewardGeneric_ptr;
		}

		auto UIArenaChallengeRewardVanity_ptr = UIArenaChallengeRewardVanity::from_substruct(incoming_type_id, serialized);
		if (UIArenaChallengeRewardVanity_ptr != nullptr) {
			return UIArenaChallengeRewardVanity_ptr;
		}

		auto UIArenaChallengeRewardBolts_ptr = UIArenaChallengeRewardBolts::from_substruct(incoming_type_id, serialized);
		if (UIArenaChallengeRewardBolts_ptr != nullptr) {
			return UIArenaChallengeRewardBolts_ptr;
		}

		auto UIArenaChallengeRewardGoldBolt_ptr = UIArenaChallengeRewardGoldBolt::from_substruct(incoming_type_id, serialized);
		if (UIArenaChallengeRewardGoldBolt_ptr != nullptr) {
			return UIArenaChallengeRewardGoldBolt_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
