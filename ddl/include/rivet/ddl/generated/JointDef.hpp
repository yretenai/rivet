// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3;
	struct DDLQuaternion; 

	struct RIVET_DDL_SHARED JointDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "JointDef";
		constexpr static rivet::rivet_type_id type_id = 0x859a3c80;

		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view ParentName_type_name = "ParentName";
		constexpr static rivet::rivet_type_id ParentName_type_id = 0x53eff59e;
		constexpr static std::string_view ParentScaleCompensate_type_name = "ParentScaleCompensate";
		constexpr static rivet::rivet_type_id ParentScaleCompensate_type_id = 0x554ef07c;
		constexpr static std::string_view IsLocator_type_name = "IsLocator";
		constexpr static rivet::rivet_type_id IsLocator_type_id = 0x9e7cb2a3;
		constexpr static std::string_view Orientation_type_name = "Orientation";
		constexpr static rivet::rivet_type_id Orientation_type_id = 0xbb5c948d;
		constexpr static std::string_view Translation_type_name = "Translation";
		constexpr static rivet::rivet_type_id Translation_type_id = 0x39b514b4; 

		explicit JointDef() = default;
		explicit JointDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Name {};
		std::string_view ParentName {};
		bool ParentScaleCompensate {};
		bool IsLocator {};
		std::shared_ptr<rivet::ddl::generated::DDLQuaternion> Orientation {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> Translation {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<JointDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
