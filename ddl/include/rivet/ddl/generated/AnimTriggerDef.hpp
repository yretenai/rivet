// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/x3bec8d43.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimTriggerDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimTriggerDef";
		constexpr static rivet::rivet_type_id type_id = 0xe95d68b5;

		constexpr static std::string_view Flags_type_name = "Flags";
		constexpr static rivet::rivet_type_id Flags_type_id = 0x12568d7b;
		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view Time_type_name = "Time";
		constexpr static rivet::rivet_type_id Time_type_id = 0x5f0458f5;
		constexpr static std::string_view BroadcastFlag_type_name = "BroadcastFlag";
		constexpr static rivet::rivet_type_id BroadcastFlag_type_id = 0xc8964ba0;
		constexpr static std::string_view ActorName_type_name = "ActorName";
		constexpr static rivet::rivet_type_id ActorName_type_id = 0xcc4a4d21;
		constexpr static std::string_view LocatorName_type_name = "LocatorName";
		constexpr static rivet::rivet_type_id LocatorName_type_id = 0x5814524d;
		constexpr static std::string_view BroadcastRadius_type_name = "BroadcastRadius";
		constexpr static rivet::rivet_type_id BroadcastRadius_type_id = 0x89da1856; 

		explicit AnimTriggerDef() = default;
		explicit AnimTriggerDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x3bec8d43 Flags {};
		std::string_view Name {};
		float Time {};
		bool BroadcastFlag {};
		std::string_view ActorName {};
		std::string_view LocatorName {};
		float BroadcastRadius {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimTriggerDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
