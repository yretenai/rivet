// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HammerCrankPrius.hpp>

namespace rivet::ddl::generated {
	HammerCrankPrius::HammerCrankPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SaveUsedState = serialized->get_bool(SaveUsedState_type_id);
		HeroType = serialized->get_enum<rivet::ddl::generated::HeroTypes>(HeroType_type_id, rivet::ddl::generated::HeroTypes_values);
		Camera = serialized->get_uint64(Camera_type_id);
		CameraBlendInTime = serialized->get_float(CameraBlendInTime_type_id);
		CameraBlendOutTime = serialized->get_float(CameraBlendOutTime_type_id);
		ButtonDisplayRange = serialized->get_float(ButtonDisplayRange_type_id);
		CrankSpeedMultiplier = serialized->get_float(CrankSpeedMultiplier_type_id);
		UseCrankTimeOverride = serialized->get_bool(UseCrankTimeOverride_type_id);
		CrankTimeOverride = serialized->get_float(CrankTimeOverride_type_id); 
	}

	[[nodiscard]] auto
	HammerCrankPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HammerCrankPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HammerCrankPrius> {
		if (incoming_type_id == HammerCrankPrius::type_id) {
			return std::make_shared<HammerCrankPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
