// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BurstPistolProjectileFlyingStopEvent.hpp>
#include <rivet/ddl/generated/LightningRodProjectileFlyingStartEvent.hpp>
#include <rivet/ddl/generated/LightningRodProjectileFlyingStopEvent.hpp>
#include <rivet/ddl/generated/BurstPistolProjectileFlyingStartEvent.hpp> 

#include <rivet/ddl/generated/ProjectileFlyingStartEvent.hpp>

namespace rivet::ddl::generated {
	ProjectileFlyingStartEvent::ProjectileFlyingStartEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		WeaponTypeName = serialized->get_string(WeaponTypeName_type_id, {});
		PerkName = serialized->get_string(PerkName_type_id, {});
		ShowTracers = serialized->get_bool(ShowTracers_type_id, true);
		FirstShot = serialized->get_bool(FirstShot_type_id, false); 
	}

	[[nodiscard]] auto
	ProjectileFlyingStartEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ProjectileFlyingStartEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ProjectileFlyingStartEvent> {
		if (incoming_type_id == ProjectileFlyingStartEvent::type_id) {
			return std::make_shared<ProjectileFlyingStartEvent>(serialized);
		}

		auto BurstPistolProjectileFlyingStartEvent_ptr = BurstPistolProjectileFlyingStartEvent::from_substruct(incoming_type_id, serialized);
		if (BurstPistolProjectileFlyingStartEvent_ptr != nullptr) {
			return BurstPistolProjectileFlyingStartEvent_ptr;
		}

		auto LightningRodProjectileFlyingStopEvent_ptr = LightningRodProjectileFlyingStopEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodProjectileFlyingStopEvent_ptr != nullptr) {
			return LightningRodProjectileFlyingStopEvent_ptr;
		}

		auto LightningRodProjectileFlyingStartEvent_ptr = LightningRodProjectileFlyingStartEvent::from_substruct(incoming_type_id, serialized);
		if (LightningRodProjectileFlyingStartEvent_ptr != nullptr) {
			return LightningRodProjectileFlyingStartEvent_ptr;
		}

		auto BurstPistolProjectileFlyingStopEvent_ptr = BurstPistolProjectileFlyingStopEvent::from_substruct(incoming_type_id, serialized);
		if (BurstPistolProjectileFlyingStopEvent_ptr != nullptr) {
			return BurstPistolProjectileFlyingStopEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
