// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PerformanceAnimClipData.hpp>
#include <rivet/ddl/generated/PerformanceSelectionData.hpp> 

#include <rivet/ddl/generated/PerformanceSessionData.hpp>

namespace rivet::ddl::generated {
	PerformanceSessionData::PerformanceSessionData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SaveRequired = serialized->get_uint8(SaveRequired_type_id, 0);
		Looping = serialized->get_uint8(Looping_type_id, 0);
		Playing = serialized->get_uint8(Playing_type_id, 0);
		PerformanceClipId = serialized->get_uint32(PerformanceClipId_type_id, 0);
		BodyActorHandle = serialized->get_uint32(BodyActorHandle_type_id, 0);
		MuteAnimSet = serialized->get_string(MuteAnimSet_type_id, {});
		MuteAnimClip = serialized->get_string(MuteAnimClip_type_id, {});
		SoloExpressions = serialized->get_strings(SoloExpressions_type_id);
		MuteExpressions = serialized->get_strings(MuteExpressions_type_id);
		SoloBodyGestures = serialized->get_strings(SoloBodyGestures_type_id);
		MuteBodyGestures = serialized->get_strings(MuteBodyGestures_type_id);
		Time = serialized->get_float(Time_type_id, 0.000000);
		SelectionData = serialized->unwrap_into<rivet::ddl::generated::PerformanceSelectionData>(SelectionData_type_id);
		AnimClipData = serialized->unwrap_into_many<rivet::ddl::generated::PerformanceAnimClipData>(AnimClipData_type_id);
		AnimSets = serialized->get_strings(AnimSets_type_id);
		Selection = serialized->get_uint64s(Selection_type_id);
		MuteNameList = serialized->get_strings(MuteNameList_type_id);
		SoloNameList = serialized->get_strings(SoloNameList_type_id); 
	}

	[[nodiscard]] auto
	PerformanceSessionData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PerformanceSessionData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PerformanceSessionData> {
		if (incoming_type_id == PerformanceSessionData::type_id) {
			return std::make_shared<PerformanceSessionData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
