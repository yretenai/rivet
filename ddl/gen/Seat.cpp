// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Seat.hpp>

namespace rivet::ddl::generated {
	Seat::Seat([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		LocatorName = serialized->get_string(LocatorName_type_id);
		MountAnim = serialized->get_string(MountAnim_type_id);
		DismountAnim = serialized->get_string(DismountAnim_type_id);
		JumpAnim = serialized->get_string(JumpAnim_type_id);
		SeatedAnim = serialized->get_string(SeatedAnim_type_id);
		AdditiveAnim = serialized->get_string(AdditiveAnim_type_id);
		AddRidableAnimset = serialized->get_bool(AddRidableAnimset_type_id); 
	}

	[[nodiscard]] auto
	Seat::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Seat::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Seat> {
		if (incoming_type_id == Seat::type_id) {
			return std::make_shared<Seat>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
