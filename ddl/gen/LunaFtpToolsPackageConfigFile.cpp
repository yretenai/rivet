// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LunaFtpToolsPackageConfigFile.hpp>

namespace rivet::ddl::generated {
	LunaFtpToolsPackageConfigFile::LunaFtpToolsPackageConfigFile([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PackageName = serialized->get_string(PackageName_type_id, "");
		ProjectId = serialized->get_string(ProjectId_type_id, "");
		Branch = serialized->get_string(Branch_type_id, "");
		VersionMajor = serialized->get_int32(VersionMajor_type_id, 0u);
		VersionMinor = serialized->get_int32(VersionMinor_type_id, 0u);
		VersionPatch = serialized->get_int32(VersionPatch_type_id, 0u);
		BetaId = serialized->get_int32(BetaId_type_id, -1);
		Released = serialized->get_bool(Released_type_id, false);
		PreReleasePackage = serialized->get_string(PreReleasePackage_type_id, "");
		CreatedBy = serialized->get_string(CreatedBy_type_id, "");
		CreationDate = serialized->get_string(CreationDate_type_id, "");
		BuildType = serialized->get_string(BuildType_type_id, "");
		ToolUiType = serialized->get_string(ToolUiType_type_id, "");
		SyncedToCL = serialized->get_string(SyncedToCL_type_id, "");
		CompatibleUpdaterVersion = serialized->get_string(CompatibleUpdaterVersion_type_id, "");
		CompatibleHavokVersion = serialized->get_string(CompatibleHavokVersion_type_id, "");
		CompatibleWinExtVersion = serialized->get_string(CompatibleWinExtVersion_type_id, "");
		CompatibleMaya2018Version = serialized->get_string(CompatibleMaya2018Version_type_id, "");
		CompatibleMaya2020Version = serialized->get_string(CompatibleMaya2020Version_type_id, "");
		PythonDir = serialized->get_string(PythonDir_type_id, ""); 
	}

	[[nodiscard]] auto
	LunaFtpToolsPackageConfigFile::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LunaFtpToolsPackageConfigFile::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LunaFtpToolsPackageConfigFile> {
		if (incoming_type_id == LunaFtpToolsPackageConfigFile::type_id) {
			return std::make_shared<LunaFtpToolsPackageConfigFile>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
