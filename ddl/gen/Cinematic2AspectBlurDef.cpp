// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2AspectBlurDef.hpp>

namespace rivet::ddl::generated {
	Cinematic2AspectBlurDef::Cinematic2AspectBlurDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Visible = serialized->get_float(Visible_type_id, -1.000000f);
		Start = serialized->get_float(Start_type_id, -1.000000f);
		End = serialized->get_float(End_type_id, -1.000000f);
		Radius = serialized->get_float(Radius_type_id, -1.000000f);
		Mode = serialized->get_enum<rivet::ddl::generated::x955c23c>(Mode_type_id, rivet::ddl::generated::x955c23c_values, rivet::ddl::generated::x955c23c::Default);
		Immediate = serialized->get_bool(Immediate_type_id, false); 
	}

	[[nodiscard]] auto
	Cinematic2AspectBlurDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2AspectBlurDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2AspectBlurDef> {
		if (incoming_type_id == Cinematic2AspectBlurDef::type_id) {
			return std::make_shared<Cinematic2AspectBlurDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
