// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MeleeModelSwapData.hpp>

namespace rivet::ddl::generated {
	MeleeModelSwapData::MeleeModelSwapData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ModelLabel = serialized->get_string(ModelLabel_type_id);
		Pack = serialized->get_enum<rivet::ddl::generated::x84053194>(Pack_type_id, rivet::ddl::generated::x84053194_values);
		Model = serialized->get_string(Model_type_id);
		AudioSwitchValue = serialized->get_string(AudioSwitchValue_type_id);
		SpecificHero = serialized->get_enum<rivet::ddl::generated::HeroTypes>(SpecificHero_type_id, rivet::ddl::generated::HeroTypes_values); 
	}

	auto
	MeleeModelSwapData::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	MeleeModelSwapData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MeleeModelSwapData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MeleeModelSwapData> {
		if (incoming_type_id == MeleeModelSwapData::type_id) {
			return std::make_shared<MeleeModelSwapData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
