// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotMovementFly.hpp>
#include <rivet/ddl/generated/BotMovementFullControl.hpp>
#include <rivet/ddl/generated/BotMovementHexapod.hpp>
#include <rivet/ddl/generated/BotMovementSteerable.hpp> 

#include <rivet/ddl/generated/BotMovementBase.hpp>

namespace rivet::ddl::generated {
	BotMovementBase::BotMovementBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MoveSpeed = serialized->get_float(MoveSpeed_type_id);
		MoveAnimName = serialized->get_string(MoveAnimName_type_id);
		MoverTurnSpeed = serialized->get_float(MoverTurnSpeed_type_id);
		TurnRate = serialized->get_float(TurnRate_type_id);
		TurnGain = serialized->get_float(TurnGain_type_id);
		TurnDamp = serialized->get_float(TurnDamp_type_id);
		UseDefaultAnimRate = serialized->get_bool(UseDefaultAnimRate_type_id);
		IsLevelWithGround = serialized->get_bool(IsLevelWithGround_type_id);
		LevelWithGroundRotSpeed = serialized->get_float(LevelWithGroundRotSpeed_type_id);
		MaxHeightForGroundContact = serialized->get_float(MaxHeightForGroundContact_type_id);
		UseHeroStateFallDeath = serialized->get_bool(UseHeroStateFallDeath_type_id);
		HeroFallDeathCustomAnim = serialized->get_string(HeroFallDeathCustomAnim_type_id);
		DeathAnim = serialized->get_string(DeathAnim_type_id);
		AnimatedDismountAnim = serialized->get_string(AnimatedDismountAnim_type_id);
		UseStrafeMove = serialized->get_bool(UseStrafeMove_type_id); 
	}

	[[nodiscard]] auto
	BotMovementBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotMovementBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotMovementBase> {
		if (incoming_type_id == BotMovementBase::type_id) {
			return std::make_shared<BotMovementBase>(serialized);
		}

		auto BotMovementSteerable_ptr = BotMovementSteerable::from_substruct(incoming_type_id, serialized);
		if (BotMovementSteerable_ptr != nullptr) {
			return BotMovementSteerable_ptr;
		}

		auto BotMovementFullControl_ptr = BotMovementFullControl::from_substruct(incoming_type_id, serialized);
		if (BotMovementFullControl_ptr != nullptr) {
			return BotMovementFullControl_ptr;
		}

		auto BotMovementFly_ptr = BotMovementFly::from_substruct(incoming_type_id, serialized);
		if (BotMovementFly_ptr != nullptr) {
			return BotMovementFly_ptr;
		}

		auto BotMovementHexapod_ptr = BotMovementHexapod::from_substruct(incoming_type_id, serialized);
		if (BotMovementHexapod_ptr != nullptr) {
			return BotMovementHexapod_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
