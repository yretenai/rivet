// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED TranslucentShadowDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "TranslucentShadowDef";
		constexpr static rivet::rivet_type_id type_id = 0x2e14c23d;

		constexpr static std::string_view GoboAsset_type_name = "GoboAsset";
		constexpr static rivet::rivet_type_id GoboAsset_type_id = 0xb5fab7de;
		constexpr static std::string_view RampInDistance_type_name = "RampInDistance";
		constexpr static rivet::rivet_type_id RampInDistance_type_id = 0x659092a7;
		constexpr static std::string_view FadeOutDistance_type_name = "FadeOutDistance";
		constexpr static rivet::rivet_type_id FadeOutDistance_type_id = 0xa3cc9166;
		constexpr static std::string_view OrientToLight_type_name = "OrientToLight";
		constexpr static rivet::rivet_type_id OrientToLight_type_id = 0x33d2e207; 

		explicit TranslucentShadowDef() = default;
		explicit TranslucentShadowDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view GoboAsset {};
		float RampInDistance {};
		float FadeOutDistance {};
		bool OrientToLight {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TranslucentShadowDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
