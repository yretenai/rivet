// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED OrbitCamData : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "OrbitCamData";
		constexpr const static rivet::rivet_type_id type_id = 0xb27719da;

		constexpr const static std::string_view TetherDistance_type_name = "TetherDistance";
		constexpr const static rivet::rivet_type_id TetherDistance_type_id = 0xc7fa135f;
		constexpr const static std::string_view MinDistance_type_name = "MinDistance";
		constexpr const static rivet::rivet_type_id MinDistance_type_id = 0x448e693a;
		constexpr const static std::string_view ZoomSpeed_type_name = "ZoomSpeed";
		constexpr const static rivet::rivet_type_id ZoomSpeed_type_id = 0xc9e37699;
		constexpr const static std::string_view ZoomAccel_type_name = "ZoomAccel";
		constexpr const static rivet::rivet_type_id ZoomAccel_type_id = 0x9b39be8a;
		constexpr const static std::string_view ZoomDecel_type_name = "ZoomDecel";
		constexpr const static rivet::rivet_type_id ZoomDecel_type_id = 0x76b26e26;
		constexpr const static std::string_view StickConfig_type_name = "StickConfig";
		constexpr const static rivet::rivet_type_id StickConfig_type_id = 0x3bc8f276; 

		explicit OrbitCamData() = default;
		explicit OrbitCamData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float TetherDistance {};
		float MinDistance {};
		float ZoomSpeed {};
		float ZoomAccel {};
		float ZoomDecel {};
		std::string_view StickConfig {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OrbitCamData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
