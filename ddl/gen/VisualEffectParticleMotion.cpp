// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VisualEffectPhysicsParam.hpp>
#include <rivet/ddl/generated/SpeedLifeTimeModifier.hpp>
#include <rivet/ddl/generated/VisualEffectExternalForces.hpp>
#include <rivet/ddl/generated/VisualEffectAccelerationKeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectTurbulenceKeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectVelocityKeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectFloatKeyFrames.hpp> 

#include <rivet/ddl/generated/VisualEffectParticleMotion.hpp>

namespace rivet::ddl::generated {
	VisualEffectParticleMotion::VisualEffectParticleMotion([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FloatKeyFrames_ParticleParentInfluence = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloatKeyFrames>(FloatKeyFrames_ParticleParentInfluence_type_id);
		FloatKeyFrames_EmissionSpawnSpeed = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloatKeyFrames>(FloatKeyFrames_EmissionSpawnSpeed_type_id);
		Float3KeyFrames_ParticleVelocity = serialized->unwrap_into<rivet::ddl::generated::VisualEffectVelocityKeyFrames>(Float3KeyFrames_ParticleVelocity_type_id);
		Float3KeyFrames_ParticleTurbulence = serialized->unwrap_into<rivet::ddl::generated::VisualEffectTurbulenceKeyFrames>(Float3KeyFrames_ParticleTurbulence_type_id);
		FloatKeyFrames_ParticleAcceleration = serialized->unwrap_into<rivet::ddl::generated::VisualEffectAccelerationKeyFrames>(FloatKeyFrames_ParticleAcceleration_type_id);
		ExternalForces = serialized->unwrap_into<rivet::ddl::generated::VisualEffectExternalForces>(ExternalForces_type_id);
		SpeedLifeTimeModifier = serialized->unwrap_into<rivet::ddl::generated::SpeedLifeTimeModifier>(SpeedLifeTimeModifier_type_id);
		InputPort_PhysicsParam = serialized->unwrap_into<rivet::ddl::generated::VisualEffectPhysicsParam>(InputPort_PhysicsParam_type_id);
		GlobalForceFields = serialized->get_bool(GlobalForceFields_type_id); 
	}

	[[nodiscard]] auto
	VisualEffectParticleMotion::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VisualEffectParticleMotion::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectParticleMotion> {
		if (incoming_type_id == VisualEffectParticleMotion::type_id) {
			return std::make_shared<VisualEffectParticleMotion>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
