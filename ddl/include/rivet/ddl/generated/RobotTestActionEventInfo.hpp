// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x32784e2f.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED RobotTestActionEventInfo : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "RobotTestActionEventInfo";
		constexpr static rivet::rivet_type_id type_id = 0x59e4874;

		constexpr static std::string_view UniqueId_type_name = "UniqueId";
		constexpr static rivet::rivet_type_id UniqueId_type_id = 0x32ca55d0;
		constexpr static std::string_view ShotPlayCount_type_name = "ShotPlayCount";
		constexpr static rivet::rivet_type_id ShotPlayCount_type_id = 0x53239a16;
		constexpr static std::string_view EventType_type_name = "EventType";
		constexpr static rivet::rivet_type_id EventType_type_id = 0xf2b5bb32;
		constexpr static std::string_view ActorName_type_name = "ActorName";
		constexpr static rivet::rivet_type_id ActorName_type_id = 0xcc4a4d21;
		constexpr static std::string_view ActionType_type_name = "ActionType";
		constexpr static rivet::rivet_type_id ActionType_type_id = 0x874b2194;
		constexpr static std::string_view DurationType_type_name = "DurationType";
		constexpr static rivet::rivet_type_id DurationType_type_id = 0x41e2529f;
		constexpr static std::string_view TypeDetailInfo_type_name = "TypeDetailInfo";
		constexpr static rivet::rivet_type_id TypeDetailInfo_type_id = 0xf530477e; 

		explicit RobotTestActionEventInfo() = default;
		explicit RobotTestActionEventInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t UniqueId {};
		uint32_t ShotPlayCount {};
		rivet::ddl::generated::x32784e2f EventType {};
		std::string_view ActorName {};
		std::string_view ActionType {};
		std::string_view DurationType {};
		std::string_view TypeDetailInfo {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RobotTestActionEventInfo>;
	};
} // namespace rivet::ddl::generated

// clang-format on
