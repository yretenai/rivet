// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PlayerHUDFollowerPrius.hpp>

namespace rivet::ddl::generated {
	PlayerHUDFollowerPrius::PlayerHUDFollowerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Distance = serialized->get_float(Distance_type_id);
		ZScale = serialized->get_float(ZScale_type_id);
		ModelHeight = serialized->get_float(ModelHeight_type_id);
		XRotationDistance = serialized->get_float(XRotationDistance_type_id);
		YRotationDistance = serialized->get_float(YRotationDistance_type_id);
		TweenSpeed = serialized->get_float(TweenSpeed_type_id);
		LevelUpLerpTime = serialized->get_float(LevelUpLerpTime_type_id); 
	}

	[[nodiscard]] auto
	PlayerHUDFollowerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PlayerHUDFollowerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PlayerHUDFollowerPrius> {
		if (incoming_type_id == PlayerHUDFollowerPrius::type_id) {
			return std::make_shared<PlayerHUDFollowerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
