// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/BotComboGroundPoundShockwave.hpp> 

#include <rivet/ddl/generated/BotComboShockwave.hpp>

namespace rivet::ddl::generated {
	BotComboShockwave::BotComboShockwave([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotComboMoveMelee(serialized) {
		SourceOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(SourceOffset_type_id);
		Radius = serialized->get_float(Radius_type_id);
		Thickness = serialized->get_float(Thickness_type_id);
		Height = serialized->get_float(Height_type_id);
		Duration = serialized->get_float(Duration_type_id);
		GrowDuration = serialized->get_float(GrowDuration_type_id);
		Damage = serialized->get_float(Damage_type_id);
		DamageType = serialized->get_enum<rivet::ddl::generated::x8d7e44cf>(DamageType_type_id, rivet::ddl::generated::x8d7e44cf_values);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values);
		DamageFriends = serialized->get_uint8(DamageFriends_type_id);
		StatusAmount = serialized->get_float(StatusAmount_type_id);
		KnockbackForce = serialized->get_float(KnockbackForce_type_id); 
	}

	[[nodiscard]] auto
	BotComboShockwave::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotComboShockwave::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboShockwave> {
		if (incoming_type_id == BotComboShockwave::type_id) {
			return std::make_shared<BotComboShockwave>(serialized);
		}

		auto BotComboGroundPoundShockwave_ptr = BotComboGroundPoundShockwave::from_substruct(incoming_type_id, serialized);
		if (BotComboGroundPoundShockwave_ptr != nullptr) {
			return BotComboGroundPoundShockwave_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
