// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SceneNode.hpp>
#include <rivet/ddl/generated/VaultMetaData.hpp> 

#include <rivet/ddl/generated/PolylineDef.hpp>

namespace rivet::ddl::generated {
	PolylineDef::PolylineDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VaultMetaData = serialized->unwrap_into<rivet::ddl::generated::VaultMetaData>(VaultMetaData_type_id);
		IconPath = serialized->get_string(IconPath_type_id, "");
		Points = serialized->unwrap_into_many<rivet::ddl::generated::SceneNode>(Points_type_id);
		PolylineType = serialized->get_enum<rivet::ddl::generated::PolylineType>(PolylineType_type_id, rivet::ddl::generated::PolylineType_values, rivet::ddl::generated::PolylineType::Closed_Planar);
		Height = serialized->get_float(Height_type_id, 4.000000); 
	}

	[[nodiscard]] auto
	PolylineDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PolylineDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PolylineDef> {
		if (incoming_type_id == PolylineDef::type_id) {
			return std::make_shared<PolylineDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
