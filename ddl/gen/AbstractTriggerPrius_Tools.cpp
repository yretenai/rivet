// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DuringObjectivesTriggerPrius_Tools.hpp>
#include <rivet/ddl/generated/ObjectiveStatesTriggerPrius_Tools.hpp>
#include <rivet/ddl/generated/MissionObjectiveCompleteTriggerPrius_Tools.hpp>
#include <rivet/ddl/generated/DuringMissionObjectivesTriggerPrius_Tools.hpp>
#include <rivet/ddl/generated/MissionStatesTriggerPrius_Tools.hpp>
#include <rivet/ddl/generated/MissionStateTriggerPrius_Tools.hpp> 

#include <rivet/ddl/generated/AbstractTriggerPrius_Tools.hpp>

namespace rivet::ddl::generated {
	AbstractTriggerPrius_Tools::AbstractTriggerPrius_Tools([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	AbstractTriggerPrius_Tools::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AbstractTriggerPrius_Tools::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AbstractTriggerPrius_Tools> {
		if (incoming_type_id == AbstractTriggerPrius_Tools::type_id) {
			return std::make_shared<AbstractTriggerPrius_Tools>(serialized);
		}

		auto MissionStateTriggerPrius_Tools_ptr = MissionStateTriggerPrius_Tools::from_substruct(incoming_type_id, serialized);
		if (MissionStateTriggerPrius_Tools_ptr != nullptr) {
			return MissionStateTriggerPrius_Tools_ptr;
		}

		auto MissionStatesTriggerPrius_Tools_ptr = MissionStatesTriggerPrius_Tools::from_substruct(incoming_type_id, serialized);
		if (MissionStatesTriggerPrius_Tools_ptr != nullptr) {
			return MissionStatesTriggerPrius_Tools_ptr;
		}

		auto DuringMissionObjectivesTriggerPrius_Tools_ptr = DuringMissionObjectivesTriggerPrius_Tools::from_substruct(incoming_type_id, serialized);
		if (DuringMissionObjectivesTriggerPrius_Tools_ptr != nullptr) {
			return DuringMissionObjectivesTriggerPrius_Tools_ptr;
		}

		auto MissionObjectiveCompleteTriggerPrius_Tools_ptr = MissionObjectiveCompleteTriggerPrius_Tools::from_substruct(incoming_type_id, serialized);
		if (MissionObjectiveCompleteTriggerPrius_Tools_ptr != nullptr) {
			return MissionObjectiveCompleteTriggerPrius_Tools_ptr;
		}

		auto ObjectiveStatesTriggerPrius_Tools_ptr = ObjectiveStatesTriggerPrius_Tools::from_substruct(incoming_type_id, serialized);
		if (ObjectiveStatesTriggerPrius_Tools_ptr != nullptr) {
			return ObjectiveStatesTriggerPrius_Tools_ptr;
		}

		auto DuringObjectivesTriggerPrius_Tools_ptr = DuringObjectivesTriggerPrius_Tools::from_substruct(incoming_type_id, serialized);
		if (DuringObjectivesTriggerPrius_Tools_ptr != nullptr) {
			return DuringObjectivesTriggerPrius_Tools_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
