// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BreakableExplosiveCratePrius.hpp>
#include <rivet/ddl/generated/SpawnableChunk.hpp> 

#include <rivet/ddl/generated/BreakableComponentPrius.hpp>

namespace rivet::ddl::generated {
	BreakableComponentPrius::BreakableComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BreakableBasePrius(serialized) {
		BrokenModel = serialized->get_string(BrokenModel_type_id);
		BrokenAnimSet = serialized->get_string(BrokenAnimSet_type_id);
		BrokenNoncollidingChunkModels = serialized->unwrap_into_many<rivet::ddl::generated::SpawnableChunk>(BrokenNoncollidingChunkModels_type_id);
		BrokenChunkModels = serialized->get_strings(BrokenChunkModels_type_id);
		BrokenDebrisModels = serialized->get_strings(BrokenDebrisModels_type_id);
		DestroyedModel = serialized->get_string(DestroyedModel_type_id);
		DestroyedAnimSet = serialized->get_string(DestroyedAnimSet_type_id);
		DestroyedNoncollidingChunkModels = serialized->unwrap_into_many<rivet::ddl::generated::SpawnableChunk>(DestroyedNoncollidingChunkModels_type_id);
		DestroyedChunkModels = serialized->get_strings(DestroyedChunkModels_type_id);
		DestroyedDebrisModels = serialized->get_strings(DestroyedDebrisModels_type_id);
		DestroyedChunkConduit = serialized->get_string(DestroyedChunkConduit_type_id); 
	}

	[[nodiscard]] auto
	BreakableComponentPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BreakableComponentPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BreakableComponentPrius> {
		if (incoming_type_id == BreakableComponentPrius::type_id) {
			return std::make_shared<BreakableComponentPrius>(serialized);
		}

		auto BreakableExplosiveCratePrius_ptr = BreakableExplosiveCratePrius::from_substruct(incoming_type_id, serialized);
		if (BreakableExplosiveCratePrius_ptr != nullptr) {
			return BreakableExplosiveCratePrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
