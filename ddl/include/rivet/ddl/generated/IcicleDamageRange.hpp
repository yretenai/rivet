// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/KnockbackLevels.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED IcicleDamageRange : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "IcicleDamageRange";
		constexpr const static rivet::rivet_type_id type_id = 0x9cf1339;

		constexpr const static std::string_view IsFirst_type_name = "IsFirst";
		constexpr const static rivet::rivet_type_id IsFirst_type_id = 0x9a8cfc51;
		constexpr const static std::string_view StartRangePercent_type_name = "StartRangePercent";
		constexpr const static rivet::rivet_type_id StartRangePercent_type_id = 0x2b62dc22;
		constexpr const static std::string_view DamagePercent_type_name = "DamagePercent";
		constexpr const static rivet::rivet_type_id DamagePercent_type_id = 0x7bbba4a0;
		constexpr const static std::string_view StatusPercent_type_name = "StatusPercent";
		constexpr const static rivet::rivet_type_id StatusPercent_type_id = 0xd50b14fe;
		constexpr const static std::string_view KnockbackLevel_type_name = "KnockbackLevel";
		constexpr const static rivet::rivet_type_id KnockbackLevel_type_id = 0x2554a262;
		constexpr const static std::string_view KnockbackAmount_type_name = "KnockbackAmount";
		constexpr const static rivet::rivet_type_id KnockbackAmount_type_id = 0x7b1e600b; 

		explicit IcicleDamageRange() = default;
		explicit IcicleDamageRange([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool IsFirst {};
		float StartRangePercent {};
		float DamagePercent {};
		float StatusPercent {};
		rivet::ddl::generated::KnockbackLevels KnockbackLevel {};
		float KnockbackAmount {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<IcicleDamageRange>;
	};
} // namespace rivet::ddl::generated

// clang-format on
