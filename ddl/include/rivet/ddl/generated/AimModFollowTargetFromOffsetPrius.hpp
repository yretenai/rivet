// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/AimModifierPrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AimModFollowTargetFromOffsetPrius : AimModifierPrius {
		constexpr static std::string_view type_name = "AimModFollowTargetFromOffsetPrius";
		constexpr static rivet::rivet_type_id type_id = 0x3733a271;

		constexpr static std::string_view StartOffsetMinX_type_name = "StartOffsetMinX";
		constexpr static rivet::rivet_type_id StartOffsetMinX_type_id = 0xa2492ef;
		constexpr static std::string_view StartOffsetMaxX_type_name = "StartOffsetMaxX";
		constexpr static rivet::rivet_type_id StartOffsetMaxX_type_id = 0x18af7680;
		constexpr static std::string_view StartOffsetMinY_type_name = "StartOffsetMinY";
		constexpr static rivet::rivet_type_id StartOffsetMinY_type_id = 0x7d23a279;
		constexpr static std::string_view StartOffsetMaxY_type_name = "StartOffsetMaxY";
		constexpr static rivet::rivet_type_id StartOffsetMaxY_type_id = 0x6fa84616;
		constexpr static std::string_view StartOffsetMinZ_type_name = "StartOffsetMinZ";
		constexpr static rivet::rivet_type_id StartOffsetMinZ_type_id = 0xe42af3c3;
		constexpr static std::string_view StartOffsetMaxZ_type_name = "StartOffsetMaxZ";
		constexpr static rivet::rivet_type_id StartOffsetMaxZ_type_id = 0xf6a117ac;
		constexpr static std::string_view StartingFollowSpeed_type_name = "StartingFollowSpeed";
		constexpr static rivet::rivet_type_id StartingFollowSpeed_type_id = 0xbec2a89e;
		constexpr static std::string_view MaxFollowSpeed_type_name = "MaxFollowSpeed";
		constexpr static rivet::rivet_type_id MaxFollowSpeed_type_id = 0x9f9ef4f;
		constexpr static std::string_view FollowAccel_type_name = "FollowAccel";
		constexpr static rivet::rivet_type_id FollowAccel_type_id = 0x7203cb7c;
		constexpr static std::string_view FollowDecel_type_name = "FollowDecel";
		constexpr static rivet::rivet_type_id FollowDecel_type_id = 0x9f881bd0;
		constexpr static std::string_view MovingTargetFollowOffset_type_name = "MovingTargetFollowOffset";
		constexpr static rivet::rivet_type_id MovingTargetFollowOffset_type_id = 0xadfeb358;
		constexpr static std::string_view ClampToFrontOfShooter_type_name = "ClampToFrontOfShooter";
		constexpr static rivet::rivet_type_id ClampToFrontOfShooter_type_id = 0x523adf77;
		constexpr static std::string_view ClampFrontOffset_type_name = "ClampFrontOffset";
		constexpr static rivet::rivet_type_id ClampFrontOffset_type_id = 0xbb0fd0e4; 

		explicit AimModFollowTargetFromOffsetPrius() = default;
		explicit AimModFollowTargetFromOffsetPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float StartOffsetMinX {};
		float StartOffsetMaxX {};
		float StartOffsetMinY {};
		float StartOffsetMaxY {};
		float StartOffsetMinZ {};
		float StartOffsetMaxZ {};
		float StartingFollowSpeed {};
		float MaxFollowSpeed {};
		float FollowAccel {};
		float FollowDecel {};
		float MovingTargetFollowOffset {};
		bool ClampToFrontOfShooter {};
		float ClampFrontOffset {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimModFollowTargetFromOffsetPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
