// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimModWrapper.hpp> 

#include <rivet/ddl/generated/LaserShotTypeShootToTarget.hpp>

namespace rivet::ddl::generated {
	LaserShotTypeShootToTarget::LaserShotTypeShootToTarget([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotComboLaserShotType(serialized) {
		LaserTargetingTime = serialized->get_float(LaserTargetingTime_type_id, 1.000000);
		LaserWarningTime = serialized->get_float(LaserWarningTime_type_id, 0.500000);
		LaserShootTime = serialized->get_float(LaserShootTime_type_id, 2.000000);
		StopOnDamage = serialized->get_bool(StopOnDamage_type_id, false);
		FaceTowardsAimPos = serialized->get_bool(FaceTowardsAimPos_type_id, false);
		UseAimingComponent = serialized->get_bool(UseAimingComponent_type_id, false);
		StartAimModOnTargeting = serialized->get_bool(StartAimModOnTargeting_type_id, false);
		EndAimModsOnShootEnd = serialized->get_bool(EndAimModsOnShootEnd_type_id, false);
		LockAimWhileFiring = serialized->get_bool(LockAimWhileFiring_type_id, false);
		MimicShotRate = serialized->get_float(MimicShotRate_type_id, 0.250000);
		AimMods = serialized->unwrap_into_many<rivet::ddl::generated::AimModWrapper>(AimMods_type_id); 
	}

	[[nodiscard]] auto
	LaserShotTypeShootToTarget::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LaserShotTypeShootToTarget::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LaserShotTypeShootToTarget> {
		if (incoming_type_id == LaserShotTypeShootToTarget::type_id) {
			return std::make_shared<LaserShotTypeShootToTarget>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
