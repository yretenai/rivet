// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x6f69eca.hpp>
#include <rivet/ddl/generated/ShotBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct ShotDamageData; 

	struct RIVET_DDL_SHARED BotLaserShotPrius : ShotBasePrius {
		constexpr static std::string_view type_name = "BotLaserShotPrius";
		constexpr static rivet::rivet_type_id type_id = 0xa4a3503c;

		constexpr static std::string_view DamageData_type_name = "DamageData";
		constexpr static rivet::rivet_type_id DamageData_type_id = 0xa521b107;
		constexpr static std::string_view AudioFollowerType_type_name = "AudioFollowerType";
		constexpr static rivet::rivet_type_id AudioFollowerType_type_id = 0x8987c9e4;
		constexpr static std::string_view AudioFollowerJoint_type_name = "AudioFollowerJoint";
		constexpr static rivet::rivet_type_id AudioFollowerJoint_type_id = 0xaa277419;
		constexpr static std::string_view ImpactJoint_type_name = "ImpactJoint";
		constexpr static rivet::rivet_type_id ImpactJoint_type_id = 0xb5c2190b; 

		explicit BotLaserShotPrius() = default;
		explicit BotLaserShotPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::ShotDamageData> DamageData {};
		rivet::ddl::generated::x6f69eca AudioFollowerType {};
		std::string_view AudioFollowerJoint {};
		std::string_view ImpactJoint {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotLaserShotPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
