// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct WwiseSoundEvent; 

	struct RIVET_DDL_SHARED SoundEmitterComponentPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SoundEmitterComponentPrius";
		constexpr static rivet::rivet_type_id type_id = 0x23a6dc3a;

		constexpr static std::string_view WwiseEvent_type_name = "WwiseEvent";
		constexpr static rivet::rivet_type_id WwiseEvent_type_id = 0xcebb3bc3;
		constexpr static std::string_view PlayOnLoad_type_name = "PlayOnLoad";
		constexpr static rivet::rivet_type_id PlayOnLoad_type_id = 0x6d6f1110;
		constexpr static std::string_view FadeOnDestroy_type_name = "FadeOnDestroy";
		constexpr static rivet::rivet_type_id FadeOnDestroy_type_id = 0x10feb5bb;
		constexpr static std::string_view FadeTime_type_name = "FadeTime";
		constexpr static rivet::rivet_type_id FadeTime_type_id = 0x8833d162; 

		explicit SoundEmitterComponentPrius() = default;
		explicit SoundEmitterComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::WwiseSoundEvent> WwiseEvent {};
		bool PlayOnLoad {};
		bool FadeOnDestroy {};
		float FadeTime {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundEmitterComponentPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
