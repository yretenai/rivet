// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RenderFlags.hpp>

namespace rivet::ddl::generated {
	RenderFlags::RenderFlags([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Hibernate = serialized->get_bool(Hibernate_type_id, false);
		SkipDecals = serialized->get_bool(SkipDecals_type_id, false);
		SkipStaticDecals = serialized->get_bool(SkipStaticDecals_type_id, false);
		SkipEnvProbe = serialized->get_bool(SkipEnvProbe_type_id, false);
		OnlyLightCapture = serialized->get_bool(OnlyLightCapture_type_id, false);
		NoEmbeddedSamples = serialized->get_bool(NoEmbeddedSamples_type_id, false);
		SkipImpostor = serialized->get_bool(SkipImpostor_type_id, false);
		SkipShadowCast = serialized->get_bool(SkipShadowCast_type_id, false);
		IgnoreDepth = serialized->get_bool(IgnoreDepth_type_id, false);
		ReverseIndoorStatus = serialized->get_bool(ReverseIndoorStatus_type_id, false);
		NeverOcclude = serialized->get_bool(NeverOcclude_type_id, false);
		RenderAsWireframe = serialized->get_bool(RenderAsWireframe_type_id, false); 
	}

	[[nodiscard]] auto
	RenderFlags::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RenderFlags::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RenderFlags> {
		if (incoming_type_id == RenderFlags::type_id) {
			return std::make_shared<RenderFlags>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
