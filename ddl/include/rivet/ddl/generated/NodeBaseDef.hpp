// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/NodeGraphItemDef.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED NodeBaseDef : NodeGraphItemDef {
		constexpr static std::string_view type_name = "NodeBaseDef";
		constexpr static rivet::rivet_type_id type_id = 0x34ef2791;

		constexpr static std::string_view Collapsed_type_name = "Collapsed";
		constexpr static rivet::rivet_type_id Collapsed_type_id = 0xf07e7faf;
		constexpr static std::string_view Disabled_type_name = "Disabled";
		constexpr static rivet::rivet_type_id Disabled_type_id = 0x7effd393;
		constexpr static std::string_view X_type_name = "X";
		constexpr static rivet::rivet_type_id X_type_id = 0x5e33418d;
		constexpr static std::string_view Y_type_name = "Y";
		constexpr static rivet::rivet_type_id Y_type_id = 0x2934711b; 

		explicit NodeBaseDef() = default;
		explicit NodeBaseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool Collapsed {};
		bool Disabled {};
		float X {};
		float Y {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodeBaseDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
