// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ColorBlindFilterData.hpp>
#include <rivet/ddl/generated/AccessibilitySystemConfigGame.hpp>
#include <rivet/ddl/generated/AccessibilityMaterial.hpp>
#include <rivet/ddl/generated/AccessibilityRemapData.hpp> 

#include <rivet/ddl/generated/AccessibilitySystemConfig.hpp>

namespace rivet::ddl::generated {
	AccessibilitySystemConfig::AccessibilitySystemConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		ColorBlindFilters = serialized->unwrap_into<rivet::ddl::generated::ColorBlindFilterData>(ColorBlindFilters_type_id);
		AccessibilityMaterials = serialized->unwrap_into_many<rivet::ddl::generated::AccessibilityMaterial>(AccessibilityMaterials_type_id);
		ControlRemapData = serialized->unwrap_into<rivet::ddl::generated::AccessibilityRemapData>(ControlRemapData_type_id); 
	}

	[[nodiscard]] auto
	AccessibilitySystemConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AccessibilitySystemConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AccessibilitySystemConfig> {
		if (incoming_type_id == AccessibilitySystemConfig::type_id) {
			return std::make_shared<AccessibilitySystemConfig>(serialized);
		}

		auto AccessibilitySystemConfigGame_ptr = AccessibilitySystemConfigGame::from_substruct(incoming_type_id, serialized);
		if (AccessibilitySystemConfigGame_ptr != nullptr) {
			return AccessibilitySystemConfigGame_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
