// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/GrenadeShotPrius.hpp> 

namespace rivet::ddl::generated {
	struct WeaponShotData;
	struct ShotCarpetBomberData; 

	struct RIVET_DDL_SHARED ShotCarpetBomberPrius : GrenadeShotPrius {
		constexpr const static std::string_view type_name = "ShotCarpetBomberPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x1103d7d2;

		constexpr const static std::string_view BomberShot_type_name = "BomberShot";
		constexpr const static rivet::rivet_type_id BomberShot_type_id = 0xc8e9910e;
		constexpr const static std::string_view LastBomberShot_type_name = "LastBomberShot";
		constexpr const static rivet::rivet_type_id LastBomberShot_type_id = 0x54894358;
		constexpr const static std::string_view ShotData_type_name = "ShotData";
		constexpr const static rivet::rivet_type_id ShotData_type_id = 0xdcd08e29; 

		explicit ShotCarpetBomberPrius() = default;
		explicit ShotCarpetBomberPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::WeaponShotData> BomberShot {};
		std::shared_ptr<rivet::ddl::generated::WeaponShotData> LastBomberShot {};
		std::shared_ptr<rivet::ddl::generated::ShotCarpetBomberData> ShotData {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotCarpetBomberPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
