// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/AimModifierPrius.hpp> 

namespace rivet::ddl::generated {
	struct ContractingVolley; 

	struct RIVET_DDL_SHARED AimModAdvContractingSpreadPrius : AimModifierPrius {
		constexpr static std::string_view type_name = "AimModAdvContractingSpreadPrius";
		constexpr static rivet::rivet_type_id type_id = 0xff0c416b;

		constexpr static std::string_view InitialVolley_type_name = "InitialVolley";
		constexpr static rivet::rivet_type_id InitialVolley_type_id = 0xcc7fd050;
		constexpr static std::string_view FinalVolley_type_name = "FinalVolley";
		constexpr static rivet::rivet_type_id FinalVolley_type_id = 0x77e56887;
		constexpr static std::string_view VolleysToReachFinal_type_name = "VolleysToReachFinal";
		constexpr static rivet::rivet_type_id VolleysToReachFinal_type_id = 0xd3958b4;
		constexpr static std::string_view ResetTime_type_name = "ResetTime";
		constexpr static rivet::rivet_type_id ResetTime_type_id = 0x45a33419;
		constexpr static std::string_view ResetDist_type_name = "ResetDist";
		constexpr static rivet::rivet_type_id ResetDist_type_id = 0xab4b7cab; 

		explicit AimModAdvContractingSpreadPrius() = default;
		explicit AimModAdvContractingSpreadPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::ContractingVolley> InitialVolley {};
		std::shared_ptr<rivet::ddl::generated::ContractingVolley> FinalVolley {};
		float VolleysToReachFinal {};
		float ResetTime {};
		float ResetDist {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimModAdvContractingSpreadPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
