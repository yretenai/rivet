// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ColorGradeHueSatOpDef.hpp>

namespace rivet::ddl::generated {
	ColorGradeHueSatOpDef::ColorGradeHueSatOpDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id, 0);
		Name = serialized->get_string(Name_type_id, {});
		Weight = serialized->get_float(Weight_type_id, 100.000000);
		Enabled = serialized->get_bool(Enabled_type_id, true);
		HueInc = serialized->get_float(HueInc_type_id, 0.000000);
		SaturationInc = serialized->get_float(SaturationInc_type_id, 0.000000);
		LightnessInc = serialized->get_float(LightnessInc_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	ColorGradeHueSatOpDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ColorGradeHueSatOpDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ColorGradeHueSatOpDef> {
		if (incoming_type_id == ColorGradeHueSatOpDef::type_id) {
			return std::make_shared<ColorGradeHueSatOpDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
