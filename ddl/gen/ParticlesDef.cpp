// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/ParticlesDef.hpp>

namespace rivet::ddl::generated {
	ParticlesDef::ParticlesDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id);
		Texture = serialized->get_string(Texture_type_id);
		NearFadeDistance = serialized->get_float(NearFadeDistance_type_id);
		MaxDrawDistance = serialized->get_float(MaxDrawDistance_type_id);
		WindInfluence = serialized->get_float(WindInfluence_type_id);
		Turbulence = serialized->get_float(Turbulence_type_id);
		Density = serialized->get_float(Density_type_id);
		Speed = serialized->get_float(Speed_type_id);
		Size = serialized->get_float(Size_type_id);
		Alpha = serialized->get_float(Alpha_type_id);
		Color = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Color_type_id);
		ExposureDuration = serialized->get_float(ExposureDuration_type_id);
		MotionStretchMax = serialized->get_float(MotionStretchMax_type_id);
		MotionStretchMaxFar = serialized->get_float(MotionStretchMaxFar_type_id);
		RainBloomInfluence = serialized->get_float(RainBloomInfluence_type_id); 
	}

	[[nodiscard]] auto
	ParticlesDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ParticlesDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ParticlesDef> {
		if (incoming_type_id == ParticlesDef::type_id) {
			return std::make_shared<ParticlesDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
