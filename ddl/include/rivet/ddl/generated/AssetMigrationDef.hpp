// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct AssetMigrationProject; 

	struct RIVET_DDL_SHARED AssetMigrationDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AssetMigrationDef";
		constexpr static rivet::rivet_type_id type_id = 0xafc2f617;

		constexpr static std::string_view Host_type_name = "Host";
		constexpr static rivet::rivet_type_id Host_type_id = 0xffb7d34d;
		constexpr static std::string_view Port_type_name = "Port";
		constexpr static rivet::rivet_type_id Port_type_id = 0x73019d7c;
		constexpr static std::string_view Extensions_type_name = "Extensions";
		constexpr static rivet::rivet_type_id Extensions_type_id = 0xec6c290;
		constexpr static std::string_view Projects_type_name = "Projects";
		constexpr static rivet::rivet_type_id Projects_type_id = 0xa6920ed4; 

		explicit AssetMigrationDef() = default;
		explicit AssetMigrationDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Host {};
		std::string_view Port {};
		std::vector<std::string_view> Extensions {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AssetMigrationProject>> Projects {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AssetMigrationDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
