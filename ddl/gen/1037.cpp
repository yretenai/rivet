// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TriggerEffectDataVibration.hpp>
#include <rivet/ddl/generated/TriggerEffectDataFeedback.hpp>
#include <rivet/ddl/generated/TriggerEffectDataFeedbackRange.hpp> 

#include <rivet/ddl/generated/TriggerEffectDataBase.hpp>

namespace rivet::ddl::generated {
	TriggerEffectDataBase::TriggerEffectDataBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Strength = serialized->get_uint32(Strength_type_id); 
	}

	auto
	TriggerEffectDataBase::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	TriggerEffectDataBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TriggerEffectDataBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerEffectDataBase> {
		if (incoming_type_id == TriggerEffectDataBase::type_id) {
			return std::make_shared<TriggerEffectDataBase>(serialized);
		}

		auto TriggerEffectDataVibration_ptr = TriggerEffectDataVibration::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectDataVibration_ptr != nullptr) {
			return TriggerEffectDataVibration_ptr;
		}

		auto TriggerEffectDataFeedback_ptr = TriggerEffectDataFeedback::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectDataFeedback_ptr != nullptr) {
			return TriggerEffectDataFeedback_ptr;
		}

		auto TriggerEffectDataFeedbackRange_ptr = TriggerEffectDataFeedbackRange::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectDataFeedbackRange_ptr != nullptr) {
			return TriggerEffectDataFeedbackRange_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
