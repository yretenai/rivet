// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/DDLVector2.hpp> 

#include <rivet/ddl/generated/UI_VisualEffectKeyFrameYValues.hpp>

namespace rivet::ddl::generated {
	UI_VisualEffectKeyFrameYValues::UI_VisualEffectKeyFrameYValues([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		IsFloat = serialized->get_bool(IsFloat_type_id, false);
		IsFloatRange = serialized->get_bool(IsFloatRange_type_id, false);
		IsVec2 = serialized->get_bool(IsVec2_type_id, false);
		IsVec2Range = serialized->get_bool(IsVec2Range_type_id, false);
		IsVec3 = serialized->get_bool(IsVec3_type_id, false);
		IsVec3Range = serialized->get_bool(IsVec3Range_type_id, false);
		IsColor = serialized->get_bool(IsColor_type_id, false);
		IsColorRange = serialized->get_bool(IsColorRange_type_id, false);
		FloatA = serialized->get_float(FloatA_type_id, 0.000000f);
		FloatB = serialized->get_float(FloatB_type_id, 0.000000f);
		Vec2A = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(Vec2A_type_id);
		Vec2B = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(Vec2B_type_id);
		Vec3A = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Vec3A_type_id);
		Vec3B = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Vec3B_type_id);
		ColorA = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(ColorA_type_id);
		ColorB = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(ColorB_type_id); 
	}

	[[nodiscard]] auto
	UI_VisualEffectKeyFrameYValues::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UI_VisualEffectKeyFrameYValues::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UI_VisualEffectKeyFrameYValues> {
		if (incoming_type_id == UI_VisualEffectKeyFrameYValues::type_id) {
			return std::make_shared<UI_VisualEffectKeyFrameYValues>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
