// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct ThemeWidgetPalette;
	struct ThemeColorDef;
	struct ThemeCustomColor;
	struct ThemeBasePalette; 

	struct RIVET_DDL_SHARED ThemeDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ThemeDef";
		constexpr static rivet::rivet_type_id type_id = 0xf1cbab46;

		constexpr static std::string_view FontName_type_name = "FontName";
		constexpr static rivet::rivet_type_id FontName_type_id = 0x15a0d128;
		constexpr static std::string_view FontSize_type_name = "FontSize";
		constexpr static rivet::rivet_type_id FontSize_type_id = 0xbc438b44;
		constexpr static std::string_view UseSingleIconColor_type_name = "UseSingleIconColor";
		constexpr static rivet::rivet_type_id UseSingleIconColor_type_id = 0xe4a3e6fb;
		constexpr static std::string_view RemapIconColors_type_name = "RemapIconColors";
		constexpr static rivet::rivet_type_id RemapIconColors_type_id = 0xd745e209;
		constexpr static std::string_view IconColorSpec_type_name = "IconColorSpec";
		constexpr static rivet::rivet_type_id IconColorSpec_type_id = 0x73af5e1c;
		constexpr static std::string_view BasePalette_type_name = "BasePalette";
		constexpr static rivet::rivet_type_id BasePalette_type_id = 0x14d7b0d3;
		constexpr static std::string_view CustomColors_type_name = "CustomColors";
		constexpr static rivet::rivet_type_id CustomColors_type_id = 0x4fa9eadc;
		constexpr static std::string_view CustomPalette_type_name = "CustomPalette";
		constexpr static rivet::rivet_type_id CustomPalette_type_id = 0xfabf4ff0;
		constexpr static std::string_view ColorDefs_type_name = "ColorDefs";
		constexpr static rivet::rivet_type_id ColorDefs_type_id = 0x9eb68663;
		constexpr static std::string_view IsHighContrast_type_name = "IsHighContrast";
		constexpr static rivet::rivet_type_id IsHighContrast_type_id = 0x50393a71;
		constexpr static std::string_view WidgetPalettes_type_name = "WidgetPalettes";
		constexpr static rivet::rivet_type_id WidgetPalettes_type_id = 0x7d3d03d9; 

		explicit ThemeDef() = default;
		explicit ThemeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view FontName {};
		float FontSize {};
		bool UseSingleIconColor {};
		bool RemapIconColors {};
		std::string_view IconColorSpec {};
		std::shared_ptr<rivet::ddl::generated::ThemeBasePalette> BasePalette {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ThemeCustomColor>> CustomColors {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ThemeCustomColor>> CustomPalette {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ThemeColorDef>> ColorDefs {};
		bool IsHighContrast {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ThemeWidgetPalette>> WidgetPalettes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ThemeDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
