// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LookAtOfferPrius.hpp>
#include <rivet/ddl/generated/VendorOfferPrius.hpp>
#include <rivet/ddl/generated/CrossGameOfferPrius.hpp>
#include <rivet/ddl/generated/GadgetPortOfferPrius.hpp>
#include <rivet/ddl/generated/ProximityOfferPrius.hpp>
#include <rivet/ddl/generated/ChestOfferPrius.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/OfferPrius.hpp>

namespace rivet::ddl::generated {
	OfferPrius::OfferPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Priority = serialized->get_float(Priority_type_id);
		Team = serialized->get_enum<rivet::ddl::generated::xc115d639>(Team_type_id, rivet::ddl::generated::xc115d639_values);
		LocTagIndex = serialized->get_uint32(LocTagIndex_type_id);
		OfferType = serialized->get_bitset<rivet::ddl::generated::OfferType>(OfferType_type_id, rivet::ddl::generated::OfferType_values);
		ShouldCreateJob = serialized->get_bool(ShouldCreateJob_type_id);
		ShouldCreatePOI = serialized->get_bool(ShouldCreatePOI_type_id);
		UseInWorldPrompt = serialized->get_bool(UseInWorldPrompt_type_id);
		POISubtype = serialized->get_enum<rivet::ddl::generated::x275d9b04>(POISubtype_type_id, rivet::ddl::generated::x275d9b04_values);
		POIPreviewSubtype = serialized->get_enum<rivet::ddl::generated::x8d1d7e8a>(POIPreviewSubtype_type_id, rivet::ddl::generated::x8d1d7e8a_values);
		POILOSCheck = serialized->get_bool(POILOSCheck_type_id);
		PreviewRange = serialized->get_float(PreviewRange_type_id);
		POIOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(POIOffset_type_id);
		POILocator = serialized->get_string(POILocator_type_id);
		UseOfferPosForPOIPos = serialized->get_bool(UseOfferPosForPOIPos_type_id); 
	}

	[[nodiscard]] auto
	OfferPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	OfferPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OfferPrius> {
		if (incoming_type_id == OfferPrius::type_id) {
			return std::make_shared<OfferPrius>(serialized);
		}

		auto ChestOfferPrius_ptr = ChestOfferPrius::from_substruct(incoming_type_id, serialized);
		if (ChestOfferPrius_ptr != nullptr) {
			return ChestOfferPrius_ptr;
		}

		auto GadgetPortOfferPrius_ptr = GadgetPortOfferPrius::from_substruct(incoming_type_id, serialized);
		if (GadgetPortOfferPrius_ptr != nullptr) {
			return GadgetPortOfferPrius_ptr;
		}

		auto CrossGameOfferPrius_ptr = CrossGameOfferPrius::from_substruct(incoming_type_id, serialized);
		if (CrossGameOfferPrius_ptr != nullptr) {
			return CrossGameOfferPrius_ptr;
		}

		auto ProximityOfferPrius_ptr = ProximityOfferPrius::from_substruct(incoming_type_id, serialized);
		if (ProximityOfferPrius_ptr != nullptr) {
			return ProximityOfferPrius_ptr;
		}

		auto VendorOfferPrius_ptr = VendorOfferPrius::from_substruct(incoming_type_id, serialized);
		if (VendorOfferPrius_ptr != nullptr) {
			return VendorOfferPrius_ptr;
		}

		auto LookAtOfferPrius_ptr = LookAtOfferPrius::from_substruct(incoming_type_id, serialized);
		if (LookAtOfferPrius_ptr != nullptr) {
			return LookAtOfferPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
