// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED TrafficSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "TrafficSettings";
		constexpr static rivet::rivet_type_id type_id = 0xce7f0224;

		constexpr static std::string_view MaxNodes_type_name = "MaxNodes";
		constexpr static rivet::rivet_type_id MaxNodes_type_id = 0x4a3c26b;
		constexpr static std::string_view MaxObstacles_type_name = "MaxObstacles";
		constexpr static rivet::rivet_type_id MaxObstacles_type_id = 0xb93e7adc;
		constexpr static std::string_view InstantiationBudget_type_name = "InstantiationBudget";
		constexpr static rivet::rivet_type_id InstantiationBudget_type_id = 0xc0f608e4;
		constexpr static std::string_view InstantiationBudgetPerfMode_type_name = "InstantiationBudgetPerfMode";
		constexpr static rivet::rivet_type_id InstantiationBudgetPerfMode_type_id = 0xd427fe09;
		constexpr static std::string_view InstantiationBudgetMediumPerfMode_type_name = "InstantiationBudgetMediumPerfMode";
		constexpr static rivet::rivet_type_id InstantiationBudgetMediumPerfMode_type_id = 0xd48aeb11;
		constexpr static std::string_view InstantiationBudgetLowPerfMode_type_name = "InstantiationBudgetLowPerfMode";
		constexpr static rivet::rivet_type_id InstantiationBudgetLowPerfMode_type_id = 0xb9819e15;
		constexpr static std::string_view SpawnsPerFrame_type_name = "SpawnsPerFrame";
		constexpr static rivet::rivet_type_id SpawnsPerFrame_type_id = 0xb5ae1627; 

		explicit TrafficSettings() = default;
		explicit TrafficSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t MaxNodes {};
		int32_t MaxObstacles {};
		float InstantiationBudget {};
		float InstantiationBudgetPerfMode {};
		float InstantiationBudgetMediumPerfMode {};
		float InstantiationBudgetLowPerfMode {};
		uint32_t SpawnsPerFrame {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TrafficSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
