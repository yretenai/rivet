// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct FirepointShootingData;
	struct ShootingTauntData; 

	struct RIVET_DDL_SHARED BotConfigShooting : ConfigBase {
		constexpr static std::string_view type_name = "BotConfigShooting";
		constexpr static rivet::rivet_type_id type_id = 0x6ef06539;

		constexpr static std::string_view DesiredFireDistance_type_name = "DesiredFireDistance";
		constexpr static rivet::rivet_type_id DesiredFireDistance_type_id = 0xe7132813;
		constexpr static std::string_view MaxFireDistance_type_name = "MaxFireDistance";
		constexpr static rivet::rivet_type_id MaxFireDistance_type_id = 0xb64296e;
		constexpr static std::string_view AimWhileIdle_type_name = "AimWhileIdle";
		constexpr static rivet::rivet_type_id AimWhileIdle_type_id = 0x7c899559;
		constexpr static std::string_view UseFirepoints_type_name = "UseFirepoints";
		constexpr static rivet::rivet_type_id UseFirepoints_type_id = 0x276698c3;
		constexpr static std::string_view AllowGroundFirepoints_type_name = "AllowGroundFirepoints";
		constexpr static rivet::rivet_type_id AllowGroundFirepoints_type_id = 0xe5754766;
		constexpr static std::string_view AllowAirFirepoints_type_name = "AllowAirFirepoints";
		constexpr static rivet::rivet_type_id AllowAirFirepoints_type_id = 0x9f0d8f82;
		constexpr static std::string_view AllowChase_type_name = "AllowChase";
		constexpr static rivet::rivet_type_id AllowChase_type_id = 0xc14d7cb0;
		constexpr static std::string_view AllowRepositioning_type_name = "AllowRepositioning";
		constexpr static rivet::rivet_type_id AllowRepositioning_type_id = 0xb7ceb8ed;
		constexpr static std::string_view RepositionAngleMin_type_name = "RepositionAngleMin";
		constexpr static rivet::rivet_type_id RepositionAngleMin_type_id = 0xff8295ed;
		constexpr static std::string_view RepositionAngleMax_type_name = "RepositionAngleMax";
		constexpr static rivet::rivet_type_id RepositionAngleMax_type_id = 0xc38faab4;
		constexpr static std::string_view RepositionMoveDistanceMin_type_name = "RepositionMoveDistanceMin";
		constexpr static rivet::rivet_type_id RepositionMoveDistanceMin_type_id = 0x682e1f3c;
		constexpr static std::string_view RepositionTargetDistanceMin_type_name = "RepositionTargetDistanceMin";
		constexpr static rivet::rivet_type_id RepositionTargetDistanceMin_type_id = 0x6ede906f;
		constexpr static std::string_view RepositionTargetDistanceMax_type_name = "RepositionTargetDistanceMax";
		constexpr static rivet::rivet_type_id RepositionTargetDistanceMax_type_id = 0x52d3af36;
		constexpr static std::string_view RepositionEnemySpacing_type_name = "RepositionEnemySpacing";
		constexpr static rivet::rivet_type_id RepositionEnemySpacing_type_id = 0x17b3145e;
		constexpr static std::string_view ShootAfterKnockback_type_name = "ShootAfterKnockback";
		constexpr static rivet::rivet_type_id ShootAfterKnockback_type_id = 0xa618b6de;
		constexpr static std::string_view NeedFirepointToReload_type_name = "NeedFirepointToReload";
		constexpr static rivet::rivet_type_id NeedFirepointToReload_type_id = 0x7c4ad92a;
		constexpr static std::string_view RequireLoS_type_name = "RequireLoS";
		constexpr static rivet::rivet_type_id RequireLoS_type_id = 0xcbc8200d;
		constexpr static std::string_view InterruptableByInvalidFirepoints_type_name = "InterruptableByInvalidFirepoints";
		constexpr static rivet::rivet_type_id InterruptableByInvalidFirepoints_type_id = 0x7e3f2fbe;
		constexpr static std::string_view InterruptableToMelee_type_name = "InterruptableToMelee";
		constexpr static rivet::rivet_type_id InterruptableToMelee_type_id = 0xc0cdd00e;
		constexpr static std::string_view UseNoFiringRangedAttackCombos_type_name = "UseNoFiringRangedAttackCombos";
		constexpr static rivet::rivet_type_id UseNoFiringRangedAttackCombos_type_id = 0x3ee689d8;
		constexpr static std::string_view UseAttackJobsForShootingPattern_type_name = "UseAttackJobsForShootingPattern";
		constexpr static rivet::rivet_type_id UseAttackJobsForShootingPattern_type_id = 0x24872df7;
		constexpr static std::string_view AllowDiveRoll_type_name = "AllowDiveRoll";
		constexpr static rivet::rivet_type_id AllowDiveRoll_type_id = 0xb043e277;
		constexpr static std::string_view DiveRollMinPercent_type_name = "DiveRollMinPercent";
		constexpr static rivet::rivet_type_id DiveRollMinPercent_type_id = 0x31dbc7e0;
		constexpr static std::string_view DiveRollMaxPercent_type_name = "DiveRollMaxPercent";
		constexpr static rivet::rivet_type_id DiveRollMaxPercent_type_id = 0x30d75d54;
		constexpr static std::string_view ThrowWhileMoving_type_name = "ThrowWhileMoving";
		constexpr static rivet::rivet_type_id ThrowWhileMoving_type_id = 0xede2ffee;
		constexpr static std::string_view ThrowDelay_type_name = "ThrowDelay";
		constexpr static rivet::rivet_type_id ThrowDelay_type_id = 0x1070ff0b;
		constexpr static std::string_view ShootingTauntData_type_name = "ShootingTauntData";
		constexpr static rivet::rivet_type_id ShootingTauntData_type_id = 0x50e2e8ee;
		constexpr static std::string_view StationaryFirepointShooting_type_name = "StationaryFirepointShooting";
		constexpr static rivet::rivet_type_id StationaryFirepointShooting_type_id = 0xe0440c8b;
		constexpr static std::string_view RolloutFirepointShooting_type_name = "RolloutFirepointShooting";
		constexpr static rivet::rivet_type_id RolloutFirepointShooting_type_id = 0x6362bc8e;
		constexpr static std::string_view MaxFacingAngle_type_name = "MaxFacingAngle";
		constexpr static rivet::rivet_type_id MaxFacingAngle_type_id = 0x2a6fac99;
		constexpr static std::string_view RotateToFace_type_name = "RotateToFace";
		constexpr static rivet::rivet_type_id RotateToFace_type_id = 0xfe376e6f;
		constexpr static std::string_view FaceRotateMaxSpeed_type_name = "FaceRotateMaxSpeed";
		constexpr static rivet::rivet_type_id FaceRotateMaxSpeed_type_id = 0x7bd861ea;
		constexpr static std::string_view FaceRotateAccel_type_name = "FaceRotateAccel";
		constexpr static rivet::rivet_type_id FaceRotateAccel_type_id = 0xdd70c65;
		constexpr static std::string_view FaceRotateDecel_type_name = "FaceRotateDecel";
		constexpr static rivet::rivet_type_id FaceRotateDecel_type_id = 0xe05cdcc9;
		constexpr static std::string_view UseFPFacingForGoto_type_name = "UseFPFacingForGoto";
		constexpr static rivet::rivet_type_id UseFPFacingForGoto_type_id = 0xdb50147c;
		constexpr static std::string_view FPHunterRangeMin_type_name = "FPHunterRangeMin";
		constexpr static rivet::rivet_type_id FPHunterRangeMin_type_id = 0xb363df1a;
		constexpr static std::string_view FPHunterRangeIdeal_type_name = "FPHunterRangeIdeal";
		constexpr static rivet::rivet_type_id FPHunterRangeIdeal_type_id = 0x951c6094;
		constexpr static std::string_view FPHunterRangeMax_type_name = "FPHunterRangeMax";
		constexpr static rivet::rivet_type_id FPHunterRangeMax_type_id = 0x8f6ee043;
		constexpr static std::string_view FPHunterSetRangeMaxAsGatherRadius_type_name = "FPHunterSetRangeMaxAsGatherRadius";
		constexpr static rivet::rivet_type_id FPHunterSetRangeMaxAsGatherRadius_type_id = 0xd5599056;
		constexpr static std::string_view NonHeroTauntOrCelebrateProbability_type_name = "NonHeroTauntOrCelebrateProbability";
		constexpr static rivet::rivet_type_id NonHeroTauntOrCelebrateProbability_type_id = 0xffc9452c;
		constexpr static std::string_view FaceBeforeShooting_type_name = "FaceBeforeShooting";
		constexpr static rivet::rivet_type_id FaceBeforeShooting_type_id = 0xe250f4ae;
		constexpr static std::string_view UseSearchWhenLosBlocked_type_name = "UseSearchWhenLosBlocked";
		constexpr static rivet::rivet_type_id UseSearchWhenLosBlocked_type_id = 0xeda6a531;
		constexpr static std::string_view InterruptTauntWhenDamaged_type_name = "InterruptTauntWhenDamaged";
		constexpr static rivet::rivet_type_id InterruptTauntWhenDamaged_type_id = 0x109f514c; 

		explicit BotConfigShooting() = default;
		explicit BotConfigShooting([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float DesiredFireDistance {};
		float MaxFireDistance {};
		bool AimWhileIdle {};
		bool UseFirepoints {};
		bool AllowGroundFirepoints {};
		bool AllowAirFirepoints {};
		bool AllowChase {};
		bool AllowRepositioning {};
		float RepositionAngleMin {};
		float RepositionAngleMax {};
		float RepositionMoveDistanceMin {};
		float RepositionTargetDistanceMin {};
		float RepositionTargetDistanceMax {};
		float RepositionEnemySpacing {};
		bool ShootAfterKnockback {};
		bool NeedFirepointToReload {};
		bool RequireLoS {};
		bool InterruptableByInvalidFirepoints {};
		bool InterruptableToMelee {};
		bool UseNoFiringRangedAttackCombos {};
		bool UseAttackJobsForShootingPattern {};
		bool AllowDiveRoll {};
		float DiveRollMinPercent {};
		float DiveRollMaxPercent {};
		bool ThrowWhileMoving {};
		float ThrowDelay {};
		std::shared_ptr<rivet::ddl::generated::ShootingTauntData> ShootingTauntData {};
		std::shared_ptr<rivet::ddl::generated::FirepointShootingData> StationaryFirepointShooting {};
		std::shared_ptr<rivet::ddl::generated::FirepointShootingData> RolloutFirepointShooting {};
		float MaxFacingAngle {};
		bool RotateToFace {};
		float FaceRotateMaxSpeed {};
		float FaceRotateAccel {};
		float FaceRotateDecel {};
		bool UseFPFacingForGoto {};
		float FPHunterRangeMin {};
		float FPHunterRangeIdeal {};
		float FPHunterRangeMax {};
		bool FPHunterSetRangeMaxAsGatherRadius {};
		float NonHeroTauntOrCelebrateProbability {};
		bool FaceBeforeShooting {};
		bool UseSearchWhenLosBlocked {};
		bool InterruptTauntWhenDamaged {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotConfigShooting>;
	};
} // namespace rivet::ddl::generated

// clang-format on
