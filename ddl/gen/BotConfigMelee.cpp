// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotMeleeAttackData.hpp>
#include <rivet/ddl/generated/AnimDamageHandlerPrius.hpp>
#include <rivet/ddl/generated/GameBotConfigMelee.hpp> 

#include <rivet/ddl/generated/BotConfigMelee.hpp>

namespace rivet::ddl::generated {
	BotConfigMelee::BotConfigMelee([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		AttackRange = serialized->get_float(AttackRange_type_id);
		IdealRange = serialized->get_float(IdealRange_type_id);
		MaxSuckDist = serialized->get_float(MaxSuckDist_type_id);
		CanFlank = serialized->get_bool(CanFlank_type_id);
		FlankPercent = serialized->get_float(FlankPercent_type_id);
		DoDelayAttacks = serialized->get_bool(DoDelayAttacks_type_id);
		MinTimeBetweenAttacks = serialized->get_float(MinTimeBetweenAttacks_type_id);
		PreMeleeDuration = serialized->get_float(PreMeleeDuration_type_id);
		MeleeAttackData = serialized->unwrap_into<rivet::ddl::generated::BotMeleeAttackData>(MeleeAttackData_type_id);
		AnimDamage = serialized->unwrap_into<rivet::ddl::generated::AnimDamageHandlerPrius>(AnimDamage_type_id); 
	}

	[[nodiscard]] auto
	BotConfigMelee::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotConfigMelee::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotConfigMelee> {
		if (incoming_type_id == BotConfigMelee::type_id) {
			return std::make_shared<BotConfigMelee>(serialized);
		}

		auto GameBotConfigMelee_ptr = GameBotConfigMelee::from_substruct(incoming_type_id, serialized);
		if (GameBotConfigMelee_ptr != nullptr) {
			return GameBotConfigMelee_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
