// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector3;
	struct DDLVector2; 

	struct RIVET_DDL_SHARED UI_VisualEffectKeyFrameYValues : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "UI_VisualEffectKeyFrameYValues";
		constexpr static rivet::rivet_type_id type_id = 0xb1597925;

		constexpr static std::string_view IsFloat_type_name = "IsFloat";
		constexpr static rivet::rivet_type_id IsFloat_type_id = 0xc1584c93;
		constexpr static std::string_view IsFloatRange_type_name = "IsFloatRange";
		constexpr static rivet::rivet_type_id IsFloatRange_type_id = 0x634ea112;
		constexpr static std::string_view IsVec2_type_name = "IsVec2";
		constexpr static rivet::rivet_type_id IsVec2_type_id = 0x384e1b18;
		constexpr static std::string_view IsVec2Range_type_name = "IsVec2Range";
		constexpr static rivet::rivet_type_id IsVec2Range_type_id = 0x2e7792bc;
		constexpr static std::string_view IsVec3_type_name = "IsVec3";
		constexpr static rivet::rivet_type_id IsVec3_type_id = 0x4f492b8e;
		constexpr static std::string_view IsVec3Range_type_name = "IsVec3Range";
		constexpr static rivet::rivet_type_id IsVec3Range_type_id = 0xe52b4119;
		constexpr static std::string_view IsColor_type_name = "IsColor";
		constexpr static rivet::rivet_type_id IsColor_type_id = 0x6eab5aef;
		constexpr static std::string_view IsColorRange_type_name = "IsColorRange";
		constexpr static rivet::rivet_type_id IsColorRange_type_id = 0xb403c930;
		constexpr static std::string_view FloatA_type_name = "FloatA";
		constexpr static rivet::rivet_type_id FloatA_type_id = 0x6d0d1279;
		constexpr static std::string_view FloatB_type_name = "FloatB";
		constexpr static rivet::rivet_type_id FloatB_type_id = 0xf40443c3;
		constexpr static std::string_view Vec2A_type_name = "Vec2A";
		constexpr static rivet::rivet_type_id Vec2A_type_id = 0x321798c;
		constexpr static std::string_view Vec2B_type_name = "Vec2B";
		constexpr static rivet::rivet_type_id Vec2B_type_id = 0x9a282836;
		constexpr static std::string_view Vec3A_type_name = "Vec3A";
		constexpr static rivet::rivet_type_id Vec3A_type_id = 0x1a3a48cd;
		constexpr static std::string_view Vec3B_type_name = "Vec3B";
		constexpr static rivet::rivet_type_id Vec3B_type_id = 0x83331977;
		constexpr static std::string_view ColorA_type_name = "ColorA";
		constexpr static rivet::rivet_type_id ColorA_type_id = 0x3411dc78;
		constexpr static std::string_view ColorB_type_name = "ColorB";
		constexpr static rivet::rivet_type_id ColorB_type_id = 0xad188dc2; 

		explicit UI_VisualEffectKeyFrameYValues() = default;
		explicit UI_VisualEffectKeyFrameYValues([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool IsFloat {};
		bool IsFloatRange {};
		bool IsVec2 {};
		bool IsVec2Range {};
		bool IsVec3 {};
		bool IsVec3Range {};
		bool IsColor {};
		bool IsColorRange {};
		float FloatA {};
		float FloatB {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> Vec2A {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> Vec2B {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> Vec3A {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> Vec3B {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> ColorA {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> ColorB {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UI_VisualEffectKeyFrameYValues>;
	};
} // namespace rivet::ddl::generated

// clang-format on
