// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/Voice.hpp> 

namespace rivet::ddl::generated {
	struct DEVOFollowup;
	struct DEVOLineMemoryWriteback; 

	struct RIVET_DDL_SHARED Line : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "Line";
		constexpr static rivet::rivet_type_id type_id = 0xe1847446;

		constexpr static std::string_view CharacterVoice_type_name = "CharacterVoice";
		constexpr static rivet::rivet_type_id CharacterVoice_type_id = 0x3ebbe218;
		constexpr static std::string_view LineTagStart_type_name = "LineTagStart";
		constexpr static rivet::rivet_type_id LineTagStart_type_id = 0x16868fea;
		constexpr static std::string_view LineTagEnd_type_name = "LineTagEnd";
		constexpr static rivet::rivet_type_id LineTagEnd_type_id = 0x4d044360;
		constexpr static std::string_view Weight_type_name = "Weight";
		constexpr static rivet::rivet_type_id Weight_type_id = 0x39b51b26;
		constexpr static std::string_view Writebacks_type_name = "Writebacks";
		constexpr static rivet::rivet_type_id Writebacks_type_id = 0x183ac164;
		constexpr static std::string_view Followup_type_name = "Followup";
		constexpr static rivet::rivet_type_id Followup_type_id = 0xe71bc74b; 

		explicit Line() = default;
		explicit Line([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::Voice CharacterVoice {};
		std::string_view LineTagStart {};
		std::string_view LineTagEnd {};
		float Weight {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DEVOLineMemoryWriteback>> Writebacks {};
		std::shared_ptr<rivet::ddl::generated::DEVOFollowup> Followup {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Line>;
	};
} // namespace rivet::ddl::generated

// clang-format on
