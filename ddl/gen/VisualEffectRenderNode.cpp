// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VisualEffectCamAttr.hpp>
#include <rivet/ddl/generated/VisualEffectLumAttr.hpp>
#include <rivet/ddl/generated/VisualEffectPerfAttrOverride.hpp>
#include <rivet/ddl/generated/VisualEffectTransform.hpp>
#include <rivet/ddl/generated/VisualEffectFloat.hpp>
#include <rivet/ddl/generated/PostEffect.hpp>
#include <rivet/ddl/generated/RadialBlurInfo.hpp>
#include <rivet/ddl/generated/DDLVector2.hpp>
#include <rivet/ddl/generated/TurbulenceAttributes.hpp>
#include <rivet/ddl/generated/VisualEffectNodeConnectedOutputPort.hpp>
#include <rivet/ddl/generated/RenderAttributes.hpp>
#include <rivet/ddl/generated/VisualEffectPlatforms.hpp>
#include <rivet/ddl/generated/VisualEffectFloat3KeyFrames.hpp>
#include <rivet/ddl/generated/UVTiling.hpp>
#include <rivet/ddl/generated/VisualEffectLensFlare.hpp>
#include <rivet/ddl/generated/VisualEffectNodeConnectedInputPort.hpp>
#include <rivet/ddl/generated/TrailAttributes.hpp>
#include <rivet/ddl/generated/DecalTrailAttributes.hpp>
#include <rivet/ddl/generated/SeparateUVFlips.hpp>
#include <rivet/ddl/generated/VisualEffectFloatKeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectColorKeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectFloat2KeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectMinMax.hpp>
#include <rivet/ddl/generated/VisualEffectRotationKeyFrames.hpp>
#include <rivet/ddl/generated/ForceFieldAttributes.hpp>
#include <rivet/ddl/generated/TrailAgeKeyframe.hpp>
#include <rivet/ddl/generated/ConduitAttributes.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/DecalAttributes.hpp>
#include <rivet/ddl/generated/VisualEffectLightAttr.hpp>
#include <rivet/ddl/generated/VisualEffectAccelerationKeyFrames.hpp>
#include <rivet/ddl/generated/VisualEffectExternalForces.hpp> 

#include <rivet/ddl/generated/VisualEffectRenderNode.hpp>

namespace rivet::ddl::generated {
	VisualEffectRenderNode::VisualEffectRenderNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		NodeId = serialized->get_uint64(NodeId_type_id, 0ull);
		XPos = serialized->get_int32(XPos_type_id, 0u);
		YPos = serialized->get_int32(YPos_type_id, 0u);
		DisplayName = serialized->get_string(DisplayName_type_id, {});
		ConnectedInputs = serialized->unwrap_into_many<rivet::ddl::generated::VisualEffectNodeConnectedInputPort>(ConnectedInputs_type_id);
		ConnectedOutputs = serialized->unwrap_into_many<rivet::ddl::generated::VisualEffectNodeConnectedOutputPort>(ConnectedOutputs_type_id);
		Collapsed = serialized->get_bool(Collapsed_type_id, true);
		Type = serialized->get_string(Type_type_id, {});
		RenderStyle = serialized->get_enum<rivet::ddl::generated::RenderStyle>(RenderStyle_type_id, rivet::ddl::generated::RenderStyle_values, rivet::ddl::generated::RenderStyle::SingleQuad);
		Platforms = serialized->unwrap_into<rivet::ddl::generated::VisualEffectPlatforms>(Platforms_type_id);
		EditorOnly = serialized->get_bool(EditorOnly_type_id, false);
		Space = serialized->get_enum<rivet::ddl::generated::xfe5100b1>(Space_type_id, rivet::ddl::generated::xfe5100b1_values, rivet::ddl::generated::xfe5100b1::Local);
		RenderAttributes = serialized->unwrap_into<rivet::ddl::generated::RenderAttributes>(RenderAttributes_type_id);
		ConduitAttributes = serialized->unwrap_into<rivet::ddl::generated::ConduitAttributes>(ConduitAttributes_type_id);
		DecalTrailAttributes = serialized->unwrap_into<rivet::ddl::generated::DecalTrailAttributes>(DecalTrailAttributes_type_id);
		UV0Tiling = serialized->unwrap_into<rivet::ddl::generated::UVTiling>(UV0Tiling_type_id);
		UV1Tiling = serialized->unwrap_into<rivet::ddl::generated::UVTiling>(UV1Tiling_type_id);
		RadialBlur = serialized->unwrap_into<rivet::ddl::generated::RadialBlurInfo>(RadialBlur_type_id);
		InputPort_Transform = serialized->unwrap_into<rivet::ddl::generated::VisualEffectTransform>(InputPort_Transform_type_id);
		InputPort_LensFlare = serialized->unwrap_into<rivet::ddl::generated::VisualEffectLensFlare>(InputPort_LensFlare_type_id);
		InputPort_SphericalNormal = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat>(InputPort_SphericalNormal_type_id);
		InputPort_Height = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat>(InputPort_Height_type_id);
		InputPort_Width = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat>(InputPort_Width_type_id);
		InputPort_Depth = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat>(InputPort_Depth_type_id);
		PostEffect = serialized->unwrap_into<rivet::ddl::generated::PostEffect>(PostEffect_type_id);
		SplineStyle = serialized->get_enum<rivet::ddl::generated::SplineStyle>(SplineStyle_type_id, rivet::ddl::generated::SplineStyle_values, rivet::ddl::generated::SplineStyle::Standard);
		BeamOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(BeamOffset_type_id);
		TrailAttributes = serialized->unwrap_into<rivet::ddl::generated::TrailAttributes>(TrailAttributes_type_id);
		SwipeScale = serialized->get_enum<rivet::ddl::generated::SwipeScale>(SwipeScale_type_id, rivet::ddl::generated::SwipeScale_values, rivet::ddl::generated::SwipeScale::Origin);
		SwipeOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(SwipeOffset_type_id);
		InputPort_LightAttr = serialized->unwrap_into<rivet::ddl::generated::VisualEffectLightAttr>(InputPort_LightAttr_type_id);
		InputPort_LifeTime = serialized->unwrap_into<rivet::ddl::generated::VisualEffectMinMax>(InputPort_LifeTime_type_id);
		InputPort_SpawnDelay = serialized->unwrap_into<rivet::ddl::generated::VisualEffectMinMax>(InputPort_SpawnDelay_type_id);
		UVFlips = serialized->unwrap_into<rivet::ddl::generated::SeparateUVFlips>(UVFlips_type_id);
		FloatKeyFrames_Luminance = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloatKeyFrames>(FloatKeyFrames_Luminance_type_id);
		ColorKeyFrames_Color = serialized->unwrap_into<rivet::ddl::generated::VisualEffectColorKeyFrames>(ColorKeyFrames_Color_type_id);
		Float2KeyFrames_Alpha = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat2KeyFrames>(Float2KeyFrames_Alpha_type_id);
		FloatKeyFrames_AlphaMultiplier = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloatKeyFrames>(FloatKeyFrames_AlphaMultiplier_type_id);
		Float3KeyFrames_Rotation = serialized->unwrap_into<rivet::ddl::generated::VisualEffectRotationKeyFrames>(Float3KeyFrames_Rotation_type_id);
		Float3KeyFrames_Scales = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat3KeyFrames>(Float3KeyFrames_Scales_type_id);
		Float3KeyFrames_Custom = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat3KeyFrames>(Float3KeyFrames_Custom_type_id);
		InputPort_CameraOffset = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat>(InputPort_CameraOffset_type_id);
		InputPort_RandomSeed = serialized->unwrap_into<rivet::ddl::generated::VisualEffectFloat>(InputPort_RandomSeed_type_id);
		ForceFieldAttributes = serialized->unwrap_into<rivet::ddl::generated::ForceFieldAttributes>(ForceFieldAttributes_type_id);
		TurbulenceAttributes = serialized->unwrap_into<rivet::ddl::generated::TurbulenceAttributes>(TurbulenceAttributes_type_id);
		TrailAgeKeyframe = serialized->unwrap_into<rivet::ddl::generated::TrailAgeKeyframe>(TrailAgeKeyframe_type_id);
		DecalAttributes = serialized->unwrap_into<rivet::ddl::generated::DecalAttributes>(DecalAttributes_type_id);
		FloatKeyFrames_Acceleration = serialized->unwrap_into<rivet::ddl::generated::VisualEffectAccelerationKeyFrames>(FloatKeyFrames_Acceleration_type_id);
		ExternalForces = serialized->unwrap_into<rivet::ddl::generated::VisualEffectExternalForces>(ExternalForces_type_id);
		InputPort_PerfAttrOverrides = serialized->unwrap_into<rivet::ddl::generated::VisualEffectPerfAttrOverride>(InputPort_PerfAttrOverrides_type_id);
		InputPort_LumAttrOverrides = serialized->unwrap_into<rivet::ddl::generated::VisualEffectLumAttr>(InputPort_LumAttrOverrides_type_id);
		InputPort_CamAttrOverrides = serialized->unwrap_into<rivet::ddl::generated::VisualEffectCamAttr>(InputPort_CamAttrOverrides_type_id); 
	}

	[[nodiscard]] auto
	VisualEffectRenderNode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VisualEffectRenderNode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectRenderNode> {
		if (incoming_type_id == VisualEffectRenderNode::type_id) {
			return std::make_shared<VisualEffectRenderNode>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
