// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DbVerifyAssetCollection; 

	struct RIVET_DDL_SHARED DbVerifyResult : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "DbVerifyResult";
		constexpr static rivet::rivet_type_id type_id = 0x42f419ca;

		constexpr static std::string_view AssetCollection_type_name = "AssetCollection";
		constexpr static rivet::rivet_type_id AssetCollection_type_id = 0x105dff48;
		constexpr static std::string_view FileCount_type_name = "FileCount";
		constexpr static rivet::rivet_type_id FileCount_type_id = 0x123cec1f;
		constexpr static std::string_view DbEntryCount_type_name = "DbEntryCount";
		constexpr static rivet::rivet_type_id DbEntryCount_type_id = 0x8a7f8ea9;
		constexpr static std::string_view ErrorCount_type_name = "ErrorCount";
		constexpr static rivet::rivet_type_id ErrorCount_type_id = 0x867c8878;
		constexpr static std::string_view UnionCount_type_name = "UnionCount";
		constexpr static rivet::rivet_type_id UnionCount_type_id = 0xbee35768;
		constexpr static std::string_view UncleanAssetPath_type_name = "UncleanAssetPath";
		constexpr static rivet::rivet_type_id UncleanAssetPath_type_id = 0xc54e4432;
		constexpr static std::string_view HashClashes_type_name = "HashClashes";
		constexpr static rivet::rivet_type_id HashClashes_type_id = 0xb80668ac; 

		explicit DbVerifyResult() = default;
		explicit DbVerifyResult([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::DbVerifyAssetCollection>> AssetCollection {};
		uint32_t FileCount {};
		uint32_t DbEntryCount {};
		uint32_t ErrorCount {};
		uint32_t UnionCount {};
		uint32_t UncleanAssetPath {};
		uint32_t HashClashes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DbVerifyResult>;
	};
} // namespace rivet::ddl::generated

// clang-format on
