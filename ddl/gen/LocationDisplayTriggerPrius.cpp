// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LocationDisplayTriggerPrius.hpp>

namespace rivet::ddl::generated {
	LocationDisplayTriggerPrius::LocationDisplayTriggerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartEnabled = serialized->get_bool(StartEnabled_type_id, true);
		AllowShipTrigger = serialized->get_bool(AllowShipTrigger_type_id, false);
		AllowCineTrigger = serialized->get_bool(AllowCineTrigger_type_id, false);
		SaveGaveText = serialized->get_bool(SaveGaveText_type_id, true);
		LocationTag = serialized->get_string(LocationTag_type_id, "INVALID");
		TextDelay = serialized->get_float(TextDelay_type_id, 0.000000);
		TextDuration = serialized->get_float(TextDuration_type_id, 5.000000); 
	}

	[[nodiscard]] auto
	LocationDisplayTriggerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LocationDisplayTriggerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LocationDisplayTriggerPrius> {
		if (incoming_type_id == LocationDisplayTriggerPrius::type_id) {
			return std::make_shared<LocationDisplayTriggerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
