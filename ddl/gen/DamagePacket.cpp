// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DamageEventBase.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/DamagePacket.hpp>

namespace rivet::ddl::generated {
	DamagePacket::DamagePacket([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): DamageRequest(serialized) {
		HitDirection = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(HitDirection_type_id);
		HitPosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(HitPosition_type_id);
		HitNormal = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(HitNormal_type_id);
		ResponseFlags = serialized->get_bitset<rivet::ddl::generated::x677185a8>(ResponseFlags_type_id, rivet::ddl::generated::x677185a8_values); 
	}

	[[nodiscard]] auto
	DamagePacket::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DamagePacket::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DamagePacket> {
		if (incoming_type_id == DamagePacket::type_id) {
			return std::make_shared<DamagePacket>(serialized);
		}

		auto DamageEventBase_ptr = DamageEventBase::from_substruct(incoming_type_id, serialized);
		if (DamageEventBase_ptr != nullptr) {
			return DamageEventBase_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
