// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LaserShotTypeShootToTarget.hpp>
#include <rivet/ddl/generated/LaserShotTypeCentipedeSweep.hpp>
#include <rivet/ddl/generated/LaserShotTypeSweepFollow.hpp>
#include <rivet/ddl/generated/LaserShotTypeSweep.hpp>
#include <rivet/ddl/generated/LaserShotTypeAnimEventDriven.hpp> 

#include <rivet/ddl/generated/BotComboLaserShotType.hpp>

namespace rivet::ddl::generated {
	BotComboLaserShotType::BotComboLaserShotType([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	BotComboLaserShotType::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotComboLaserShotType::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboLaserShotType> {
		if (incoming_type_id == BotComboLaserShotType::type_id) {
			return std::make_shared<BotComboLaserShotType>(serialized);
		}

		auto LaserShotTypeShootToTarget_ptr = LaserShotTypeShootToTarget::from_substruct(incoming_type_id, serialized);
		if (LaserShotTypeShootToTarget_ptr != nullptr) {
			return LaserShotTypeShootToTarget_ptr;
		}

		auto LaserShotTypeSweepFollow_ptr = LaserShotTypeSweepFollow::from_substruct(incoming_type_id, serialized);
		if (LaserShotTypeSweepFollow_ptr != nullptr) {
			return LaserShotTypeSweepFollow_ptr;
		}

		auto LaserShotTypeSweep_ptr = LaserShotTypeSweep::from_substruct(incoming_type_id, serialized);
		if (LaserShotTypeSweep_ptr != nullptr) {
			return LaserShotTypeSweep_ptr;
		}

		auto LaserShotTypeAnimEventDriven_ptr = LaserShotTypeAnimEventDriven::from_substruct(incoming_type_id, serialized);
		if (LaserShotTypeAnimEventDriven_ptr != nullptr) {
			return LaserShotTypeAnimEventDriven_ptr;
		}

		auto LaserShotTypeCentipedeSweep_ptr = LaserShotTypeCentipedeSweep::from_substruct(incoming_type_id, serialized);
		if (LaserShotTypeCentipedeSweep_ptr != nullptr) {
			return LaserShotTypeCentipedeSweep_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
