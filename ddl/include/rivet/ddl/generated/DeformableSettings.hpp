// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DeformableSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "DeformableSettings";
		constexpr static rivet::rivet_type_id type_id = 0x8db65910;

		constexpr static std::string_view DrawDistance_type_name = "DrawDistance";
		constexpr static rivet::rivet_type_id DrawDistance_type_id = 0x1f60a446;
		constexpr static std::string_view FadeInterval_type_name = "FadeInterval";
		constexpr static rivet::rivet_type_id FadeInterval_type_id = 0xa5044cea;
		constexpr static std::string_view MinUserBias_type_name = "MinUserBias";
		constexpr static rivet::rivet_type_id MinUserBias_type_id = 0x1cd44eaf;
		constexpr static std::string_view Resolution_type_name = "Resolution";
		constexpr static rivet::rivet_type_id Resolution_type_id = 0x26e551b3;
		constexpr static std::string_view Height_type_name = "Height";
		constexpr static rivet::rivet_type_id Height_type_id = 0xcb35ab68;
		constexpr static std::string_view MinLoD_type_name = "MinLoD";
		constexpr static rivet::rivet_type_id MinLoD_type_id = 0x9e5fe009; 

		explicit DeformableSettings() = default;
		explicit DeformableSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float DrawDistance {};
		float FadeInterval {};
		float MinUserBias {};
		uint32_t Resolution {};
		float Height {};
		uint32_t MinLoD {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DeformableSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
