// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/RandomizedSpawnPointBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED RandomizedSpawnPointArcPrius : RandomizedSpawnPointBasePrius {
		constexpr static std::string_view type_name = "RandomizedSpawnPointArcPrius";
		constexpr static rivet::rivet_type_id type_id = 0x657909ae;

		constexpr static std::string_view MinRadius_type_name = "MinRadius";
		constexpr static rivet::rivet_type_id MinRadius_type_id = 0x50e7abb6;
		constexpr static std::string_view MaxRadius_type_name = "MaxRadius";
		constexpr static rivet::rivet_type_id MaxRadius_type_id = 0x870c19f7;
		constexpr static std::string_view CenterLineAngle_type_name = "CenterLineAngle";
		constexpr static rivet::rivet_type_id CenterLineAngle_type_id = 0xfcb361cc;
		constexpr static std::string_view WidthAngle_type_name = "WidthAngle";
		constexpr static rivet::rivet_type_id WidthAngle_type_id = 0x73aad50f; 

		explicit RandomizedSpawnPointArcPrius() = default;
		explicit RandomizedSpawnPointArcPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MinRadius {};
		float MaxRadius {};
		float CenterLineAngle {};
		float WidthAngle {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RandomizedSpawnPointArcPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
