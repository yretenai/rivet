// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FurProperties.hpp>

namespace rivet::ddl::generated {
	FurProperties::FurProperties([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		LayerCount = serialized->get_uint32(LayerCount_type_id);
		LoDReduction = serialized->get_float(LoDReduction_type_id);
		Length = serialized->get_float(Length_type_id);
		Density = serialized->get_float(Density_type_id);
		OffsetScale = serialized->get_float(OffsetScale_type_id);
		GlossScale = serialized->get_float(GlossScale_type_id);
		SpecularScale = serialized->get_float(SpecularScale_type_id);
		TransmittanceScale = serialized->get_float(TransmittanceScale_type_id);
		LightWrap = serialized->get_float(LightWrap_type_id);
		Wetness = serialized->get_float(Wetness_type_id);
		BaseMapPath = serialized->get_string(BaseMapPath_type_id);
		NormalMapPath = serialized->get_string(NormalMapPath_type_id);
		GlossMapPath = serialized->get_string(GlossMapPath_type_id);
		ControlMapPath = serialized->get_string(ControlMapPath_type_id); 
	}

	[[nodiscard]] auto
	FurProperties::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FurProperties::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FurProperties> {
		if (incoming_type_id == FurProperties::type_id) {
			return std::make_shared<FurProperties>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
