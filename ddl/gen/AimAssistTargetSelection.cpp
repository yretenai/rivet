// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimAssistTargetSelection.hpp>

namespace rivet::ddl::generated {
	AimAssistTargetSelection::AimAssistTargetSelection([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PersistenceZoneFactor = serialized->get_float(PersistenceZoneFactor_type_id, 0.500000f);
		PersistenceHoldTime = serialized->get_float(PersistenceHoldTime_type_id, 1.500000f);
		PersistenceInnerTime = serialized->get_float(PersistenceInnerTime_type_id, 0.700000f);
		PersistenceInnerMod = serialized->get_float(PersistenceInnerMod_type_id, 3.000000f);
		SelectPersistScale = serialized->get_float(SelectPersistScale_type_id, 1.020000f);
		SelectCameraOnScale = serialized->get_float(SelectCameraOnScale_type_id, 1.000000f);
		SelectAngleWeight = serialized->get_float(SelectAngleWeight_type_id, 1.000000f);
		SelectDistanceWeight = serialized->get_float(SelectDistanceWeight_type_id, 0.100000f);
		SelectRecentDamageScale = serialized->get_float(SelectRecentDamageScale_type_id, 1.000000f);
		SelectRecentDamageTime = serialized->get_float(SelectRecentDamageTime_type_id, 1.000000f);
		TargetSearchAngle = serialized->get_float(TargetSearchAngle_type_id, 25.000000f);
		TargetSearchAnglePitch = serialized->get_float(TargetSearchAnglePitch_type_id, 25.000000f);
		UseSearchAngleFromUser = serialized->get_bool(UseSearchAngleFromUser_type_id, false);
		UseSearchAngleSeparatePitch = serialized->get_bool(UseSearchAngleSeparatePitch_type_id, false);
		AutoTargetOuterRange = serialized->get_float(AutoTargetOuterRange_type_id, 2.000000f);
		AutoTargetOuterAngle = serialized->get_float(AutoTargetOuterAngle_type_id, 2.000000f);
		AutoTargetOuterRangeTrav = serialized->get_float(AutoTargetOuterRangeTrav_type_id, 2.000000f);
		AutoTargetOuterAngleTrav = serialized->get_float(AutoTargetOuterAngleTrav_type_id, 2.000000f); 
	}

	[[nodiscard]] auto
	AimAssistTargetSelection::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AimAssistTargetSelection::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimAssistTargetSelection> {
		if (incoming_type_id == AimAssistTargetSelection::type_id) {
			return std::make_shared<AimAssistTargetSelection>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
