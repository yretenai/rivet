// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ShotMotionProtonSeekerPrius.hpp> 

#include <rivet/ddl/generated/HomingShotMotionGamePrius.hpp>

namespace rivet::ddl::generated {
	HomingShotMotionGamePrius::HomingShotMotionGamePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): VariableSpeedShotMotionGamePrius(serialized) {
		DefaultJoint = serialized->get_string(DefaultJoint_type_id);
		NearbyCameraShake = serialized->get_string(NearbyCameraShake_type_id); 
	}

	auto
	HomingShotMotionGamePrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	HomingShotMotionGamePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HomingShotMotionGamePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HomingShotMotionGamePrius> {
		if (incoming_type_id == HomingShotMotionGamePrius::type_id) {
			return std::make_shared<HomingShotMotionGamePrius>(serialized);
		}

		auto ShotMotionProtonSeekerPrius_ptr = ShotMotionProtonSeekerPrius::from_substruct(incoming_type_id, serialized);
		if (ShotMotionProtonSeekerPrius_ptr != nullptr) {
			return ShotMotionProtonSeekerPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
