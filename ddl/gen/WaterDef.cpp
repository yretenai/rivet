// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/WaterDef.hpp>

namespace rivet::ddl::generated {
	WaterDef::WaterDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Type = serialized->get_enum<rivet::ddl::generated::xd291bf0b>(Type_type_id, rivet::ddl::generated::xd291bf0b_values, rivet::ddl::generated::xd291bf0b::Ocean);
		ReflectionMap = serialized->get_string(ReflectionMap_type_id, {});
		Material = serialized->get_string(Material_type_id, {});
		AVMaterial = serialized->get_string(AVMaterial_type_id, {});
		AudioMaterial = serialized->get_string(AudioMaterial_type_id, {});
		DistanceFactor = serialized->get_float(DistanceFactor_type_id, 1.000000f);
		FoamColor = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(FoamColor_type_id);
		WaveAmplitude = serialized->get_float(WaveAmplitude_type_id, 4.000000f);
		ChopScale = serialized->get_float(ChopScale_type_id, 1.000000f);
		WindSpeed = serialized->get_float(WindSpeed_type_id, 32.000000f);
		TimeScale = serialized->get_float(TimeScale_type_id, 0.850000f);
		Darkening = serialized->get_float(Darkening_type_id, 0.500000f);
		Depth = serialized->get_float(Depth_type_id, 2.000000f);
		Color = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Color_type_id);
		WindIndependence = serialized->get_float(WindIndependence_type_id, 0.000000f);
		Normalz = serialized->get_float(Normalz_type_id, 2.000000f);
		FoamAmp = serialized->get_float(FoamAmp_type_id, 0.000000f);
		FoamBias = serialized->get_float(FoamBias_type_id, 3.000000f);
		FoamEmit = serialized->get_float(FoamEmit_type_id, 1.000000f);
		FoamFade = serialized->get_float(FoamFade_type_id, 0.400000f);
		FoamPower = serialized->get_float(FoamPower_type_id, 2.000000f);
		WaveElongate = serialized->get_float(WaveElongate_type_id, 0.000000f);
		Cascade0 = serialized->get_float(Cascade0_type_id, 1024.000000f);
		Cascade1 = serialized->get_float(Cascade1_type_id, 195.789993f);
		Cascade2 = serialized->get_float(Cascade2_type_id, 37.439999f);
		Cascade3 = serialized->get_float(Cascade3_type_id, 35.110001f);
		Tile0 = serialized->get_float(Tile0_type_id, 5.100000f);
		Tile1 = serialized->get_float(Tile1_type_id, 3.500000f);
		Tile2 = serialized->get_float(Tile2_type_id, 3.100000f);
		Tile3 = serialized->get_float(Tile3_type_id, 17.299999f);
		Wave0 = serialized->get_float(Wave0_type_id, 1.000000f);
		Wave1 = serialized->get_float(Wave1_type_id, 2.000000f);
		Wave2 = serialized->get_float(Wave2_type_id, 20.000000f);
		Wave3 = serialized->get_float(Wave3_type_id, 4.000000f); 
	}

	[[nodiscard]] auto
	WaterDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WaterDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WaterDef> {
		if (incoming_type_id == WaterDef::type_id) {
			return std::make_shared<WaterDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
