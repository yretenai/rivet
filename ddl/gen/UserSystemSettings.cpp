// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UserSystemSettings.hpp>

namespace rivet::ddl::generated {
	UserSystemSettings::UserSystemSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MaxPerUserBindingsConfigCount = serialized->get_int32(MaxPerUserBindingsConfigCount_type_id, 8u);
		MaxPerUserControlGroupCount = serialized->get_int32(MaxPerUserControlGroupCount_type_id, 16u);
		MaxPerUserControlCount = serialized->get_int32(MaxPerUserControlCount_type_id, 256u);
		MaxPerUserFinalizeStepCount = serialized->get_int32(MaxPerUserFinalizeStepCount_type_id, 8u);
		MaxPlayingUsers = serialized->get_uint8(MaxPlayingUsers_type_id, 2u);
		UsePureUserName = serialized->get_bool(UsePureUserName_type_id, false);
		SetSignedInAsPlaying = serialized->get_bool(SetSignedInAsPlaying_type_id, true);
		GuestsEnabled = serialized->get_bool(GuestsEnabled_type_id, true);
		AllocInstanceId = serialized->get_bool(AllocInstanceId_type_id, false);
		FinalUseKeyboard = serialized->get_bool(FinalUseKeyboard_type_id, true);
		FinalUseMouse = serialized->get_bool(FinalUseMouse_type_id, true);
		UseDefaultUserName = serialized->get_bool(UseDefaultUserName_type_id, false); 
	}

	[[nodiscard]] auto
	UserSystemSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UserSystemSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UserSystemSettings> {
		if (incoming_type_id == UserSystemSettings::type_id) {
			return std::make_shared<UserSystemSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
