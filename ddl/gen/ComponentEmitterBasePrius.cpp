// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ComponentEmitterLocalRandomOffsetPrius.hpp>
#include <rivet/ddl/generated/ComponentEmitterLocatorPrius.hpp>
#include <rivet/ddl/generated/ComponentEmitterMultiLocatorGamePrius.hpp>
#include <rivet/ddl/generated/HexapodWeaponEmitterPrius.hpp>
#include <rivet/ddl/generated/ComponentEmitterLocalOffsetElevationPrius.hpp>
#include <rivet/ddl/generated/ComponentEmitterLocalOffsetPrius.hpp> 

#include <rivet/ddl/generated/ComponentEmitterBasePrius.hpp>

namespace rivet::ddl::generated {
	ComponentEmitterBasePrius::ComponentEmitterBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	ComponentEmitterBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ComponentEmitterBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ComponentEmitterBasePrius> {
		if (incoming_type_id == ComponentEmitterBasePrius::type_id) {
			return std::make_shared<ComponentEmitterBasePrius>(serialized);
		}

		auto ComponentEmitterLocalOffsetPrius_ptr = ComponentEmitterLocalOffsetPrius::from_substruct(incoming_type_id, serialized);
		if (ComponentEmitterLocalOffsetPrius_ptr != nullptr) {
			return ComponentEmitterLocalOffsetPrius_ptr;
		}

		auto ComponentEmitterLocalOffsetElevationPrius_ptr = ComponentEmitterLocalOffsetElevationPrius::from_substruct(incoming_type_id, serialized);
		if (ComponentEmitterLocalOffsetElevationPrius_ptr != nullptr) {
			return ComponentEmitterLocalOffsetElevationPrius_ptr;
		}

		auto ComponentEmitterMultiLocatorGamePrius_ptr = ComponentEmitterMultiLocatorGamePrius::from_substruct(incoming_type_id, serialized);
		if (ComponentEmitterMultiLocatorGamePrius_ptr != nullptr) {
			return ComponentEmitterMultiLocatorGamePrius_ptr;
		}

		auto ComponentEmitterLocatorPrius_ptr = ComponentEmitterLocatorPrius::from_substruct(incoming_type_id, serialized);
		if (ComponentEmitterLocatorPrius_ptr != nullptr) {
			return ComponentEmitterLocatorPrius_ptr;
		}

		auto ComponentEmitterLocalRandomOffsetPrius_ptr = ComponentEmitterLocalRandomOffsetPrius::from_substruct(incoming_type_id, serialized);
		if (ComponentEmitterLocalRandomOffsetPrius_ptr != nullptr) {
			return ComponentEmitterLocalRandomOffsetPrius_ptr;
		}

		auto HexapodWeaponEmitterPrius_ptr = HexapodWeaponEmitterPrius::from_substruct(incoming_type_id, serialized);
		if (HexapodWeaponEmitterPrius_ptr != nullptr) {
			return HexapodWeaponEmitterPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
