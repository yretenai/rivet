// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/FlockablePrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SimpleFishPrius : FlockablePrius {
		constexpr static std::string_view type_name = "SimpleFishPrius";
		constexpr static rivet::rivet_type_id type_id = 0x9f6b9f13;

		constexpr static std::string_view MaxDesireSpeed_type_name = "MaxDesireSpeed";
		constexpr static rivet::rivet_type_id MaxDesireSpeed_type_id = 0x35391b1d;
		constexpr static std::string_view MinDesireSpeed_type_name = "MinDesireSpeed";
		constexpr static rivet::rivet_type_id MinDesireSpeed_type_id = 0x8c1f806c;
		constexpr static std::string_view ArriveRange_type_name = "ArriveRange";
		constexpr static rivet::rivet_type_id ArriveRange_type_id = 0xd7a95501;
		constexpr static std::string_view MinScale_type_name = "MinScale";
		constexpr static rivet::rivet_type_id MinScale_type_id = 0x13b84df2;
		constexpr static std::string_view MaxScale_type_name = "MaxScale";
		constexpr static rivet::rivet_type_id MaxScale_type_id = 0xf5d8e213;
		constexpr static std::string_view MaxAccelAngle_type_name = "MaxAccelAngle";
		constexpr static rivet::rivet_type_id MaxAccelAngle_type_id = 0x65ecca32; 

		explicit SimpleFishPrius() = default;
		explicit SimpleFishPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MaxDesireSpeed {};
		float MinDesireSpeed {};
		float ArriveRange {};
		float MinScale {};
		float MaxScale {};
		float MaxAccelAngle {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleFishPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
