// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SwingingMotionPrius.hpp>

namespace rivet::ddl::generated {
	SwingingMotionPrius::SwingingMotionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PivotJoint = serialized->get_string(PivotJoint_type_id, {});
		ReferenceJoint = serialized->get_string(ReferenceJoint_type_id, {});
		Constraint = serialized->get_enum<rivet::ddl::generated::xd0fb54d1>(Constraint_type_id, rivet::ddl::generated::xd0fb54d1_values, rivet::ddl::generated::xd0fb54d1::Negative_Y);
		SwingPlane = serialized->get_enum<rivet::ddl::generated::x30dbcb6e>(SwingPlane_type_id, rivet::ddl::generated::x30dbcb6e_values, rivet::ddl::generated::x30dbcb6e::Z);
		CenterOfMassDistance = serialized->get_float(CenterOfMassDistance_type_id, 1.000000f);
		AngleLimit = serialized->get_float(AngleLimit_type_id, 90.000000f);
		PosAngleLimit = serialized->get_float(PosAngleLimit_type_id, 90.000000f);
		NegAngleLimit = serialized->get_float(NegAngleLimit_type_id, 90.000000f);
		Gravity = serialized->get_float(Gravity_type_id, 9.800000f);
		ConstrainToPlane = serialized->get_bool(ConstrainToPlane_type_id, false);
		ReversePivotJoint = serialized->get_bool(ReversePivotJoint_type_id, false);
		EnableSoundEvents = serialized->get_bool(EnableSoundEvents_type_id, true); 
	}

	[[nodiscard]] auto
	SwingingMotionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SwingingMotionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SwingingMotionPrius> {
		if (incoming_type_id == SwingingMotionPrius::type_id) {
			return std::make_shared<SwingingMotionPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
