// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ToggleLookNodeDef.hpp>
#include <rivet/ddl/generated/SpawnNodeDef.hpp>
#include <rivet/ddl/generated/BlockNodeDef.hpp>
#include <rivet/ddl/generated/CommentBaseDef.hpp>
#include <rivet/ddl/generated/DestroyActorNodeDef.hpp>
#include <rivet/ddl/generated/ConnectionTuidDef.hpp>
#include <rivet/ddl/generated/DeathNodeDef.hpp>
#include <rivet/ddl/generated/EnableLookNodeDef.hpp>
#include <rivet/ddl/generated/CreateNodeDef.hpp>
#include <rivet/ddl/generated/DisableLookNodeDef.hpp>
#include <rivet/ddl/generated/BlockSetNodeDef.hpp>
#include <rivet/ddl/generated/GameEventNodeDef.hpp>
#include <rivet/ddl/generated/HealthNodeDef.hpp>
#include <rivet/ddl/generated/PlayAnimationDriverNodeDef.hpp>
#include <rivet/ddl/generated/PhysicsPropertyNodeDef.hpp> 

#include <rivet/ddl/generated/BreakableNodeGraphDef.hpp>

namespace rivet::ddl::generated {
	BreakableNodeGraphDef::BreakableNodeGraphDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id, 0ull);
		Type = serialized->get_enum<rivet::ddl::generated::x577f103e>(Type_type_id, rivet::ddl::generated::x577f103e_values, rivet::ddl::generated::x577f103e::Invalid);
		Name = serialized->get_string(Name_type_id, {});
		BlockNodes = serialized->unwrap_into_many<rivet::ddl::generated::BlockNodeDef>(BlockNodes_type_id);
		BlockSetNodes = serialized->unwrap_into_many<rivet::ddl::generated::BlockSetNodeDef>(BlockSetNodes_type_id);
		Comments = serialized->unwrap_into_many<rivet::ddl::generated::CommentBaseDef>(Comments_type_id);
		Connections = serialized->unwrap_into_many<rivet::ddl::generated::ConnectionTuidDef>(Connections_type_id);
		CreateNode = serialized->unwrap_into<rivet::ddl::generated::CreateNodeDef>(CreateNode_type_id);
		DeathNode = serialized->unwrap_into<rivet::ddl::generated::DeathNodeDef>(DeathNode_type_id);
		DestroyActorNodes = serialized->unwrap_into_many<rivet::ddl::generated::DestroyActorNodeDef>(DestroyActorNodes_type_id);
		DisableLookNodes = serialized->unwrap_into_many<rivet::ddl::generated::DisableLookNodeDef>(DisableLookNodes_type_id);
		EnableLookNodes = serialized->unwrap_into_many<rivet::ddl::generated::EnableLookNodeDef>(EnableLookNodes_type_id);
		GameEventNodes = serialized->unwrap_into_many<rivet::ddl::generated::GameEventNodeDef>(GameEventNodes_type_id);
		HealthNode = serialized->unwrap_into<rivet::ddl::generated::HealthNodeDef>(HealthNode_type_id);
		PhysicsPropertyNodes = serialized->unwrap_into_many<rivet::ddl::generated::PhysicsPropertyNodeDef>(PhysicsPropertyNodes_type_id);
		PlayAnimNodes = serialized->unwrap_into_many<rivet::ddl::generated::PlayAnimationDriverNodeDef>(PlayAnimNodes_type_id);
		SpawnNodes = serialized->unwrap_into_many<rivet::ddl::generated::SpawnNodeDef>(SpawnNodes_type_id);
		ToggleLookNodes = serialized->unwrap_into_many<rivet::ddl::generated::ToggleLookNodeDef>(ToggleLookNodes_type_id); 
	}

	[[nodiscard]] auto
	BreakableNodeGraphDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BreakableNodeGraphDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BreakableNodeGraphDef> {
		if (incoming_type_id == BreakableNodeGraphDef::type_id) {
			return std::make_shared<BreakableNodeGraphDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
