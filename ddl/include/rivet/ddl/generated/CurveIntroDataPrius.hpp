// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/IntroDataPrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CurveIntroDataPrius : IntroDataPrius {
		constexpr static std::string_view type_name = "CurveIntroDataPrius";
		constexpr static rivet::rivet_type_id type_id = 0x3e385097;

		constexpr static std::string_view IntroDriverName_type_name = "IntroDriverName";
		constexpr static rivet::rivet_type_id IntroDriverName_type_id = 0xdb4401a2;
		constexpr static std::string_view DriverName_type_name = "DriverName";
		constexpr static rivet::rivet_type_id DriverName_type_id = 0x7a8704f5;
		constexpr static std::string_view OutroDriverName_type_name = "OutroDriverName";
		constexpr static rivet::rivet_type_id OutroDriverName_type_id = 0xd034d2d1;
		constexpr static std::string_view Speed_type_name = "Speed";
		constexpr static rivet::rivet_type_id Speed_type_id = 0x16753237;
		constexpr static std::string_view MaintainYUp_type_name = "MaintainYUp";
		constexpr static rivet::rivet_type_id MaintainYUp_type_id = 0x166fa1e9; 

		explicit CurveIntroDataPrius() = default;
		explicit CurveIntroDataPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view IntroDriverName {};
		std::string_view DriverName {};
		std::string_view OutroDriverName {};
		float Speed {};
		bool MaintainYUp {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CurveIntroDataPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
