// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimSkeletonInfo.hpp>
#include <rivet/ddl/generated/MayaNameTrackTags.hpp>
#include <rivet/ddl/generated/CineMenuOption.hpp> 

#include <rivet/ddl/generated/Cinematic2ActorCustomizationConfig.hpp>

namespace rivet::ddl::generated {
	Cinematic2ActorCustomizationConfig::Cinematic2ActorCustomizationConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		CineOptionsMenu = serialized->unwrap_into_many<rivet::ddl::generated::CineMenuOption>(CineOptionsMenu_type_id);
		MayaNameTrackTags = serialized->unwrap_into_many<rivet::ddl::generated::MayaNameTrackTags>(MayaNameTrackTags_type_id);
		AnimSkeletonInfos = serialized->unwrap_into_many<rivet::ddl::generated::AnimSkeletonInfo>(AnimSkeletonInfos_type_id); 
	}

	[[nodiscard]] auto
	Cinematic2ActorCustomizationConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2ActorCustomizationConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2ActorCustomizationConfig> {
		if (incoming_type_id == Cinematic2ActorCustomizationConfig::type_id) {
			return std::make_shared<Cinematic2ActorCustomizationConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
