// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VanityOverrideEvent.hpp>

namespace rivet::ddl::generated {
	VanityOverrideEvent::VanityOverrideEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		HelmetModel = serialized->get_string(HelmetModel_type_id, {});
		HeadModel = serialized->get_string(HeadModel_type_id, {});
		TorsoModel = serialized->get_string(TorsoModel_type_id, {});
		LeftGloveModel = serialized->get_string(LeftGloveModel_type_id, {});
		RightGloveModel = serialized->get_string(RightGloveModel_type_id, {});
		LegsModel = serialized->get_string(LegsModel_type_id, {});
		BootsModel = serialized->get_string(BootsModel_type_id, {});
		GloveOverrideReset = serialized->get_bool(GloveOverrideReset_type_id, false); 
	}

	[[nodiscard]] auto
	VanityOverrideEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VanityOverrideEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VanityOverrideEvent> {
		if (incoming_type_id == VanityOverrideEvent::type_id) {
			return std::make_shared<VanityOverrideEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
