// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VolumetricCloudsShadowDef.hpp>
#include <rivet/ddl/generated/VolumetricCloudsLightingDef.hpp>
#include <rivet/ddl/generated/VolumetricClouds2DLayerDef.hpp>
#include <rivet/ddl/generated/VolumetricCloudsWindDef.hpp>
#include <rivet/ddl/generated/VolumetricCloudsModelingDef.hpp>
#include <rivet/ddl/generated/VolumetricCloudsRayMarchingDef.hpp> 

#include <rivet/ddl/generated/VolumetricCloudsDef.hpp>

namespace rivet::ddl::generated {
	VolumetricCloudsDef::VolumetricCloudsDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id, false);
		EarthRadiusScale = serialized->get_float(EarthRadiusScale_type_id, 10.000000f);
		VolumetricCloudsRayMarching = serialized->unwrap_into<rivet::ddl::generated::VolumetricCloudsRayMarchingDef>(VolumetricCloudsRayMarching_type_id);
		VolumetricCloudsModeling = serialized->unwrap_into<rivet::ddl::generated::VolumetricCloudsModelingDef>(VolumetricCloudsModeling_type_id);
		VolumetricCloudsWind = serialized->unwrap_into<rivet::ddl::generated::VolumetricCloudsWindDef>(VolumetricCloudsWind_type_id);
		VolumetricClouds2DLayer = serialized->unwrap_into<rivet::ddl::generated::VolumetricClouds2DLayerDef>(VolumetricClouds2DLayer_type_id);
		VolumetricCloudsLighting = serialized->unwrap_into<rivet::ddl::generated::VolumetricCloudsLightingDef>(VolumetricCloudsLighting_type_id);
		VolumetricCloudsShadow = serialized->unwrap_into<rivet::ddl::generated::VolumetricCloudsShadowDef>(VolumetricCloudsShadow_type_id); 
	}

	[[nodiscard]] auto
	VolumetricCloudsDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VolumetricCloudsDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VolumetricCloudsDef> {
		if (incoming_type_id == VolumetricCloudsDef::type_id) {
			return std::make_shared<VolumetricCloudsDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
