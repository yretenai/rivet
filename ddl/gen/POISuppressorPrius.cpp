// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/POISuppressorPrius.hpp>

namespace rivet::ddl::generated {
	POISuppressorPrius::POISuppressorPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Priority = serialized->get_enum<rivet::ddl::generated::xfb0b3aad>(Priority_type_id, rivet::ddl::generated::xfb0b3aad_values);
		AutoDeleteTimer = serialized->get_float(AutoDeleteTimer_type_id);
		UseActorPosition = serialized->get_bool(UseActorPosition_type_id);
		Dynamic = serialized->get_bool(Dynamic_type_id);
		OverridePosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(OverridePosition_type_id);
		Radius = serialized->get_float(Radius_type_id); 
	}

	[[nodiscard]] auto
	POISuppressorPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	POISuppressorPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<POISuppressorPrius> {
		if (incoming_type_id == POISuppressorPrius::type_id) {
			return std::make_shared<POISuppressorPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
