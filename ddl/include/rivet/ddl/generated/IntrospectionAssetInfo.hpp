// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct IntrospectionZoneInstances;
	struct IntrospectionRootSet;
	struct IntrospectionAssetEntry; 

	struct RIVET_DDL_SHARED IntrospectionAssetInfo : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "IntrospectionAssetInfo";
		constexpr static rivet::rivet_type_id type_id = 0xc16dffb0;

		constexpr static std::string_view Platform_type_name = "Platform";
		constexpr static rivet::rivet_type_id Platform_type_id = 0xc3536dbb;
		constexpr static std::string_view AssetEntries_type_name = "AssetEntries";
		constexpr static rivet::rivet_type_id AssetEntries_type_id = 0x30d5da47;
		constexpr static std::string_view AlwaysLoadedSet_type_name = "AlwaysLoadedSet";
		constexpr static rivet::rivet_type_id AlwaysLoadedSet_type_id = 0x2ef3316d;
		constexpr static std::string_view RootSets_type_name = "RootSets";
		constexpr static rivet::rivet_type_id RootSets_type_id = 0xeca3068b;
		constexpr static std::string_view ZoneInstances_type_name = "ZoneInstances";
		constexpr static rivet::rivet_type_id ZoneInstances_type_id = 0xc1d3a9a2; 

		explicit IntrospectionAssetInfo() = default;
		explicit IntrospectionAssetInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Platform {};
		std::vector<std::shared_ptr<rivet::ddl::generated::IntrospectionAssetEntry>> AssetEntries {};
		std::shared_ptr<rivet::ddl::generated::IntrospectionRootSet> AlwaysLoadedSet {};
		std::vector<std::shared_ptr<rivet::ddl::generated::IntrospectionRootSet>> RootSets {};
		std::vector<std::shared_ptr<rivet::ddl::generated::IntrospectionZoneInstances>> ZoneInstances {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<IntrospectionAssetInfo>;
	};
} // namespace rivet::ddl::generated

// clang-format on
