// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TerrainPaintingDebugOptions.hpp>

namespace rivet::ddl::generated {
	TerrainPaintingDebugOptions::TerrainPaintingDebugOptions([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DebugMode = serialized->get_enum<rivet::ddl::generated::x38a8002d>(DebugMode_type_id, rivet::ddl::generated::x38a8002d_values, rivet::ddl::generated::x38a8002d::Off);
		WireframeMode = serialized->get_enum<rivet::ddl::generated::x52cca08e>(WireframeMode_type_id, rivet::ddl::generated::x52cca08e_values, rivet::ddl::generated::x52cca08e::Normal);
		BrushAlpha = serialized->get_float(BrushAlpha_type_id, 0.600000);
		ClipMapFade = serialized->get_float(ClipMapFade_type_id, 0.400000);
		DetailDisplacementDistance = serialized->get_float(DetailDisplacementDistance_type_id, 10.000000);
		DetailDisplacementFalloff = serialized->get_float(DetailDisplacementFalloff_type_id, 5.000000);
		DetailDisplacementLevels = serialized->get_int32(DetailDisplacementLevels_type_id, 3);
		LodDistanceScale = serialized->get_float(LodDistanceScale_type_id, 5.000000);
		QuadtreeMinDepth = serialized->get_int32(QuadtreeMinDepth_type_id, 0);
		QuadtreeMaxDepth = serialized->get_int32(QuadtreeMaxDepth_type_id, 10);
		TileVertexDensity = serialized->get_int32(TileVertexDensity_type_id, 5);
		ApplyHeightField = serialized->get_bool(ApplyHeightField_type_id, true);
		EnableDetailDisplacement = serialized->get_bool(EnableDetailDisplacement_type_id, true);
		EnableTileRotation = serialized->get_bool(EnableTileRotation_type_id, true);
		ForceGeneratedVistaMap = serialized->get_bool(ForceGeneratedVistaMap_type_id, false);
		FixTJunctions = serialized->get_bool(FixTJunctions_type_id, true);
		LockRadiusAxes = serialized->get_bool(LockRadiusAxes_type_id, true);
		LodAroundOrigin = serialized->get_bool(LodAroundOrigin_type_id, false);
		ShowDebugGrid = serialized->get_bool(ShowDebugGrid_type_id, false); 
	}

	[[nodiscard]] auto
	TerrainPaintingDebugOptions::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TerrainPaintingDebugOptions::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TerrainPaintingDebugOptions> {
		if (incoming_type_id == TerrainPaintingDebugOptions::type_id) {
			return std::make_shared<TerrainPaintingDebugOptions>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
