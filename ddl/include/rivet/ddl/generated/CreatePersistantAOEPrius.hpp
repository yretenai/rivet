// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ScriptedShotEffectBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct ScriptedShotEffectListElement; 

	struct RIVET_DDL_SHARED CreatePersistantAOEPrius : ScriptedShotEffectBasePrius {
		constexpr const static std::string_view type_name = "CreatePersistantAOEPrius";
		constexpr const static rivet::rivet_type_id type_id = 0x99670ad2;

		constexpr const static std::string_view RepeatTime_type_name = "RepeatTime";
		constexpr const static rivet::rivet_type_id RepeatTime_type_id = 0x88322744;
		constexpr const static std::string_view LifeTime_type_name = "LifeTime";
		constexpr const static rivet::rivet_type_id LifeTime_type_id = 0x67d422c6;
		constexpr const static std::string_view UpdateInterval_type_name = "UpdateInterval";
		constexpr const static rivet::rivet_type_id UpdateInterval_type_id = 0x811184bd;
		constexpr const static std::string_view Radius_type_name = "Radius";
		constexpr const static rivet::rivet_type_id Radius_type_id = 0x504203d;
		constexpr const static std::string_view LOS_type_name = "LOS";
		constexpr const static rivet::rivet_type_id LOS_type_id = 0x115a911b;
		constexpr const static std::string_view AOEEffects_type_name = "AOEEffects";
		constexpr const static rivet::rivet_type_id AOEEffects_type_id = 0x7c158316; 

		explicit CreatePersistantAOEPrius() = default;
		explicit CreatePersistantAOEPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float RepeatTime {};
		float LifeTime {};
		float UpdateInterval {};
		float Radius {};
		bool LOS {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ScriptedShotEffectListElement>> AOEEffects {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CreatePersistantAOEPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
