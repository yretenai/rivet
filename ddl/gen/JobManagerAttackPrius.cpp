// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/JobManagerAttackPrius.hpp>

namespace rivet::ddl::generated {
	JobManagerAttackPrius::JobManagerAttackPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AttackJobPool = serialized->get_enum<rivet::ddl::generated::x53ecdc9c>(AttackJobPool_type_id, rivet::ddl::generated::x53ecdc9c_values);
		ConfigModHash = serialized->get_uint32(ConfigModHash_type_id);
		MaxAttackers = serialized->get_uint32(MaxAttackers_type_id);
		JobRepostTime = serialized->get_float(JobRepostTime_type_id);
		AttackCycleHotTime = serialized->get_float(AttackCycleHotTime_type_id);
		AttackCycleHotMaxRepeat = serialized->get_uint32(AttackCycleHotMaxRepeat_type_id);
		AttackCycleColdTime = serialized->get_float(AttackCycleColdTime_type_id);
		AttackCycleColdChance = serialized->get_float(AttackCycleColdChance_type_id); 
	}

	[[nodiscard]] auto
	JobManagerAttackPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	JobManagerAttackPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<JobManagerAttackPrius> {
		if (incoming_type_id == JobManagerAttackPrius::type_id) {
			return std::make_shared<JobManagerAttackPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
