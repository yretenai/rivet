// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CinematicFootstepEvent.hpp> 

#include <rivet/ddl/generated/FootstepEvent.hpp>

namespace rivet::ddl::generated {
	FootstepEvent::FootstepEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): GroundEvent(serialized) {
		Foot = serialized->get_enum<rivet::ddl::generated::x94d69111>(Foot_type_id, rivet::ddl::generated::x94d69111_values, rivet::ddl::generated::x94d69111::Left);
		FootIndex = serialized->get_int32(FootIndex_type_id, 0);
		Strength = serialized->get_enum<rivet::ddl::generated::x94fdc626>(Strength_type_id, rivet::ddl::generated::x94fdc626_values, rivet::ddl::generated::x94fdc626::Soft);
		Speed = serialized->get_enum<rivet::ddl::generated::x59a8f068>(Speed_type_id, rivet::ddl::generated::x59a8f068_values, rivet::ddl::generated::x59a8f068::Walk); 
	}

	[[nodiscard]] auto
	FootstepEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FootstepEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FootstepEvent> {
		if (incoming_type_id == FootstepEvent::type_id) {
			return std::make_shared<FootstepEvent>(serialized);
		}

		auto CinematicFootstepEvent_ptr = CinematicFootstepEvent::from_substruct(incoming_type_id, serialized);
		if (CinematicFootstepEvent_ptr != nullptr) {
			return CinematicFootstepEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
