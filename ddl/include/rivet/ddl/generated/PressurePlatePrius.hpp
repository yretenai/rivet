// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED PressurePlatePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "PressurePlatePrius";
		constexpr static rivet::rivet_type_id type_id = 0x48d2f28a;

		constexpr static std::string_view TimeToPress_type_name = "TimeToPress";
		constexpr static rivet::rivet_type_id TimeToPress_type_id = 0xe46af25f;
		constexpr static std::string_view TimeToReset_type_name = "TimeToReset";
		constexpr static rivet::rivet_type_id TimeToReset_type_id = 0xc93331af;
		constexpr static std::string_view StayPressed_type_name = "StayPressed";
		constexpr static rivet::rivet_type_id StayPressed_type_id = 0xcfbbb0e3; 

		explicit PressurePlatePrius() = default;
		explicit PressurePlatePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float TimeToPress {};
		float TimeToReset {};
		bool StayPressed {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PressurePlatePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
