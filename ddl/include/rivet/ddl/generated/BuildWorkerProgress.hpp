// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xa2b63d63.hpp>
#include <rivet/ddl/generated/enums/x8b211a61.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED BuildWorkerProgress : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "BuildWorkerProgress";
		constexpr static rivet::rivet_type_id type_id = 0xbca2f979;

		constexpr static std::string_view AssetPath_type_name = "AssetPath";
		constexpr static rivet::rivet_type_id AssetPath_type_id = 0xefa614b;
		constexpr static std::string_view TargetId_type_name = "TargetId";
		constexpr static rivet::rivet_type_id TargetId_type_id = 0xc3642b05;
		constexpr static std::string_view TargetType_type_name = "TargetType";
		constexpr static rivet::rivet_type_id TargetType_type_id = 0x75a19d21;
		constexpr static std::string_view State_type_name = "State";
		constexpr static rivet::rivet_type_id State_type_id = 0xbac01e3a;
		constexpr static std::string_view BuildRuleHash_type_name = "BuildRuleHash";
		constexpr static rivet::rivet_type_id BuildRuleHash_type_id = 0xd4ff8fbc;
		constexpr static std::string_view BuildStartTime_type_name = "BuildStartTime";
		constexpr static rivet::rivet_type_id BuildStartTime_type_id = 0x94ec5d36;
		constexpr static std::string_view BuildEstimatedTime_type_name = "BuildEstimatedTime";
		constexpr static rivet::rivet_type_id BuildEstimatedTime_type_id = 0x208e64ba; 

		explicit BuildWorkerProgress() = default;
		explicit BuildWorkerProgress([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view AssetPath {};
		std::string_view TargetId {};
		rivet::ddl::generated::x8b211a61 TargetType {};
		rivet::ddl::generated::xa2b63d63 State {};
		uint32_t BuildRuleHash {};
		uint64_t BuildStartTime {};
		uint64_t BuildEstimatedTime {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BuildWorkerProgress>;
	};
} // namespace rivet::ddl::generated

// clang-format on
