// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SkinItemModelVariantOverridePrius.hpp>
#include <rivet/ddl/generated/SkinItemConduitOverridePrius.hpp>
#include <rivet/ddl/generated/SkinItemColorOverridePrius.hpp>
#include <rivet/ddl/generated/SkinItemMaterialOverridePrius.hpp>
#include <rivet/ddl/generated/VanityItemPrius.hpp>
#include <rivet/ddl/generated/SkinItemTextureOverridePrius.hpp>
#include <rivet/ddl/generated/SkinItemLocatorOverridePrius.hpp> 

#include <rivet/ddl/generated/SkinItemPrius.hpp>

namespace rivet::ddl::generated {
	SkinItemPrius::SkinItemPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ItemPrius(serialized) {
		LocatorOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemLocatorOverridePrius>(LocatorOverrideList_type_id);
		TextureOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemTextureOverridePrius>(TextureOverrideList_type_id);
		MaterialOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemMaterialOverridePrius>(MaterialOverrideList_type_id);
		ColorOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemColorOverridePrius>(ColorOverrideList_type_id);
		ConduitOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemConduitOverridePrius>(ConduitOverrideList_type_id);
		ModelVariantOverrideList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemModelVariantOverridePrius>(ModelVariantOverrideList_type_id); 
	}

	[[nodiscard]] auto
	SkinItemPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SkinItemPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkinItemPrius> {
		if (incoming_type_id == SkinItemPrius::type_id) {
			return std::make_shared<SkinItemPrius>(serialized);
		}

		auto VanityItemPrius_ptr = VanityItemPrius::from_substruct(incoming_type_id, serialized);
		if (VanityItemPrius_ptr != nullptr) {
			return VanityItemPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
