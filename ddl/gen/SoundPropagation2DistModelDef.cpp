// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SoundPropagation2InvSqDef.hpp>
#include <rivet/ddl/generated/SoundPropagation2BezierDef.hpp>
#include <rivet/ddl/generated/SoundPropagation2LinearDef.hpp> 

#include <rivet/ddl/generated/SoundPropagation2DistModelDef.hpp>

namespace rivet::ddl::generated {
	SoundPropagation2DistModelDef::SoundPropagation2DistModelDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VolumedB = serialized->get_float(VolumedB_type_id);
		NearFieldDistance = serialized->get_float(NearFieldDistance_type_id);
		ModelType = serialized->get_enum<rivet::ddl::generated::xcb4c1031>(ModelType_type_id, rivet::ddl::generated::xcb4c1031_values);
		PropertiesLinear = serialized->unwrap_into<rivet::ddl::generated::SoundPropagation2LinearDef>(PropertiesLinear_type_id);
		PropertiesBezier = serialized->unwrap_into<rivet::ddl::generated::SoundPropagation2BezierDef>(PropertiesBezier_type_id);
		PropertiesInvSq = serialized->unwrap_into<rivet::ddl::generated::SoundPropagation2InvSqDef>(PropertiesInvSq_type_id); 
	}

	[[nodiscard]] auto
	SoundPropagation2DistModelDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SoundPropagation2DistModelDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundPropagation2DistModelDef> {
		if (incoming_type_id == SoundPropagation2DistModelDef::type_id) {
			return std::make_shared<SoundPropagation2DistModelDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
