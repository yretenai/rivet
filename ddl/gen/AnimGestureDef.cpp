// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimGestureDef.hpp>

namespace rivet::ddl::generated {
	AnimGestureDef::AnimGestureDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id, 0);
		Name = serialized->get_string(Name_type_id, {});
		ClipPath = serialized->get_string(ClipPath_type_id, {});
		MirrorAxis = serialized->get_enum<rivet::ddl::generated::x3749ca1b>(MirrorAxis_type_id, rivet::ddl::generated::x3749ca1b_values, rivet::ddl::generated::x3749ca1b::none);
		StartTime = serialized->get_float(StartTime_type_id, 0.000000);
		StartOffset = serialized->get_float(StartOffset_type_id, 0.000000);
		BlendInDuration = serialized->get_float(BlendInDuration_type_id, 0.250000);
		EndOffset = serialized->get_float(EndOffset_type_id, 0.000000);
		BlendOutDuration = serialized->get_float(BlendOutDuration_type_id, 0.250000);
		Weight = serialized->get_float(Weight_type_id, 1.000000); 
	}

	[[nodiscard]] auto
	AnimGestureDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimGestureDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimGestureDef> {
		if (incoming_type_id == AnimGestureDef::type_id) {
			return std::make_shared<AnimGestureDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
