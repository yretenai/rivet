// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ActorSpawnData.hpp> 

namespace rivet::ddl::generated {
	struct DDLTransform; 

	struct RIVET_DDL_SHARED RespawnActorData : ActorSpawnData {
		constexpr static std::string_view type_name = "RespawnActorData";
		constexpr static rivet::rivet_type_id type_id = 0xda69ad0c;

		constexpr static std::string_view AssetId_type_name = "AssetId";
		constexpr static rivet::rivet_type_id AssetId_type_id = 0xb6e788d7;
		constexpr static std::string_view Transform_type_name = "Transform";
		constexpr static rivet::rivet_type_id Transform_type_id = 0xf54f1ea1;
		constexpr static std::string_view OwnerHandle_type_name = "OwnerHandle";
		constexpr static rivet::rivet_type_id OwnerHandle_type_id = 0x6151ad8f;
		constexpr static std::string_view GroupIndex_type_name = "GroupIndex";
		constexpr static rivet::rivet_type_id GroupIndex_type_id = 0xeefb3d57;
		constexpr static std::string_view ActorIndex_type_name = "ActorIndex";
		constexpr static rivet::rivet_type_id ActorIndex_type_id = 0xf7e954d4; 

		explicit RespawnActorData() = default;
		explicit RespawnActorData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t AssetId {};
		std::shared_ptr<rivet::ddl::generated::DDLTransform> Transform {};
		uint32_t OwnerHandle {};
		int32_t GroupIndex {};
		int32_t ActorIndex {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RespawnActorData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
