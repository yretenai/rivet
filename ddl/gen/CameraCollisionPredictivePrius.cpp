// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraCollisionPredictiveGamePrius.hpp> 

#include <rivet/ddl/generated/CameraCollisionPredictivePrius.hpp>

namespace rivet::ddl::generated {
	CameraCollisionPredictivePrius::CameraCollisionPredictivePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): CameraCollisionBasePrius(serialized) {
		PredictionCount = serialized->get_uint32(PredictionCount_type_id, 6u);
		UseTargetUpVector = serialized->get_bool(UseTargetUpVector_type_id, false); 
	}

	[[nodiscard]] auto
	CameraCollisionPredictivePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraCollisionPredictivePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraCollisionPredictivePrius> {
		if (incoming_type_id == CameraCollisionPredictivePrius::type_id) {
			return std::make_shared<CameraCollisionPredictivePrius>(serialized);
		}

		auto CameraCollisionPredictiveGamePrius_ptr = CameraCollisionPredictiveGamePrius::from_substruct(incoming_type_id, serialized);
		if (CameraCollisionPredictiveGamePrius_ptr != nullptr) {
			return CameraCollisionPredictiveGamePrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
