// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimComponentStructuredTrace : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimComponentStructuredTrace";
		constexpr static rivet::rivet_type_id type_id = 0x742a6860;

		constexpr static std::string_view MTime_type_name = "MTime";
		constexpr static rivet::rivet_type_id MTime_type_id = 0x50316047;
		constexpr static std::string_view STime_type_name = "STime";
		constexpr static rivet::rivet_type_id STime_type_id = 0x8fe149a4;
		constexpr static std::string_view ActorName_type_name = "ActorName";
		constexpr static rivet::rivet_type_id ActorName_type_id = 0xcc4a4d21;
		constexpr static std::string_view Message_type_name = "Message";
		constexpr static rivet::rivet_type_id Message_type_id = 0xb7575347; 

		explicit AnimComponentStructuredTrace() = default;
		explicit AnimComponentStructuredTrace([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t MTime {};
		int32_t STime {};
		std::string_view ActorName {};
		std::string_view Message {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimComponentStructuredTrace>;
	};
} // namespace rivet::ddl::generated

// clang-format on
