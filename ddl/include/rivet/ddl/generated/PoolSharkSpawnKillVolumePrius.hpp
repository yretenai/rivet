// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED PoolSharkSpawnKillVolumePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "PoolSharkSpawnKillVolumePrius";
		constexpr static rivet::rivet_type_id type_id = 0xb083ee10;

		constexpr static std::string_view TimeInVolumeToSpawnShark_type_name = "TimeInVolumeToSpawnShark";
		constexpr static rivet::rivet_type_id TimeInVolumeToSpawnShark_type_id = 0x97503532;
		constexpr static std::string_view ResetTime_type_name = "ResetTime";
		constexpr static rivet::rivet_type_id ResetTime_type_id = 0x45a33419;
		constexpr static std::string_view PoolSharkActor_type_name = "PoolSharkActor";
		constexpr static rivet::rivet_type_id PoolSharkActor_type_id = 0xb38ccd62;
		constexpr static std::string_view OtherVolumesToUse_type_name = "OtherVolumesToUse";
		constexpr static rivet::rivet_type_id OtherVolumesToUse_type_id = 0xe2a16507; 

		explicit PoolSharkSpawnKillVolumePrius() = default;
		explicit PoolSharkSpawnKillVolumePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float TimeInVolumeToSpawnShark {};
		float ResetTime {};
		std::string_view PoolSharkActor {};
		std::vector<uint64_t> OtherVolumesToUse {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PoolSharkSpawnKillVolumePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
