// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SetDamageInvulnerableActionPrius.hpp>

namespace rivet::ddl::generated {
	SetDamageInvulnerableActionPrius::SetDamageInvulnerableActionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActionType = serialized->get_enum<rivet::ddl::generated::x10228b34>(ActionType_type_id, rivet::ddl::generated::x10228b34_values);
		FilterTypes = serialized->get_enums<rivet::ddl::generated::x8d7e44cf>(FilterTypes_type_id, rivet::ddl::generated::x8d7e44cf_values);
		AllegianceTypes = serialized->get_enums<rivet::ddl::generated::x6bdf4ba1>(AllegianceTypes_type_id, rivet::ddl::generated::x6bdf4ba1_values);
		FilterIsExclude = serialized->get_bool(FilterIsExclude_type_id);
		AllowReacts = serialized->get_bool(AllowReacts_type_id); 
	}

	[[nodiscard]] auto
	SetDamageInvulnerableActionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SetDamageInvulnerableActionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SetDamageInvulnerableActionPrius> {
		if (incoming_type_id == SetDamageInvulnerableActionPrius::type_id) {
			return std::make_shared<SetDamageInvulnerableActionPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
