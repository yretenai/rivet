// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimAssistDistanceModifier.hpp>

namespace rivet::ddl::generated {
	AimAssistDistanceModifier::AimAssistDistanceModifier([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enable = serialized->get_bool(Enable_type_id, true);
		FrictionDistanceNear = serialized->get_float(FrictionDistanceNear_type_id, 5.000000);
		FrictionDistanceFar = serialized->get_float(FrictionDistanceFar_type_id, 15.000000);
		FrictionMod = serialized->get_float(FrictionMod_type_id, 1.000000);
		MagnetDistanceNear = serialized->get_float(MagnetDistanceNear_type_id, 5.000000);
		MagnetDistanceFar = serialized->get_float(MagnetDistanceFar_type_id, 15.000000);
		MagnetMod = serialized->get_float(MagnetMod_type_id, 1.000000);
		CenterDistanceNear = serialized->get_float(CenterDistanceNear_type_id, 5.000000);
		CenterDistanceFar = serialized->get_float(CenterDistanceFar_type_id, 15.000000);
		CenterMod = serialized->get_float(CenterMod_type_id, 1.000000); 
	}

	[[nodiscard]] auto
	AimAssistDistanceModifier::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AimAssistDistanceModifier::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimAssistDistanceModifier> {
		if (incoming_type_id == AimAssistDistanceModifier::type_id) {
			return std::make_shared<AimAssistDistanceModifier>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
