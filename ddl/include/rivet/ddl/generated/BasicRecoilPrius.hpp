// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/WeaponRecoilBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct RecoilCameraShakeItem; 

	struct RIVET_DDL_SHARED BasicRecoilPrius : WeaponRecoilBasePrius {
		constexpr static std::string_view type_name = "BasicRecoilPrius";
		constexpr static rivet::rivet_type_id type_id = 0x9775e65c;

		constexpr static std::string_view ShotsToMin_type_name = "ShotsToMin";
		constexpr static rivet::rivet_type_id ShotsToMin_type_id = 0x96821e54;
		constexpr static std::string_view ShotsToMax_type_name = "ShotsToMax";
		constexpr static rivet::rivet_type_id ShotsToMax_type_id = 0xaa8f210d;
		constexpr static std::string_view BumpRamp_type_name = "BumpRamp";
		constexpr static rivet::rivet_type_id BumpRamp_type_id = 0x5642c4f0;
		constexpr static std::string_view BumpAngleMin_type_name = "BumpAngleMin";
		constexpr static rivet::rivet_type_id BumpAngleMin_type_id = 0x3aff6baa;
		constexpr static std::string_view BumpAngleMax_type_name = "BumpAngleMax";
		constexpr static rivet::rivet_type_id BumpAngleMax_type_id = 0x6f254f3;
		constexpr static std::string_view BumpOffsetMin_type_name = "BumpOffsetMin";
		constexpr static rivet::rivet_type_id BumpOffsetMin_type_id = 0x2ec54dcf;
		constexpr static std::string_view BumpOffsetMax_type_name = "BumpOffsetMax";
		constexpr static rivet::rivet_type_id BumpOffsetMax_type_id = 0x12c87296;
		constexpr static std::string_view BumpSpeedMin_type_name = "BumpSpeedMin";
		constexpr static rivet::rivet_type_id BumpSpeedMin_type_id = 0xcbe41e70;
		constexpr static std::string_view BumpSpeedMax_type_name = "BumpSpeedMax";
		constexpr static rivet::rivet_type_id BumpSpeedMax_type_id = 0xf7e92129;
		constexpr static std::string_view CooldownStart_type_name = "CooldownStart";
		constexpr static rivet::rivet_type_id CooldownStart_type_id = 0x5aea0858;
		constexpr static std::string_view CooldownComplete_type_name = "CooldownComplete";
		constexpr static rivet::rivet_type_id CooldownComplete_type_id = 0x53f3cba6;
		constexpr static std::string_view SettleDelay_type_name = "SettleDelay";
		constexpr static rivet::rivet_type_id SettleDelay_type_id = 0x9256f6b8;
		constexpr static std::string_view SettleGain_type_name = "SettleGain";
		constexpr static rivet::rivet_type_id SettleGain_type_id = 0x7c0ccd53;
		constexpr static std::string_view SettleDamp_type_name = "SettleDamp";
		constexpr static rivet::rivet_type_id SettleDamp_type_id = 0xf0da9ada;
		constexpr static std::string_view SettlePercent_type_name = "SettlePercent";
		constexpr static rivet::rivet_type_id SettlePercent_type_id = 0x27a01162;
		constexpr static std::string_view CameraShake_type_name = "CameraShake";
		constexpr static rivet::rivet_type_id CameraShake_type_id = 0xefd546ca; 

		explicit BasicRecoilPrius() = default;
		explicit BasicRecoilPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float ShotsToMin {};
		float ShotsToMax {};
		float BumpRamp {};
		float BumpAngleMin {};
		float BumpAngleMax {};
		float BumpOffsetMin {};
		float BumpOffsetMax {};
		float BumpSpeedMin {};
		float BumpSpeedMax {};
		float CooldownStart {};
		float CooldownComplete {};
		float SettleDelay {};
		float SettleGain {};
		float SettleDamp {};
		float SettlePercent {};
		std::shared_ptr<rivet::ddl::generated::RecoilCameraShakeItem> CameraShake {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BasicRecoilPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
