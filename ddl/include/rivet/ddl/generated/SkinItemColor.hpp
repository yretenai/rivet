// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x7ecfc969.hpp> 

namespace rivet::ddl::generated {
	struct SkinItemMaterialOverride;
	struct SkinItemTextureOverride; 

	struct RIVET_DDL_SHARED SkinItemColor : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SkinItemColor";
		constexpr static rivet::rivet_type_id type_id = 0xdc3e2525;

		constexpr static std::string_view ColorName_type_name = "ColorName";
		constexpr static rivet::rivet_type_id ColorName_type_id = 0xe122a241;
		constexpr static std::string_view NameLocTag_type_name = "NameLocTag";
		constexpr static rivet::rivet_type_id NameLocTag_type_id = 0xa0041b54;
		constexpr static std::string_view Available_type_name = "Available";
		constexpr static rivet::rivet_type_id Available_type_id = 0x27723b89;
		constexpr static std::string_view R_type_name = "R";
		constexpr static rivet::rivet_type_id R_type_id = 0xbee6a893;
		constexpr static std::string_view G_type_name = "G";
		constexpr static rivet::rivet_type_id G_type_id = 0xd33b4c78;
		constexpr static std::string_view B_type_name = "B";
		constexpr static rivet::rivet_type_id B_type_id = 0xa351b8f7;
		constexpr static std::string_view TextureOverrideList_type_name = "TextureOverrideList";
		constexpr static rivet::rivet_type_id TextureOverrideList_type_id = 0x31be016c;
		constexpr static std::string_view MaterialOverrideList_type_name = "MaterialOverrideList";
		constexpr static rivet::rivet_type_id MaterialOverrideList_type_id = 0xeb47267a; 

		explicit SkinItemColor() = default;
		explicit SkinItemColor([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view ColorName {};
		std::string_view NameLocTag {};
		rivet::ddl::generated::x7ecfc969 Available {};
		uint8_t R {};
		uint8_t G {};
		uint8_t B {};
		std::vector<std::shared_ptr<rivet::ddl::generated::SkinItemTextureOverride>> TextureOverrideList {};
		std::vector<std::shared_ptr<rivet::ddl::generated::SkinItemMaterialOverride>> MaterialOverrideList {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkinItemColor>;
	};
} // namespace rivet::ddl::generated

// clang-format on
