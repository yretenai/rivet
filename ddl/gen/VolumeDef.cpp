// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TranslucentShadowDef.hpp>
#include <rivet/ddl/generated/WaterDef.hpp>
#include <rivet/ddl/generated/WeatherDef.hpp>
#include <rivet/ddl/generated/SSRSettingsDef.hpp>
#include <rivet/ddl/generated/AASettingsDef.hpp>
#include <rivet/ddl/generated/ProjectCustomDef.hpp>
#include <rivet/ddl/generated/VolumeCameraClipDef.hpp>
#include <rivet/ddl/generated/VolumeNodeUsage.hpp>
#include <rivet/ddl/generated/SkySettingsDef.hpp>
#include <rivet/ddl/generated/LightingConditionBitSet.hpp>
#include <rivet/ddl/generated/EnvLightingDef.hpp>
#include <rivet/ddl/generated/ToneMapSettingsDef.hpp>
#include <rivet/ddl/generated/BloomSettingsDef.hpp>
#include <rivet/ddl/generated/LightShaftsSettingsDef.hpp>
#include <rivet/ddl/generated/ColorCorrectionSettingsDef.hpp>
#include <rivet/ddl/generated/ChromaticAbSettingsDef.hpp>
#include <rivet/ddl/generated/VolumetricCloudsDef.hpp>
#include <rivet/ddl/generated/VaultMetaData.hpp>
#include <rivet/ddl/generated/VignetteSettingsDef.hpp>
#include <rivet/ddl/generated/AOSettingsDef.hpp>
#include <rivet/ddl/generated/FilmGrainSettingsDef.hpp>
#include <rivet/ddl/generated/DepthOfFieldSettingsDef.hpp>
#include <rivet/ddl/generated/FogSettingsDef.hpp>
#include <rivet/ddl/generated/VolumetricFogSettingsDef.hpp>
#include <rivet/ddl/generated/MotionBlurSettingsDef.hpp> 

#include <rivet/ddl/generated/VolumeDef.hpp>

namespace rivet::ddl::generated {
	VolumeDef::VolumeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VaultMetaData = serialized->unwrap_into<rivet::ddl::generated::VaultMetaData>(VaultMetaData_type_id);
		IconPath = serialized->get_string(IconPath_type_id, "");
		VolumeType = serialized->get_enum<rivet::ddl::generated::VolumeNodeShape>(VolumeType_type_id, rivet::ddl::generated::VolumeNodeShape_values, rivet::ddl::generated::VolumeNodeShape::Cuboid);
		CapsuleEndcapRadius = serialized->get_float(CapsuleEndcapRadius_type_id, 0.500000);
		Usage = serialized->unwrap_into<rivet::ddl::generated::VolumeNodeUsage>(Usage_type_id);
		PostFxActive = serialized->get_bool(PostFxActive_type_id, true);
		PostEffectAtmosphere = serialized->get_string(PostEffectAtmosphere_type_id, {});
		PostDistanceFactor = serialized->get_float(PostDistanceFactor_type_id, 1.000000);
		PostPriority = serialized->get_int32(PostPriority_type_id, 1);
		PostInfluence = serialized->get_float(PostInfluence_type_id, 1.000000);
		SkipLightCapture = serialized->get_bool(SkipLightCapture_type_id, false);
		OnlyLightCapture = serialized->get_bool(OnlyLightCapture_type_id, false);
		SkySettings = serialized->unwrap_into<rivet::ddl::generated::SkySettingsDef>(SkySettings_type_id);
		EnvLighting = serialized->unwrap_into<rivet::ddl::generated::EnvLightingDef>(EnvLighting_type_id);
		ToneMapSettings = serialized->unwrap_into<rivet::ddl::generated::ToneMapSettingsDef>(ToneMapSettings_type_id);
		BloomSettings = serialized->unwrap_into<rivet::ddl::generated::BloomSettingsDef>(BloomSettings_type_id);
		ColorCorrectionSettings = serialized->unwrap_into<rivet::ddl::generated::ColorCorrectionSettingsDef>(ColorCorrectionSettings_type_id);
		VignetteSettings = serialized->unwrap_into<rivet::ddl::generated::VignetteSettingsDef>(VignetteSettings_type_id);
		ChromaticAbSettings = serialized->unwrap_into<rivet::ddl::generated::ChromaticAbSettingsDef>(ChromaticAbSettings_type_id);
		FogSettings = serialized->unwrap_into<rivet::ddl::generated::FogSettingsDef>(FogSettings_type_id);
		VolumetricFogSettings = serialized->unwrap_into<rivet::ddl::generated::VolumetricFogSettingsDef>(VolumetricFogSettings_type_id);
		MotionBlurSettings = serialized->unwrap_into<rivet::ddl::generated::MotionBlurSettingsDef>(MotionBlurSettings_type_id);
		DepthOfFieldSettings = serialized->unwrap_into<rivet::ddl::generated::DepthOfFieldSettingsDef>(DepthOfFieldSettings_type_id);
		FilmGrainSettings = serialized->unwrap_into<rivet::ddl::generated::FilmGrainSettingsDef>(FilmGrainSettings_type_id);
		LightShaftsSettings = serialized->unwrap_into<rivet::ddl::generated::LightShaftsSettingsDef>(LightShaftsSettings_type_id);
		ClipSettings = serialized->unwrap_into<rivet::ddl::generated::VolumeCameraClipDef>(ClipSettings_type_id);
		ProjectCustomData = serialized->unwrap_into<rivet::ddl::generated::ProjectCustomDef>(ProjectCustomData_type_id);
		AOSettings = serialized->unwrap_into<rivet::ddl::generated::AOSettingsDef>(AOSettings_type_id);
		AASettings = serialized->unwrap_into<rivet::ddl::generated::AASettingsDef>(AASettings_type_id);
		SSRSettings = serialized->unwrap_into<rivet::ddl::generated::SSRSettingsDef>(SSRSettings_type_id);
		Weather = serialized->unwrap_into<rivet::ddl::generated::WeatherDef>(Weather_type_id);
		VolumetricCloudsSettings = serialized->unwrap_into<rivet::ddl::generated::VolumetricCloudsDef>(VolumetricCloudsSettings_type_id);
		Water = serialized->unwrap_into<rivet::ddl::generated::WaterDef>(Water_type_id);
		TranslucentShadow = serialized->unwrap_into<rivet::ddl::generated::TranslucentShadowDef>(TranslucentShadow_type_id);
		LightingConditions = serialized->unwrap_into<rivet::ddl::generated::LightingConditionBitSet>(LightingConditions_type_id); 
	}

	[[nodiscard]] auto
	VolumeDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VolumeDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VolumeDef> {
		if (incoming_type_id == VolumeDef::type_id) {
			return std::make_shared<VolumeDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
