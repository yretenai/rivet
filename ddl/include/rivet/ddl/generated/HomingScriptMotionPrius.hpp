// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ScriptMotionBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HomingScriptMotionPrius : ScriptMotionBasePrius {
		constexpr static std::string_view type_name = "HomingScriptMotionPrius";
		constexpr static rivet::rivet_type_id type_id = 0x1e847a2a;

		constexpr static std::string_view InitialSpeed_type_name = "InitialSpeed";
		constexpr static rivet::rivet_type_id InitialSpeed_type_id = 0x1a29bd24;
		constexpr static std::string_view FlightSpeed_type_name = "FlightSpeed";
		constexpr static rivet::rivet_type_id FlightSpeed_type_id = 0x9f20ad55;
		constexpr static std::string_view FlightAcceleration_type_name = "FlightAcceleration";
		constexpr static rivet::rivet_type_id FlightAcceleration_type_id = 0x2943cdab;
		constexpr static std::string_view HomingSpeed_type_name = "HomingSpeed";
		constexpr static rivet::rivet_type_id HomingSpeed_type_id = 0x88953b61;
		constexpr static std::string_view BreakoffAngle_type_name = "BreakoffAngle";
		constexpr static rivet::rivet_type_id BreakoffAngle_type_id = 0x6f2124bb;
		constexpr static std::string_view HomingSpeedScaleFactor_type_name = "HomingSpeedScaleFactor";
		constexpr static rivet::rivet_type_id HomingSpeedScaleFactor_type_id = 0x949da6bb;
		constexpr static std::string_view HomingSpeedScaleTimeStart_type_name = "HomingSpeedScaleTimeStart";
		constexpr static rivet::rivet_type_id HomingSpeedScaleTimeStart_type_id = 0x34403bcf;
		constexpr static std::string_view HomingSpeedScaleTimeFull_type_name = "HomingSpeedScaleTimeFull";
		constexpr static rivet::rivet_type_id HomingSpeedScaleTimeFull_type_id = 0x746bda9;
		constexpr static std::string_view HomingSpeedScaleDistStart_type_name = "HomingSpeedScaleDistStart";
		constexpr static rivet::rivet_type_id HomingSpeedScaleDistStart_type_id = 0x67eb4f13;
		constexpr static std::string_view HomingSpeedScaleDistFull_type_name = "HomingSpeedScaleDistFull";
		constexpr static rivet::rivet_type_id HomingSpeedScaleDistFull_type_id = 0x1fa1515b;
		constexpr static std::string_view InitialArcPitchMin_type_name = "InitialArcPitchMin";
		constexpr static rivet::rivet_type_id InitialArcPitchMin_type_id = 0x43aaba77;
		constexpr static std::string_view InitialArcPitchMax_type_name = "InitialArcPitchMax";
		constexpr static rivet::rivet_type_id InitialArcPitchMax_type_id = 0x7fa7852e;
		constexpr static std::string_view InitialArcYawMin_type_name = "InitialArcYawMin";
		constexpr static rivet::rivet_type_id InitialArcYawMin_type_id = 0xd3f639aa;
		constexpr static std::string_view InitialArcYawMax_type_name = "InitialArcYawMax";
		constexpr static rivet::rivet_type_id InitialArcYawMax_type_id = 0xeffb06f3;
		constexpr static std::string_view ScaleHomingRange_type_name = "ScaleHomingRange";
		constexpr static rivet::rivet_type_id ScaleHomingRange_type_id = 0x49c77e38;
		constexpr static std::string_view StopHomingOnReachDest_type_name = "StopHomingOnReachDest";
		constexpr static rivet::rivet_type_id StopHomingOnReachDest_type_id = 0x9ef9218f; 

		explicit HomingScriptMotionPrius() = default;
		explicit HomingScriptMotionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float InitialSpeed {};
		float FlightSpeed {};
		float FlightAcceleration {};
		float HomingSpeed {};
		float BreakoffAngle {};
		float HomingSpeedScaleFactor {};
		float HomingSpeedScaleTimeStart {};
		float HomingSpeedScaleTimeFull {};
		float HomingSpeedScaleDistStart {};
		float HomingSpeedScaleDistFull {};
		float InitialArcPitchMin {};
		float InitialArcPitchMax {};
		float InitialArcYawMin {};
		float InitialArcYawMax {};
		bool ScaleHomingRange {};
		bool StopHomingOnReachDest {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HomingScriptMotionPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
