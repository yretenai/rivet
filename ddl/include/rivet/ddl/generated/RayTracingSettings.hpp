// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED RayTracingSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "RayTracingSettings";
		constexpr static rivet::rivet_type_id type_id = 0xdb5c9852;

		constexpr static std::string_view HibernateBaseDistance_type_name = "HibernateBaseDistance";
		constexpr static rivet::rivet_type_id HibernateBaseDistance_type_id = 0x21907e02;
		constexpr static std::string_view NormalBaseDistance_type_name = "NormalBaseDistance";
		constexpr static rivet::rivet_type_id NormalBaseDistance_type_id = 0x29f5cf54;
		constexpr static std::string_view ModelRadiusScale_type_name = "ModelRadiusScale";
		constexpr static rivet::rivet_type_id ModelRadiusScale_type_id = 0x2864ac2e;
		constexpr static std::string_view PrioritizeImpostors_type_name = "PrioritizeImpostors";
		constexpr static rivet::rivet_type_id PrioritizeImpostors_type_id = 0xd5efb89e;
		constexpr static std::string_view DisableCheckerboard_type_name = "DisableCheckerboard";
		constexpr static rivet::rivet_type_id DisableCheckerboard_type_id = 0x5c49b496;
		constexpr static std::string_view SkinningBaseDistance_type_name = "SkinningBaseDistance";
		constexpr static rivet::rivet_type_id SkinningBaseDistance_type_id = 0x7b513739;
		constexpr static std::string_view SkinningRadiusScale_type_name = "SkinningRadiusScale";
		constexpr static rivet::rivet_type_id SkinningRadiusScale_type_id = 0xaae7611d;
		constexpr static std::string_view LightingCenterBias_type_name = "LightingCenterBias";
		constexpr static rivet::rivet_type_id LightingCenterBias_type_id = 0x3f527fc;
		constexpr static std::string_view MaxUniqueMaterials_type_name = "MaxUniqueMaterials";
		constexpr static rivet::rivet_type_id MaxUniqueMaterials_type_id = 0x84fbc0;
		constexpr static std::string_view MaxRuntimeBVHs_type_name = "MaxRuntimeBVHs";
		constexpr static rivet::rivet_type_id MaxRuntimeBVHs_type_id = 0x96f8a615;
		constexpr static std::string_view MaxBVHSubsets_type_name = "MaxBVHSubsets";
		constexpr static rivet::rivet_type_id MaxBVHSubsets_type_id = 0xf0526a67;
		constexpr static std::string_view ScratchSize_type_name = "ScratchSize";
		constexpr static rivet::rivet_type_id ScratchSize_type_id = 0x30ecc1c8;
		constexpr static std::string_view GlossReflInterval_type_name = "GlossReflInterval";
		constexpr static rivet::rivet_type_id GlossReflInterval_type_id = 0xd8a50b41;
		constexpr static std::string_view GlossThreshold_type_name = "GlossThreshold";
		constexpr static rivet::rivet_type_id GlossThreshold_type_id = 0x51408ba4; 

		explicit RayTracingSettings() = default;
		explicit RayTracingSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float HibernateBaseDistance {};
		float NormalBaseDistance {};
		float ModelRadiusScale {};
		bool PrioritizeImpostors {};
		bool DisableCheckerboard {};
		float SkinningBaseDistance {};
		float SkinningRadiusScale {};
		float LightingCenterBias {};
		uint32_t MaxUniqueMaterials {};
		uint32_t MaxRuntimeBVHs {};
		uint32_t MaxBVHSubsets {};
		uint32_t ScratchSize {};
		float GlossReflInterval {};
		float GlossThreshold {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RayTracingSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
