// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AttachToWaterSurfacePrius.hpp>

namespace rivet::ddl::generated {
	AttachToWaterSurfacePrius::AttachToWaterSurfacePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BobValuesSource = serialized->get_enum<rivet::ddl::generated::x24d9b2cf>(BobValuesSource_type_id, rivet::ddl::generated::x24d9b2cf_values);
		BobGain = serialized->get_float(BobGain_type_id);
		BobDamp = serialized->get_float(BobDamp_type_id);
		BobMaxSpeed = serialized->get_float(BobMaxSpeed_type_id);
		Activation = serialized->get_enum<rivet::ddl::generated::x79aee756>(Activation_type_id, rivet::ddl::generated::x79aee756_values);
		MotionDepth = serialized->get_float(MotionDepth_type_id);
		UpdateOffscreen = serialized->get_bool(UpdateOffscreen_type_id); 
	}

	[[nodiscard]] auto
	AttachToWaterSurfacePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AttachToWaterSurfacePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AttachToWaterSurfacePrius> {
		if (incoming_type_id == AttachToWaterSurfacePrius::type_id) {
			return std::make_shared<AttachToWaterSurfacePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
