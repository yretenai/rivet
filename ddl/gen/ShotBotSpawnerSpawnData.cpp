// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/ShotBotSpawnerSpawnData.hpp>

namespace rivet::ddl::generated {
	ShotBotSpawnerSpawnData::ShotBotSpawnerSpawnData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ShotSpawnData(serialized) {
		ZoneIndex = serialized->get_int32(ZoneIndex_type_id, 0u);
		AssetId = serialized->get_uint64(AssetId_type_id, 0ull);
		Position = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Position_type_id);
		Facing = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Facing_type_id); 
	}

	[[nodiscard]] auto
	ShotBotSpawnerSpawnData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShotBotSpawnerSpawnData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotBotSpawnerSpawnData> {
		if (incoming_type_id == ShotBotSpawnerSpawnData::type_id) {
			return std::make_shared<ShotBotSpawnerSpawnData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
