// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HoverbootFallData.hpp>
#include <rivet/ddl/generated/HoverbootMoveData.hpp>
#include <rivet/ddl/generated/HoverbootJumpData.hpp>
#include <rivet/ddl/generated/HoverbootMeleeData.hpp>
#include <rivet/ddl/generated/HeroSpeedConfig.hpp>
#include <rivet/ddl/generated/HoverbootHoverEffectData.hpp>
#include <rivet/ddl/generated/HoverbootSurfaceDeformationData.hpp>
#include <rivet/ddl/generated/HoverbootKickData.hpp> 

#include <rivet/ddl/generated/HeroHoverbootConfig.hpp>

namespace rivet::ddl::generated {
	HeroHoverbootConfig::HeroHoverbootConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		MoveData = serialized->unwrap_into<rivet::ddl::generated::HoverbootMoveData>(MoveData_type_id);
		BoostMoveData = serialized->unwrap_into<rivet::ddl::generated::HoverbootMoveData>(BoostMoveData_type_id);
		MeleeData = serialized->unwrap_into<rivet::ddl::generated::HoverbootMeleeData>(MeleeData_type_id);
		JumpData = serialized->unwrap_into<rivet::ddl::generated::HoverbootJumpData>(JumpData_type_id);
		SurfaceDeformationData = serialized->unwrap_into<rivet::ddl::generated::HoverbootSurfaceDeformationData>(SurfaceDeformationData_type_id);
		KickData = serialized->unwrap_into<rivet::ddl::generated::HoverbootKickData>(KickData_type_id);
		FallData = serialized->unwrap_into<rivet::ddl::generated::HoverbootFallData>(FallData_type_id);
		HoverEffectData = serialized->unwrap_into<rivet::ddl::generated::HoverbootHoverEffectData>(HoverEffectData_type_id);
		BoostJumpConfig = serialized->unwrap_into<rivet::ddl::generated::HeroSpeedConfig>(BoostJumpConfig_type_id);
		HoverbootFastCameraShakeConfig = serialized->get_string(HoverbootFastCameraShakeConfig_type_id); 
	}

	auto
	HeroHoverbootConfig::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	HeroHoverbootConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroHoverbootConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroHoverbootConfig> {
		if (incoming_type_id == HeroHoverbootConfig::type_id) {
			return std::make_shared<HeroHoverbootConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
