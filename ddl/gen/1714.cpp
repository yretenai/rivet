// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DeviceSpecificLocalization.hpp>

namespace rivet::ddl::generated {
	DeviceSpecificLocalization::DeviceSpecificLocalization([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DefaultLocalizationID = serialized->get_string(DefaultLocalizationID_type_id);
		X360LocalizationID = serialized->get_string(X360LocalizationID_type_id);
		XOneLocalizationID = serialized->get_string(XOneLocalizationID_type_id);
		DualShockLocalizationID = serialized->get_string(DualShockLocalizationID_type_id);
		DualSenseLocalizationID = serialized->get_string(DualSenseLocalizationID_type_id);
		SteamDeckLocalizationID = serialized->get_string(SteamDeckLocalizationID_type_id);
		GenericLocalizationID = serialized->get_string(GenericLocalizationID_type_id);
		MkbLocalizationID = serialized->get_string(MkbLocalizationID_type_id); 
	}

	auto
	DeviceSpecificLocalization::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	DeviceSpecificLocalization::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DeviceSpecificLocalization::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DeviceSpecificLocalization> {
		if (incoming_type_id == DeviceSpecificLocalization::type_id) {
			return std::make_shared<DeviceSpecificLocalization>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
