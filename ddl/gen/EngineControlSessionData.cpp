// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/EngineControlModelInstanceData.hpp>
#include <rivet/ddl/generated/EngineControlCamera.hpp>
#include <rivet/ddl/generated/EngineControlAssetOverride.hpp>
#include <rivet/ddl/generated/EngineControlActorData.hpp> 

#include <rivet/ddl/generated/EngineControlSessionData.hpp>

namespace rivet::ddl::generated {
	EngineControlSessionData::EngineControlSessionData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Active = serialized->get_bool(Active_type_id, false);
		Actors = serialized->unwrap_into_many<rivet::ddl::generated::EngineControlActorData>(Actors_type_id);
		AssetOverrides = serialized->unwrap_into_many<rivet::ddl::generated::EngineControlAssetOverride>(AssetOverrides_type_id);
		Atmosphere = serialized->get_string(Atmosphere_type_id, "required\\atmospheres\\default_atmosphere.atmosphere");
		BrightnessScale = serialized->get_float(BrightnessScale_type_id, 0.000000f);
		Cameras = serialized->unwrap_into_many<rivet::ddl::generated::EngineControlCamera>(Cameras_type_id);
		ModelInstances = serialized->unwrap_into_many<rivet::ddl::generated::EngineControlModelInstanceData>(ModelInstances_type_id); 
	}

	[[nodiscard]] auto
	EngineControlSessionData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	EngineControlSessionData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EngineControlSessionData> {
		if (incoming_type_id == EngineControlSessionData::type_id) {
			return std::make_shared<EngineControlSessionData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
