// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimAssistCentering.hpp>

namespace rivet::ddl::generated {
	AimAssistCentering::AimAssistCentering([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enable = serialized->get_bool(Enable_type_id, true);
		StickMin = serialized->get_float(StickMin_type_id, 0.200000f);
		StickMax = serialized->get_float(StickMax_type_id, 0.850000f);
		FactorMin = serialized->get_float(FactorMin_type_id, 0.000000f);
		FactorMax = serialized->get_float(FactorMax_type_id, 0.000000f);
		FactorCurve = serialized->get_float(FactorCurve_type_id, 1.000000f);
		MinBoxValue = serialized->get_float(MinBoxValue_type_id, 0.500000f);
		MaxBoxValue = serialized->get_float(MaxBoxValue_type_id, 1.000000f); 
	}

	[[nodiscard]] auto
	AimAssistCentering::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AimAssistCentering::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimAssistCentering> {
		if (incoming_type_id == AimAssistCentering::type_id) {
			return std::make_shared<AimAssistCentering>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
