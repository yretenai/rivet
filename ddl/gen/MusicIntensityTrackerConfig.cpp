// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotMusicValue.hpp> 

#include <rivet/ddl/generated/MusicIntensityTrackerConfig.hpp>

namespace rivet::ddl::generated {
	MusicIntensityTrackerConfig::MusicIntensityTrackerConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		LowIntensityThreshold = serialized->get_float(LowIntensityThreshold_type_id);
		HighIntensityThreshold = serialized->get_float(HighIntensityThreshold_type_id);
		Max = serialized->get_float(Max_type_id);
		SlewRate = serialized->get_float(SlewRate_type_id);
		DefaultBotValue = serialized->get_float(DefaultBotValue_type_id);
		DefaultBotRadius = serialized->get_float(DefaultBotRadius_type_id);
		OtherValues = serialized->unwrap_into_many<rivet::ddl::generated::BotMusicValue>(OtherValues_type_id); 
	}

	[[nodiscard]] auto
	MusicIntensityTrackerConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MusicIntensityTrackerConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MusicIntensityTrackerConfig> {
		if (incoming_type_id == MusicIntensityTrackerConfig::type_id) {
			return std::make_shared<MusicIntensityTrackerConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
