// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RtEnvProbeSettings.hpp>

namespace rivet::ddl::generated {
	RtEnvProbeSettings::RtEnvProbeSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CsmLodCount = serialized->get_int32(CsmLodCount_type_id, 0);
		CsmDrawDistance = serialized->get_float(CsmDrawDistance_type_id, 750.000000);
		DefaultProbeIntensity = serialized->get_float(DefaultProbeIntensity_type_id, 0.250000);
		FarClip = serialized->get_float(FarClip_type_id, 2048.000000);
		RenderMode = serialized->get_enum<rivet::ddl::generated::xefbbbac0>(RenderMode_type_id, rivet::ddl::generated::xefbbbac0_values, rivet::ddl::generated::xefbbbac0::Impostors_Only);
		LightSourceNightIntensityScale = serialized->get_float(LightSourceNightIntensityScale_type_id, 1.000000);
		LightSourceNightRadiusScale = serialized->get_float(LightSourceNightRadiusScale_type_id, 1.000000); 
	}

	[[nodiscard]] auto
	RtEnvProbeSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RtEnvProbeSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RtEnvProbeSettings> {
		if (incoming_type_id == RtEnvProbeSettings::type_id) {
			return std::make_shared<RtEnvProbeSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
