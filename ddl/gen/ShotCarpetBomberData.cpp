// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ShotCarpetBomberData.hpp>

namespace rivet::ddl::generated {
	ShotCarpetBomberData::ShotCarpetBomberData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		IntroIdleAnim = serialized->get_string(IntroIdleAnim_type_id, {});
		StartFlyAnim = serialized->get_string(StartFlyAnim_type_id, {});
		FlyLoopAnim = serialized->get_string(FlyLoopAnim_type_id, {});
		ShotsPerDrop = serialized->get_uint8(ShotsPerDrop_type_id, 9u);
		ShotsOnDestroy = serialized->get_uint8(ShotsOnDestroy_type_id, 10u);
		TargetingConeAxisLength = serialized->get_float(TargetingConeAxisLength_type_id, 15.000000f);
		TargetingConeAngle = serialized->get_float(TargetingConeAngle_type_id, 50.000000f);
		ShotIntroTime = serialized->get_float(ShotIntroTime_type_id, 1.000000f);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values, rivet::ddl::generated::KnockbackLevels::Three);
		KnockbackAmount = serialized->get_float(KnockbackAmount_type_id, 100.000000f);
		MaxCrashTime = serialized->get_float(MaxCrashTime_type_id, 5.000000f);
		TimeUntilFirstDrop = serialized->get_float(TimeUntilFirstDrop_type_id, 0.100000f);
		DropSpreadAngle = serialized->get_float(DropSpreadAngle_type_id, 75.000000f);
		RandomAngleOffset = serialized->get_float(RandomAngleOffset_type_id, 0.000000f);
		DropTimeSpan = serialized->get_float(DropTimeSpan_type_id, 0.300000f);
		RandomDropTimeOffset = serialized->get_float(RandomDropTimeOffset_type_id, 0.000000f);
		LastBombCollIgnoreDist = serialized->get_float(LastBombCollIgnoreDist_type_id, 0.100000f);
		LastBombAngle = serialized->get_float(LastBombAngle_type_id, 15.000000f);
		LastBombRandomAngleOffset = serialized->get_float(LastBombRandomAngleOffset_type_id, 0.000000f);
		AlternateDropSpreadDir = serialized->get_bool(AlternateDropSpreadDir_type_id, true);
		LastBombIgnoreHitActor = serialized->get_bool(LastBombIgnoreHitActor_type_id, true);
		SpreadAngleDireciton = serialized->get_enum<rivet::ddl::generated::x5c2e2f3f>(SpreadAngleDireciton_type_id, rivet::ddl::generated::x5c2e2f3f_values, rivet::ddl::generated::x5c2e2f3f::Down); 
	}

	[[nodiscard]] auto
	ShotCarpetBomberData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShotCarpetBomberData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotCarpetBomberData> {
		if (incoming_type_id == ShotCarpetBomberData::type_id) {
			return std::make_shared<ShotCarpetBomberData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
