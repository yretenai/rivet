// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2CameraEventTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2CameraVfxTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2CameraShakeTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2CameraFovCurveDef.hpp>
#include <rivet/ddl/generated/Cinematic2CameraPosRotTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2BehaviorPlayAnimClipActionDef.hpp>
#include <rivet/ddl/generated/Cinematic2DefaultCameraValuesDef.hpp>
#include <rivet/ddl/generated/Cinematic2CameraOrphanTrackDef.hpp>
#include <rivet/ddl/generated/DDLTransform.hpp>
#include <rivet/ddl/generated/Cinematic2CameraFocalLengthCurveDef.hpp>
#include <rivet/ddl/generated/Cinematic2CameraDofTrackDef.hpp>
#include <rivet/ddl/generated/Cinematic2TrackTagsDef.hpp> 

#include <rivet/ddl/generated/Cinematic2CameraTrackDef.hpp>

namespace rivet::ddl::generated {
	Cinematic2CameraTrackDef::Cinematic2CameraTrackDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id);
		Name = serialized->get_string(Name_type_id);
		PlatformFilter = serialized->get_bitset<rivet::ddl::generated::xb52df7e7>(PlatformFilter_type_id, rivet::ddl::generated::xb52df7e7_values);
		Tags = serialized->unwrap_into<rivet::ddl::generated::Cinematic2TrackTagsDef>(Tags_type_id);
		Global = serialized->get_bool(Global_type_id);
		StartTransform = serialized->unwrap_into<rivet::ddl::generated::DDLTransform>(StartTransform_type_id);
		DefaultValues = serialized->unwrap_into<rivet::ddl::generated::Cinematic2DefaultCameraValuesDef>(DefaultValues_type_id);
		InheritGameDof = serialized->get_bool(InheritGameDof_type_id);
		PlayAnimActions = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2BehaviorPlayAnimClipActionDef>(PlayAnimActions_type_id);
		DofTracks = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2CameraDofTrackDef>(DofTracks_type_id);
		Fov = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2CameraFovCurveDef>(Fov_type_id);
		FocalLength = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2CameraFocalLengthCurveDef>(FocalLength_type_id);
		PosRotTracks = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2CameraPosRotTrackDef>(PosRotTracks_type_id);
		Shake = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2CameraShakeTrackDef>(Shake_type_id);
		VfxTracks = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2CameraVfxTrackDef>(VfxTracks_type_id);
		EventTracks = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2CameraEventTrackDef>(EventTracks_type_id);
		OrphanTracks = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2CameraOrphanTrackDef>(OrphanTracks_type_id); 
	}

	[[nodiscard]] auto
	Cinematic2CameraTrackDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2CameraTrackDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2CameraTrackDef> {
		if (incoming_type_id == Cinematic2CameraTrackDef::type_id) {
			return std::make_shared<Cinematic2CameraTrackDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
