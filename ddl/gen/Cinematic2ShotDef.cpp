// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Cinematic2AspectBlurDef.hpp>
#include <rivet/ddl/generated/Cinematic2PaneDef.hpp>
#include <rivet/ddl/generated/Cinematic2MayaShotExportInfo.hpp> 

#include <rivet/ddl/generated/Cinematic2ShotDef.hpp>

namespace rivet::ddl::generated {
	Cinematic2ShotDef::Cinematic2ShotDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id);
		Name = serialized->get_string(Name_type_id);
		Duration = serialized->get_float(Duration_type_id);
		JumpToShotId = serialized->get_uint64(JumpToShotId_type_id);
		ScriptShotTag = serialized->get_enum<rivet::ddl::generated::xadae2fa7>(ScriptShotTag_type_id, rivet::ddl::generated::xadae2fa7_values);
		MayaExportInfo = serialized->unwrap_into<rivet::ddl::generated::Cinematic2MayaShotExportInfo>(MayaExportInfo_type_id);
		Panes = serialized->unwrap_into_many<rivet::ddl::generated::Cinematic2PaneDef>(Panes_type_id);
		DepthOnlyFrameAtStart = serialized->get_bool(DepthOnlyFrameAtStart_type_id);
		IsTransitionTarget = serialized->get_bool(IsTransitionTarget_type_id);
		StartRelativeActor = serialized->get_uint64(StartRelativeActor_type_id);
		CameraConeParent = serialized->get_uint64(CameraConeParent_type_id);
		CameraConeStartAngle = serialized->get_float(CameraConeStartAngle_type_id);
		CameraConeRadius = serialized->get_float(CameraConeRadius_type_id);
		CameraConeHeight = serialized->get_float(CameraConeHeight_type_id);
		AspectBlurOverride = serialized->unwrap_into<rivet::ddl::generated::Cinematic2AspectBlurDef>(AspectBlurOverride_type_id); 
	}

	[[nodiscard]] auto
	Cinematic2ShotDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Cinematic2ShotDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Cinematic2ShotDef> {
		if (incoming_type_id == Cinematic2ShotDef::type_id) {
			return std::make_shared<Cinematic2ShotDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
