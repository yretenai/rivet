// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MovementConfig.hpp>

namespace rivet::ddl::generated {
	MovementConfig::MovementConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Style = serialized->get_enum<rivet::ddl::generated::xe8421db7>(Style_type_id, rivet::ddl::generated::xe8421db7_values);
		UseAnimNormalSpeed = serialized->get_bool(UseAnimNormalSpeed_type_id);
		RandomizeSpeed = serialized->get_bool(RandomizeSpeed_type_id);
		RandomizeSpeedMin = serialized->get_float(RandomizeSpeedMin_type_id);
		RandomizeSpeedMax = serialized->get_float(RandomizeSpeedMax_type_id);
		MinSpeed = serialized->get_float(MinSpeed_type_id);
		NormalSpeed = serialized->get_float(NormalSpeed_type_id);
		MaxSpeed = serialized->get_float(MaxSpeed_type_id);
		Accel = serialized->get_float(Accel_type_id);
		Decel = serialized->get_float(Decel_type_id);
		NormalTurnSpeed = serialized->get_float(NormalTurnSpeed_type_id);
		MaxTurnSpeed = serialized->get_float(MaxTurnSpeed_type_id); 
	}

	auto
	MovementConfig::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	MovementConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MovementConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MovementConfig> {
		if (incoming_type_id == MovementConfig::type_id) {
			return std::make_shared<MovementConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
