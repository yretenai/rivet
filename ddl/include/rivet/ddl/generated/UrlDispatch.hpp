// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/AssetExtensions.hpp>
#include <rivet/ddl/generated/enums/xa5664812.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED UrlDispatch : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "UrlDispatch";
		constexpr static rivet::rivet_type_id type_id = 0x3b83e2f6;

		constexpr static std::string_view SessionId_type_name = "SessionId";
		constexpr static rivet::rivet_type_id SessionId_type_id = 0xbbad2afa;
		constexpr static std::string_view AssetId_type_name = "AssetId";
		constexpr static rivet::rivet_type_id AssetId_type_id = 0xb6e788d7;
		constexpr static std::string_view DispatchType_type_name = "DispatchType";
		constexpr static rivet::rivet_type_id DispatchType_type_id = 0x7ba7ce05;
		constexpr static std::string_view CollectionName_type_name = "CollectionName";
		constexpr static rivet::rivet_type_id CollectionName_type_id = 0x49ab9602;
		constexpr static std::string_view Action_type_name = "Action";
		constexpr static rivet::rivet_type_id Action_type_id = 0x79b4c2f5;
		constexpr static std::string_view AssetType_type_name = "AssetType";
		constexpr static rivet::rivet_type_id AssetType_type_id = 0x8970bd6d; 

		explicit UrlDispatch() = default;
		explicit UrlDispatch([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t SessionId {};
		uint64_t AssetId {};
		rivet::ddl::generated::xa5664812 DispatchType {};
		std::string_view CollectionName {};
		std::string_view Action {};
		rivet::ddl::generated::AssetExtensions AssetType {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UrlDispatch>;
	};
} // namespace rivet::ddl::generated

// clang-format on
