// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VanityCategoryListItem.hpp>
#include <rivet/ddl/generated/SkinItemPartList.hpp>
#include <rivet/ddl/generated/MasterVanityItemList.hpp>
#include <rivet/ddl/generated/SkinItemCategoryList.hpp> 

#include <rivet/ddl/generated/MasterSkinItemList.hpp>

namespace rivet::ddl::generated {
	MasterSkinItemList::MasterSkinItemList([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		ItemCategoryList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemCategoryList>(ItemCategoryList_type_id);
		ItemPartList = serialized->unwrap_into_many<rivet::ddl::generated::SkinItemPartList>(ItemPartList_type_id);
		VanityCategoryList = serialized->unwrap_into_many<rivet::ddl::generated::VanityCategoryListItem>(VanityCategoryList_type_id);
		ColorConfigs = serialized->get_strings(ColorConfigs_type_id);
		ConstantConfigs = serialized->get_strings(ConstantConfigs_type_id);
		DecalConfigs = serialized->get_strings(DecalConfigs_type_id); 
	}

	[[nodiscard]] auto
	MasterSkinItemList::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MasterSkinItemList::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MasterSkinItemList> {
		if (incoming_type_id == MasterSkinItemList::type_id) {
			return std::make_shared<MasterSkinItemList>(serialized);
		}

		auto MasterVanityItemList_ptr = MasterVanityItemList::from_substruct(incoming_type_id, serialized);
		if (MasterVanityItemList_ptr != nullptr) {
			return MasterVanityItemList_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
