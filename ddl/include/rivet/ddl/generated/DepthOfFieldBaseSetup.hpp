// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DepthOfFieldBaseSetup : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "DepthOfFieldBaseSetup";
		constexpr const static rivet::rivet_type_id type_id = 0xb9c5470;

		constexpr const static std::string_view DistanceFar_type_name = "DistanceFar";
		constexpr const static rivet::rivet_type_id DistanceFar_type_id = 0xb13fd21e;
		constexpr const static std::string_view DistanceNear_type_name = "DistanceNear";
		constexpr const static rivet::rivet_type_id DistanceNear_type_id = 0xe7e7d300;
		constexpr const static std::string_view AperatureScaleFar_type_name = "AperatureScaleFar";
		constexpr const static rivet::rivet_type_id AperatureScaleFar_type_id = 0xadef95b;
		constexpr const static std::string_view AperatureScaleNear_type_name = "AperatureScaleNear";
		constexpr const static rivet::rivet_type_id AperatureScaleNear_type_id = 0xe1ea8734; 

		explicit DepthOfFieldBaseSetup() = default;
		explicit DepthOfFieldBaseSetup([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float DistanceFar {};
		float DistanceNear {};
		float AperatureScaleFar {};
		float AperatureScaleNear {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DepthOfFieldBaseSetup>;
	};
} // namespace rivet::ddl::generated

// clang-format on
