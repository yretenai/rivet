// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct FireConeData; 

	struct RIVET_DDL_SHARED ZoomData : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "ZoomData";
		constexpr const static rivet::rivet_type_id type_id = 0x6bc85e7f;

		constexpr const static std::string_view FireCone_type_name = "FireCone";
		constexpr const static rivet::rivet_type_id FireCone_type_id = 0x8c3d3ed4;
		constexpr const static std::string_view CamAimContext_type_name = "CamAimContext";
		constexpr const static rivet::rivet_type_id CamAimContext_type_id = 0xd1596448;
		constexpr const static std::string_view CamStickOverride_type_name = "CamStickOverride";
		constexpr const static rivet::rivet_type_id CamStickOverride_type_id = 0x3ffcbac0;
		constexpr const static std::string_view AimAssistOverride_type_name = "AimAssistOverride";
		constexpr const static rivet::rivet_type_id AimAssistOverride_type_id = 0x2322166c;
		constexpr const static std::string_view AimAssistOverrideCasual_type_name = "AimAssistOverrideCasual";
		constexpr const static rivet::rivet_type_id AimAssistOverrideCasual_type_id = 0x9e6ac66c;
		constexpr const static std::string_view DisableViewWidth_type_name = "DisableViewWidth";
		constexpr const static rivet::rivet_type_id DisableViewWidth_type_id = 0x1231cf61; 

		explicit ZoomData() = default;
		explicit ZoomData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::FireConeData> FireCone {};
		std::string_view CamAimContext {};
		std::string_view CamStickOverride {};
		std::string_view AimAssistOverride {};
		std::string_view AimAssistOverrideCasual {};
		bool DisableViewWidth {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ZoomData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
