// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <string_view>
#include <array>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_keywords.hpp>

namespace rivet::ddl::generated {
	constexpr const static std::string_view x41912c18_type_name = "x41912c18";
	constexpr const static rivet::rivet_type_id x41912c18_type_id = 0x41912c18;

	constexpr const static std::array<std::tuple<std::string_view, uint64_t>, 13> x41912c18_values = {
		std::make_tuple("kFlagsNone", 0x1),
		std::make_tuple("kFlagsLooping", 0x2),
		std::make_tuple("kFlagsBlendAdd", 0x4),
		std::make_tuple("kFlagsCombineAdd", 0x8),
		std::make_tuple("kFlagsAdditiveBranch", 0x10),
		std::make_tuple("kFlagsTimeBackwards", 0x20),
		std::make_tuple("kFlagsBlendEventPassThroughLayer", 0x40),
		std::make_tuple("kFlagsMirrorYZ", 0x80),
		std::make_tuple("kFlagsMirrorXZ", 0x100),
		std::make_tuple("kFlagsMirrorXY", 0x200),
		std::make_tuple("kFlagsFromLoopingDriver", 0x400),
		std::make_tuple("kFlagsFromUsesLocalTime", 0x800),
		std::make_tuple("kFlagsWasAdvanced", 0x1000), 
	};

	enum class x41912c18 : uint64_t {
		FlagsNone = 0x1,
		FlagsLooping = 0x2,
		FlagsBlendAdd = 0x4,
		FlagsCombineAdd = 0x8,
		FlagsAdditiveBranch = 0x10,
		FlagsTimeBackwards = 0x20,
		FlagsBlendEventPassThroughLayer = 0x40,
		FlagsMirrorYZ = 0x80,
		FlagsMirrorXZ = 0x100,
		FlagsMirrorXY = 0x200,
		FlagsFromLoopingDriver = 0x400,
		FlagsFromUsesLocalTime = 0x800,
		FlagsWasAdvanced = 0x1000, 
	};
} // namespace rivet::ddl::generated

// clang-format on
