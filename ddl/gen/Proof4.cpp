// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Proof3.hpp> 

#include <rivet/ddl/generated/Proof4.hpp>

namespace rivet::ddl::generated {
	Proof4::Proof4([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BaseField = serialized->get_int32(BaseField_type_id, 0u);
		B = serialized->get_float(B_type_id, 0.000000f);
		D = serialized->get_double(D_type_id, 0.000000);
		F64 = serialized->get_double(F64_type_id, 0.000000);
		Bool = serialized->get_bool(Bool_type_id, false);
		Boolean = serialized->get_bool(Boolean_type_id, false);
		C = serialized->get_int32s(C_type_id);
		BitsB = serialized->get_bitset<rivet::ddl::generated::BitsB>(BitsB_type_id, rivet::ddl::generated::BitsB_values, 0u);
		Proof = serialized->unwrap_into<rivet::ddl::generated::Proof3>(Proof_type_id);
		Hash = serialized->get_int32s(Hash_type_id);
		S = serialized->get_string(S_type_id, {});
		F = serialized->get_string(F_type_id, {});
		T = serialized->get_uint64(T_type_id, 0ull);
		J = serialized->get_field(J_type_id);
		A = serialized->get_uint64(A_type_id, 0ull);
		U32b = serialized->get_uint32(U32b_type_id, 0u);
		MLS = serialized->get_string(MLS_type_id, {});
		DM = serialized->get_string(DM_type_id, {}); 
	}

	[[nodiscard]] auto
	Proof4::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Proof4::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Proof4> {
		if (incoming_type_id == Proof4::type_id) {
			return std::make_shared<Proof4>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
