// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct MaterialNodeUserInput;
	struct MaterialNodePortUI;
	struct MaterialNodeInputPort; 

	struct RIVET_DDL_SHARED UI_MaterialGraphNodeInput : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "UI_MaterialGraphNodeInput";
		constexpr static rivet::rivet_type_id type_id = 0x207fff5e;

		constexpr static std::string_view Input_type_name = "Input";
		constexpr static rivet::rivet_type_id Input_type_id = 0xc17bfe16;
		constexpr static std::string_view IsConnected_type_name = "IsConnected";
		constexpr static rivet::rivet_type_id IsConnected_type_id = 0xaef3f8a9;
		constexpr static std::string_view PortUI_type_name = "PortUI";
		constexpr static rivet::rivet_type_id PortUI_type_id = 0xc5f8fa27;
		constexpr static std::string_view UserInput_type_name = "UserInput";
		constexpr static rivet::rivet_type_id UserInput_type_id = 0xbcb0be0d;
		constexpr static std::string_view InternalSortOrder_type_name = "InternalSortOrder";
		constexpr static rivet::rivet_type_id InternalSortOrder_type_id = 0x15d6f320; 

		explicit UI_MaterialGraphNodeInput() = default;
		explicit UI_MaterialGraphNodeInput([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::MaterialNodeInputPort> Input {};
		bool IsConnected {};
		std::shared_ptr<rivet::ddl::generated::MaterialNodePortUI> PortUI {};
		std::shared_ptr<rivet::ddl::generated::MaterialNodeUserInput> UserInput {};
		int32_t InternalSortOrder {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UI_MaterialGraphNodeInput>;
	};
} // namespace rivet::ddl::generated

// clang-format on
