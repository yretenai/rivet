// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED WeatherSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "WeatherSettings";
		constexpr static rivet::rivet_type_id type_id = 0xcfaf1028;

		constexpr static std::string_view WeatherCellSize_type_name = "WeatherCellSize";
		constexpr static rivet::rivet_type_id WeatherCellSize_type_id = 0x9d60aabb;
		constexpr static std::string_view WeatherGSplashAge_type_name = "WeatherGSplashAge";
		constexpr static rivet::rivet_type_id WeatherGSplashAge_type_id = 0xff34adb9;
		constexpr static std::string_view WeatherGSplashScale_type_name = "WeatherGSplashScale";
		constexpr static rivet::rivet_type_id WeatherGSplashScale_type_id = 0xfbbb7f85;
		constexpr static std::string_view WeatherGSplashColor_type_name = "WeatherGSplashColor";
		constexpr static rivet::rivet_type_id WeatherGSplashColor_type_id = 0x71ab12e8;
		constexpr static std::string_view WeatherGSplashAlpha_type_name = "WeatherGSplashAlpha";
		constexpr static rivet::rivet_type_id WeatherGSplashAlpha_type_id = 0xc71d636b;
		constexpr static std::string_view WeatherGSplashNearFade_type_name = "WeatherGSplashNearFade";
		constexpr static rivet::rivet_type_id WeatherGSplashNearFade_type_id = 0x8f8f743d;
		constexpr static std::string_view WeatherRippleThreshold_type_name = "WeatherRippleThreshold";
		constexpr static rivet::rivet_type_id WeatherRippleThreshold_type_id = 0x6f84096b; 

		explicit WeatherSettings() = default;
		explicit WeatherSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float WeatherCellSize {};
		float WeatherGSplashAge {};
		float WeatherGSplashScale {};
		float WeatherGSplashColor {};
		float WeatherGSplashAlpha {};
		float WeatherGSplashNearFade {};
		float WeatherRippleThreshold {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeatherSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
