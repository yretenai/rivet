// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotHitShaderData.hpp>
#include <rivet/ddl/generated/DeathData.hpp>
#include <rivet/ddl/generated/KnockdownData.hpp>
#include <rivet/ddl/generated/KnockbackData.hpp>
#include <rivet/ddl/generated/BotReactionBucket.hpp> 

#include <rivet/ddl/generated/HitReactGamePrius.hpp>

namespace rivet::ddl::generated {
	HitReactGamePrius::HitReactGamePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): HitReactPrius(serialized) {
		Buckets = serialized->unwrap_into_many<rivet::ddl::generated::BotReactionBucket>(Buckets_type_id);
		KnockbackData = serialized->unwrap_into<rivet::ddl::generated::KnockbackData>(KnockbackData_type_id);
		KnockdownData = serialized->unwrap_into<rivet::ddl::generated::KnockdownData>(KnockdownData_type_id);
		DeathData = serialized->unwrap_into<rivet::ddl::generated::DeathData>(DeathData_type_id);
		HitShaderData = serialized->unwrap_into<rivet::ddl::generated::BotHitShaderData>(HitShaderData_type_id);
		CollisionTestHeight = serialized->get_float(CollisionTestHeight_type_id);
		CollisionTestRadius = serialized->get_float(CollisionTestRadius_type_id); 
	}

	[[nodiscard]] auto
	HitReactGamePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HitReactGamePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HitReactGamePrius> {
		if (incoming_type_id == HitReactGamePrius::type_id) {
			return std::make_shared<HitReactGamePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
