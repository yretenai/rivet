// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/HeroTypes.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DebugPlaytestHeroInfo : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "DebugPlaytestHeroInfo";
		constexpr const static rivet::rivet_type_id type_id = 0xadf8cd7a;

		constexpr const static std::string_view SpawnAsHero_type_name = "SpawnAsHero";
		constexpr const static rivet::rivet_type_id SpawnAsHero_type_id = 0xeb1836f9;
		constexpr const static std::string_view SpawnLoadout_type_name = "SpawnLoadout";
		constexpr const static rivet::rivet_type_id SpawnLoadout_type_id = 0x569fa463;
		constexpr const static std::string_view BackpackLoadout_type_name = "BackpackLoadout";
		constexpr const static rivet::rivet_type_id BackpackLoadout_type_id = 0xc1772340; 

		explicit DebugPlaytestHeroInfo() = default;
		explicit DebugPlaytestHeroInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::HeroTypes SpawnAsHero {};
		std::string_view SpawnLoadout {};
		std::string_view BackpackLoadout {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DebugPlaytestHeroInfo>;
	};
} // namespace rivet::ddl::generated

// clang-format on
