// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TextureArray.hpp>
#include <rivet/ddl/generated/TextureMipGenAlpha.hpp>
#include <rivet/ddl/generated/TextureMipGen.hpp>
#include <rivet/ddl/generated/VaultMetaData.hpp> 

#include <rivet/ddl/generated/TextureDef.hpp>

namespace rivet::ddl::generated {
	TextureDef::TextureDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VaultMetaData = serialized->unwrap_into<rivet::ddl::generated::VaultMetaData>(VaultMetaData_type_id);
		IconPath = serialized->get_string(IconPath_type_id);
		SourcePath = serialized->get_string(SourcePath_type_id);
		DCCSourcePaths = serialized->get_strings(DCCSourcePaths_type_id);
		Type = serialized->get_enum<rivet::ddl::generated::x58cf7ca5>(Type_type_id, rivet::ddl::generated::x58cf7ca5_values);
		ContentType = serialized->get_enum<rivet::ddl::generated::x9f6b8de9>(ContentType_type_id, rivet::ddl::generated::x9f6b8de9_values);
		Quality = serialized->get_enum<rivet::ddl::generated::x771ceda9>(Quality_type_id, rivet::ddl::generated::x771ceda9_values);
		Filter = serialized->get_enum<rivet::ddl::generated::x597b7f4>(Filter_type_id, rivet::ddl::generated::x597b7f4_values);
		FormatOverride = serialized->get_enum<rivet::ddl::generated::xa4e99a36>(FormatOverride_type_id, rivet::ddl::generated::xa4e99a36_values);
		DepthOverride = serialized->get_enum<rivet::ddl::generated::x704d6a8>(DepthOverride_type_id, rivet::ddl::generated::x704d6a8_values);
		AddressModeU = serialized->get_enum<rivet::ddl::generated::x7ada9111>(AddressModeU_type_id, rivet::ddl::generated::x7ada9111_values);
		AddressModeV = serialized->get_enum<rivet::ddl::generated::x7ada9111>(AddressModeV_type_id, rivet::ddl::generated::x7ada9111_values);
		AddressModeW = serialized->get_enum<rivet::ddl::generated::x7ada9111>(AddressModeW_type_id, rivet::ddl::generated::x7ada9111_values);
		UseGPUCompressor = serialized->get_bool(UseGPUCompressor_type_id);
		MipBias = serialized->get_float(MipBias_type_id);
		NoUpscalerBias = serialized->get_bool(NoUpscalerBias_type_id);
		MipMaxCount = serialized->get_uint32(MipMaxCount_type_id);
		MipMinSize = serialized->get_uint32(MipMinSize_type_id);
		MipGen = serialized->unwrap_into<rivet::ddl::generated::TextureMipGen>(MipGen_type_id);
		MipGenAlpha = serialized->unwrap_into<rivet::ddl::generated::TextureMipGenAlpha>(MipGenAlpha_type_id);
		SourcePathRotation = serialized->get_string(SourcePathRotation_type_id);
		SourcePathNormal = serialized->get_string(SourcePathNormal_type_id);
		TextureArray = serialized->unwrap_into<rivet::ddl::generated::TextureArray>(TextureArray_type_id);
		NonPowerOfTwo = serialized->get_enum<rivet::ddl::generated::x51a4a4a4>(NonPowerOfTwo_type_id, rivet::ddl::generated::x51a4a4a4_values);
		SizeClamp = serialized->get_uint32(SizeClamp_type_id);
		SizeReduction = serialized->get_uint32(SizeReduction_type_id);
		DisableStreaming = serialized->get_bool(DisableStreaming_type_id);
		DisableMidMips = serialized->get_bool(DisableMidMips_type_id);
		DisableSizeCap = serialized->get_bool(DisableSizeCap_type_id);
		ExposureBias = serialized->get_float(ExposureBias_type_id);
		PreMultiplyAlpha = serialized->get_bool(PreMultiplyAlpha_type_id);
		Deprecated = serialized->get_bool(Deprecated_type_id);
		FlipNormalsX = serialized->get_bool(FlipNormalsX_type_id);
		FlipNormalsY = serialized->get_bool(FlipNormalsY_type_id);
		GlossNormalMap = serialized->get_string(GlossNormalMap_type_id);
		ToksvigScale = serialized->get_float(ToksvigScale_type_id);
		HighResDefaultIBL = serialized->get_bool(HighResDefaultIBL_type_id);
		IBLLightMask = serialized->get_string(IBLLightMask_type_id);
		AutomateIBLLights = serialized->get_bool(AutomateIBLLights_type_id);
		Clamp = serialized->get_enum<rivet::ddl::generated::x96db4657>(Clamp_type_id, rivet::ddl::generated::x96db4657_values);
		Shift = serialized->get_uint32(Shift_type_id); 
	}

	[[nodiscard]] auto
	TextureDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TextureDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TextureDef> {
		if (incoming_type_id == TextureDef::type_id) {
			return std::make_shared<TextureDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
