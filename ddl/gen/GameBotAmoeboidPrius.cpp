// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AmoeboidDeathSpawnData.hpp> 

#include <rivet/ddl/generated/GameBotAmoeboidPrius.hpp>

namespace rivet::ddl::generated {
	GameBotAmoeboidPrius::GameBotAmoeboidPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): GameBotMeleeSwarmerPrius(serialized) {
		DeathSpawnData = serialized->unwrap_into<rivet::ddl::generated::AmoeboidDeathSpawnData>(DeathSpawnData_type_id);
		AmoeboidType = serialized->get_enum<rivet::ddl::generated::x232b923a>(AmoeboidType_type_id, rivet::ddl::generated::x232b923a_values, rivet::ddl::generated::x232b923a::Large);
		CombineSpawnActor = serialized->get_string(CombineSpawnActor_type_id, {});
		MaxCombinesAllowed = serialized->get_uint32(MaxCombinesAllowed_type_id, 3u); 
	}

	[[nodiscard]] auto
	GameBotAmoeboidPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameBotAmoeboidPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotAmoeboidPrius> {
		if (incoming_type_id == GameBotAmoeboidPrius::type_id) {
			return std::make_shared<GameBotAmoeboidPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
