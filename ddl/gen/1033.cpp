// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TriggerEffectSequenceTime.hpp>
#include <rivet/ddl/generated/TriggerEffectSequenceCustom.hpp>
#include <rivet/ddl/generated/TriggerEffectSequencePosition.hpp> 

#include <rivet/ddl/generated/TriggerEffectSequenceBase.hpp>

namespace rivet::ddl::generated {
	TriggerEffectSequenceBase::TriggerEffectSequenceBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	auto
	TriggerEffectSequenceBase::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	TriggerEffectSequenceBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TriggerEffectSequenceBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerEffectSequenceBase> {
		if (incoming_type_id == TriggerEffectSequenceBase::type_id) {
			return std::make_shared<TriggerEffectSequenceBase>(serialized);
		}

		auto TriggerEffectSequenceTime_ptr = TriggerEffectSequenceTime::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectSequenceTime_ptr != nullptr) {
			return TriggerEffectSequenceTime_ptr;
		}

		auto TriggerEffectSequencePosition_ptr = TriggerEffectSequencePosition::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectSequencePosition_ptr != nullptr) {
			return TriggerEffectSequencePosition_ptr;
		}

		auto TriggerEffectSequenceCustom_ptr = TriggerEffectSequenceCustom::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectSequenceCustom_ptr != nullptr) {
			return TriggerEffectSequenceCustom_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
