// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroGroovitronConfig.hpp>

namespace rivet::ddl::generated {
	HeroGroovitronConfig::HeroGroovitronConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MoveMaxSpeed = serialized->get_float(MoveMaxSpeed_type_id, 4.000000);
		MoveAccel = serialized->get_float(MoveAccel_type_id, 8.000000);
		MoveDecel = serialized->get_float(MoveDecel_type_id, 1.000000);
		JumpMinHeight = serialized->get_float(JumpMinHeight_type_id, 1.500000);
		JumpMaxHeight = serialized->get_float(JumpMaxHeight_type_id, 2.500000);
		JumpMaxHoldTime = serialized->get_float(JumpMaxHoldTime_type_id, 0.200000);
		JumpTerminalVelocity = serialized->get_float(JumpTerminalVelocity_type_id, 50.000000);
		JumpPeakTime = serialized->get_float(JumpPeakTime_type_id, 0.300000); 
	}

	[[nodiscard]] auto
	HeroGroovitronConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroGroovitronConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroGroovitronConfig> {
		if (incoming_type_id == HeroGroovitronConfig::type_id) {
			return std::make_shared<HeroGroovitronConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
