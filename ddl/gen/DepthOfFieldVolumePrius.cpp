// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DepthOfFieldVolumePrius.hpp>

namespace rivet::ddl::generated {
	DepthOfFieldVolumePrius::DepthOfFieldVolumePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BlurStartDistance = serialized->get_float(BlurStartDistance_type_id);
		BlurValue = serialized->get_float(BlurValue_type_id);
		BlurNearDistance = serialized->get_float(BlurNearDistance_type_id);
		BlurNearValue = serialized->get_float(BlurNearValue_type_id);
		BlendOnTime = serialized->get_float(BlendOnTime_type_id);
		DisableDOF = serialized->get_bool(DisableDOF_type_id); 
	}

	[[nodiscard]] auto
	DepthOfFieldVolumePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DepthOfFieldVolumePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DepthOfFieldVolumePrius> {
		if (incoming_type_id == DepthOfFieldVolumePrius::type_id) {
			return std::make_shared<DepthOfFieldVolumePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
