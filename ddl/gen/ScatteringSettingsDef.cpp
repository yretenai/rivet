// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/ScatteringSettingsDef.hpp>

namespace rivet::ddl::generated {
	ScatteringSettingsDef::ScatteringSettingsDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id);
		RayleighDensity = serialized->get_float(RayleighDensity_type_id);
		MieDensity = serialized->get_float(MieDensity_type_id);
		MieAlbedo = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(MieAlbedo_type_id); 
	}

	[[nodiscard]] auto
	ScatteringSettingsDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ScatteringSettingsDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ScatteringSettingsDef> {
		if (incoming_type_id == ScatteringSettingsDef::type_id) {
			return std::make_shared<ScatteringSettingsDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
