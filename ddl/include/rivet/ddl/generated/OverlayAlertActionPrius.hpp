// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x10228b34.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED OverlayAlertActionPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "OverlayAlertActionPrius";
		constexpr static rivet::rivet_type_id type_id = 0x9da10bf2;

		constexpr static std::string_view ActionType_type_name = "ActionType";
		constexpr static rivet::rivet_type_id ActionType_type_id = 0x874b2194;
		constexpr static std::string_view TempTextHeader_type_name = "TempTextHeader";
		constexpr static rivet::rivet_type_id TempTextHeader_type_id = 0x32a672f5;
		constexpr static std::string_view LocTagHeader_type_name = "LocTagHeader";
		constexpr static rivet::rivet_type_id LocTagHeader_type_id = 0xc90dcc8b;
		constexpr static std::string_view TempTextMessage_type_name = "TempTextMessage";
		constexpr static rivet::rivet_type_id TempTextMessage_type_id = 0x4557ff9d;
		constexpr static std::string_view LocTagMessage_type_name = "LocTagMessage";
		constexpr static rivet::rivet_type_id LocTagMessage_type_id = 0xf2110818;
		constexpr static std::string_view ConfirmText_type_name = "ConfirmText";
		constexpr static rivet::rivet_type_id ConfirmText_type_id = 0xe3f7d1c;
		constexpr static std::string_view CancelText_type_name = "CancelText";
		constexpr static rivet::rivet_type_id CancelText_type_id = 0x884d2b6a; 

		explicit OverlayAlertActionPrius() = default;
		explicit OverlayAlertActionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x10228b34 ActionType {};
		std::string_view TempTextHeader {};
		std::string_view LocTagHeader {};
		std::string_view TempTextMessage {};
		std::string_view LocTagMessage {};
		std::string_view ConfirmText {};
		std::string_view CancelText {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OverlayAlertActionPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
