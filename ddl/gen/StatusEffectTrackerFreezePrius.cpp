// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FinaleMechStatusEffectTrackerFreezePrius.hpp> 

#include <rivet/ddl/generated/StatusEffectTrackerFreezePrius.hpp>

namespace rivet::ddl::generated {
	StatusEffectTrackerFreezePrius::StatusEffectTrackerFreezePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): StatusEffectTrackerBasePrius(serialized) {
		IntroAnim = serialized->get_string(IntroAnim_type_id, "Frozen_Intro");
		LoopAnim = serialized->get_string(LoopAnim_type_id, "Frozen_Loop");
		BreakOutAnim = serialized->get_string(BreakOutAnim_type_id, "Frozen_Breakout");
		DeathAnim = serialized->get_string(DeathAnim_type_id, "Death_Ice");
		IceActor = serialized->get_string(IceActor_type_id, {});
		IceAttachLocator = serialized->get_string(IceAttachLocator_type_id, "igLoc_body_prop"); 
	}

	[[nodiscard]] auto
	StatusEffectTrackerFreezePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StatusEffectTrackerFreezePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StatusEffectTrackerFreezePrius> {
		if (incoming_type_id == StatusEffectTrackerFreezePrius::type_id) {
			return std::make_shared<StatusEffectTrackerFreezePrius>(serialized);
		}

		auto FinaleMechStatusEffectTrackerFreezePrius_ptr = FinaleMechStatusEffectTrackerFreezePrius::from_substruct(incoming_type_id, serialized);
		if (FinaleMechStatusEffectTrackerFreezePrius_ptr != nullptr) {
			return FinaleMechStatusEffectTrackerFreezePrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
