// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xb774530f.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimMaterialComponentMapDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimMaterialComponentMapDef";
		constexpr static rivet::rivet_type_id type_id = 0xc78a7f67;

		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view MaterialInputName_type_name = "MaterialInputName";
		constexpr static rivet::rivet_type_id MaterialInputName_type_id = 0x14e6530d;
		constexpr static std::string_view MaterialMappingName_type_name = "MaterialMappingName";
		constexpr static rivet::rivet_type_id MaterialMappingName_type_id = 0x981e6927;
		constexpr static std::string_view AnimTrackName_type_name = "AnimTrackName";
		constexpr static rivet::rivet_type_id AnimTrackName_type_id = 0x7e56cbed;
		constexpr static std::string_view ClampMin_type_name = "ClampMin";
		constexpr static rivet::rivet_type_id ClampMin_type_id = 0x2213ae6d;
		constexpr static std::string_view ClampMax_type_name = "ClampMax";
		constexpr static rivet::rivet_type_id ClampMax_type_id = 0x1e1e9134; 

		explicit AnimMaterialComponentMapDef() = default;
		explicit AnimMaterialComponentMapDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xb774530f Type {};
		std::string_view MaterialInputName {};
		std::string_view MaterialMappingName {};
		std::vector<std::string_view> AnimTrackName {};
		float ClampMin {};
		float ClampMax {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimMaterialComponentMapDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
