// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xd93fd23f.hpp> 

namespace rivet::ddl::generated {
	struct AmbientCurveFacingBase; 

	struct RIVET_DDL_SHARED AmbientCurveFollowerPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AmbientCurveFollowerPrius";
		constexpr static rivet::rivet_type_id type_id = 0x1cec857f;

		constexpr static std::string_view OpenCurveFollowType_type_name = "OpenCurveFollowType";
		constexpr static rivet::rivet_type_id OpenCurveFollowType_type_id = 0xd344790d;
		constexpr static std::string_view DoOpenCurveStop_type_name = "DoOpenCurveStop";
		constexpr static rivet::rivet_type_id DoOpenCurveStop_type_id = 0x5af812a7;
		constexpr static std::string_view Acceleration_type_name = "Acceleration";
		constexpr static rivet::rivet_type_id Acceleration_type_id = 0xb9f88dfb;
		constexpr static std::string_view Deceleration_type_name = "Deceleration";
		constexpr static rivet::rivet_type_id Deceleration_type_id = 0xc9ee30a8;
		constexpr static std::string_view MaxSpeed_type_name = "MaxSpeed";
		constexpr static rivet::rivet_type_id MaxSpeed_type_id = 0x16b83961;
		constexpr static std::string_view ForceYUp_type_name = "ForceYUp";
		constexpr static rivet::rivet_type_id ForceYUp_type_id = 0x947d9c5d;
		constexpr static std::string_view IntroCurveMinDistFactor_type_name = "IntroCurveMinDistFactor";
		constexpr static rivet::rivet_type_id IntroCurveMinDistFactor_type_id = 0xb2398100;
		constexpr static std::string_view IntroCurveMaxDistFactor_type_name = "IntroCurveMaxDistFactor";
		constexpr static rivet::rivet_type_id IntroCurveMaxDistFactor_type_id = 0xf276f976;
		constexpr static std::string_view IntroCurveAngleFactor_type_name = "IntroCurveAngleFactor";
		constexpr static rivet::rivet_type_id IntroCurveAngleFactor_type_id = 0xa95f634c;
		constexpr static std::string_view IntroCurveMaxTurnRate_type_name = "IntroCurveMaxTurnRate";
		constexpr static rivet::rivet_type_id IntroCurveMaxTurnRate_type_id = 0x75e591c8;
		constexpr static std::string_view IntroCurveLockToOrientation_type_name = "IntroCurveLockToOrientation";
		constexpr static rivet::rivet_type_id IntroCurveLockToOrientation_type_id = 0x40bd7a58;
		constexpr static std::string_view SyncUpdate_type_name = "SyncUpdate";
		constexpr static rivet::rivet_type_id SyncUpdate_type_id = 0x28b60846;
		constexpr static std::string_view DeleteAtEnd_type_name = "DeleteAtEnd";
		constexpr static rivet::rivet_type_id DeleteAtEnd_type_id = 0x15e49676;
		constexpr static std::string_view ApplyFacing_type_name = "ApplyFacing";
		constexpr static rivet::rivet_type_id ApplyFacing_type_id = 0xb4316292;
		constexpr static std::string_view FacingData_type_name = "FacingData";
		constexpr static rivet::rivet_type_id FacingData_type_id = 0xda7e3fc7; 

		explicit AmbientCurveFollowerPrius() = default;
		explicit AmbientCurveFollowerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xd93fd23f OpenCurveFollowType {};
		bool DoOpenCurveStop {};
		float Acceleration {};
		float Deceleration {};
		float MaxSpeed {};
		bool ForceYUp {};
		float IntroCurveMinDistFactor {};
		float IntroCurveMaxDistFactor {};
		float IntroCurveAngleFactor {};
		float IntroCurveMaxTurnRate {};
		bool IntroCurveLockToOrientation {};
		bool SyncUpdate {};
		bool DeleteAtEnd {};
		bool ApplyFacing {};
		std::shared_ptr<rivet::ddl::generated::AmbientCurveFacingBase> FacingData {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AmbientCurveFollowerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
