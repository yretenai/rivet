// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ScriptedShotEffectListElement.hpp> 

#include <rivet/ddl/generated/CreateAOEPrius.hpp>

namespace rivet::ddl::generated {
	CreateAOEPrius::CreateAOEPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ScriptedShotEffectBasePrius(serialized) {
		Radius = serialized->get_float(Radius_type_id, 1.000000f);
		LOS = serialized->get_bool(LOS_type_id, true);
		TriggerExplode = serialized->get_bool(TriggerExplode_type_id, false);
		IgnoreHitActor = serialized->get_bool(IgnoreHitActor_type_id, false);
		AOESubEffects = serialized->unwrap_into_many<rivet::ddl::generated::ScriptedShotEffectListElement>(AOESubEffects_type_id); 
	}

	[[nodiscard]] auto
	CreateAOEPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CreateAOEPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CreateAOEPrius> {
		if (incoming_type_id == CreateAOEPrius::type_id) {
			return std::make_shared<CreateAOEPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
