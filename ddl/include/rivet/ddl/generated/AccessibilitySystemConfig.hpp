// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct ColorBlindFilterData;
	struct AccessibilityMaterial;
	struct AccessibilityRemapData; 

	struct RIVET_DDL_SHARED AccessibilitySystemConfig : ConfigBase {
		constexpr const static std::string_view type_name = "AccessibilitySystemConfig";
		constexpr const static rivet::rivet_type_id type_id = 0xc8669b59;

		constexpr const static std::string_view ColorBlindFilters_type_name = "ColorBlindFilters";
		constexpr const static rivet::rivet_type_id ColorBlindFilters_type_id = 0x51f45b69;
		constexpr const static std::string_view AccessibilityMaterials_type_name = "AccessibilityMaterials";
		constexpr const static rivet::rivet_type_id AccessibilityMaterials_type_id = 0xb95dd4c4;
		constexpr const static std::string_view ControlRemapData_type_name = "ControlRemapData";
		constexpr const static rivet::rivet_type_id ControlRemapData_type_id = 0x6e300f35; 

		explicit AccessibilitySystemConfig() = default;
		explicit AccessibilitySystemConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::ColorBlindFilterData> ColorBlindFilters {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AccessibilityMaterial>> AccessibilityMaterials {};
		std::shared_ptr<rivet::ddl::generated::AccessibilityRemapData> ControlRemapData {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AccessibilitySystemConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
