// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FlightAreaFirepointHunterPrius.hpp>

namespace rivet::ddl::generated {
	FlightAreaFirepointHunterPrius::FlightAreaFirepointHunterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MinPlanarDistance = serialized->get_float(MinPlanarDistance_type_id);
		MaxPlanarDistance = serialized->get_float(MaxPlanarDistance_type_id);
		MinVerticalOffset = serialized->get_float(MinVerticalOffset_type_id);
		MaxElevationDegrees = serialized->get_float(MaxElevationDegrees_type_id);
		MaxTargetDistance = serialized->get_float(MaxTargetDistance_type_id);
		MinPosDelta = serialized->get_float(MinPosDelta_type_id);
		MaxPosDelta = serialized->get_float(MaxPosDelta_type_id);
		PreferVolumeSwitch = serialized->get_bool(PreferVolumeSwitch_type_id);
		RatingLos = serialized->get_float(RatingLos_type_id);
		RatingLosError = serialized->get_float(RatingLosError_type_id);
		RatingDistance = serialized->get_float(RatingDistance_type_id);
		RatingDistanceError = serialized->get_float(RatingDistanceError_type_id);
		RatingTargetDistance = serialized->get_float(RatingTargetDistance_type_id);
		RatingElev = serialized->get_float(RatingElev_type_id);
		RatingElevError = serialized->get_float(RatingElevError_type_id);
		RatingPositionDelta = serialized->get_float(RatingPositionDelta_type_id);
		RatingVolumeWeight = serialized->get_float(RatingVolumeWeight_type_id); 
	}

	[[nodiscard]] auto
	FlightAreaFirepointHunterPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FlightAreaFirepointHunterPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FlightAreaFirepointHunterPrius> {
		if (incoming_type_id == FlightAreaFirepointHunterPrius::type_id) {
			return std::make_shared<FlightAreaFirepointHunterPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
