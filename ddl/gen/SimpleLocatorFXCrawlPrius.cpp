// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/EventStyleSpecified.hpp>
#include <rivet/ddl/generated/LocatorCrawlPoints.hpp>
#include <rivet/ddl/generated/AssetReferenceDef.hpp> 

#include <rivet/ddl/generated/SimpleLocatorFXCrawlPrius.hpp>

namespace rivet::ddl::generated {
	SimpleLocatorFXCrawlPrius::SimpleLocatorFXCrawlPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CrawlFX = serialized->unwrap_into<rivet::ddl::generated::AssetReferenceDef>(CrawlFX_type_id);
		TimeScale = serialized->get_enum<rivet::ddl::generated::x48037d3a>(TimeScale_type_id, rivet::ddl::generated::x48037d3a_values, rivet::ddl::generated::x48037d3a::GameTime);
		CrawlPoints = serialized->unwrap_into_many<rivet::ddl::generated::LocatorCrawlPoints>(CrawlPoints_type_id);
		CancelEvents = serialized->unwrap_into_many<rivet::ddl::generated::EventStyleSpecified>(CancelEvents_type_id); 
	}

	[[nodiscard]] auto
	SimpleLocatorFXCrawlPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SimpleLocatorFXCrawlPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleLocatorFXCrawlPrius> {
		if (incoming_type_id == SimpleLocatorFXCrawlPrius::type_id) {
			return std::make_shared<SimpleLocatorFXCrawlPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
