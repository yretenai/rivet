// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PlayerTargetingLine2DPrius.hpp>
#include <rivet/ddl/generated/PlayerTargetingBlastMarkerPrius.hpp>
#include <rivet/ddl/generated/PlayerTargetingOnScreenListPrius.hpp> 

#include <rivet/ddl/generated/PlayerTargetingStickControlPrius.hpp>

namespace rivet::ddl::generated {
	PlayerTargetingStickControlPrius::PlayerTargetingStickControlPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): PlayerTargetingBasePrius(serialized) {
		UseLeftStick = serialized->get_bool(UseLeftStick_type_id, false);
		UseRightStick = serialized->get_bool(UseRightStick_type_id, true); 
	}

	[[nodiscard]] auto
	PlayerTargetingStickControlPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PlayerTargetingStickControlPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PlayerTargetingStickControlPrius> {
		if (incoming_type_id == PlayerTargetingStickControlPrius::type_id) {
			return std::make_shared<PlayerTargetingStickControlPrius>(serialized);
		}

		auto PlayerTargetingOnScreenListPrius_ptr = PlayerTargetingOnScreenListPrius::from_substruct(incoming_type_id, serialized);
		if (PlayerTargetingOnScreenListPrius_ptr != nullptr) {
			return PlayerTargetingOnScreenListPrius_ptr;
		}

		auto PlayerTargetingBlastMarkerPrius_ptr = PlayerTargetingBlastMarkerPrius::from_substruct(incoming_type_id, serialized);
		if (PlayerTargetingBlastMarkerPrius_ptr != nullptr) {
			return PlayerTargetingBlastMarkerPrius_ptr;
		}

		auto PlayerTargetingLine2DPrius_ptr = PlayerTargetingLine2DPrius::from_substruct(incoming_type_id, serialized);
		if (PlayerTargetingLine2DPrius_ptr != nullptr) {
			return PlayerTargetingLine2DPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
