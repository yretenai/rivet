// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ShootAtCurveFollowTarget.hpp>

namespace rivet::ddl::generated {
	ShootAtCurveFollowTarget::ShootAtCurveFollowTarget([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ShootAtMortarFiringStyle(serialized) {
		InitFollowSpeed = serialized->get_float(InitFollowSpeed_type_id, 4.000000);
		MaxFollowSpeed = serialized->get_float(MaxFollowSpeed_type_id, 10.000000);
		FollowAccel = serialized->get_float(FollowAccel_type_id, 3.000000);
		FollowDecel = serialized->get_float(FollowDecel_type_id, 2.000000);
		FollowWhileFiring = serialized->get_bool(FollowWhileFiring_type_id, false);
		OrientTowardsTarget = serialized->get_bool(OrientTowardsTarget_type_id, false);
		PredictTargetPos = serialized->get_bool(PredictTargetPos_type_id, false);
		MaxPredictSpeed = serialized->get_float(MaxPredictSpeed_type_id, 15.000000);
		ExpectedMortarTime = serialized->get_float(ExpectedMortarTime_type_id, 1.000000);
		ClampToCombatArea = serialized->get_bool(ClampToCombatArea_type_id, false); 
	}

	[[nodiscard]] auto
	ShootAtCurveFollowTarget::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ShootAtCurveFollowTarget::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShootAtCurveFollowTarget> {
		if (incoming_type_id == ShootAtCurveFollowTarget::type_id) {
			return std::make_shared<ShootAtCurveFollowTarget>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
