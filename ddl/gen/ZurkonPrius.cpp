// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ZurkonPrius.hpp>

namespace rivet::ddl::generated {
	ZurkonPrius::ZurkonPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FamilyType = serialized->get_enum<rivet::ddl::generated::x2c2b51d>(FamilyType_type_id, rivet::ddl::generated::x2c2b51d_values, rivet::ddl::generated::x2c2b51d::Dad);
		ShotConfigAssetId = serialized->get_uint64(ShotConfigAssetId_type_id, 0);
		VOConfigAssetId = serialized->get_uint64(VOConfigAssetId_type_id, 0);
		OwnerHandle = serialized->get_uint32(OwnerHandle_type_id, 0);
		WeaponHandle = serialized->get_uint32(WeaponHandle_type_id, 0);
		NumShots = serialized->get_uint32(NumShots_type_id, 0);
		HitPoints = serialized->get_float(HitPoints_type_id, 0.000000);
		Range = serialized->get_float(Range_type_id, 0.000000);
		FiringInterval = serialized->get_float(FiringInterval_type_id, 0.000000);
		IsRespawn = serialized->get_bool(IsRespawn_type_id, false); 
	}

	[[nodiscard]] auto
	ZurkonPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ZurkonPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ZurkonPrius> {
		if (incoming_type_id == ZurkonPrius::type_id) {
			return std::make_shared<ZurkonPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
