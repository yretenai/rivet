// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StatusEmitterPickupPrius.hpp>
#include <rivet/ddl/generated/OfferPrius.hpp>
#include <rivet/ddl/generated/PickupBobData.hpp>
#include <rivet/ddl/generated/PickupSharedPrius.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/PickupBasePrius.hpp>

namespace rivet::ddl::generated {
	PickupBasePrius::PickupBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Velocity = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Velocity_type_id);
		DecayTimer = serialized->get_float(DecayTimer_type_id, 0.000000f);
		NoPickupTime = serialized->get_float(NoPickupTime_type_id, 0.000000f);
		PickupRange = serialized->get_float(PickupRange_type_id, 3.000000f);
		CollectThreshold = serialized->get_float(CollectThreshold_type_id, 0.500000f);
		CollisionRadius = serialized->get_float(CollisionRadius_type_id, 0.150000f);
		Gravity = serialized->get_float(Gravity_type_id, -12.000000f);
		MaxRandomAngle = serialized->get_float(MaxRandomAngle_type_id, 0.000000f);
		MinAngularSpeed = serialized->get_float(MinAngularSpeed_type_id, 0.000000f);
		MaxAngularSpeed = serialized->get_float(MaxAngularSpeed_type_id, 0.000000f);
		MinCollectSpeed = serialized->get_float(MinCollectSpeed_type_id, 9.000000f);
		MaxCollectSpeed = serialized->get_float(MaxCollectSpeed_type_id, 12.000000f);
		SwarmSpread = serialized->get_float(SwarmSpread_type_id, 0.850000f);
		MaxSwarmOffset = serialized->get_float(MaxSwarmOffset_type_id, -1.000000f);
		StartFixed = serialized->get_bool(StartFixed_type_id, true);
		CanBePickedUp = serialized->get_bool(CanBePickedUp_type_id, true);
		StartFalling = serialized->get_bool(StartFalling_type_id, false);
		PhysicsMovement = serialized->get_bool(PhysicsMovement_type_id, false);
		OffsetCollision = serialized->get_bool(OffsetCollision_type_id, true);
		DoSettling = serialized->get_bool(DoSettling_type_id, false);
		DoShimmer = serialized->get_bool(DoShimmer_type_id, false);
		RequirePath = serialized->get_bool(RequirePath_type_id, true);
		AllowRangeBonus = serialized->get_bool(AllowRangeBonus_type_id, true);
		DoSanityChecks = serialized->get_bool(DoSanityChecks_type_id, true);
		DeathAutoCollect = serialized->get_bool(DeathAutoCollect_type_id, true);
		RezoneToWorld = serialized->get_bool(RezoneToWorld_type_id, false);
		StopMovingOnAttach = serialized->get_bool(StopMovingOnAttach_type_id, false);
		CanBeBumped = serialized->get_bool(CanBeBumped_type_id, false);
		DoWaterSplash = serialized->get_bool(DoWaterSplash_type_id, false);
		DeleteOnPickup = serialized->get_bool(DeleteOnPickup_type_id, true);
		BobData = serialized->unwrap_into<rivet::ddl::generated::PickupBobData>(BobData_type_id);
		PercentCollectedRenderConstant = serialized->get_string(PercentCollectedRenderConstant_type_id, {});
		UseEmbeddedOffer = serialized->get_bool(UseEmbeddedOffer_type_id, false);
		Offer = serialized->unwrap_into<rivet::ddl::generated::OfferPrius>(Offer_type_id); 
	}

	[[nodiscard]] auto
	PickupBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PickupBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PickupBasePrius> {
		if (incoming_type_id == PickupBasePrius::type_id) {
			return std::make_shared<PickupBasePrius>(serialized);
		}

		auto PickupSharedPrius_ptr = PickupSharedPrius::from_substruct(incoming_type_id, serialized);
		if (PickupSharedPrius_ptr != nullptr) {
			return PickupSharedPrius_ptr;
		}

		auto StatusEmitterPickupPrius_ptr = StatusEmitterPickupPrius::from_substruct(incoming_type_id, serialized);
		if (StatusEmitterPickupPrius_ptr != nullptr) {
			return StatusEmitterPickupPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
