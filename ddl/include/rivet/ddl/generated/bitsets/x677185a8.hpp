// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <string_view>
#include <array>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_keywords.hpp>

namespace rivet::ddl::generated {
	constexpr static std::string_view x677185a8_type_name = "x677185a8";
	constexpr static rivet::rivet_type_id x677185a8_type_id = 0x677185a8;

	constexpr static std::array<std::tuple<std::string_view, uint64_t>, 11> x677185a8_values = {
		std::make_tuple("kNull", 0x0),
		std::make_tuple("kDamage", 0x1),
		std::make_tuple("kKilled", 0x2),
		std::make_tuple("kBlocked", 0x4),
		std::make_tuple("kCountered", 0x8),
		std::make_tuple("kIgnoreDead", 0x10),
		std::make_tuple("kIgnoreInvulnerable", 0x20),
		std::make_tuple("kIgnoreOnce", 0x40),
		std::make_tuple("kIgnoreFriendly", 0x80),
		std::make_tuple("kOverkill", 0x100),
		std::make_tuple("kIgnore", 0xf0), 
	};

	enum class x677185a8 : uint64_t {
		Null = 0x0,
		Damage = 0x1,
		Killed = 0x2,
		Blocked = 0x4,
		Countered = 0x8,
		IgnoreDead = 0x10,
		IgnoreInvulnerable = 0x20,
		IgnoreOnce = 0x40,
		IgnoreFriendly = 0x80,
		Overkill = 0x100,
		Ignore = 0xf0, 
	};
} // namespace rivet::ddl::generated

// clang-format on
