// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UIDisplayObjectData.hpp> 

#include <rivet/ddl/generated/UIObjectDisplayerConfig.hpp>

namespace rivet::ddl::generated {
	UIObjectDisplayerConfig::UIObjectDisplayerConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		VendorWeaponZone = serialized->get_string(VendorWeaponZone_type_id);
		VendorWeaponAtmosphere = serialized->get_string(VendorWeaponAtmosphere_type_id);
		PauseMenuZone = serialized->get_string(PauseMenuZone_type_id);
		PauseMenuAtmosphere = serialized->get_string(PauseMenuAtmosphere_type_id);
		PauseMapZone = serialized->get_string(PauseMapZone_type_id);
		PauseMapAtmosphere = serialized->get_string(PauseMapAtmosphere_type_id);
		PauseMenuCameraTransition = serialized->get_float(PauseMenuCameraTransition_type_id);
		UIDisplayObjectData = serialized->unwrap_into_many<rivet::ddl::generated::UIDisplayObjectData>(UIDisplayObjectData_type_id); 
	}

	auto
	UIObjectDisplayerConfig::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	UIObjectDisplayerConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UIObjectDisplayerConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIObjectDisplayerConfig> {
		if (incoming_type_id == UIObjectDisplayerConfig::type_id) {
			return std::make_shared<UIObjectDisplayerConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
