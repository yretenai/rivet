// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TrajectorDrawerKnotData.hpp>

namespace rivet::ddl::generated {
	TrajectorDrawerKnotData::TrajectorDrawerKnotData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		KnotModel = serialized->get_string(KnotModel_type_id, {});
		MinInterval = serialized->get_float(MinInterval_type_id, 0.100000);
		MaxInterval = serialized->get_float(MaxInterval_type_id, 0.140000);
		FadeDistance = serialized->get_float(FadeDistance_type_id, 35.000000);
		MinScaleXY = serialized->get_float(MinScaleXY_type_id, 2.250000);
		MaxScaleXY = serialized->get_float(MaxScaleXY_type_id, 3.500000);
		MinScaleZ = serialized->get_float(MinScaleZ_type_id, 1.250000);
		MaxScaleZ = serialized->get_float(MaxScaleZ_type_id, 2.250000);
		StartOffset = serialized->get_float(StartOffset_type_id, 0.500000);
		EndOffset = serialized->get_float(EndOffset_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	TrajectorDrawerKnotData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TrajectorDrawerKnotData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TrajectorDrawerKnotData> {
		if (incoming_type_id == TrajectorDrawerKnotData::type_id) {
			return std::make_shared<TrajectorDrawerKnotData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
