// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DecalResponseEvent.hpp>
#include <rivet/ddl/generated/KeyFrameModResponseEvent.hpp>
#include <rivet/ddl/generated/CompositeShaderConstantResponseEvent.hpp>
#include <rivet/ddl/generated/WWiseResponseEvent.hpp>
#include <rivet/ddl/generated/VisualResponseEvent.hpp>
#include <rivet/ddl/generated/CompositeShaderResponseEvent.hpp>
#include <rivet/ddl/generated/SoundResponseEvent.hpp>
#include <rivet/ddl/generated/MaterialResponseEvent.hpp>
#include <rivet/ddl/generated/ConstantResponseEvent.hpp> 

#include <rivet/ddl/generated/ResponseEvent.hpp>

namespace rivet::ddl::generated {
	ResponseEvent::ResponseEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {

	}

	[[nodiscard]] auto
	ResponseEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ResponseEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ResponseEvent> {
		if (incoming_type_id == ResponseEvent::type_id) {
			return std::make_shared<ResponseEvent>(serialized);
		}

		auto ConstantResponseEvent_ptr = ConstantResponseEvent::from_substruct(incoming_type_id, serialized);
		if (ConstantResponseEvent_ptr != nullptr) {
			return ConstantResponseEvent_ptr;
		}

		auto SoundResponseEvent_ptr = SoundResponseEvent::from_substruct(incoming_type_id, serialized);
		if (SoundResponseEvent_ptr != nullptr) {
			return SoundResponseEvent_ptr;
		}

		auto CompositeShaderResponseEvent_ptr = CompositeShaderResponseEvent::from_substruct(incoming_type_id, serialized);
		if (CompositeShaderResponseEvent_ptr != nullptr) {
			return CompositeShaderResponseEvent_ptr;
		}

		auto VisualResponseEvent_ptr = VisualResponseEvent::from_substruct(incoming_type_id, serialized);
		if (VisualResponseEvent_ptr != nullptr) {
			return VisualResponseEvent_ptr;
		}

		auto CompositeShaderConstantResponseEvent_ptr = CompositeShaderConstantResponseEvent::from_substruct(incoming_type_id, serialized);
		if (CompositeShaderConstantResponseEvent_ptr != nullptr) {
			return CompositeShaderConstantResponseEvent_ptr;
		}

		auto MaterialResponseEvent_ptr = MaterialResponseEvent::from_substruct(incoming_type_id, serialized);
		if (MaterialResponseEvent_ptr != nullptr) {
			return MaterialResponseEvent_ptr;
		}

		auto WWiseResponseEvent_ptr = WWiseResponseEvent::from_substruct(incoming_type_id, serialized);
		if (WWiseResponseEvent_ptr != nullptr) {
			return WWiseResponseEvent_ptr;
		}

		auto KeyFrameModResponseEvent_ptr = KeyFrameModResponseEvent::from_substruct(incoming_type_id, serialized);
		if (KeyFrameModResponseEvent_ptr != nullptr) {
			return KeyFrameModResponseEvent_ptr;
		}

		auto DecalResponseEvent_ptr = DecalResponseEvent::from_substruct(incoming_type_id, serialized);
		if (DecalResponseEvent_ptr != nullptr) {
			return DecalResponseEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
