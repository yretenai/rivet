// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StickConfig.hpp>

namespace rivet::ddl::generated {
	StickConfig::StickConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		YawSpeedSlow = serialized->get_float(YawSpeedSlow_type_id, 30.000000f);
		YawSpeedMid = serialized->get_float(YawSpeedMid_type_id, 135.000000f);
		YawSpeedFast = serialized->get_float(YawSpeedFast_type_id, 250.000000f);
		YawRangeSlow = serialized->get_float(YawRangeSlow_type_id, 0.450000f);
		YawRangeFast = serialized->get_float(YawRangeFast_type_id, 0.700000f);
		YawAccel = serialized->get_float(YawAccel_type_id, 720.000000f);
		YawDecel = serialized->get_float(YawDecel_type_id, 1080.000000f);
		PitchSpeedSlow = serialized->get_float(PitchSpeedSlow_type_id, 20.000000f);
		PitchSpeedMid = serialized->get_float(PitchSpeedMid_type_id, 80.000000f);
		PitchSpeedFast = serialized->get_float(PitchSpeedFast_type_id, 180.000000f);
		PitchRangeSlow = serialized->get_float(PitchRangeSlow_type_id, 0.450000f);
		PitchRangeFast = serialized->get_float(PitchRangeFast_type_id, 0.700000f);
		PitchAccel = serialized->get_float(PitchAccel_type_id, 500.000000f);
		PitchDecel = serialized->get_float(PitchDecel_type_id, 1080.000000f);
		NudgeFactor = serialized->get_float(NudgeFactor_type_id, 0.300000f);
		YawBias = serialized->get_float(YawBias_type_id, 1.250000f);
		CardinalBias = serialized->get_float(CardinalBias_type_id, 0.100000f);
		DeadZoneLow = serialized->get_float(DeadZoneLow_type_id, 0.150000f);
		DeadZoneHigh = serialized->get_float(DeadZoneHigh_type_id, 0.850000f); 
	}

	[[nodiscard]] auto
	StickConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StickConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StickConfig> {
		if (incoming_type_id == StickConfig::type_id) {
			return std::make_shared<StickConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
