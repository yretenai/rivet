// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ResponseEvent.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CompositeShaderConstantResponseEvent : ResponseEvent {
		constexpr static std::string_view type_name = "CompositeShaderConstantResponseEvent";
		constexpr static rivet::rivet_type_id type_id = 0xfb01207c;

		constexpr static std::string_view Shader_type_name = "Shader";
		constexpr static rivet::rivet_type_id Shader_type_id = 0xc18bd04f;
		constexpr static std::string_view ConstantName_type_name = "ConstantName";
		constexpr static rivet::rivet_type_id ConstantName_type_id = 0xc6991700;
		constexpr static std::string_view StartValue_type_name = "StartValue";
		constexpr static rivet::rivet_type_id StartValue_type_id = 0x651c34d0;
		constexpr static std::string_view EndValue_type_name = "EndValue";
		constexpr static rivet::rivet_type_id EndValue_type_id = 0x5550361f;
		constexpr static std::string_view TransitionTime_type_name = "TransitionTime";
		constexpr static rivet::rivet_type_id TransitionTime_type_id = 0xf115e357;
		constexpr static std::string_view RemoveShaderAfterward_type_name = "RemoveShaderAfterward";
		constexpr static rivet::rivet_type_id RemoveShaderAfterward_type_id = 0x220db45a; 

		explicit CompositeShaderConstantResponseEvent() = default;
		explicit CompositeShaderConstantResponseEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Shader {};
		std::string_view ConstantName {};
		float StartValue {};
		float EndValue {};
		float TransitionTime {};
		bool RemoveShaderAfterward {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CompositeShaderConstantResponseEvent>;
	};
} // namespace rivet::ddl::generated

// clang-format on
