// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x2bbd4e7a.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED BlizonShiftCrystalPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "BlizonShiftCrystalPrius";
		constexpr static rivet::rivet_type_id type_id = 0x817ff3b3;

		constexpr static std::string_view CheckpointA_type_name = "CheckpointA";
		constexpr static rivet::rivet_type_id CheckpointA_type_id = 0x72d3512c;
		constexpr static std::string_view CheckpointB_type_name = "CheckpointB";
		constexpr static rivet::rivet_type_id CheckpointB_type_id = 0xebda0096;
		constexpr static std::string_view VisibilityMode_type_name = "VisibilityMode";
		constexpr static rivet::rivet_type_id VisibilityMode_type_id = 0xae10fe0f;
		constexpr static std::string_view AllowMeleeThrowTrigger_type_name = "AllowMeleeThrowTrigger";
		constexpr static rivet::rivet_type_id AllowMeleeThrowTrigger_type_id = 0x241dc13a; 

		explicit BlizonShiftCrystalPrius() = default;
		explicit BlizonShiftCrystalPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view CheckpointA {};
		std::string_view CheckpointB {};
		rivet::ddl::generated::x2bbd4e7a VisibilityMode {};
		bool AllowMeleeThrowTrigger {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BlizonShiftCrystalPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
