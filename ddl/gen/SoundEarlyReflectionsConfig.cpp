// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ReflectionProperty.hpp> 

#include <rivet/ddl/generated/SoundEarlyReflectionsConfig.hpp>

namespace rivet::ddl::generated {
	SoundEarlyReflectionsConfig::SoundEarlyReflectionsConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		NumSamplesSqrt = serialized->get_uint8(NumSamplesSqrt_type_id);
		SamplingRadius = serialized->get_float(SamplingRadius_type_id);
		RayYawAngle = serialized->get_float(RayYawAngle_type_id);
		SamplingPosition = serialized->get_enum<rivet::ddl::generated::xfc5a3cb7>(SamplingPosition_type_id, rivet::ddl::generated::xfc5a3cb7_values);
		Orientation = serialized->get_enum<rivet::ddl::generated::x5d0fe319>(Orientation_type_id, rivet::ddl::generated::x5d0fe319_values);
		GroundDistance = serialized->get_float(GroundDistance_type_id);
		VerticalRayOrientation = serialized->get_enum<rivet::ddl::generated::x5d0fe319>(VerticalRayOrientation_type_id, rivet::ddl::generated::x5d0fe319_values);
		VerticalRayDistance = serialized->get_float(VerticalRayDistance_type_id);
		VerticalRayMaxRadius = serialized->get_float(VerticalRayMaxRadius_type_id);
		VerticalRayFilterSize = serialized->get_uint16(VerticalRayFilterSize_type_id);
		CoefficientPolicy = serialized->get_enum<rivet::ddl::generated::x47d78dec>(CoefficientPolicy_type_id, rivet::ddl::generated::x47d78dec_values);
		DefaultReflectionCoefficient = serialized->get_float(DefaultReflectionCoefficient_type_id);
		ReflectionProperties = serialized->unwrap_into_many<rivet::ddl::generated::ReflectionProperty>(ReflectionProperties_type_id); 
	}

	[[nodiscard]] auto
	SoundEarlyReflectionsConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SoundEarlyReflectionsConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundEarlyReflectionsConfig> {
		if (incoming_type_id == SoundEarlyReflectionsConfig::type_id) {
			return std::make_shared<SoundEarlyReflectionsConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
