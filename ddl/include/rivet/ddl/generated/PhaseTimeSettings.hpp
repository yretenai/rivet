// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED PhaseTimeSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "PhaseTimeSettings";
		constexpr static rivet::rivet_type_id type_id = 0x8f21f607;

		constexpr static std::string_view InitMs_type_name = "InitMs";
		constexpr static rivet::rivet_type_id InitMs_type_id = 0x1f4e11b1;
		constexpr static std::string_view Phase1Ms_type_name = "Phase1Ms";
		constexpr static rivet::rivet_type_id Phase1Ms_type_id = 0x537a2eb3;
		constexpr static std::string_view Phase2Ms_type_name = "Phase2Ms";
		constexpr static rivet::rivet_type_id Phase2Ms_type_id = 0x513c90ea;
		constexpr static std::string_view Phase3Ms_type_name = "Phase3Ms";
		constexpr static rivet::rivet_type_id Phase3Ms_type_id = 0x50fefadd;
		constexpr static std::string_view FinalMs_type_name = "FinalMs";
		constexpr static rivet::rivet_type_id FinalMs_type_id = 0x3395e1cb;
		constexpr static std::string_view TotalMs_type_name = "TotalMs";
		constexpr static rivet::rivet_type_id TotalMs_type_id = 0x3fdd0012; 

		explicit PhaseTimeSettings() = default;
		explicit PhaseTimeSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float InitMs {};
		float Phase1Ms {};
		float Phase2Ms {};
		float Phase3Ms {};
		float FinalMs {};
		float TotalMs {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PhaseTimeSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
