// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FinaleMechRenderClipComponentPrius.hpp> 

#include <rivet/ddl/generated/RenderClipComponentPrius.hpp>

namespace rivet::ddl::generated {
	RenderClipComponentPrius::RenderClipComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ClipMaterial = serialized->get_string(ClipMaterial_type_id);
		PositionVariableName = serialized->get_string(PositionVariableName_type_id);
		DirectionVariableName = serialized->get_string(DirectionVariableName_type_id);
		SkipBoundingSphereChecks = serialized->get_bool(SkipBoundingSphereChecks_type_id);
		ClipAxis = serialized->get_enum<rivet::ddl::generated::x6a9f4317>(ClipAxis_type_id, rivet::ddl::generated::x6a9f4317_values);
		ClipActors = serialized->get_uint64s(ClipActors_type_id); 
	}

	[[nodiscard]] auto
	RenderClipComponentPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RenderClipComponentPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RenderClipComponentPrius> {
		if (incoming_type_id == RenderClipComponentPrius::type_id) {
			return std::make_shared<RenderClipComponentPrius>(serialized);
		}

		auto FinaleMechRenderClipComponentPrius_ptr = FinaleMechRenderClipComponentPrius::from_substruct(incoming_type_id, serialized);
		if (FinaleMechRenderClipComponentPrius_ptr != nullptr) {
			return FinaleMechRenderClipComponentPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
