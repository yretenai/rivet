// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BezierCurveDimensionDef.hpp> 

#include <rivet/ddl/generated/BezierCurveDef.hpp>

namespace rivet::ddl::generated {
	BezierCurveDef::BezierCurveDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id);
		Name = serialized->get_string(Name_type_id);
		DimensionOrder = serialized->get_uint64s(DimensionOrder_type_id);
		Dimensions = serialized->unwrap_into_many<rivet::ddl::generated::BezierCurveDimensionDef>(Dimensions_type_id);
		ExtrapolateModeIn = serialized->get_enum<rivet::ddl::generated::x74a6ffcc>(ExtrapolateModeIn_type_id, rivet::ddl::generated::x74a6ffcc_values);
		ExtrapolateModeOut = serialized->get_enum<rivet::ddl::generated::x74a6ffcc>(ExtrapolateModeOut_type_id, rivet::ddl::generated::x74a6ffcc_values);
		RotationOrder = serialized->get_enum<rivet::ddl::generated::x4eda4f54>(RotationOrder_type_id, rivet::ddl::generated::x4eda4f54_values);
		Flags = serialized->get_bitset<rivet::ddl::generated::x3fc1e4d4>(Flags_type_id, rivet::ddl::generated::x3fc1e4d4_values); 
	}

	[[nodiscard]] auto
	BezierCurveDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BezierCurveDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BezierCurveDef> {
		if (incoming_type_id == BezierCurveDef::type_id) {
			return std::make_shared<BezierCurveDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
