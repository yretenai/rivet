// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ActivityLinkBase.hpp> 

namespace rivet::ddl::generated {
	struct ObjSysUnlockSequence; 

	struct RIVET_DDL_SHARED DimensionLink : ActivityLinkBase {
		constexpr static std::string_view type_name = "DimensionLink";
		constexpr static rivet::rivet_type_id type_id = 0x27180e4e;

		constexpr static std::string_view PlanetName_type_name = "PlanetName";
		constexpr static rivet::rivet_type_id PlanetName_type_id = 0x38548038;
		constexpr static std::string_view DimensionCodeName_type_name = "DimensionCodeName";
		constexpr static rivet::rivet_type_id DimensionCodeName_type_id = 0x2d4a9b83;
		constexpr static std::string_view Checkpoint_type_name = "Checkpoint";
		constexpr static rivet::rivet_type_id Checkpoint_type_id = 0xd436a987;
		constexpr static std::string_view UnlockSequence_type_name = "UnlockSequence";
		constexpr static rivet::rivet_type_id UnlockSequence_type_id = 0xdd7a0acc; 

		explicit DimensionLink() = default;
		explicit DimensionLink([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view PlanetName {};
		std::string_view DimensionCodeName {};
		std::string_view Checkpoint {};
		std::shared_ptr<rivet::ddl::generated::ObjSysUnlockSequence> UnlockSequence {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DimensionLink>;
	};
} // namespace rivet::ddl::generated

// clang-format on
