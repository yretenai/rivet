// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GrindMinePrius.hpp>

namespace rivet::ddl::generated {
	GrindMinePrius::GrindMinePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActivateVolume = serialized->get_uint64(ActivateVolume_type_id);
		IntroCurve = serialized->get_uint64(IntroCurve_type_id);
		IntroTime = serialized->get_float(IntroTime_type_id);
		TransitionPercent = serialized->get_float(TransitionPercent_type_id);
		OscillateCurve = serialized->get_uint64(OscillateCurve_type_id);
		OscillationRate = serialized->get_float(OscillationRate_type_id);
		Range = serialized->get_float(Range_type_id);
		DamagePercent = serialized->get_float(DamagePercent_type_id);
		DamageType = serialized->get_enum<rivet::ddl::generated::DamageTypes>(DamageType_type_id, rivet::ddl::generated::DamageTypes_values);
		SingleUse = serialized->get_bool(SingleUse_type_id);
		ExplodeWhenHit = serialized->get_bool(ExplodeWhenHit_type_id);
		HitReactVolume = serialized->get_uint64(HitReactVolume_type_id);
		BobFrequencyMin = serialized->get_float(BobFrequencyMin_type_id);
		BobFrequencyMax = serialized->get_float(BobFrequencyMax_type_id);
		BobAmplitudeMin = serialized->get_float(BobAmplitudeMin_type_id);
		BobAmplitudeMax = serialized->get_float(BobAmplitudeMax_type_id); 
	}

	[[nodiscard]] auto
	GrindMinePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GrindMinePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GrindMinePrius> {
		if (incoming_type_id == GrindMinePrius::type_id) {
			return std::make_shared<GrindMinePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
