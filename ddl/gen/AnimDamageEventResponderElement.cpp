// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimDamageJointEventResponderElement.hpp>
#include <rivet/ddl/generated/DamageEventResponderDamageIdentifier.hpp> 

#include <rivet/ddl/generated/AnimDamageEventResponderElement.hpp>

namespace rivet::ddl::generated {
	AnimDamageEventResponderElement::AnimDamageEventResponderElement([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DamageId = serialized->unwrap_into_many<rivet::ddl::generated::DamageEventResponderDamageIdentifier>(DamageId_type_id);
		AnimationName = serialized->get_string(AnimationName_type_id);
		Priority = serialized->get_uint32(Priority_type_id);
		PlayOnce = serialized->get_bool(PlayOnce_type_id);
		RemoveDriverOnDone = serialized->get_bool(RemoveDriverOnDone_type_id);
		OverrideAlways = serialized->get_bool(OverrideAlways_type_id);
		OverrideByPriority = serialized->get_bool(OverrideByPriority_type_id);
		OverrideSameAnim = serialized->get_bool(OverrideSameAnim_type_id);
		OverrideAnimNotInMap = serialized->get_bool(OverrideAnimNotInMap_type_id);
		RespondOnIgnoredDamage = serialized->get_bool(RespondOnIgnoredDamage_type_id);
		DamageEventCountThreshold = serialized->get_uint32(DamageEventCountThreshold_type_id);
		DamageEventCountThresholdMax = serialized->get_int32(DamageEventCountThresholdMax_type_id);
		DamageAmountThreshold = serialized->get_float(DamageAmountThreshold_type_id);
		DamageTotalThreshold = serialized->get_float(DamageTotalThreshold_type_id);
		DamageTotalThresholdMax = serialized->get_float(DamageTotalThresholdMax_type_id); 
	}

	[[nodiscard]] auto
	AnimDamageEventResponderElement::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimDamageEventResponderElement::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDamageEventResponderElement> {
		if (incoming_type_id == AnimDamageEventResponderElement::type_id) {
			return std::make_shared<AnimDamageEventResponderElement>(serialized);
		}

		auto AnimDamageJointEventResponderElement_ptr = AnimDamageJointEventResponderElement::from_substruct(incoming_type_id, serialized);
		if (AnimDamageJointEventResponderElement_ptr != nullptr) {
			return AnimDamageJointEventResponderElement_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
