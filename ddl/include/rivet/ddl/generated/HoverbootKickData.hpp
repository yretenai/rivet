// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HoverbootKickData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "HoverbootKickData";
		constexpr static rivet::rivet_type_id type_id = 0xf8de32aa;

		constexpr static std::string_view MaxSpeedDecel_type_name = "MaxSpeedDecel";
		constexpr static rivet::rivet_type_id MaxSpeedDecel_type_id = 0x4930cdf9;
		constexpr static std::string_view MaxSpeedLateralDecel_type_name = "MaxSpeedLateralDecel";
		constexpr static rivet::rivet_type_id MaxSpeedLateralDecel_type_id = 0xe458d785;
		constexpr static std::string_view MaxSpeedTurnGain_type_name = "MaxSpeedTurnGain";
		constexpr static rivet::rivet_type_id MaxSpeedTurnGain_type_id = 0x66b489ea;
		constexpr static std::string_view ExtraSpeedPerKickBad_type_name = "ExtraSpeedPerKickBad";
		constexpr static rivet::rivet_type_id ExtraSpeedPerKickBad_type_id = 0xd1948add;
		constexpr static std::string_view ExtraSpeedPerKickGood_type_name = "ExtraSpeedPerKickGood";
		constexpr static rivet::rivet_type_id ExtraSpeedPerKickGood_type_id = 0x6cd89b51;
		constexpr static std::string_view MaxExtraSpeed_type_name = "MaxExtraSpeed";
		constexpr static rivet::rivet_type_id MaxExtraSpeed_type_id = 0x25ac84b7;
		constexpr static std::string_view ExtraSpeedAccel_type_name = "ExtraSpeedAccel";
		constexpr static rivet::rivet_type_id ExtraSpeedAccel_type_id = 0x75ae5543;
		constexpr static std::string_view ExtraSpeedDecel_type_name = "ExtraSpeedDecel";
		constexpr static rivet::rivet_type_id ExtraSpeedDecel_type_id = 0x982585ef;
		constexpr static std::string_view ExtraSpeedDecayRate_type_name = "ExtraSpeedDecayRate";
		constexpr static rivet::rivet_type_id ExtraSpeedDecayRate_type_id = 0x12ce566b;
		constexpr static std::string_view KickDurationInitial_type_name = "KickDurationInitial";
		constexpr static rivet::rivet_type_id KickDurationInitial_type_id = 0x5e736ec1;
		constexpr static std::string_view KickDurationFull_type_name = "KickDurationFull";
		constexpr static rivet::rivet_type_id KickDurationFull_type_id = 0x6eca7f2d;
		constexpr static std::string_view InputAnalogValueThreshold_type_name = "InputAnalogValueThreshold";
		constexpr static rivet::rivet_type_id InputAnalogValueThreshold_type_id = 0x7fc7024e;
		constexpr static std::string_view TriggerEffectConfig_type_name = "TriggerEffectConfig";
		constexpr static rivet::rivet_type_id TriggerEffectConfig_type_id = 0x336655ba; 

		explicit HoverbootKickData() = default;
		explicit HoverbootKickData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MaxSpeedDecel {};
		float MaxSpeedLateralDecel {};
		float MaxSpeedTurnGain {};
		float ExtraSpeedPerKickBad {};
		float ExtraSpeedPerKickGood {};
		float MaxExtraSpeed {};
		float ExtraSpeedAccel {};
		float ExtraSpeedDecel {};
		float ExtraSpeedDecayRate {};
		float KickDurationInitial {};
		float KickDurationFull {};
		float InputAnalogValueThreshold {};
		std::string_view TriggerEffectConfig {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HoverbootKickData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
