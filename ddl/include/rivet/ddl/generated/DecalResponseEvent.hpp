// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ResponseEvent.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED DecalResponseEvent : ResponseEvent {
		constexpr static std::string_view type_name = "DecalResponseEvent";
		constexpr static rivet::rivet_type_id type_id = 0x56fa2f9b;

		constexpr static std::string_view Material_type_name = "Material";
		constexpr static rivet::rivet_type_id Material_type_id = 0x86bfc8e5;
		constexpr static std::string_view Alpha_type_name = "Alpha";
		constexpr static rivet::rivet_type_id Alpha_type_id = 0xc9b3f5ab;
		constexpr static std::string_view StartDelay_type_name = "StartDelay";
		constexpr static rivet::rivet_type_id StartDelay_type_id = 0xcaf1ec7f;
		constexpr static std::string_view Lifetime_type_name = "Lifetime";
		constexpr static rivet::rivet_type_id Lifetime_type_id = 0xc7e68df8;
		constexpr static std::string_view InfiniteLifetimeChance_type_name = "InfiniteLifetimeChance";
		constexpr static rivet::rivet_type_id InfiniteLifetimeChance_type_id = 0x5c754e57;
		constexpr static std::string_view Size_type_name = "Size";
		constexpr static rivet::rivet_type_id Size_type_id = 0xc750e4da;
		constexpr static std::string_view WhRatio_type_name = "WhRatio";
		constexpr static rivet::rivet_type_id WhRatio_type_id = 0xaa6dbfb2;
		constexpr static std::string_view DepthRatio_type_name = "DepthRatio";
		constexpr static rivet::rivet_type_id DepthRatio_type_id = 0x5d17de57;
		constexpr static std::string_view LodDistance_type_name = "LodDistance";
		constexpr static rivet::rivet_type_id LodDistance_type_id = 0x1d304c23;
		constexpr static std::string_view FadeDistance_type_name = "FadeDistance";
		constexpr static rivet::rivet_type_id FadeDistance_type_id = 0xa05039a0;
		constexpr static std::string_view FadeDuration_type_name = "FadeDuration";
		constexpr static rivet::rivet_type_id FadeDuration_type_id = 0x3a9d23e1;
		constexpr static std::string_view ConduitDeleteFadeOut_type_name = "ConduitDeleteFadeOut";
		constexpr static rivet::rivet_type_id ConduitDeleteFadeOut_type_id = 0x731479cb;
		constexpr static std::string_view MaxAngle_type_name = "MaxAngle";
		constexpr static rivet::rivet_type_id MaxAngle_type_id = 0x191f829e;
		constexpr static std::string_view IsImportant_type_name = "IsImportant";
		constexpr static rivet::rivet_type_id IsImportant_type_id = 0x7ee5cdfc;
		constexpr static std::string_view IsRequired_type_name = "IsRequired";
		constexpr static rivet::rivet_type_id IsRequired_type_id = 0xa0affed3;
		constexpr static std::string_view RandOrient_type_name = "RandOrient";
		constexpr static rivet::rivet_type_id RandOrient_type_id = 0xe2b8652a;
		constexpr static std::string_view ApplyToBots_type_name = "ApplyToBots";
		constexpr static rivet::rivet_type_id ApplyToBots_type_id = 0xf3ebe52c;
		constexpr static std::string_view SwapForwardAndUp_type_name = "SwapForwardAndUp";
		constexpr static rivet::rivet_type_id SwapForwardAndUp_type_id = 0x85c49d37;
		constexpr static std::string_view AllowSingleOverlap_type_name = "AllowSingleOverlap";
		constexpr static rivet::rivet_type_id AllowSingleOverlap_type_id = 0xaec8f1bc;
		constexpr static std::string_view ReplaceOverlapping_type_name = "ReplaceOverlapping";
		constexpr static rivet::rivet_type_id ReplaceOverlapping_type_id = 0x728c0a50;
		constexpr static std::string_view UpdateOverlapping_type_name = "UpdateOverlapping";
		constexpr static rivet::rivet_type_id UpdateOverlapping_type_id = 0xe803b4f8;
		constexpr static std::string_view CoveredMaterialArray_type_name = "CoveredMaterialArray";
		constexpr static rivet::rivet_type_id CoveredMaterialArray_type_id = 0xa92a5308;
		constexpr static std::string_view CoveredMaterialArray0_type_name = "CoveredMaterialArray0";
		constexpr static rivet::rivet_type_id CoveredMaterialArray0_type_id = 0x28ab92cd;
		constexpr static std::string_view CoveredMaterialArray1_type_name = "CoveredMaterialArray1";
		constexpr static rivet::rivet_type_id CoveredMaterialArray1_type_id = 0x5faca25b; 

		explicit DecalResponseEvent() = default;
		explicit DecalResponseEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view Material {};
		float Alpha {};
		float StartDelay {};
		float Lifetime {};
		float InfiniteLifetimeChance {};
		float Size {};
		float WhRatio {};
		float DepthRatio {};
		float LodDistance {};
		float FadeDistance {};
		float FadeDuration {};
		float ConduitDeleteFadeOut {};
		float MaxAngle {};
		bool IsImportant {};
		bool IsRequired {};
		bool RandOrient {};
		bool ApplyToBots {};
		bool SwapForwardAndUp {};
		bool AllowSingleOverlap {};
		bool ReplaceOverlapping {};
		bool UpdateOverlapping {};
		uint64_t CoveredMaterialArray {};
		uint64_t CoveredMaterialArray0 {};
		uint64_t CoveredMaterialArray1 {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DecalResponseEvent>;
	};
} // namespace rivet::ddl::generated

// clang-format on
