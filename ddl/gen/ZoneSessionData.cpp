// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RegionDefTemp.hpp>
#include <rivet/ddl/generated/TargetSceneNode.hpp>
#include <rivet/ddl/generated/HiddenData3D.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/SelectionDataLevelList.hpp>
#include <rivet/ddl/generated/SelectionDataActorGroups.hpp>
#include <rivet/ddl/generated/SelectionData3D.hpp> 

#include <rivet/ddl/generated/ZoneSessionData.hpp>

namespace rivet::ddl::generated {
	ZoneSessionData::ZoneSessionData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CurrentSelection = serialized->get_enum<rivet::ddl::generated::x2eab60c7>(CurrentSelection_type_id, rivet::ddl::generated::x2eab60c7_values);
		Selection3D = serialized->unwrap_into<rivet::ddl::generated::SelectionData3D>(Selection3D_type_id);
		SelectionActorGroups = serialized->unwrap_into<rivet::ddl::generated::SelectionDataActorGroups>(SelectionActorGroups_type_id);
		SelectionActorGroupActors = serialized->unwrap_into_many<rivet::ddl::generated::SelectionDataActorGroups>(SelectionActorGroupActors_type_id);
		SelectionLevelList = serialized->unwrap_into<rivet::ddl::generated::SelectionDataLevelList>(SelectionLevelList_type_id);
		Hidden3D = serialized->unwrap_into<rivet::ddl::generated::HiddenData3D>(Hidden3D_type_id);
		TargetSceneNodeStack = serialized->unwrap_into_many<rivet::ddl::generated::TargetSceneNode>(TargetSceneNodeStack_type_id);
		Regions = serialized->unwrap_into_many<rivet::ddl::generated::RegionDefTemp>(Regions_type_id);
		ActiveZone = serialized->get_string(ActiveZone_type_id);
		ReferenceableZones = serialized->get_strings(ReferenceableZones_type_id);
		CameraPosition = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(CameraPosition_type_id);
		CameraRotation = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(CameraRotation_type_id); 
	}

	[[nodiscard]] auto
	ZoneSessionData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ZoneSessionData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ZoneSessionData> {
		if (incoming_type_id == ZoneSessionData::type_id) {
			return std::make_shared<ZoneSessionData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
