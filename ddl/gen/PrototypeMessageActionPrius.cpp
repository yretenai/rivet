// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PrototypeMessageActionPrius.hpp>

namespace rivet::ddl::generated {
	PrototypeMessageActionPrius::PrototypeMessageActionPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActionType = serialized->get_enum<rivet::ddl::generated::x10228b34>(ActionType_type_id, rivet::ddl::generated::x10228b34_values);
		MessageText = serialized->get_string(MessageText_type_id);
		Duration = serialized->get_float(Duration_type_id);
		ClearAllMsgs = serialized->get_bool(ClearAllMsgs_type_id);
		PosX = serialized->get_uint32(PosX_type_id);
		PosY = serialized->get_uint32(PosY_type_id);
		Position3D = serialized->get_bool(Position3D_type_id);
		Align = serialized->get_enum<rivet::ddl::generated::x1946b734>(Align_type_id, rivet::ddl::generated::x1946b734_values);
		Fontsize = serialized->get_float(Fontsize_type_id);
		ColorPick = serialized->get_enum<rivet::ddl::generated::x1264b76c>(ColorPick_type_id, rivet::ddl::generated::x1264b76c_values);
		FormatAsInt = serialized->get_bool(FormatAsInt_type_id);
		HideOnRegionLoad = serialized->get_bool(HideOnRegionLoad_type_id);
		HideFromDemo = serialized->get_bool(HideFromDemo_type_id); 
	}

	[[nodiscard]] auto
	PrototypeMessageActionPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PrototypeMessageActionPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PrototypeMessageActionPrius> {
		if (incoming_type_id == PrototypeMessageActionPrius::type_id) {
			return std::make_shared<PrototypeMessageActionPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
