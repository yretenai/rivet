// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED NefariousFinaleMechHeartWeakspotData : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "NefariousFinaleMechHeartWeakspotData";
		constexpr const static rivet::rivet_type_id type_id = 0xd751ca1c;

		constexpr const static std::string_view MaterialMappingName_Trim_type_name = "MaterialMappingName_Trim";
		constexpr const static rivet::rivet_type_id MaterialMappingName_Trim_type_id = 0xb48a742f;
		constexpr const static std::string_view ConstantOverride_Trim_type_name = "ConstantOverride_Trim";
		constexpr const static rivet::rivet_type_id ConstantOverride_Trim_type_id = 0x96c4750;
		constexpr const static std::string_view MaterialMappingName_Bulb_type_name = "MaterialMappingName_Bulb";
		constexpr const static rivet::rivet_type_id MaterialMappingName_Bulb_type_id = 0x297f833d;
		constexpr const static std::string_view ConstantOverride_Bulb_type_name = "ConstantOverride_Bulb";
		constexpr const static rivet::rivet_type_id ConstantOverride_Bulb_type_id = 0x9499b042;
		constexpr const static std::string_view Partial_Anim_type_name = "Partial_Anim";
		constexpr const static rivet::rivet_type_id Partial_Anim_type_id = 0x93758e1c; 

		explicit NefariousFinaleMechHeartWeakspotData() = default;
		explicit NefariousFinaleMechHeartWeakspotData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view MaterialMappingName_Trim {};
		std::string_view ConstantOverride_Trim {};
		std::string_view MaterialMappingName_Bulb {};
		std::string_view ConstantOverride_Bulb {};
		std::string_view Partial_Anim {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NefariousFinaleMechHeartWeakspotData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
