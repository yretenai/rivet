// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AmoeboidDamageTrailSpawnData.hpp>
#include <rivet/ddl/generated/AmoeboidSplitSpawnData.hpp>
#include <rivet/ddl/generated/ShotSpawnData.hpp>
#include <rivet/ddl/generated/SelfieDoppelgangerSpawnData.hpp>
#include <rivet/ddl/generated/ZurkonSpawnData.hpp>
#include <rivet/ddl/generated/ProjectileHitMarkerSpawnData.hpp>
#include <rivet/ddl/generated/SimpleActorSpawnData.hpp>
#include <rivet/ddl/generated/GameManagerCreateData.hpp>
#include <rivet/ddl/generated/TunnelerBombSpawnData.hpp>
#include <rivet/ddl/generated/AttachableShotSpawnData.hpp>
#include <rivet/ddl/generated/AttachedActorSpawnData.hpp>
#include <rivet/ddl/generated/PrefabZoneActorSpawnData.hpp>
#include <rivet/ddl/generated/TendrilControllerSpawnData.hpp>
#include <rivet/ddl/generated/ClankBotSpawnData.hpp>
#include <rivet/ddl/generated/SheepSpawnData.hpp>
#include <rivet/ddl/generated/VonIonBossShipAttackSpawnData.hpp>
#include <rivet/ddl/generated/GameBotDoomSpawnData.hpp>
#include <rivet/ddl/generated/RespawnActorData.hpp>
#include <rivet/ddl/generated/HarpoonLureSpawnData.hpp>
#include <rivet/ddl/generated/DebugMenuSpawnData.hpp>
#include <rivet/ddl/generated/FormationSpawnData.hpp>
#include <rivet/ddl/generated/ContainerShipSpawnData.hpp>
#include <rivet/ddl/generated/RandomBotSpawnData.hpp>
#include <rivet/ddl/generated/MrFunGuySpawnData.hpp>
#include <rivet/ddl/generated/HealthPackSpawnData.hpp>
#include <rivet/ddl/generated/LaserAudioEmittersSpawnData.hpp>
#include <rivet/ddl/generated/SyncedActorForHitActorSpawnData.hpp>
#include <rivet/ddl/generated/SymbioteSpawnData.hpp>
#include <rivet/ddl/generated/SpawnDataBase.hpp>
#include <rivet/ddl/generated/TrapGunkSpawnData.hpp>
#include <rivet/ddl/generated/HurdleShotSecondaryShotSpawnData.hpp>
#include <rivet/ddl/generated/GrindHazardEffectSpawnData.hpp>
#include <rivet/ddl/generated/VehicleSpawnData.hpp>
#include <rivet/ddl/generated/VehicleDriverSpawnData.hpp>
#include <rivet/ddl/generated/PilotSpawnData.hpp>
#include <rivet/ddl/generated/SyncedActorForHitEffectSpawnData.hpp>
#include <rivet/ddl/generated/FlyerODShotSpawnData.hpp>
#include <rivet/ddl/generated/SheepVolumeSpawnData.hpp>
#include <rivet/ddl/generated/PickupAttachmentSpawnData.hpp>
#include <rivet/ddl/generated/SubShotSpawnData.hpp>
#include <rivet/ddl/generated/PhotomodeFilterActorSpawnData.hpp>
#include <rivet/ddl/generated/PickupBaseSpawnData.hpp>
#include <rivet/ddl/generated/FromMrsZurkonSpawnData.hpp> 

#include <rivet/ddl/generated/ActorSpawnData.hpp>

namespace rivet::ddl::generated {
	ActorSpawnData::ActorSpawnData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	[[nodiscard]] auto
	ActorSpawnData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ActorSpawnData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActorSpawnData> {
		if (incoming_type_id == ActorSpawnData::type_id) {
			return std::make_shared<ActorSpawnData>(serialized);
		}

		auto ContainerShipSpawnData_ptr = ContainerShipSpawnData::from_substruct(incoming_type_id, serialized);
		if (ContainerShipSpawnData_ptr != nullptr) {
			return ContainerShipSpawnData_ptr;
		}

		auto HealthPackSpawnData_ptr = HealthPackSpawnData::from_substruct(incoming_type_id, serialized);
		if (HealthPackSpawnData_ptr != nullptr) {
			return HealthPackSpawnData_ptr;
		}

		auto FormationSpawnData_ptr = FormationSpawnData::from_substruct(incoming_type_id, serialized);
		if (FormationSpawnData_ptr != nullptr) {
			return FormationSpawnData_ptr;
		}

		auto GrindHazardEffectSpawnData_ptr = GrindHazardEffectSpawnData::from_substruct(incoming_type_id, serialized);
		if (GrindHazardEffectSpawnData_ptr != nullptr) {
			return GrindHazardEffectSpawnData_ptr;
		}

		auto RandomBotSpawnData_ptr = RandomBotSpawnData::from_substruct(incoming_type_id, serialized);
		if (RandomBotSpawnData_ptr != nullptr) {
			return RandomBotSpawnData_ptr;
		}

		auto DebugMenuSpawnData_ptr = DebugMenuSpawnData::from_substruct(incoming_type_id, serialized);
		if (DebugMenuSpawnData_ptr != nullptr) {
			return DebugMenuSpawnData_ptr;
		}

		auto AttachedActorSpawnData_ptr = AttachedActorSpawnData::from_substruct(incoming_type_id, serialized);
		if (AttachedActorSpawnData_ptr != nullptr) {
			return AttachedActorSpawnData_ptr;
		}

		auto GameBotDoomSpawnData_ptr = GameBotDoomSpawnData::from_substruct(incoming_type_id, serialized);
		if (GameBotDoomSpawnData_ptr != nullptr) {
			return GameBotDoomSpawnData_ptr;
		}

		auto MrFunGuySpawnData_ptr = MrFunGuySpawnData::from_substruct(incoming_type_id, serialized);
		if (MrFunGuySpawnData_ptr != nullptr) {
			return MrFunGuySpawnData_ptr;
		}

		auto TunnelerBombSpawnData_ptr = TunnelerBombSpawnData::from_substruct(incoming_type_id, serialized);
		if (TunnelerBombSpawnData_ptr != nullptr) {
			return TunnelerBombSpawnData_ptr;
		}

		auto LaserAudioEmittersSpawnData_ptr = LaserAudioEmittersSpawnData::from_substruct(incoming_type_id, serialized);
		if (LaserAudioEmittersSpawnData_ptr != nullptr) {
			return LaserAudioEmittersSpawnData_ptr;
		}

		auto AttachableShotSpawnData_ptr = AttachableShotSpawnData::from_substruct(incoming_type_id, serialized);
		if (AttachableShotSpawnData_ptr != nullptr) {
			return AttachableShotSpawnData_ptr;
		}

		auto RespawnActorData_ptr = RespawnActorData::from_substruct(incoming_type_id, serialized);
		if (RespawnActorData_ptr != nullptr) {
			return RespawnActorData_ptr;
		}

		auto SyncedActorForHitActorSpawnData_ptr = SyncedActorForHitActorSpawnData::from_substruct(incoming_type_id, serialized);
		if (SyncedActorForHitActorSpawnData_ptr != nullptr) {
			return SyncedActorForHitActorSpawnData_ptr;
		}

		auto TendrilControllerSpawnData_ptr = TendrilControllerSpawnData::from_substruct(incoming_type_id, serialized);
		if (TendrilControllerSpawnData_ptr != nullptr) {
			return TendrilControllerSpawnData_ptr;
		}

		auto SpawnDataBase_ptr = SpawnDataBase::from_substruct(incoming_type_id, serialized);
		if (SpawnDataBase_ptr != nullptr) {
			return SpawnDataBase_ptr;
		}

		auto HurdleShotSecondaryShotSpawnData_ptr = HurdleShotSecondaryShotSpawnData::from_substruct(incoming_type_id, serialized);
		if (HurdleShotSecondaryShotSpawnData_ptr != nullptr) {
			return HurdleShotSecondaryShotSpawnData_ptr;
		}

		auto VehicleSpawnData_ptr = VehicleSpawnData::from_substruct(incoming_type_id, serialized);
		if (VehicleSpawnData_ptr != nullptr) {
			return VehicleSpawnData_ptr;
		}

		auto VehicleDriverSpawnData_ptr = VehicleDriverSpawnData::from_substruct(incoming_type_id, serialized);
		if (VehicleDriverSpawnData_ptr != nullptr) {
			return VehicleDriverSpawnData_ptr;
		}

		auto SheepVolumeSpawnData_ptr = SheepVolumeSpawnData::from_substruct(incoming_type_id, serialized);
		if (SheepVolumeSpawnData_ptr != nullptr) {
			return SheepVolumeSpawnData_ptr;
		}

		auto ClankBotSpawnData_ptr = ClankBotSpawnData::from_substruct(incoming_type_id, serialized);
		if (ClankBotSpawnData_ptr != nullptr) {
			return ClankBotSpawnData_ptr;
		}

		auto SubShotSpawnData_ptr = SubShotSpawnData::from_substruct(incoming_type_id, serialized);
		if (SubShotSpawnData_ptr != nullptr) {
			return SubShotSpawnData_ptr;
		}

		auto SheepSpawnData_ptr = SheepSpawnData::from_substruct(incoming_type_id, serialized);
		if (SheepSpawnData_ptr != nullptr) {
			return SheepSpawnData_ptr;
		}

		auto TrapGunkSpawnData_ptr = TrapGunkSpawnData::from_substruct(incoming_type_id, serialized);
		if (TrapGunkSpawnData_ptr != nullptr) {
			return TrapGunkSpawnData_ptr;
		}

		auto PhotomodeFilterActorSpawnData_ptr = PhotomodeFilterActorSpawnData::from_substruct(incoming_type_id, serialized);
		if (PhotomodeFilterActorSpawnData_ptr != nullptr) {
			return PhotomodeFilterActorSpawnData_ptr;
		}

		auto FromMrsZurkonSpawnData_ptr = FromMrsZurkonSpawnData::from_substruct(incoming_type_id, serialized);
		if (FromMrsZurkonSpawnData_ptr != nullptr) {
			return FromMrsZurkonSpawnData_ptr;
		}

		auto HarpoonLureSpawnData_ptr = HarpoonLureSpawnData::from_substruct(incoming_type_id, serialized);
		if (HarpoonLureSpawnData_ptr != nullptr) {
			return HarpoonLureSpawnData_ptr;
		}

		auto PickupAttachmentSpawnData_ptr = PickupAttachmentSpawnData::from_substruct(incoming_type_id, serialized);
		if (PickupAttachmentSpawnData_ptr != nullptr) {
			return PickupAttachmentSpawnData_ptr;
		}

		auto FlyerODShotSpawnData_ptr = FlyerODShotSpawnData::from_substruct(incoming_type_id, serialized);
		if (FlyerODShotSpawnData_ptr != nullptr) {
			return FlyerODShotSpawnData_ptr;
		}

		auto PrefabZoneActorSpawnData_ptr = PrefabZoneActorSpawnData::from_substruct(incoming_type_id, serialized);
		if (PrefabZoneActorSpawnData_ptr != nullptr) {
			return PrefabZoneActorSpawnData_ptr;
		}

		auto GameManagerCreateData_ptr = GameManagerCreateData::from_substruct(incoming_type_id, serialized);
		if (GameManagerCreateData_ptr != nullptr) {
			return GameManagerCreateData_ptr;
		}

		auto SyncedActorForHitEffectSpawnData_ptr = SyncedActorForHitEffectSpawnData::from_substruct(incoming_type_id, serialized);
		if (SyncedActorForHitEffectSpawnData_ptr != nullptr) {
			return SyncedActorForHitEffectSpawnData_ptr;
		}

		auto VonIonBossShipAttackSpawnData_ptr = VonIonBossShipAttackSpawnData::from_substruct(incoming_type_id, serialized);
		if (VonIonBossShipAttackSpawnData_ptr != nullptr) {
			return VonIonBossShipAttackSpawnData_ptr;
		}

		auto PickupBaseSpawnData_ptr = PickupBaseSpawnData::from_substruct(incoming_type_id, serialized);
		if (PickupBaseSpawnData_ptr != nullptr) {
			return PickupBaseSpawnData_ptr;
		}

		auto SimpleActorSpawnData_ptr = SimpleActorSpawnData::from_substruct(incoming_type_id, serialized);
		if (SimpleActorSpawnData_ptr != nullptr) {
			return SimpleActorSpawnData_ptr;
		}

		auto PilotSpawnData_ptr = PilotSpawnData::from_substruct(incoming_type_id, serialized);
		if (PilotSpawnData_ptr != nullptr) {
			return PilotSpawnData_ptr;
		}

		auto SymbioteSpawnData_ptr = SymbioteSpawnData::from_substruct(incoming_type_id, serialized);
		if (SymbioteSpawnData_ptr != nullptr) {
			return SymbioteSpawnData_ptr;
		}

		auto ZurkonSpawnData_ptr = ZurkonSpawnData::from_substruct(incoming_type_id, serialized);
		if (ZurkonSpawnData_ptr != nullptr) {
			return ZurkonSpawnData_ptr;
		}

		auto SelfieDoppelgangerSpawnData_ptr = SelfieDoppelgangerSpawnData::from_substruct(incoming_type_id, serialized);
		if (SelfieDoppelgangerSpawnData_ptr != nullptr) {
			return SelfieDoppelgangerSpawnData_ptr;
		}

		auto ShotSpawnData_ptr = ShotSpawnData::from_substruct(incoming_type_id, serialized);
		if (ShotSpawnData_ptr != nullptr) {
			return ShotSpawnData_ptr;
		}

		auto AmoeboidSplitSpawnData_ptr = AmoeboidSplitSpawnData::from_substruct(incoming_type_id, serialized);
		if (AmoeboidSplitSpawnData_ptr != nullptr) {
			return AmoeboidSplitSpawnData_ptr;
		}

		auto ProjectileHitMarkerSpawnData_ptr = ProjectileHitMarkerSpawnData::from_substruct(incoming_type_id, serialized);
		if (ProjectileHitMarkerSpawnData_ptr != nullptr) {
			return ProjectileHitMarkerSpawnData_ptr;
		}

		auto AmoeboidDamageTrailSpawnData_ptr = AmoeboidDamageTrailSpawnData::from_substruct(incoming_type_id, serialized);
		if (AmoeboidDamageTrailSpawnData_ptr != nullptr) {
			return AmoeboidDamageTrailSpawnData_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
