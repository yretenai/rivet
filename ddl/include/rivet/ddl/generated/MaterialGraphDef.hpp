// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xd958924a.hpp>
#include <rivet/ddl/generated/enums/FrameGrabQuality.hpp>
#include <rivet/ddl/generated/enums/x65877bb6.hpp>
#include <rivet/ddl/generated/enums/x5771f07c.hpp> 

namespace rivet::ddl::generated {
	struct MaterialGraphNotes;
	struct TessellationSettings;
	struct PreviewModelContainer;
	struct MaterialGraphComment;
	struct MaterialGraphNode;
	struct VaultMetaData; 

	struct RIVET_DDL_SHARED MaterialGraphDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "MaterialGraphDef";
		constexpr static rivet::rivet_type_id type_id = 0xb67789c2;

		constexpr static std::string_view VaultMetaData_type_name = "VaultMetaData";
		constexpr static rivet::rivet_type_id VaultMetaData_type_id = 0x37889aa;
		constexpr static std::string_view IconPath_type_name = "IconPath";
		constexpr static rivet::rivet_type_id IconPath_type_id = 0xbf5b007f;
		constexpr static std::string_view Usage_type_name = "Usage";
		constexpr static rivet::rivet_type_id Usage_type_id = 0xc9b892b1;
		constexpr static std::string_view Preview_type_name = "Preview";
		constexpr static rivet::rivet_type_id Preview_type_id = 0xb86f4c08;
		constexpr static std::string_view FrameGrabQuality_type_name = "FrameGrabQuality";
		constexpr static rivet::rivet_type_id FrameGrabQuality_type_id = 0x7b3f76b6;
		constexpr static std::string_view FrameGrabOversize_type_name = "FrameGrabOversize";
		constexpr static rivet::rivet_type_id FrameGrabOversize_type_id = 0x34e3a72;
		constexpr static std::string_view ScreenReflection_type_name = "ScreenReflection";
		constexpr static rivet::rivet_type_id ScreenReflection_type_id = 0x3ec85273;
		constexpr static std::string_view LightScattering_type_name = "LightScattering";
		constexpr static rivet::rivet_type_id LightScattering_type_id = 0xbe0fe132;
		constexpr static std::string_view DoNotRayTrace_type_name = "DoNotRayTrace";
		constexpr static rivet::rivet_type_id DoNotRayTrace_type_id = 0x8d4bfa30;
		constexpr static std::string_view CustomShadows_type_name = "CustomShadows";
		constexpr static rivet::rivet_type_id CustomShadows_type_id = 0x63fe0d72;
		constexpr static std::string_view DisplacementFade_type_name = "DisplacementFade";
		constexpr static rivet::rivet_type_id DisplacementFade_type_id = 0xafbcb965;
		constexpr static std::string_view LodDist_type_name = "LodDist";
		constexpr static rivet::rivet_type_id LodDist_type_id = 0x458a5600;
		constexpr static std::string_view PixelDepthOutput_type_name = "PixelDepthOutput";
		constexpr static rivet::rivet_type_id PixelDepthOutput_type_id = 0xea24ffd8;
		constexpr static std::string_view OverrideLinearDepth_type_name = "OverrideLinearDepth";
		constexpr static rivet::rivet_type_id OverrideLinearDepth_type_id = 0xe474f0eb;
		constexpr static std::string_view OverrideHyperDepth_type_name = "OverrideHyperDepth";
		constexpr static rivet::rivet_type_id OverrideHyperDepth_type_id = 0x6f082c6e;
		constexpr static std::string_view PreviewIdLow_type_name = "PreviewIdLow";
		constexpr static rivet::rivet_type_id PreviewIdLow_type_id = 0x3a06b9d6;
		constexpr static std::string_view PreviewIdHigh_type_name = "PreviewIdHigh";
		constexpr static rivet::rivet_type_id PreviewIdHigh_type_id = 0xedce6186;
		constexpr static std::string_view Nodes_type_name = "Nodes";
		constexpr static rivet::rivet_type_id Nodes_type_id = 0x46ec93d;
		constexpr static std::string_view Comments_type_name = "Comments";
		constexpr static rivet::rivet_type_id Comments_type_id = 0xa59f2b5a;
		constexpr static std::string_view PreviewModel_type_name = "PreviewModel";
		constexpr static rivet::rivet_type_id PreviewModel_type_id = 0x5e53ae29;
		constexpr static std::string_view TessSettings_type_name = "TessSettings";
		constexpr static rivet::rivet_type_id TessSettings_type_id = 0x13d5a26f;
		constexpr static std::string_view Notes_type_name = "Notes";
		constexpr static rivet::rivet_type_id Notes_type_id = 0x18486a4d;
		constexpr static std::string_view ModelSlotExclusion_type_name = "ModelSlotExclusion";
		constexpr static rivet::rivet_type_id ModelSlotExclusion_type_id = 0x902ee427; 

		explicit MaterialGraphDef() = default;
		explicit MaterialGraphDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::VaultMetaData> VaultMetaData {};
		std::string_view IconPath {};
		rivet::ddl::generated::x5771f07c Usage {};
		rivet::ddl::generated::x65877bb6 Preview {};
		rivet::ddl::generated::FrameGrabQuality FrameGrabQuality {};
		float FrameGrabOversize {};
		rivet::ddl::generated::xd958924a ScreenReflection {};
		bool LightScattering {};
		bool DoNotRayTrace {};
		bool CustomShadows {};
		bool DisplacementFade {};
		float LodDist {};
		bool PixelDepthOutput {};
		bool OverrideLinearDepth {};
		bool OverrideHyperDepth {};
		uint32_t PreviewIdLow {};
		uint32_t PreviewIdHigh {};
		std::vector<std::shared_ptr<rivet::ddl::generated::MaterialGraphNode>> Nodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::MaterialGraphComment>> Comments {};
		std::shared_ptr<rivet::ddl::generated::PreviewModelContainer> PreviewModel {};
		std::shared_ptr<rivet::ddl::generated::TessellationSettings> TessSettings {};
		std::shared_ptr<rivet::ddl::generated::MaterialGraphNotes> Notes {};
		std::vector<std::string_view> ModelSlotExclusion {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialGraphDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
