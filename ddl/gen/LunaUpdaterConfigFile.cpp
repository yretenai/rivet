// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LunaFtpToolsPackageConfigFile.hpp>
#include <rivet/ddl/generated/LunaFtpProjectConfigFile.hpp>
#include <rivet/ddl/generated/LunaFtpUserConfigFile.hpp>
#include <rivet/ddl/generated/LunaFtpInstallerInfo.hpp> 

#include <rivet/ddl/generated/LunaUpdaterConfigFile.hpp>

namespace rivet::ddl::generated {
	LunaUpdaterConfigFile::LunaUpdaterConfigFile([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AutoDownloadLatest = serialized->get_bool(AutoDownloadLatest_type_id, true);
		AutoStartTools = serialized->get_bool(AutoStartTools_type_id, true);
		AllowBetaTools = serialized->get_bool(AllowBetaTools_type_id, false);
		NumPreviousVersionsToKeep = serialized->get_int32(NumPreviousVersionsToKeep_type_id, 3u);
		UpdaterVersion = serialized->get_string(UpdaterVersion_type_id, "");
		FtpUserId = serialized->get_string(FtpUserId_type_id, "");
		FtpUserPass = serialized->get_string(FtpUserPass_type_id, "");
		FtpUpdaterInstallers = serialized->unwrap_into_many<rivet::ddl::generated::LunaFtpInstallerInfo>(FtpUpdaterInstallers_type_id);
		FtpHavokInstallers = serialized->unwrap_into_many<rivet::ddl::generated::LunaFtpInstallerInfo>(FtpHavokInstallers_type_id);
		FtpWinExtInstallers = serialized->unwrap_into_many<rivet::ddl::generated::LunaFtpInstallerInfo>(FtpWinExtInstallers_type_id);
		FtpMaya2018Installers = serialized->unwrap_into_many<rivet::ddl::generated::LunaFtpInstallerInfo>(FtpMaya2018Installers_type_id);
		FtpMaya2020Installers = serialized->unwrap_into_many<rivet::ddl::generated::LunaFtpInstallerInfo>(FtpMaya2020Installers_type_id);
		FtpUserConfig = serialized->unwrap_into<rivet::ddl::generated::LunaFtpUserConfigFile>(FtpUserConfig_type_id);
		FtpProjects = serialized->unwrap_into_many<rivet::ddl::generated::LunaFtpProjectConfigFile>(FtpProjects_type_id);
		FtpBranches = serialized->get_strings(FtpBranches_type_id);
		FtpToolsPackages = serialized->unwrap_into_many<rivet::ddl::generated::LunaFtpToolsPackageConfigFile>(FtpToolsPackages_type_id);
		FtpLatestToolsPackage = serialized->get_int32(FtpLatestToolsPackage_type_id, -1); 
	}

	[[nodiscard]] auto
	LunaUpdaterConfigFile::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LunaUpdaterConfigFile::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LunaUpdaterConfigFile> {
		if (incoming_type_id == LunaUpdaterConfigFile::type_id) {
			return std::make_shared<LunaUpdaterConfigFile>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
