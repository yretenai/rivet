// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RYNOPlanLink.hpp>
#include <rivet/ddl/generated/GoldBoltLink.hpp>
#include <rivet/ddl/generated/PlanetLink.hpp>
#include <rivet/ddl/generated/ObjectiveLink.hpp>
#include <rivet/ddl/generated/MissionLink.hpp>
#include <rivet/ddl/generated/ParentLink.hpp>
#include <rivet/ddl/generated/DimensionLink.hpp>
#include <rivet/ddl/generated/DebugLink.hpp> 

#include <rivet/ddl/generated/ActivityLinkBase.hpp>

namespace rivet::ddl::generated {
	ActivityLinkBase::ActivityLinkBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	auto
	ActivityLinkBase::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	ActivityLinkBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ActivityLinkBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ActivityLinkBase> {
		if (incoming_type_id == ActivityLinkBase::type_id) {
			return std::make_shared<ActivityLinkBase>(serialized);
		}

		auto GoldBoltLink_ptr = GoldBoltLink::from_substruct(incoming_type_id, serialized);
		if (GoldBoltLink_ptr != nullptr) {
			return GoldBoltLink_ptr;
		}

		auto PlanetLink_ptr = PlanetLink::from_substruct(incoming_type_id, serialized);
		if (PlanetLink_ptr != nullptr) {
			return PlanetLink_ptr;
		}

		auto ObjectiveLink_ptr = ObjectiveLink::from_substruct(incoming_type_id, serialized);
		if (ObjectiveLink_ptr != nullptr) {
			return ObjectiveLink_ptr;
		}

		auto RYNOPlanLink_ptr = RYNOPlanLink::from_substruct(incoming_type_id, serialized);
		if (RYNOPlanLink_ptr != nullptr) {
			return RYNOPlanLink_ptr;
		}

		auto MissionLink_ptr = MissionLink::from_substruct(incoming_type_id, serialized);
		if (MissionLink_ptr != nullptr) {
			return MissionLink_ptr;
		}

		auto ParentLink_ptr = ParentLink::from_substruct(incoming_type_id, serialized);
		if (ParentLink_ptr != nullptr) {
			return ParentLink_ptr;
		}

		auto DimensionLink_ptr = DimensionLink::from_substruct(incoming_type_id, serialized);
		if (DimensionLink_ptr != nullptr) {
			return DimensionLink_ptr;
		}

		auto DebugLink_ptr = DebugLink::from_substruct(incoming_type_id, serialized);
		if (DebugLink_ptr != nullptr) {
			return DebugLink_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
