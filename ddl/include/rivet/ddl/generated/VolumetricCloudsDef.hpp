// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct VolumetricCloudsShadowDef;
	struct VolumetricCloudsLightingDef;
	struct VolumetricClouds2DLayerDef;
	struct VolumetricCloudsModelingDef;
	struct VolumetricCloudsWindDef;
	struct VolumetricCloudsRayMarchingDef; 

	struct RIVET_DDL_SHARED VolumetricCloudsDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VolumetricCloudsDef";
		constexpr static rivet::rivet_type_id type_id = 0x7790e34d;

		constexpr static std::string_view Enabled_type_name = "Enabled";
		constexpr static rivet::rivet_type_id Enabled_type_id = 0x5113d8bc;
		constexpr static std::string_view EarthRadiusScale_type_name = "EarthRadiusScale";
		constexpr static rivet::rivet_type_id EarthRadiusScale_type_id = 0x42e318ee;
		constexpr static std::string_view VolumetricCloudsRayMarching_type_name = "VolumetricCloudsRayMarching";
		constexpr static rivet::rivet_type_id VolumetricCloudsRayMarching_type_id = 0x7c88ced3;
		constexpr static std::string_view VolumetricCloudsModeling_type_name = "VolumetricCloudsModeling";
		constexpr static rivet::rivet_type_id VolumetricCloudsModeling_type_id = 0x40bf327a;
		constexpr static std::string_view VolumetricCloudsWind_type_name = "VolumetricCloudsWind";
		constexpr static rivet::rivet_type_id VolumetricCloudsWind_type_id = 0xc1aa8392;
		constexpr static std::string_view VolumetricClouds2DLayer_type_name = "VolumetricClouds2DLayer";
		constexpr static rivet::rivet_type_id VolumetricClouds2DLayer_type_id = 0xcbf8c8f0;
		constexpr static std::string_view VolumetricCloudsLighting_type_name = "VolumetricCloudsLighting";
		constexpr static rivet::rivet_type_id VolumetricCloudsLighting_type_id = 0x46cceb1;
		constexpr static std::string_view VolumetricCloudsShadow_type_name = "VolumetricCloudsShadow";
		constexpr static rivet::rivet_type_id VolumetricCloudsShadow_type_id = 0xe55013af; 

		explicit VolumetricCloudsDef() = default;
		explicit VolumetricCloudsDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool Enabled {};
		float EarthRadiusScale {};
		std::shared_ptr<rivet::ddl::generated::VolumetricCloudsRayMarchingDef> VolumetricCloudsRayMarching {};
		std::shared_ptr<rivet::ddl::generated::VolumetricCloudsModelingDef> VolumetricCloudsModeling {};
		std::shared_ptr<rivet::ddl::generated::VolumetricCloudsWindDef> VolumetricCloudsWind {};
		std::shared_ptr<rivet::ddl::generated::VolumetricClouds2DLayerDef> VolumetricClouds2DLayer {};
		std::shared_ptr<rivet::ddl::generated::VolumetricCloudsLightingDef> VolumetricCloudsLighting {};
		std::shared_ptr<rivet::ddl::generated::VolumetricCloudsShadowDef> VolumetricCloudsShadow {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VolumetricCloudsDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
