// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SpaceshipPaintManagerPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SpaceshipPaintManagerPrius";
		constexpr static rivet::rivet_type_id type_id = 0xe21f891c;

		constexpr static std::string_view OriginalModel_type_name = "OriginalModel";
		constexpr static rivet::rivet_type_id OriginalModel_type_id = 0x7e7da465;
		constexpr static std::string_view BlackModel_type_name = "BlackModel";
		constexpr static rivet::rivet_type_id BlackModel_type_id = 0x43a333b6;
		constexpr static std::string_view ChromeModel_type_name = "ChromeModel";
		constexpr static rivet::rivet_type_id ChromeModel_type_id = 0x58ed14c2;
		constexpr static std::string_view FlamesModel_type_name = "FlamesModel";
		constexpr static rivet::rivet_type_id FlamesModel_type_id = 0x1159ced2; 

		explicit SpaceshipPaintManagerPrius() = default;
		explicit SpaceshipPaintManagerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view OriginalModel {};
		std::string_view BlackModel {};
		std::string_view ChromeModel {};
		std::string_view FlamesModel {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SpaceshipPaintManagerPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
