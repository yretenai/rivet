// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LunaFtpToolsPackageConfigFile.hpp>
#include <rivet/ddl/generated/LunaFtpProjectConfigFile.hpp>
#include <rivet/ddl/generated/LunaFtpUserLocation.hpp> 

#include <rivet/ddl/generated/InsomniacEngineConfigFile.hpp>

namespace rivet::ddl::generated {
	InsomniacEngineConfigFile::InsomniacEngineConfigFile([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Location = serialized->unwrap_into<rivet::ddl::generated::LunaFtpUserLocation>(Location_type_id);
		Project = serialized->unwrap_into<rivet::ddl::generated::LunaFtpProjectConfigFile>(Project_type_id);
		Branch = serialized->get_string(Branch_type_id);
		BranchRootDir = serialized->get_string(BranchRootDir_type_id);
		ToolsPackage = serialized->unwrap_into<rivet::ddl::generated::LunaFtpToolsPackageConfigFile>(ToolsPackage_type_id);
		ToolsRootDir = serialized->get_string(ToolsRootDir_type_id);
		ToolsJunctionDir = serialized->get_string(ToolsJunctionDir_type_id);
		IsToolsCodeFolder = serialized->get_bool(IsToolsCodeFolder_type_id);
		InstalledUpdaterVersion = serialized->get_string(InstalledUpdaterVersion_type_id);
		InstalledHavokVersion = serialized->get_string(InstalledHavokVersion_type_id);
		InstalledWinExtVersion = serialized->get_string(InstalledWinExtVersion_type_id);
		InstalledMaya2018Version = serialized->get_string(InstalledMaya2018Version_type_id);
		InstalledMaya2020Version = serialized->get_string(InstalledMaya2020Version_type_id);
		PreviousBranch = serialized->get_strings(PreviousBranch_type_id); 
	}

	[[nodiscard]] auto
	InsomniacEngineConfigFile::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	InsomniacEngineConfigFile::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<InsomniacEngineConfigFile> {
		if (incoming_type_id == InsomniacEngineConfigFile::type_id) {
			return std::make_shared<InsomniacEngineConfigFile>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
