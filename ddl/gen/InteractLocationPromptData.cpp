// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/InteractLocationPromptData.hpp>

namespace rivet::ddl::generated {
	InteractLocationPromptData::InteractLocationPromptData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PromptTag = serialized->get_string(PromptTag_type_id);
		InWorldPrompt = serialized->get_bool(InWorldPrompt_type_id);
		POISubtype = serialized->get_enum<rivet::ddl::generated::x275d9b04>(POISubtype_type_id, rivet::ddl::generated::x275d9b04_values);
		POIPreviewSubtype = serialized->get_enum<rivet::ddl::generated::x8d1d7e8a>(POIPreviewSubtype_type_id, rivet::ddl::generated::x8d1d7e8a_values);
		POILOSCheck = serialized->get_bool(POILOSCheck_type_id);
		PreviewRange = serialized->get_float(PreviewRange_type_id);
		PromptFacingMode = serialized->get_enum<rivet::ddl::generated::x11d5b447>(PromptFacingMode_type_id, rivet::ddl::generated::x11d5b447_values);
		FixedPromptForward = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(FixedPromptForward_type_id);
		POIOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(POIOffset_type_id);
		POILocator = serialized->get_string(POILocator_type_id); 
	}

	[[nodiscard]] auto
	InteractLocationPromptData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	InteractLocationPromptData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<InteractLocationPromptData> {
		if (incoming_type_id == InteractLocationPromptData::type_id) {
			return std::make_shared<InteractLocationPromptData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
