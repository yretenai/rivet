// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED BotConfigData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "BotConfigData";
		constexpr static rivet::rivet_type_id type_id = 0xb9a35604;

		constexpr static std::string_view ComboConfig_type_name = "ComboConfig";
		constexpr static rivet::rivet_type_id ComboConfig_type_id = 0x2f793923;
		constexpr static std::string_view EmergentVOConfig_type_name = "EmergentVOConfig";
		constexpr static rivet::rivet_type_id EmergentVOConfig_type_id = 0xde8b92bf;
		constexpr static std::string_view StatusEffectsConfig_type_name = "StatusEffectsConfig";
		constexpr static rivet::rivet_type_id StatusEffectsConfig_type_id = 0x121ed8c8;
		constexpr static std::string_view ShootingConfig_type_name = "ShootingConfig";
		constexpr static rivet::rivet_type_id ShootingConfig_type_id = 0x3e01df5f;
		constexpr static std::string_view FiringConfig_type_name = "FiringConfig";
		constexpr static rivet::rivet_type_id FiringConfig_type_id = 0xbf45b6eb;
		constexpr static std::string_view LookSelectorConfig_type_name = "LookSelectorConfig";
		constexpr static rivet::rivet_type_id LookSelectorConfig_type_id = 0x6149f5ef;
		constexpr static std::string_view AnimFilterSelectorConfig_type_name = "AnimFilterSelectorConfig";
		constexpr static rivet::rivet_type_id AnimFilterSelectorConfig_type_id = 0x1bf8fad;
		constexpr static std::string_view WeaponEquipListenerConfig_type_name = "WeaponEquipListenerConfig";
		constexpr static rivet::rivet_type_id WeaponEquipListenerConfig_type_id = 0xdb8aa2d3;
		constexpr static std::string_view DifficultyConfig_type_name = "DifficultyConfig";
		constexpr static rivet::rivet_type_id DifficultyConfig_type_id = 0x4b72f9b2;
		constexpr static std::string_view VariantConfig_type_name = "VariantConfig";
		constexpr static rivet::rivet_type_id VariantConfig_type_id = 0xe6edbb1e;
		constexpr static std::string_view WaterFxConfig_type_name = "WaterFxConfig";
		constexpr static rivet::rivet_type_id WaterFxConfig_type_id = 0xb18c2575;
		constexpr static std::string_view AccessibilityHighlightConfig_type_name = "AccessibilityHighlightConfig";
		constexpr static rivet::rivet_type_id AccessibilityHighlightConfig_type_id = 0x3ecbd146; 

		explicit BotConfigData() = default;
		explicit BotConfigData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view ComboConfig {};
		std::string_view EmergentVOConfig {};
		std::string_view StatusEffectsConfig {};
		std::string_view ShootingConfig {};
		std::string_view FiringConfig {};
		std::string_view LookSelectorConfig {};
		std::string_view AnimFilterSelectorConfig {};
		std::string_view WeaponEquipListenerConfig {};
		std::string_view DifficultyConfig {};
		std::string_view VariantConfig {};
		std::string_view WaterFxConfig {};
		std::string_view AccessibilityHighlightConfig {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotConfigData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
