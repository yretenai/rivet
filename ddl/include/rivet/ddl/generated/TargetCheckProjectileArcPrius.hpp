// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x84a7fecd.hpp>
#include <rivet/ddl/generated/TargetCheckBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct DDLVector3; 

	struct RIVET_DDL_SHARED TargetCheckProjectileArcPrius : TargetCheckBasePrius {
		constexpr static std::string_view type_name = "TargetCheckProjectileArcPrius";
		constexpr static rivet::rivet_type_id type_id = 0x977ea7bf;

		constexpr static std::string_view UseTargetRadius_type_name = "UseTargetRadius";
		constexpr static rivet::rivet_type_id UseTargetRadius_type_id = 0xd9649f5;
		constexpr static std::string_view CheckRadius_type_name = "CheckRadius";
		constexpr static rivet::rivet_type_id CheckRadius_type_id = 0xa16ee5e9;
		constexpr static std::string_view StartType_type_name = "StartType";
		constexpr static rivet::rivet_type_id StartType_type_id = 0xef116147;
		constexpr static std::string_view EndType_type_name = "EndType";
		constexpr static rivet::rivet_type_id EndType_type_id = 0x16ec47a8;
		constexpr static std::string_view StartOffset_type_name = "StartOffset";
		constexpr static rivet::rivet_type_id StartOffset_type_id = 0x2c176850;
		constexpr static std::string_view EndOffset_type_name = "EndOffset";
		constexpr static rivet::rivet_type_id EndOffset_type_id = 0x27fcfb73; 

		explicit TargetCheckProjectileArcPrius() = default;
		explicit TargetCheckProjectileArcPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool UseTargetRadius {};
		float CheckRadius {};
		rivet::ddl::generated::x84a7fecd StartType {};
		rivet::ddl::generated::x84a7fecd EndType {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> StartOffset {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> EndOffset {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TargetCheckProjectileArcPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
