// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PreDecideLootEntry.hpp>

namespace rivet::ddl::generated {
	PreDecideLootEntry::PreDecideLootEntry([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		LootActor = serialized->get_string(LootActor_type_id);
		PickChance = serialized->get_float(PickChance_type_id);
		ChangeMaterialConst = serialized->get_bool(ChangeMaterialConst_type_id);
		MaterialConstName = serialized->get_string(MaterialConstName_type_id);
		MaterialConstValue = serialized->get_float(MaterialConstValue_type_id);
		LootIdNum = serialized->get_uint8(LootIdNum_type_id); 
	}

	[[nodiscard]] auto
	PreDecideLootEntry::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PreDecideLootEntry::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PreDecideLootEntry> {
		if (incoming_type_id == PreDecideLootEntry::type_id) {
			return std::make_shared<PreDecideLootEntry>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
