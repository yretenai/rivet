// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/NefariousFinaleMechHeartWeakspotData.hpp> 

#include <rivet/ddl/generated/NefariousFinaleMechHeartPrius.hpp>

namespace rivet::ddl::generated {
	NefariousFinaleMechHeartPrius::NefariousFinaleMechHeartPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): DamageModifierIncomingPrius(serialized) {
		HeartBaseHealth = serialized->get_float(HeartBaseHealth_type_id);
		HeartLaserPhaseHealth = serialized->get_float(HeartLaserPhaseHealth_type_id);
		HitShader = serialized->get_string(HitShader_type_id);
		HitShaderDuration = serialized->get_float(HitShaderDuration_type_id);
		Chamber1_NodeA_Data = serialized->unwrap_into<rivet::ddl::generated::NefariousFinaleMechHeartWeakspotData>(Chamber1_NodeA_Data_type_id);
		Chamber1_NodeB_Data = serialized->unwrap_into<rivet::ddl::generated::NefariousFinaleMechHeartWeakspotData>(Chamber1_NodeB_Data_type_id);
		Chamber2_NodeA_Data = serialized->unwrap_into<rivet::ddl::generated::NefariousFinaleMechHeartWeakspotData>(Chamber2_NodeA_Data_type_id);
		Chamber2_NodeB_Data = serialized->unwrap_into<rivet::ddl::generated::NefariousFinaleMechHeartWeakspotData>(Chamber2_NodeB_Data_type_id);
		Chamber3_NodeA_Data = serialized->unwrap_into<rivet::ddl::generated::NefariousFinaleMechHeartWeakspotData>(Chamber3_NodeA_Data_type_id);
		Chamber3_NodeB_Data = serialized->unwrap_into<rivet::ddl::generated::NefariousFinaleMechHeartWeakspotData>(Chamber3_NodeB_Data_type_id);
		HeartCore_Data = serialized->unwrap_into<rivet::ddl::generated::NefariousFinaleMechHeartWeakspotData>(HeartCore_Data_type_id);
		WeakSpotDummyActor = serialized->get_string(WeakSpotDummyActor_type_id); 
	}

	auto
	NefariousFinaleMechHeartPrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	NefariousFinaleMechHeartPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	NefariousFinaleMechHeartPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NefariousFinaleMechHeartPrius> {
		if (incoming_type_id == NefariousFinaleMechHeartPrius::type_id) {
			return std::make_shared<NefariousFinaleMechHeartPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
