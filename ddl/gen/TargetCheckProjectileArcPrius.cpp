// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/TargetCheckProjectileArcPrius.hpp>

namespace rivet::ddl::generated {
	TargetCheckProjectileArcPrius::TargetCheckProjectileArcPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): TargetCheckBasePrius(serialized) {
		UseTargetRadius = serialized->get_bool(UseTargetRadius_type_id);
		CheckRadius = serialized->get_float(CheckRadius_type_id);
		StartType = serialized->get_enum<rivet::ddl::generated::x84a7fecd>(StartType_type_id, rivet::ddl::generated::x84a7fecd_values);
		EndType = serialized->get_enum<rivet::ddl::generated::x84a7fecd>(EndType_type_id, rivet::ddl::generated::x84a7fecd_values);
		StartOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(StartOffset_type_id);
		EndOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(EndOffset_type_id); 
	}

	[[nodiscard]] auto
	TargetCheckProjectileArcPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TargetCheckProjectileArcPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TargetCheckProjectileArcPrius> {
		if (incoming_type_id == TargetCheckProjectileArcPrius::type_id) {
			return std::make_shared<TargetCheckProjectileArcPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
