// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraInputSettings.hpp>

namespace rivet::ddl::generated {
	CameraInputSettings::CameraInputSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ZedQuality = serialized->get_int32(ZedQuality_type_id);
		ZedResolution = serialized->get_int32(ZedResolution_type_id);
		ResolutionWidth = serialized->get_int32(ResolutionWidth_type_id);
		ResolutionHeight = serialized->get_int32(ResolutionHeight_type_id);
		FrameRate = serialized->get_float(FrameRate_type_id);
		CameraName = serialized->get_string(CameraName_type_id);
		FrameBufferCount = serialized->get_int32(FrameBufferCount_type_id);
		FrameDelayMs = serialized->get_float(FrameDelayMs_type_id);
		LeftClip = serialized->get_float(LeftClip_type_id);
		RightClip = serialized->get_float(RightClip_type_id);
		TopClip = serialized->get_float(TopClip_type_id);
		BottomClip = serialized->get_float(BottomClip_type_id);
		ChromaKey = serialized->get_float(ChromaKey_type_id);
		LinearKey = serialized->get_float(LinearKey_type_id);
		SpillReduction = serialized->get_float(SpillReduction_type_id);
		BlueScreen = serialized->get_bool(BlueScreen_type_id);
		DisplayDebugAxes = serialized->get_bool(DisplayDebugAxes_type_id); 
	}

	[[nodiscard]] auto
	CameraInputSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraInputSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraInputSettings> {
		if (incoming_type_id == CameraInputSettings::type_id) {
			return std::make_shared<CameraInputSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
