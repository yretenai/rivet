// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HexapodNestBotGeneratorComponentPrius.hpp>
#include <rivet/ddl/generated/BotGeneratorByShotComponentPrius.hpp>
#include <rivet/ddl/generated/DetachingBotGeneratorComponentPrius.hpp> 

#include <rivet/ddl/generated/BotGeneratorComponentPrius.hpp>

namespace rivet::ddl::generated {
	BotGeneratorComponentPrius::BotGeneratorComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): SpawnerObjectPrius(serialized) {

	}

	[[nodiscard]] auto
	BotGeneratorComponentPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotGeneratorComponentPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotGeneratorComponentPrius> {
		if (incoming_type_id == BotGeneratorComponentPrius::type_id) {
			return std::make_shared<BotGeneratorComponentPrius>(serialized);
		}

		auto DetachingBotGeneratorComponentPrius_ptr = DetachingBotGeneratorComponentPrius::from_substruct(incoming_type_id, serialized);
		if (DetachingBotGeneratorComponentPrius_ptr != nullptr) {
			return DetachingBotGeneratorComponentPrius_ptr;
		}

		auto BotGeneratorByShotComponentPrius_ptr = BotGeneratorByShotComponentPrius::from_substruct(incoming_type_id, serialized);
		if (BotGeneratorByShotComponentPrius_ptr != nullptr) {
			return BotGeneratorByShotComponentPrius_ptr;
		}

		auto HexapodNestBotGeneratorComponentPrius_ptr = HexapodNestBotGeneratorComponentPrius::from_substruct(incoming_type_id, serialized);
		if (HexapodNestBotGeneratorComponentPrius_ptr != nullptr) {
			return HexapodNestBotGeneratorComponentPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
