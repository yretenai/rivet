// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector2.hpp> 

#include <rivet/ddl/generated/StructuredLogAnimDriverVar.hpp>

namespace rivet::ddl::generated {
	StructuredLogAnimDriverVar::StructuredLogAnimDriverVar([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): StructuredLogStatement(serialized) {
		Flags = serialized->get_bitset<rivet::ddl::generated::x9bcbd6ed>(Flags_type_id, rivet::ddl::generated::x9bcbd6ed_values, 0u);
		Float = serialized->get_float(Float_type_id, 0.000000f);
		Vec2 = serialized->unwrap_into<rivet::ddl::generated::DDLVector2>(Vec2_type_id);
		NameHash = serialized->get_uint32(NameHash_type_id, 0u);
		Type = serialized->get_enum<rivet::ddl::generated::x6c25f7e9>(Type_type_id, rivet::ddl::generated::x6c25f7e9_values, rivet::ddl::generated::x6c25f7e9::TypeInt); 
	}

	[[nodiscard]] auto
	StructuredLogAnimDriverVar::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StructuredLogAnimDriverVar::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StructuredLogAnimDriverVar> {
		if (incoming_type_id == StructuredLogAnimDriverVar::type_id) {
			return std::make_shared<StructuredLogAnimDriverVar>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
