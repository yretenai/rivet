// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameBotHealthPrius.hpp>
#include <rivet/ddl/generated/SegmentedHealthPrius.hpp>
#include <rivet/ddl/generated/HeroRegenHealthPrius.hpp>
#include <rivet/ddl/generated/ArmoredHealthPrius.hpp>
#include <rivet/ddl/generated/FinaleMechWeaponHealthPrius.hpp>
#include <rivet/ddl/generated/HeroHealthPrius.hpp> 

#include <rivet/ddl/generated/HealthPrius.hpp>

namespace rivet::ddl::generated {
	HealthPrius::HealthPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MaxHitPoints = serialized->get_float(MaxHitPoints_type_id, 100.000000f);
		InjuredHitPoints = serialized->get_float(InjuredHitPoints_type_id, 0.000000f);
		Flags = serialized->get_bitset<rivet::ddl::generated::x7b898c1>(Flags_type_id, rivet::ddl::generated::x7b898c1_values, 0u); 
	}

	[[nodiscard]] auto
	HealthPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HealthPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HealthPrius> {
		if (incoming_type_id == HealthPrius::type_id) {
			return std::make_shared<HealthPrius>(serialized);
		}

		auto HeroHealthPrius_ptr = HeroHealthPrius::from_substruct(incoming_type_id, serialized);
		if (HeroHealthPrius_ptr != nullptr) {
			return HeroHealthPrius_ptr;
		}

		auto FinaleMechWeaponHealthPrius_ptr = FinaleMechWeaponHealthPrius::from_substruct(incoming_type_id, serialized);
		if (FinaleMechWeaponHealthPrius_ptr != nullptr) {
			return FinaleMechWeaponHealthPrius_ptr;
		}

		auto HeroRegenHealthPrius_ptr = HeroRegenHealthPrius::from_substruct(incoming_type_id, serialized);
		if (HeroRegenHealthPrius_ptr != nullptr) {
			return HeroRegenHealthPrius_ptr;
		}

		auto SegmentedHealthPrius_ptr = SegmentedHealthPrius::from_substruct(incoming_type_id, serialized);
		if (SegmentedHealthPrius_ptr != nullptr) {
			return SegmentedHealthPrius_ptr;
		}

		auto ArmoredHealthPrius_ptr = ArmoredHealthPrius::from_substruct(incoming_type_id, serialized);
		if (ArmoredHealthPrius_ptr != nullptr) {
			return ArmoredHealthPrius_ptr;
		}

		auto GameBotHealthPrius_ptr = GameBotHealthPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotHealthPrius_ptr != nullptr) {
			return GameBotHealthPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
