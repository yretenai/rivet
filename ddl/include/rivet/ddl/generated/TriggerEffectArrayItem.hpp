// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x626794b4.hpp>
#include <rivet/ddl/generated/enums/x60ab12b0.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED TriggerEffectArrayItem : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "TriggerEffectArrayItem";
		constexpr const static rivet::rivet_type_id type_id = 0x879bd1f3;

		constexpr const static std::string_view EffectType_type_name = "EffectType";
		constexpr const static rivet::rivet_type_id EffectType_type_id = 0x609bd7db;
		constexpr const static std::string_view Triggers_type_name = "Triggers";
		constexpr const static rivet::rivet_type_id Triggers_type_id = 0xf4cf343d;
		constexpr const static std::string_view Enabled_type_name = "Enabled";
		constexpr const static rivet::rivet_type_id Enabled_type_id = 0x5113d8bc;
		constexpr const static std::string_view TriggerEffectConfig_type_name = "TriggerEffectConfig";
		constexpr const static rivet::rivet_type_id TriggerEffectConfig_type_id = 0x336655ba; 

		explicit TriggerEffectArrayItem() = default;
		explicit TriggerEffectArrayItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x60ab12b0 EffectType {};
		rivet::ddl::generated::x626794b4 Triggers {};
		bool Enabled {};
		std::string_view TriggerEffectConfig {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerEffectArrayItem>;
	};
} // namespace rivet::ddl::generated

// clang-format on
