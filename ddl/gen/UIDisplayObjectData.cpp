// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UIDisplayObjectData.hpp>

namespace rivet::ddl::generated {
	UIDisplayObjectData::UIDisplayObjectData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ObjectType = serialized->get_enum<rivet::ddl::generated::xd64fa9b1>(ObjectType_type_id, rivet::ddl::generated::xd64fa9b1_values, rivet::ddl::generated::xd64fa9b1::None);
		ObjectActor = serialized->get_string(ObjectActor_type_id, {});
		Scale = serialized->get_float(Scale_type_id, 1.000000f);
		RotationSpeed = serialized->get_float(RotationSpeed_type_id, 15.000000f);
		InitialYaw = serialized->get_float(InitialYaw_type_id, 0.000000f);
		StaticRoll = serialized->get_float(StaticRoll_type_id, 0.000000f);
		CenterToOrigin = serialized->get_bool(CenterToOrigin_type_id, false);
		Look = serialized->get_string(Look_type_id, ""); 
	}

	[[nodiscard]] auto
	UIDisplayObjectData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UIDisplayObjectData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIDisplayObjectData> {
		if (incoming_type_id == UIDisplayObjectData::type_id) {
			return std::make_shared<UIDisplayObjectData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
