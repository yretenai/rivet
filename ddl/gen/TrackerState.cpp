// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TrackerScanProgress.hpp>
#include <rivet/ddl/generated/RequestProcessorStatus.hpp>
#include <rivet/ddl/generated/BuildWorkerProgress.hpp>
#include <rivet/ddl/generated/WebServerStatus.hpp>
#include <rivet/ddl/generated/BuildManagerStatus.hpp> 

#include <rivet/ddl/generated/TrackerState.hpp>

namespace rivet::ddl::generated {
	TrackerState::TrackerState([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BuildManagerStatus = serialized->unwrap_into<rivet::ddl::generated::BuildManagerStatus>(BuildManagerStatus_type_id);
		BuildWorkerStatus = serialized->unwrap_into_many<rivet::ddl::generated::BuildWorkerProgress>(BuildWorkerStatus_type_id);
		RequestProcessorStatus = serialized->unwrap_into<rivet::ddl::generated::RequestProcessorStatus>(RequestProcessorStatus_type_id);
		StatusMessages = serialized->get_strings(StatusMessages_type_id);
		TrackerStatus = serialized->unwrap_into<rivet::ddl::generated::TrackerScanProgress>(TrackerStatus_type_id);
		WebServerStatus = serialized->unwrap_into<rivet::ddl::generated::WebServerStatus>(WebServerStatus_type_id); 
	}

	[[nodiscard]] auto
	TrackerState::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TrackerState::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TrackerState> {
		if (incoming_type_id == TrackerState::type_id) {
			return std::make_shared<TrackerState>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
