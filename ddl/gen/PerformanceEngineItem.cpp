// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLMatrix4.hpp>
#include <rivet/ddl/generated/AnimPerformanceSetDef.hpp>
#include <rivet/ddl/generated/AnimPerformanceClipDef.hpp> 

#include <rivet/ddl/generated/PerformanceEngineItem.hpp>

namespace rivet::ddl::generated {
	PerformanceEngineItem::PerformanceEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ActivePerformanceClipDef = serialized->unwrap_into<rivet::ddl::generated::AnimPerformanceClipDef>(ActivePerformanceClipDef_type_id);
		ActivePerformanceClipGroupPath = serialized->get_string(ActivePerformanceClipGroupPath_type_id);
		ActivePerformanceClipPath = serialized->get_string(ActivePerformanceClipPath_type_id);
		AnimSetStack = serialized->get_strings(AnimSetStack_type_id);
		AssetPath = serialized->get_string(AssetPath_type_id);
		BodyId = serialized->get_uint64(BodyId_type_id);
		HeadId = serialized->get_uint64(HeadId_type_id);
		PerformanceSetDef = serialized->unwrap_into<rivet::ddl::generated::AnimPerformanceSetDef>(PerformanceSetDef_type_id);
		PreviewAnimDriverName = serialized->get_string(PreviewAnimDriverName_type_id);
		Matrix = serialized->unwrap_into<rivet::ddl::generated::DDLMatrix4>(Matrix_type_id);
		Playing = serialized->get_bool(Playing_type_id);
		RequestPlay = serialized->get_bool(RequestPlay_type_id);
		RequestPause = serialized->get_bool(RequestPause_type_id);
		RequestTime = serialized->get_double(RequestTime_type_id);
		ShowAnimControllerHud = serialized->get_enum<rivet::ddl::generated::x5907f033>(ShowAnimControllerHud_type_id, rivet::ddl::generated::x5907f033_values);
		ShowAnimDebugHud = serialized->get_bool(ShowAnimDebugHud_type_id);
		Time = serialized->get_double(Time_type_id); 
	}

	[[nodiscard]] auto
	PerformanceEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PerformanceEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PerformanceEngineItem> {
		if (incoming_type_id == PerformanceEngineItem::type_id) {
			return std::make_shared<PerformanceEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
