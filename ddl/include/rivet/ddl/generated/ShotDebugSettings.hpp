// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/xbb69786.hpp>
#include <rivet/ddl/generated/bitsets/x8f57801d.hpp>
#include <rivet/ddl/generated/enums/xd2478acb.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ShotDebugSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ShotDebugSettings";
		constexpr static rivet::rivet_type_id type_id = 0x8ccf99f3;

		constexpr static std::string_view DisplayMenu_type_name = "DisplayMenu";
		constexpr static rivet::rivet_type_id DisplayMenu_type_id = 0xc9d576d6;
		constexpr static std::string_view EnableTracking_type_name = "EnableTracking";
		constexpr static rivet::rivet_type_id EnableTracking_type_id = 0x2dc04f61;
		constexpr static std::string_view MaxTrackedShots_type_name = "MaxTrackedShots";
		constexpr static rivet::rivet_type_id MaxTrackedShots_type_id = 0xde4a9520;
		constexpr static std::string_view MaxFramesPerShot_type_name = "MaxFramesPerShot";
		constexpr static rivet::rivet_type_id MaxFramesPerShot_type_id = 0x39b5b5e6;
		constexpr static std::string_view MaxLifetimeAfterDestroy_type_name = "MaxLifetimeAfterDestroy";
		constexpr static rivet::rivet_type_id MaxLifetimeAfterDestroy_type_id = 0x9b219cb3;
		constexpr static std::string_view DrawShotHistory_type_name = "DrawShotHistory";
		constexpr static rivet::rivet_type_id DrawShotHistory_type_id = 0x690b57b5;
		constexpr static std::string_view DrawSelectedShotHistoryOnly_type_name = "DrawSelectedShotHistoryOnly";
		constexpr static rivet::rivet_type_id DrawSelectedShotHistoryOnly_type_id = 0xbee94c15;
		constexpr static std::string_view DrawProjectedForward_type_name = "DrawProjectedForward";
		constexpr static rivet::rivet_type_id DrawProjectedForward_type_id = 0xf075f451;
		constexpr static std::string_view DrawCollRadiusImpact_type_name = "DrawCollRadiusImpact";
		constexpr static rivet::rivet_type_id DrawCollRadiusImpact_type_id = 0x8832b3b;
		constexpr static std::string_view DrawCollRadiusDamage_type_name = "DrawCollRadiusDamage";
		constexpr static rivet::rivet_type_id DrawCollRadiusDamage_type_id = 0xdd42bf50;
		constexpr static std::string_view ShotListSortOrder_type_name = "ShotListSortOrder";
		constexpr static rivet::rivet_type_id ShotListSortOrder_type_id = 0x49f58c4d;
		constexpr static std::string_view FrameListSortOrder_type_name = "FrameListSortOrder";
		constexpr static rivet::rivet_type_id FrameListSortOrder_type_id = 0xee3be595;
		constexpr static std::string_view DisplayedAllegiance_type_name = "DisplayedAllegiance";
		constexpr static rivet::rivet_type_id DisplayedAllegiance_type_id = 0xe578649a;
		constexpr static std::string_view ShotDisplay_type_name = "ShotDisplay";
		constexpr static rivet::rivet_type_id ShotDisplay_type_id = 0xb66bd51f; 

		explicit ShotDebugSettings() = default;
		explicit ShotDebugSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool DisplayMenu {};
		bool EnableTracking {};
		uint32_t MaxTrackedShots {};
		uint32_t MaxFramesPerShot {};
		uint32_t MaxLifetimeAfterDestroy {};
		bool DrawShotHistory {};
		bool DrawSelectedShotHistoryOnly {};
		bool DrawProjectedForward {};
		bool DrawCollRadiusImpact {};
		bool DrawCollRadiusDamage {};
		rivet::ddl::generated::xd2478acb ShotListSortOrder {};
		rivet::ddl::generated::xd2478acb FrameListSortOrder {};
		rivet::ddl::generated::x8f57801d DisplayedAllegiance {};
		rivet::ddl::generated::xbb69786 ShotDisplay {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ShotDebugSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
