// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/CameraForwardTweak.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CameraForwardTweakValid : CameraForwardTweak {
		constexpr static std::string_view type_name = "CameraForwardTweakValid";
		constexpr static rivet::rivet_type_id type_id = 0x4f62df81;

		constexpr static std::string_view CancelOnInput_type_name = "CancelOnInput";
		constexpr static rivet::rivet_type_id CancelOnInput_type_id = 0xc677c0c6;
		constexpr static std::string_view OnlyApplyOnFollow_type_name = "OnlyApplyOnFollow";
		constexpr static rivet::rivet_type_id OnlyApplyOnFollow_type_id = 0xb75866cb; 

		explicit CameraForwardTweakValid() = default;
		explicit CameraForwardTweakValid([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool CancelOnInput {};
		bool OnlyApplyOnFollow {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraForwardTweakValid>;
	};
} // namespace rivet::ddl::generated

// clang-format on
