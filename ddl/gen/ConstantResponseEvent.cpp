// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ConstantResponseEvent.hpp>

namespace rivet::ddl::generated {
	ConstantResponseEvent::ConstantResponseEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ResponseEvent(serialized) {
		ConstantName = serialized->get_string(ConstantName_type_id, {});
		MaterialMappingName = serialized->get_string(MaterialMappingName_type_id, {});
		XStartValue = serialized->get_float(XStartValue_type_id, 0.000000f);
		YStartValue = serialized->get_float(YStartValue_type_id, 0.000000f);
		ZStartValue = serialized->get_float(ZStartValue_type_id, 0.000000f);
		WStartValue = serialized->get_float(WStartValue_type_id, 0.000000f);
		XEndValue = serialized->get_float(XEndValue_type_id, 0.000000f);
		YEndValue = serialized->get_float(YEndValue_type_id, 0.000000f);
		ZEndValue = serialized->get_float(ZEndValue_type_id, 0.000000f);
		WEndValue = serialized->get_float(WEndValue_type_id, 0.000000f);
		TransitionTime = serialized->get_float(TransitionTime_type_id, 0.000000f);
		Reset = serialized->get_bool(Reset_type_id, false); 
	}

	[[nodiscard]] auto
	ConstantResponseEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ConstantResponseEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ConstantResponseEvent> {
		if (incoming_type_id == ConstantResponseEvent::type_id) {
			return std::make_shared<ConstantResponseEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
