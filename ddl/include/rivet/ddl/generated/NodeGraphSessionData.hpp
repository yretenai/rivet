// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct NodeGraphFocusData; 

	struct RIVET_DDL_SHARED NodeGraphSessionData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "NodeGraphSessionData";
		constexpr static rivet::rivet_type_id type_id = 0x75c550cd;

		constexpr static std::string_view AssetPath_type_name = "AssetPath";
		constexpr static rivet::rivet_type_id AssetPath_type_id = 0xefa614b;
		constexpr static std::string_view GraphId_type_name = "GraphId";
		constexpr static rivet::rivet_type_id GraphId_type_id = 0x76b05713;
		constexpr static std::string_view HoverNode_type_name = "HoverNode";
		constexpr static rivet::rivet_type_id HoverNode_type_id = 0xda1e4a39;
		constexpr static std::string_view SelectedNodes_type_name = "SelectedNodes";
		constexpr static rivet::rivet_type_id SelectedNodes_type_id = 0xf703b56e;
		constexpr static std::string_view SelectedConnections_type_name = "SelectedConnections";
		constexpr static rivet::rivet_type_id SelectedConnections_type_id = 0xfadc380e;
		constexpr static std::string_view HighlightedNodes_type_name = "HighlightedNodes";
		constexpr static rivet::rivet_type_id HighlightedNodes_type_id = 0xc423050b;
		constexpr static std::string_view FocusData_type_name = "FocusData";
		constexpr static rivet::rivet_type_id FocusData_type_id = 0x310012cf; 

		explicit NodeGraphSessionData() = default;
		explicit NodeGraphSessionData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view AssetPath {};
		uint64_t GraphId {};
		uint64_t HoverNode {};
		std::vector<uint64_t> SelectedNodes {};
		std::vector<uint64_t> SelectedConnections {};
		std::vector<uint64_t> HighlightedNodes {};
		std::shared_ptr<rivet::ddl::generated::NodeGraphFocusData> FocusData {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NodeGraphSessionData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
