// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DimensionPortalSourcePrius.hpp>

namespace rivet::ddl::generated {
	DimensionPortalSourcePrius::DimensionPortalSourcePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PossibleTargets = serialized->get_strings(PossibleTargets_type_id);
		ActivateWhenTargetLoaded = serialized->get_bool(ActivateWhenTargetLoaded_type_id, true);
		ActivateOnThrownMeleeHit = serialized->get_bool(ActivateOnThrownMeleeHit_type_id, true);
		MutuallyExclusive = serialized->get_bool(MutuallyExclusive_type_id, true);
		UseAsHexStreamingSource = serialized->get_bool(UseAsHexStreamingSource_type_id, true);
		AutoDeactivateOutOfRangeDelay = serialized->get_float(AutoDeactivateOutOfRangeDelay_type_id, 1.000000);
		AutoDeactivateRange = serialized->get_float(AutoDeactivateRange_type_id, 50.000000); 
	}

	[[nodiscard]] auto
	DimensionPortalSourcePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DimensionPortalSourcePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DimensionPortalSourcePrius> {
		if (incoming_type_id == DimensionPortalSourcePrius::type_id) {
			return std::make_shared<DimensionPortalSourcePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
