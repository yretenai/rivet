// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RidableJumpData;
	struct RidableGroundSearchData;
	struct Seat; 

	struct RIVET_DDL_SHARED RidablePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "RidablePrius";
		constexpr static rivet::rivet_type_id type_id = 0x6b219d2c;

		constexpr static std::string_view UseLeftSeats_type_name = "UseLeftSeats";
		constexpr static rivet::rivet_type_id UseLeftSeats_type_id = 0x34c51440;
		constexpr static std::string_view UseRightSeats_type_name = "UseRightSeats";
		constexpr static rivet::rivet_type_id UseRightSeats_type_id = 0xe26508ca;
		constexpr static std::string_view AutoDropoff_type_name = "AutoDropoff";
		constexpr static rivet::rivet_type_id AutoDropoff_type_id = 0x91ebfe2c;
		constexpr static std::string_view MinTimeBetweenDropoffs_type_name = "MinTimeBetweenDropoffs";
		constexpr static rivet::rivet_type_id MinTimeBetweenDropoffs_type_id = 0x97d021a0;
		constexpr static std::string_view MaxTimeBetweenDropoffs_type_name = "MaxTimeBetweenDropoffs";
		constexpr static rivet::rivet_type_id MaxTimeBetweenDropoffs_type_id = 0xd6c71e26;
		constexpr static std::string_view BotAnimSet_type_name = "BotAnimSet";
		constexpr static rivet::rivet_type_id BotAnimSet_type_id = 0xea9aa336;
		constexpr static std::string_view Seats_type_name = "Seats";
		constexpr static rivet::rivet_type_id Seats_type_id = 0xa6b19b91;
		constexpr static std::string_view GroundSearchData_type_name = "GroundSearchData";
		constexpr static rivet::rivet_type_id GroundSearchData_type_id = 0xb3eb5a00;
		constexpr static std::string_view JumpData_type_name = "JumpData";
		constexpr static rivet::rivet_type_id JumpData_type_id = 0x1655eec; 

		explicit RidablePrius() = default;
		explicit RidablePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool UseLeftSeats {};
		bool UseRightSeats {};
		bool AutoDropoff {};
		float MinTimeBetweenDropoffs {};
		float MaxTimeBetweenDropoffs {};
		std::string_view BotAnimSet {};
		std::vector<std::shared_ptr<rivet::ddl::generated::Seat>> Seats {};
		std::shared_ptr<rivet::ddl::generated::RidableGroundSearchData> GroundSearchData {};
		std::shared_ptr<rivet::ddl::generated::RidableJumpData> JumpData {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RidablePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
