// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <string_view>
#include <array>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_keywords.hpp>

namespace rivet::ddl::generated {
	constexpr const static std::string_view xedfe550a_type_name = "xedfe550a";
	constexpr const static rivet::rivet_type_id xedfe550a_type_id = 0xedfe550a;

	constexpr const static std::array<std::tuple<std::string_view, uint64_t>, 10> xedfe550a_values = {
		std::make_tuple("kDebugFlagsNone", 0x1),
		std::make_tuple("kDebugFlagsBadRoot", 0x2),
		std::make_tuple("kDebugFlagsBadClip", 0x4),
		std::make_tuple("kDebugFlagsBadNode", 0x8),
		std::make_tuple("kDebugFlagsBadTime", 0x10),
		std::make_tuple("kDebugFlagsBadTree", 0x20),
		std::make_tuple("kDebugFlagsEmptyTree", 0x40),
		std::make_tuple("kDebugFlagsPruned", 0x80),
		std::make_tuple("kDebugFlagsFromDanglingAdditive", 0x100),
		std::make_tuple("kDebugFlagsBadMisc", 0x200), 
	};

	enum class xedfe550a : uint64_t {
		DebugFlagsNone = 0x1,
		DebugFlagsBadRoot = 0x2,
		DebugFlagsBadClip = 0x4,
		DebugFlagsBadNode = 0x8,
		DebugFlagsBadTime = 0x10,
		DebugFlagsBadTree = 0x20,
		DebugFlagsEmptyTree = 0x40,
		DebugFlagsPruned = 0x80,
		DebugFlagsFromDanglingAdditive = 0x100,
		DebugFlagsBadMisc = 0x200, 
	};
} // namespace rivet::ddl::generated

// clang-format on
