// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct AnimDamageJointEventResponderElement; 

	struct RIVET_DDL_SHARED AnimDamageJointEventResponderPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimDamageJointEventResponderPrius";
		constexpr static rivet::rivet_type_id type_id = 0x1c3c6c49;

		constexpr static std::string_view DamageMaps_type_name = "DamageMaps";
		constexpr static rivet::rivet_type_id DamageMaps_type_id = 0x4ffc4ac1;
		constexpr static std::string_view EventLayer_type_name = "EventLayer";
		constexpr static rivet::rivet_type_id EventLayer_type_id = 0xbcc26c97;
		constexpr static std::string_view IgnoreSelfDamage_type_name = "IgnoreSelfDamage";
		constexpr static rivet::rivet_type_id IgnoreSelfDamage_type_id = 0x9bd24c94; 

		explicit AnimDamageJointEventResponderPrius() = default;
		explicit AnimDamageJointEventResponderPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDamageJointEventResponderElement>> DamageMaps {};
		uint32_t EventLayer {};
		bool IgnoreSelfDamage {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDamageJointEventResponderPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
