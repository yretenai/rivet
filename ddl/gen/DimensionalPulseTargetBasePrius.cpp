// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DimensionalPulseTargetScriptedPrius.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetDamagePrius.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetFlockPrius.hpp>
#include <rivet/ddl/generated/DimensionalPulseTargetPrius.hpp> 

#include <rivet/ddl/generated/DimensionalPulseTargetBasePrius.hpp>

namespace rivet::ddl::generated {
	DimensionalPulseTargetBasePrius::DimensionalPulseTargetBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartEnabled = serialized->get_bool(StartEnabled_type_id);
		OverrideEffectChance = serialized->get_bool(OverrideEffectChance_type_id);
		EffectChance = serialized->get_float(EffectChance_type_id); 
	}

	[[nodiscard]] auto
	DimensionalPulseTargetBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DimensionalPulseTargetBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DimensionalPulseTargetBasePrius> {
		if (incoming_type_id == DimensionalPulseTargetBasePrius::type_id) {
			return std::make_shared<DimensionalPulseTargetBasePrius>(serialized);
		}

		auto DimensionalPulseTargetScriptedPrius_ptr = DimensionalPulseTargetScriptedPrius::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetScriptedPrius_ptr != nullptr) {
			return DimensionalPulseTargetScriptedPrius_ptr;
		}

		auto DimensionalPulseTargetDamagePrius_ptr = DimensionalPulseTargetDamagePrius::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetDamagePrius_ptr != nullptr) {
			return DimensionalPulseTargetDamagePrius_ptr;
		}

		auto DimensionalPulseTargetFlockPrius_ptr = DimensionalPulseTargetFlockPrius::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetFlockPrius_ptr != nullptr) {
			return DimensionalPulseTargetFlockPrius_ptr;
		}

		auto DimensionalPulseTargetPrius_ptr = DimensionalPulseTargetPrius::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseTargetPrius_ptr != nullptr) {
			return DimensionalPulseTargetPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
