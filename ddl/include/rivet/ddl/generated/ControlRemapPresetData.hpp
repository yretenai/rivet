// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xcc18a97d.hpp> 

namespace rivet::ddl::generated {
	struct ControlRemapSet; 

	struct RIVET_DDL_SHARED ControlRemapPresetData : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "ControlRemapPresetData";
		constexpr const static rivet::rivet_type_id type_id = 0xe733a797;

		constexpr const static std::string_view Id_type_name = "Id";
		constexpr const static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr const static std::string_view DisplayName_type_name = "DisplayName";
		constexpr const static rivet::rivet_type_id DisplayName_type_id = 0xeaf33243;
		constexpr const static std::string_view RemapSet_type_name = "RemapSet";
		constexpr const static rivet::rivet_type_id RemapSet_type_id = 0xf2c7cf7d; 

		explicit ControlRemapPresetData() = default;
		explicit ControlRemapPresetData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xcc18a97d Id {};
		std::string_view DisplayName {};
		std::shared_ptr<rivet::ddl::generated::ControlRemapSet> RemapSet {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ControlRemapPresetData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
