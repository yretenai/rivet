// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct WeaponEmitterBasePrius; 

	struct RIVET_DDL_SHARED WeaponFiringBasePrius : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "WeaponFiringBasePrius";
		constexpr const static rivet::rivet_type_id type_id = 0x9c98ee69;

		constexpr const static std::string_view Emitter_type_name = "Emitter";
		constexpr const static rivet::rivet_type_id Emitter_type_id = 0x7464ae09;
		constexpr const static std::string_view FireSoundRange_type_name = "FireSoundRange";
		constexpr const static rivet::rivet_type_id FireSoundRange_type_id = 0x7ea9ad35;
		constexpr const static std::string_view NoiseMultiplier_type_name = "NoiseMultiplier";
		constexpr const static rivet::rivet_type_id NoiseMultiplier_type_id = 0x5240ce16;
		constexpr const static std::string_view ScentMultiplier_type_name = "ScentMultiplier";
		constexpr const static rivet::rivet_type_id ScentMultiplier_type_id = 0xa7acfc9a;
		constexpr const static std::string_view FireEventFxId_type_name = "FireEventFxId";
		constexpr const static rivet::rivet_type_id FireEventFxId_type_id = 0x2c812937; 

		explicit WeaponFiringBasePrius() = default;
		explicit WeaponFiringBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::WeaponEmitterBasePrius> Emitter {};
		float FireSoundRange {};
		float NoiseMultiplier {};
		float ScentMultiplier {};
		uint8_t FireEventFxId {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponFiringBasePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
