// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/PlanetMap.hpp>

namespace rivet::ddl::generated {
	PlanetMap::PlanetMap([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Map = serialized->get_enum<rivet::ddl::generated::xd64fa9b1>(Map_type_id, rivet::ddl::generated::xd64fa9b1_values);
		MapTexture = serialized->get_string(MapTexture_type_id);
		MapMin = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(MapMin_type_id);
		MapMax = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(MapMax_type_id);
		MapZoomMax = serialized->get_float(MapZoomMax_type_id);
		MapZoomDefault = serialized->get_float(MapZoomDefault_type_id);
		MapRevealSize = serialized->get_float(MapRevealSize_type_id);
		MapCellSize = serialized->get_float(MapCellSize_type_id); 
	}

	[[nodiscard]] auto
	PlanetMap::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PlanetMap::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PlanetMap> {
		if (incoming_type_id == PlanetMap::type_id) {
			return std::make_shared<PlanetMap>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
