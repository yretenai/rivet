// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED VaultControl : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VaultControl";
		constexpr static rivet::rivet_type_id type_id = 0xdf51faac;

		constexpr static std::string_view _id_type_name = "_id";
		constexpr static rivet::rivet_type_id _id_type_id = 0x7459aa19;
		constexpr static std::string_view DatabaseVersion_type_name = "DatabaseVersion";
		constexpr static rivet::rivet_type_id DatabaseVersion_type_id = 0x4e678f99;
		constexpr static std::string_view ValidExtensions_type_name = "ValidExtensions";
		constexpr static rivet::rivet_type_id ValidExtensions_type_id = 0x59d494e2; 

		explicit VaultControl() = default;
		explicit VaultControl([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t _id {};
		uint32_t DatabaseVersion {};
		std::vector<std::string_view> ValidExtensions {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VaultControl>;
	};
} // namespace rivet::ddl::generated

// clang-format on
