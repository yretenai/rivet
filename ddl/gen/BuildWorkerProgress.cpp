// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BuildWorkerProgress.hpp>

namespace rivet::ddl::generated {
	BuildWorkerProgress::BuildWorkerProgress([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AssetPath = serialized->get_string(AssetPath_type_id, {});
		TargetId = serialized->get_string(TargetId_type_id, {});
		TargetType = serialized->get_enum<rivet::ddl::generated::x8b211a61>(TargetType_type_id, rivet::ddl::generated::x8b211a61_values, rivet::ddl::generated::x8b211a61::PID);
		State = serialized->get_enum<rivet::ddl::generated::xa2b63d63>(State_type_id, rivet::ddl::generated::xa2b63d63_values, rivet::ddl::generated::xa2b63d63::Idle);
		BuildRuleHash = serialized->get_uint32(BuildRuleHash_type_id, 0u);
		BuildStartTime = serialized->get_uint64(BuildStartTime_type_id, 0ull);
		BuildEstimatedTime = serialized->get_uint64(BuildEstimatedTime_type_id, 0ull); 
	}

	[[nodiscard]] auto
	BuildWorkerProgress::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BuildWorkerProgress::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BuildWorkerProgress> {
		if (incoming_type_id == BuildWorkerProgress::type_id) {
			return std::make_shared<BuildWorkerProgress>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
