// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED MayaReplaceAnimateThisRef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "MayaReplaceAnimateThisRef";
		constexpr static rivet::rivet_type_id type_id = 0x43db41d3;

		constexpr static std::string_view MayaPath_type_name = "MayaPath";
		constexpr static rivet::rivet_type_id MayaPath_type_id = 0xfb5169fb;
		constexpr static std::string_view OldReferencePath_type_name = "OldReferencePath";
		constexpr static rivet::rivet_type_id OldReferencePath_type_id = 0x166db0a0;
		constexpr static std::string_view NewReferencePath_type_name = "NewReferencePath";
		constexpr static rivet::rivet_type_id NewReferencePath_type_id = 0xd4a42fe9; 

		explicit MayaReplaceAnimateThisRef() = default;
		explicit MayaReplaceAnimateThisRef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view MayaPath {};
		std::string_view OldReferencePath {};
		std::string_view NewReferencePath {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MayaReplaceAnimateThisRef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
