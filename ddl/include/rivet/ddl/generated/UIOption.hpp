// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x33afe7f4.hpp> 

namespace rivet::ddl::generated {
	struct UIOptionTypeBase; 

	struct RIVET_DDL_SHARED UIOption : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "UIOption";
		constexpr static rivet::rivet_type_id type_id = 0x46e86962;

		constexpr static std::string_view OptionID_type_name = "OptionID";
		constexpr static rivet::rivet_type_id OptionID_type_id = 0xf172a74;
		constexpr static std::string_view Label_type_name = "Label";
		constexpr static rivet::rivet_type_id Label_type_id = 0x17f49c29;
		constexpr static std::string_view Description_type_name = "Description";
		constexpr static rivet::rivet_type_id Description_type_id = 0xe03811fd;
		constexpr static std::string_view DescriptionAlt_type_name = "DescriptionAlt";
		constexpr static rivet::rivet_type_id DescriptionAlt_type_id = 0x29bf0d94;
		constexpr static std::string_view AccessibilityIcon_type_name = "AccessibilityIcon";
		constexpr static rivet::rivet_type_id AccessibilityIcon_type_id = 0x7c679f8e;
		constexpr static std::string_view InputAnnotationIcon_type_name = "InputAnnotationIcon";
		constexpr static rivet::rivet_type_id InputAnnotationIcon_type_id = 0xd8d7e231;
		constexpr static std::string_view PreviewImage_type_name = "PreviewImage";
		constexpr static rivet::rivet_type_id PreviewImage_type_id = 0x4cfbd8af;
		constexpr static std::string_view Type_type_name = "Type";
		constexpr static rivet::rivet_type_id Type_type_id = 0xbc4e9799;
		constexpr static std::string_view ForGamepad_type_name = "ForGamepad";
		constexpr static rivet::rivet_type_id ForGamepad_type_id = 0xc47c2ed2;
		constexpr static std::string_view ForMkb_type_name = "ForMkb";
		constexpr static rivet::rivet_type_id ForMkb_type_id = 0xd6b42783; 

		explicit UIOption() = default;
		explicit UIOption([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x33afe7f4 OptionID {};
		std::string_view Label {};
		std::string_view Description {};
		std::string_view DescriptionAlt {};
		std::string_view AccessibilityIcon {};
		std::string_view InputAnnotationIcon {};
		std::string_view PreviewImage {};
		std::shared_ptr<rivet::ddl::generated::UIOptionTypeBase> Type {};
		bool ForGamepad {};
		bool ForMkb {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIOption>;
	};
} // namespace rivet::ddl::generated

// clang-format on
