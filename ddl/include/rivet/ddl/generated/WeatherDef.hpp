// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct ParticlesDef;
	struct WindDef;
	struct WetSurfacesDef; 

	struct RIVET_DDL_SHARED WeatherDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "WeatherDef";
		constexpr static rivet::rivet_type_id type_id = 0x81305bd6;

		constexpr static std::string_view WeatherConstant_type_name = "WeatherConstant";
		constexpr static rivet::rivet_type_id WeatherConstant_type_id = 0xe1806535;
		constexpr static std::string_view WetSurfaces_type_name = "WetSurfaces";
		constexpr static rivet::rivet_type_id WetSurfaces_type_id = 0x862f855f;
		constexpr static std::string_view Particles_type_name = "Particles";
		constexpr static rivet::rivet_type_id Particles_type_id = 0x4ea8a676;
		constexpr static std::string_view Wind_type_name = "Wind";
		constexpr static rivet::rivet_type_id Wind_type_id = 0x119b944e; 

		explicit WeatherDef() = default;
		explicit WeatherDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float WeatherConstant {};
		std::shared_ptr<rivet::ddl::generated::WetSurfacesDef> WetSurfaces {};
		std::shared_ptr<rivet::ddl::generated::ParticlesDef> Particles {};
		std::shared_ptr<rivet::ddl::generated::WindDef> Wind {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeatherDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
