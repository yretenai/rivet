// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PrototypeButtonPressListenerPrius.hpp>

namespace rivet::ddl::generated {
	PrototypeButtonPressListenerPrius::PrototypeButtonPressListenerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Button = serialized->get_enum<rivet::ddl::generated::xe10f705b>(Button_type_id, rivet::ddl::generated::xe10f705b_values, rivet::ddl::generated::xe10f705b::Any);
		StartEnabled = serialized->get_bool(StartEnabled_type_id, true);
		TriggerCount = serialized->get_uint32(TriggerCount_type_id, 0);
		RetriggerDelay = serialized->get_float(RetriggerDelay_type_id, 1.000000);
		UseRange = serialized->get_float(UseRange_type_id, 3.000000);
		VolumeRange = serialized->get_bool(VolumeRange_type_id, true);
		TriggerOnHeld = serialized->get_bool(TriggerOnHeld_type_id, true); 
	}

	[[nodiscard]] auto
	PrototypeButtonPressListenerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PrototypeButtonPressListenerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PrototypeButtonPressListenerPrius> {
		if (incoming_type_id == PrototypeButtonPressListenerPrius::type_id) {
			return std::make_shared<PrototypeButtonPressListenerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
