// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/StructuredLoggingStringActionPrius.hpp>
#include <rivet/ddl/generated/StructuredLoggingActorPhysicsActionPrius.hpp>
#include <rivet/ddl/generated/StructuredLoggingPhysicsBreakableDiagnosticsActionPrius.hpp>
#include <rivet/ddl/generated/StructuredLoggingScaleActionPrius.hpp>
#include <rivet/ddl/generated/StructuredLoggingLogJointsActionPrius.hpp>
#include <rivet/ddl/generated/StructuredLoggingVectorActionPrius.hpp>
#include <rivet/ddl/generated/StructuredLoggingNumberActionPrius.hpp>
#include <rivet/ddl/generated/StructuredLoggingActorLooksDumpActionPrius.hpp>
#include <rivet/ddl/generated/StructuredLoggingTransformActionPrius.hpp>
#include <rivet/ddl/generated/StructuredLoggingPhysicsBodyDumpActionPrius.hpp> 

#include <rivet/ddl/generated/StructuredLoggingActionBase.hpp>

namespace rivet::ddl::generated {
	StructuredLoggingActionBase::StructuredLoggingActionBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VariableName = serialized->get_string(VariableName_type_id, {}); 
	}

	[[nodiscard]] auto
	StructuredLoggingActionBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	StructuredLoggingActionBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<StructuredLoggingActionBase> {
		if (incoming_type_id == StructuredLoggingActionBase::type_id) {
			return std::make_shared<StructuredLoggingActionBase>(serialized);
		}

		auto StructuredLoggingPhysicsBodyDumpActionPrius_ptr = StructuredLoggingPhysicsBodyDumpActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingPhysicsBodyDumpActionPrius_ptr != nullptr) {
			return StructuredLoggingPhysicsBodyDumpActionPrius_ptr;
		}

		auto StructuredLoggingActorLooksDumpActionPrius_ptr = StructuredLoggingActorLooksDumpActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingActorLooksDumpActionPrius_ptr != nullptr) {
			return StructuredLoggingActorLooksDumpActionPrius_ptr;
		}

		auto StructuredLoggingNumberActionPrius_ptr = StructuredLoggingNumberActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingNumberActionPrius_ptr != nullptr) {
			return StructuredLoggingNumberActionPrius_ptr;
		}

		auto StructuredLoggingVectorActionPrius_ptr = StructuredLoggingVectorActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingVectorActionPrius_ptr != nullptr) {
			return StructuredLoggingVectorActionPrius_ptr;
		}

		auto StructuredLoggingTransformActionPrius_ptr = StructuredLoggingTransformActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingTransformActionPrius_ptr != nullptr) {
			return StructuredLoggingTransformActionPrius_ptr;
		}

		auto StructuredLoggingScaleActionPrius_ptr = StructuredLoggingScaleActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingScaleActionPrius_ptr != nullptr) {
			return StructuredLoggingScaleActionPrius_ptr;
		}

		auto StructuredLoggingLogJointsActionPrius_ptr = StructuredLoggingLogJointsActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingLogJointsActionPrius_ptr != nullptr) {
			return StructuredLoggingLogJointsActionPrius_ptr;
		}

		auto StructuredLoggingPhysicsBreakableDiagnosticsActionPrius_ptr = StructuredLoggingPhysicsBreakableDiagnosticsActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingPhysicsBreakableDiagnosticsActionPrius_ptr != nullptr) {
			return StructuredLoggingPhysicsBreakableDiagnosticsActionPrius_ptr;
		}

		auto StructuredLoggingActorPhysicsActionPrius_ptr = StructuredLoggingActorPhysicsActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingActorPhysicsActionPrius_ptr != nullptr) {
			return StructuredLoggingActorPhysicsActionPrius_ptr;
		}

		auto StructuredLoggingStringActionPrius_ptr = StructuredLoggingStringActionPrius::from_substruct(incoming_type_id, serialized);
		if (StructuredLoggingStringActionPrius_ptr != nullptr) {
			return StructuredLoggingStringActionPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
