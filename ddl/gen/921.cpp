// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AimModOffCameraBeamPrius.hpp> 

#include <rivet/ddl/generated/AimModOffCameraPrius.hpp>

namespace rivet::ddl::generated {
	AimModOffCameraPrius::AimModOffCameraPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): AimModifierPrius(serialized) {
		MissTime = serialized->get_float(MissTime_type_id);
		MissDist = serialized->get_float(MissDist_type_id); 
	}

	auto
	AimModOffCameraPrius::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	AimModOffCameraPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AimModOffCameraPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AimModOffCameraPrius> {
		if (incoming_type_id == AimModOffCameraPrius::type_id) {
			return std::make_shared<AimModOffCameraPrius>(serialized);
		}

		auto AimModOffCameraBeamPrius_ptr = AimModOffCameraBeamPrius::from_substruct(incoming_type_id, serialized);
		if (AimModOffCameraBeamPrius_ptr != nullptr) {
			return AimModOffCameraBeamPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
