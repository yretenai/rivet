// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct MaterialGraphDef;
	struct MaterialNodeLibraryList; 

	struct RIVET_DDL_SHARED MaterialGraphEngineItem : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "MaterialGraphEngineItem";
		constexpr static rivet::rivet_type_id type_id = 0x5384d94b;

		constexpr static std::string_view AssetPath_type_name = "AssetPath";
		constexpr static rivet::rivet_type_id AssetPath_type_id = 0xefa614b;
		constexpr static std::string_view Force_type_name = "Force";
		constexpr static rivet::rivet_type_id Force_type_id = 0x8e3b4fe9;
		constexpr static std::string_view ForceCounter_type_name = "ForceCounter";
		constexpr static rivet::rivet_type_id ForceCounter_type_id = 0x20b26178;
		constexpr static std::string_view MaterialNodeLibraryList_type_name = "MaterialNodeLibraryList";
		constexpr static rivet::rivet_type_id MaterialNodeLibraryList_type_id = 0x755953be;
		constexpr static std::string_view MaterialGraphDef_type_name = "MaterialGraphDef";
		constexpr static rivet::rivet_type_id MaterialGraphDef_type_id = 0xb67789c2; 

		explicit MaterialGraphEngineItem() = default;
		explicit MaterialGraphEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view AssetPath {};
		bool Force {};
		int32_t ForceCounter {};
		std::shared_ptr<rivet::ddl::generated::MaterialNodeLibraryList> MaterialNodeLibraryList {};
		std::shared_ptr<rivet::ddl::generated::MaterialGraphDef> MaterialGraphDef {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialGraphEngineItem>;
	};
} // namespace rivet::ddl::generated

// clang-format on
