// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraForwardTweak.hpp>
#include <rivet/ddl/generated/CameraSafeZoneTweak.hpp>
#include <rivet/ddl/generated/CameraPitchTweak.hpp>
#include <rivet/ddl/generated/CameraHeightTweak.hpp>
#include <rivet/ddl/generated/CameraDistanceTweak.hpp> 

#include <rivet/ddl/generated/CameraTweakerPrius.hpp>

namespace rivet::ddl::generated {
	CameraTweakerPrius::CameraTweakerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartActive = serialized->get_bool(StartActive_type_id);
		CasualModeOnly = serialized->get_bool(CasualModeOnly_type_id);
		DistanceTweak = serialized->unwrap_into<rivet::ddl::generated::CameraDistanceTweak>(DistanceTweak_type_id);
		HeightTweak = serialized->unwrap_into<rivet::ddl::generated::CameraHeightTweak>(HeightTweak_type_id);
		PitchTweak = serialized->unwrap_into<rivet::ddl::generated::CameraPitchTweak>(PitchTweak_type_id);
		ForwardTweak = serialized->unwrap_into<rivet::ddl::generated::CameraForwardTweak>(ForwardTweak_type_id);
		SafeZoneTweak = serialized->unwrap_into<rivet::ddl::generated::CameraSafeZoneTweak>(SafeZoneTweak_type_id); 
	}

	[[nodiscard]] auto
	CameraTweakerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CameraTweakerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraTweakerPrius> {
		if (incoming_type_id == CameraTweakerPrius::type_id) {
			return std::make_shared<CameraTweakerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
