// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MissionNodeBuiltGame.hpp> 

#include <rivet/ddl/generated/MissionNodeBuiltShared.hpp>

namespace rivet::ddl::generated {
	MissionNodeBuiltShared::MissionNodeBuiltShared([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		MissionName = serialized->get_string(MissionName_type_id);
		AllowAvailable = serialized->get_bool(AllowAvailable_type_id);
		ObjectiveGraph = serialized->get_string(ObjectiveGraph_type_id); 
	}

	[[nodiscard]] auto
	MissionNodeBuiltShared::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MissionNodeBuiltShared::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MissionNodeBuiltShared> {
		if (incoming_type_id == MissionNodeBuiltShared::type_id) {
			return std::make_shared<MissionNodeBuiltShared>(serialized);
		}

		auto MissionNodeBuiltGame_ptr = MissionNodeBuiltGame::from_substruct(incoming_type_id, serialized);
		if (MissionNodeBuiltGame_ptr != nullptr) {
			return MissionNodeBuiltGame_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
