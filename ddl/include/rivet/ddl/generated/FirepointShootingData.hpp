// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED FirepointShootingData : rivet::structures::rivet_ddl_base {
		constexpr const static std::string_view type_name = "FirepointShootingData";
		constexpr const static rivet::rivet_type_id type_id = 0x4e039efb;

		constexpr const static std::string_view MinRangedAttacksToReposition_type_name = "MinRangedAttacksToReposition";
		constexpr const static rivet::rivet_type_id MinRangedAttacksToReposition_type_id = 0x4ac59351;
		constexpr const static std::string_view MaxRangedAttacksToReposition_type_name = "MaxRangedAttacksToReposition";
		constexpr const static rivet::rivet_type_id MaxRangedAttacksToReposition_type_id = 0x1dcbc312;
		constexpr const static std::string_view MinRangedAttacksToReload_type_name = "MinRangedAttacksToReload";
		constexpr const static rivet::rivet_type_id MinRangedAttacksToReload_type_id = 0xfef12dd9;
		constexpr const static std::string_view MaxRangedAttacksToReload_type_name = "MaxRangedAttacksToReload";
		constexpr const static rivet::rivet_type_id MaxRangedAttacksToReload_type_id = 0x254e7e3e; 

		explicit FirepointShootingData() = default;
		explicit FirepointShootingData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		int32_t MinRangedAttacksToReposition {};
		int32_t MaxRangedAttacksToReposition {};
		int32_t MinRangedAttacksToReload {};
		int32_t MaxRangedAttacksToReload {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FirepointShootingData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
