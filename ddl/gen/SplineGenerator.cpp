// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SplineInstanceGenerator.hpp>
#include <rivet/ddl/generated/SplineSurfaceGenerator.hpp>
#include <rivet/ddl/generated/SplineModelGenerator.hpp>
#include <rivet/ddl/generated/SplineActorGenerator.hpp> 

#include <rivet/ddl/generated/SplineGenerator.hpp>

namespace rivet::ddl::generated {
	SplineGenerator::SplineGenerator([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		CurveFidelity = serialized->get_float(CurveFidelity_type_id, 0.010000f); 
	}

	[[nodiscard]] auto
	SplineGenerator::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SplineGenerator::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SplineGenerator> {
		if (incoming_type_id == SplineGenerator::type_id) {
			return std::make_shared<SplineGenerator>(serialized);
		}

		auto SplineActorGenerator_ptr = SplineActorGenerator::from_substruct(incoming_type_id, serialized);
		if (SplineActorGenerator_ptr != nullptr) {
			return SplineActorGenerator_ptr;
		}

		auto SplineModelGenerator_ptr = SplineModelGenerator::from_substruct(incoming_type_id, serialized);
		if (SplineModelGenerator_ptr != nullptr) {
			return SplineModelGenerator_ptr;
		}

		auto SplineSurfaceGenerator_ptr = SplineSurfaceGenerator::from_substruct(incoming_type_id, serialized);
		if (SplineSurfaceGenerator_ptr != nullptr) {
			return SplineSurfaceGenerator_ptr;
		}

		auto SplineInstanceGenerator_ptr = SplineInstanceGenerator::from_substruct(incoming_type_id, serialized);
		if (SplineInstanceGenerator_ptr != nullptr) {
			return SplineInstanceGenerator_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
