// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroMoverConfig.hpp>
#include <rivet/ddl/generated/MoverBodySize.hpp> 

#include <rivet/ddl/generated/MoverConfig.hpp>

namespace rivet::ddl::generated {
	MoverConfig::MoverConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		Gravity = serialized->get_float(Gravity_type_id);
		TerminalVelocity = serialized->get_float(TerminalVelocity_type_id);
		TurnGain = serialized->get_float(TurnGain_type_id);
		TurnDamp = serialized->get_float(TurnDamp_type_id);
		TurnSpeed = serialized->get_float(TurnSpeed_type_id);
		StepUpHeight = serialized->get_float(StepUpHeight_type_id);
		StepDownHeight = serialized->get_float(StepDownHeight_type_id);
		GoodGroundSlope = serialized->get_float(GoodGroundSlope_type_id);
		ExternalMotionExtraGroundTime = serialized->get_float(ExternalMotionExtraGroundTime_type_id);
		MaxHeightFail = serialized->get_float(MaxHeightFail_type_id);
		OrientGain = serialized->get_float(OrientGain_type_id);
		OrientDamp = serialized->get_float(OrientDamp_type_id);
		DefaultBodySize = serialized->unwrap_into<rivet::ddl::generated::MoverBodySize>(DefaultBodySize_type_id); 
	}

	[[nodiscard]] auto
	MoverConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MoverConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MoverConfig> {
		if (incoming_type_id == MoverConfig::type_id) {
			return std::make_shared<MoverConfig>(serialized);
		}

		auto HeroMoverConfig_ptr = HeroMoverConfig::from_substruct(incoming_type_id, serialized);
		if (HeroMoverConfig_ptr != nullptr) {
			return HeroMoverConfig_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
