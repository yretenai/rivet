// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WeatherSettings.hpp>

namespace rivet::ddl::generated {
	WeatherSettings::WeatherSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		WeatherCellSize = serialized->get_float(WeatherCellSize_type_id, 5.000000f);
		WeatherGSplashAge = serialized->get_float(WeatherGSplashAge_type_id, 0.100000f);
		WeatherGSplashScale = serialized->get_float(WeatherGSplashScale_type_id, 1.000000f);
		WeatherGSplashColor = serialized->get_float(WeatherGSplashColor_type_id, 1.000000f);
		WeatherGSplashAlpha = serialized->get_float(WeatherGSplashAlpha_type_id, 0.500000f);
		WeatherGSplashNearFade = serialized->get_float(WeatherGSplashNearFade_type_id, 0.500000f);
		WeatherRippleThreshold = serialized->get_float(WeatherRippleThreshold_type_id, 0.100000f); 
	}

	[[nodiscard]] auto
	WeatherSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeatherSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeatherSettings> {
		if (incoming_type_id == WeatherSettings::type_id) {
			return std::make_shared<WeatherSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
