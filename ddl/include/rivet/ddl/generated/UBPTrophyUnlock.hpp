// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x1a26ec8e.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED UBPTrophyUnlock : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "UBPTrophyUnlock";
		constexpr static rivet::rivet_type_id type_id = 0xa7b69f85;

		constexpr static std::string_view comparator_type_name = "comparator";
		constexpr static rivet::rivet_type_id comparator_type_id = 0xa5dbf91a;
		constexpr static std::string_view targetValue_type_name = "targetValue";
		constexpr static rivet::rivet_type_id targetValue_type_id = 0x47cbcf96;
		constexpr static std::string_view udsStatName_type_name = "udsStatName";
		constexpr static rivet::rivet_type_id udsStatName_type_id = 0x2db15e82;
		constexpr static std::string_view isProgressive_type_name = "isProgressive";
		constexpr static rivet::rivet_type_id isProgressive_type_id = 0x6dba7288; 

		explicit UBPTrophyUnlock() = default;
		explicit UBPTrophyUnlock([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x1a26ec8e comparator {};
		std::string_view targetValue {};
		std::string_view udsStatName {};
		bool isProgressive {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UBPTrophyUnlock>;
	};
} // namespace rivet::ddl::generated

// clang-format on
