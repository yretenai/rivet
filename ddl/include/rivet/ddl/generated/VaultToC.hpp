// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED VaultToC : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VaultToC";
		constexpr static rivet::rivet_type_id type_id = 0x5da86d84;

		constexpr static std::string_view _id_type_name = "_id";
		constexpr static rivet::rivet_type_id _id_type_id = 0x7459aa19;
		constexpr static std::string_view Path_type_name = "Path";
		constexpr static rivet::rivet_type_id Path_type_id = 0x3bc44bbf;
		constexpr static std::string_view Dir_type_name = "Dir";
		constexpr static rivet::rivet_type_id Dir_type_id = 0x90fe53d9;
		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view Ext_type_name = "Ext";
		constexpr static rivet::rivet_type_id Ext_type_id = 0x2b86bfcb;
		constexpr static std::string_view Crtd_type_name = "Crtd";
		constexpr static rivet::rivet_type_id Crtd_type_id = 0x6ebee2cc;
		constexpr static std::string_view Mod_type_name = "Mod";
		constexpr static rivet::rivet_type_id Mod_type_id = 0x3da17a81;
		constexpr static std::string_view Time_type_name = "Time";
		constexpr static rivet::rivet_type_id Time_type_id = 0x5f0458f5;
		constexpr static std::string_view Stat_type_name = "Stat";
		constexpr static rivet::rivet_type_id Stat_type_id = 0x10283f91;
		constexpr static std::string_view Err_type_name = "Err";
		constexpr static rivet::rivet_type_id Err_type_id = 0x380af274; 

		explicit VaultToC() = default;
		explicit VaultToC([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t _id {};
		std::string_view Path {};
		std::string_view Dir {};
		std::string_view Name {};
		std::string_view Ext {};
		std::string_view Crtd {};
		std::string_view Mod {};
		std::string_view Time {};
		uint32_t Stat {};
		uint32_t Err {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VaultToC>;
	};
} // namespace rivet::ddl::generated

// clang-format on
