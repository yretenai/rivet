// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HeroMultiSpawnPointPrius.hpp>
#include <rivet/ddl/generated/GameHeroSingleSpawnPointPrius.hpp> 

#include <rivet/ddl/generated/HeroSingleSpawnPointPrius.hpp>

namespace rivet::ddl::generated {
	HeroSingleSpawnPointPrius::HeroSingleSpawnPointPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		AutoCheckpoint = serialized->get_bool(AutoCheckpoint_type_id, false);
		AutoCheckpointRadius = serialized->get_float(AutoCheckpointRadius_type_id, -1.000000);
		HasOpenSpace = serialized->get_bool(HasOpenSpace_type_id, true); 
	}

	[[nodiscard]] auto
	HeroSingleSpawnPointPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroSingleSpawnPointPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroSingleSpawnPointPrius> {
		if (incoming_type_id == HeroSingleSpawnPointPrius::type_id) {
			return std::make_shared<HeroSingleSpawnPointPrius>(serialized);
		}

		auto GameHeroSingleSpawnPointPrius_ptr = GameHeroSingleSpawnPointPrius::from_substruct(incoming_type_id, serialized);
		if (GameHeroSingleSpawnPointPrius_ptr != nullptr) {
			return GameHeroSingleSpawnPointPrius_ptr;
		}

		auto HeroMultiSpawnPointPrius_ptr = HeroMultiSpawnPointPrius::from_substruct(incoming_type_id, serialized);
		if (HeroMultiSpawnPointPrius_ptr != nullptr) {
			return HeroMultiSpawnPointPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
