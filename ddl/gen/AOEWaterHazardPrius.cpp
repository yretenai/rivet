// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AOEWaterHazardPrius.hpp>

namespace rivet::ddl::generated {
	AOEWaterHazardPrius::AOEWaterHazardPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TellRadius = serialized->get_float(TellRadius_type_id, 30.000000f);
		TriggerRadius = serialized->get_float(TriggerRadius_type_id, 5.000000f);
		DamageRadius = serialized->get_float(DamageRadius_type_id, 5.000000f);
		DamageDuration = serialized->get_float(DamageDuration_type_id, 1.000000f);
		CooldownTime = serialized->get_float(CooldownTime_type_id, 5.000000f);
		DamageAmount = serialized->get_float(DamageAmount_type_id, 30.000000f);
		DamageIgnoreDuration = serialized->get_float(DamageIgnoreDuration_type_id, 1.000000f);
		DamageType = serialized->get_enum<rivet::ddl::generated::DamageTypes>(DamageType_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::Explosion);
		DamageString = serialized->get_string(DamageString_type_id, {}); 
	}

	[[nodiscard]] auto
	AOEWaterHazardPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AOEWaterHazardPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AOEWaterHazardPrius> {
		if (incoming_type_id == AOEWaterHazardPrius::type_id) {
			return std::make_shared<AOEWaterHazardPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
