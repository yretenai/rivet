// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DamageKnockbackOverrideData.hpp> 

#include <rivet/ddl/generated/MeleeAttackData.hpp>

namespace rivet::ddl::generated {
	MeleeAttackData::MeleeAttackData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Index = serialized->get_enum<rivet::ddl::generated::xef932fba>(Index_type_id, rivet::ddl::generated::xef932fba_values, rivet::ddl::generated::xef932fba::None);
		HitAnim = serialized->get_string(HitAnim_type_id, {});
		DamageType = serialized->get_enum<rivet::ddl::generated::DamageTypes>(DamageType_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::Melee);
		Damage = serialized->get_float(Damage_type_id, 1.000000);
		AOE = serialized->get_float(AOE_type_id, 0.400000);
		Knockback = serialized->get_enum<rivet::ddl::generated::KnockbackLevels>(Knockback_type_id, rivet::ddl::generated::KnockbackLevels_values, rivet::ddl::generated::KnockbackLevels::None);
		KnockbackAmount = serialized->get_float(KnockbackAmount_type_id, 0.000000);
		OverrideKnockbackDist = serialized->get_float(OverrideKnockbackDist_type_id, -1.000000);
		DamageBubbleRadiusOverride = serialized->get_float(DamageBubbleRadiusOverride_type_id, -1.000000);
		IsDamageBubbleFullDuration = serialized->get_bool(IsDamageBubbleFullDuration_type_id, false);
		OverrideData = serialized->unwrap_into<rivet::ddl::generated::DamageKnockbackOverrideData>(OverrideData_type_id); 
	}

	[[nodiscard]] auto
	MeleeAttackData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MeleeAttackData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MeleeAttackData> {
		if (incoming_type_id == MeleeAttackData::type_id) {
			return std::make_shared<MeleeAttackData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
