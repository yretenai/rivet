// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct NodeGraphCollectionDef;
	struct VaultMetaData; 

	struct RIVET_DDL_SHARED BreakableDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "BreakableDef";
		constexpr static rivet::rivet_type_id type_id = 0xd8240b9a;

		constexpr static std::string_view VaultMetaData_type_name = "VaultMetaData";
		constexpr static rivet::rivet_type_id VaultMetaData_type_id = 0x37889aa;
		constexpr static std::string_view IconPath_type_name = "IconPath";
		constexpr static rivet::rivet_type_id IconPath_type_id = 0xbf5b007f;
		constexpr static std::string_view Foundation_type_name = "Foundation";
		constexpr static rivet::rivet_type_id Foundation_type_id = 0x84a54ba3;
		constexpr static std::string_view NodeGraphCollection_type_name = "NodeGraphCollection";
		constexpr static rivet::rivet_type_id NodeGraphCollection_type_id = 0xf79c0eb3;
		constexpr static std::string_view BreakableAssetList_type_name = "BreakableAssetList";
		constexpr static rivet::rivet_type_id BreakableAssetList_type_id = 0x3397c683; 

		explicit BreakableDef() = default;
		explicit BreakableDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::VaultMetaData> VaultMetaData {};
		std::string_view IconPath {};
		std::string_view Foundation {};
		std::shared_ptr<rivet::ddl::generated::NodeGraphCollectionDef> NodeGraphCollection {};
		std::vector<std::string_view> BreakableAssetList {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BreakableDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
