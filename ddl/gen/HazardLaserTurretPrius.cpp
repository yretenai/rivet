// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/HazardLaserTurretPrius.hpp>

namespace rivet::ddl::generated {
	HazardLaserTurretPrius::HazardLaserTurretPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		LaserStartLocName = serialized->get_string(LaserStartLocName_type_id);
		LaserEndLocName = serialized->get_string(LaserEndLocName_type_id);
		YawJointName = serialized->get_string(YawJointName_type_id);
		PitchJointName = serialized->get_string(PitchJointName_type_id);
		TurnSpeed = serialized->get_float(TurnSpeed_type_id);
		FOVAngle = serialized->get_float(FOVAngle_type_id);
		FireDelay = serialized->get_float(FireDelay_type_id);
		RangeDist = serialized->get_float(RangeDist_type_id);
		DPSAmt = serialized->get_float(DPSAmt_type_id);
		InnerAwareness = serialized->get_uint64(InnerAwareness_type_id);
		OuterAwareness = serialized->get_uint64(OuterAwareness_type_id);
		StartActive = serialized->get_bool(StartActive_type_id); 
	}

	[[nodiscard]] auto
	HazardLaserTurretPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HazardLaserTurretPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HazardLaserTurretPrius> {
		if (incoming_type_id == HazardLaserTurretPrius::type_id) {
			return std::make_shared<HazardLaserTurretPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
