// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SkinItemColorOverridePrius.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/SkinManagerColorPrius.hpp>

namespace rivet::ddl::generated {
	SkinManagerColorPrius::SkinManagerColorPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ColorConstantNameHash = serialized->get_uint32(ColorConstantNameHash_type_id, 0u);
		ColorValue = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(ColorValue_type_id);
		ColorConfigAssetId = serialized->get_uint64(ColorConfigAssetId_type_id, 0ull);
		ColorConfigNameHash = serialized->get_uint32(ColorConfigNameHash_type_id, 0u); 
	}

	[[nodiscard]] auto
	SkinManagerColorPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SkinManagerColorPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkinManagerColorPrius> {
		if (incoming_type_id == SkinManagerColorPrius::type_id) {
			return std::make_shared<SkinManagerColorPrius>(serialized);
		}

		auto SkinItemColorOverridePrius_ptr = SkinItemColorOverridePrius::from_substruct(incoming_type_id, serialized);
		if (SkinItemColorOverridePrius_ptr != nullptr) {
			return SkinItemColorOverridePrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
