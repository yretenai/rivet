// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CameraPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CameraPrius";
		constexpr static rivet::rivet_type_id type_id = 0xb95750d7;

		constexpr static std::string_view HorizontalFOV_type_name = "HorizontalFOV";
		constexpr static rivet::rivet_type_id HorizontalFOV_type_id = 0xc6a759d9;
		constexpr static std::string_view NearClip_type_name = "NearClip";
		constexpr static rivet::rivet_type_id NearClip_type_id = 0xef20b8c7;
		constexpr static std::string_view FarClip_type_name = "FarClip";
		constexpr static rivet::rivet_type_id FarClip_type_id = 0x180cce8c;
		constexpr static std::string_view HorizontalLength_type_name = "HorizontalLength";
		constexpr static rivet::rivet_type_id HorizontalLength_type_id = 0xfb44929f; 

		explicit CameraPrius() = default;
		explicit CameraPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float HorizontalFOV {};
		float NearClip {};
		float FarClip {};
		float HorizontalLength {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CameraPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
