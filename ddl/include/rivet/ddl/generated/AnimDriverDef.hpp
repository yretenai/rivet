// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/xc95d8425.hpp>
#include <rivet/ddl/generated/enums/x7c99d780.hpp> 

namespace rivet::ddl::generated {
	struct AnimDriverCommentDef;
	struct AnimDriverOpSmoothDef;
	struct AnimDriverOpClampDef;
	struct AnimDriverOpMulAddDef;
	struct AnimDriverFilterVarDef;
	struct DDLVector3;
	struct AnimDriverBiBlendNodeDef;
	struct AnimDriverMirrorNodeDef;
	struct AnimDriverPoseNodeDef;
	struct AnimDriverTriBlendNodeDef;
	struct AnimDriverBlendNodeDef;
	struct AnimDriverGroupNodeDef;
	struct AnimDriverGridNodeDef;
	struct AnimDriverClipNodeDef;
	struct AnimDriverRandomNodeDef;
	struct AnimDriverVarDef;
	struct AnimDriverSelectNodeDef;
	struct AnimDriverSequenceNodeDef;
	struct AnimDriverPerformanceNodeDef; 

	struct RIVET_DDL_SHARED AnimDriverDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimDriverDef";
		constexpr static rivet::rivet_type_id type_id = 0xd8f9f212;

		constexpr static std::string_view Id_type_name = "Id";
		constexpr static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr static std::string_view RootName_type_name = "RootName";
		constexpr static rivet::rivet_type_id RootName_type_id = 0x260d3d5c;
		constexpr static std::string_view RootIndex_type_name = "RootIndex";
		constexpr static rivet::rivet_type_id RootIndex_type_id = 0xd9b71e25;
		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view LayerType_type_name = "LayerType";
		constexpr static rivet::rivet_type_id LayerType_type_id = 0x6d91c682;
		constexpr static std::string_view Flags_type_name = "Flags";
		constexpr static rivet::rivet_type_id Flags_type_id = 0x12568d7b;
		constexpr static std::string_view LayerId_type_name = "LayerId";
		constexpr static rivet::rivet_type_id LayerId_type_id = 0xd7132e94;
		constexpr static std::string_view x_type_name = "x";
		constexpr static rivet::rivet_type_id x_type_id = 0x655d6145;
		constexpr static std::string_view y_type_name = "y";
		constexpr static rivet::rivet_type_id y_type_id = 0x125a51d3;
		constexpr static std::string_view x1_type_name = "x1";
		constexpr static rivet::rivet_type_id x1_type_id = 0x570de844;
		constexpr static std::string_view y1_type_name = "y1";
		constexpr static rivet::rivet_type_id y1_type_id = 0x4e16d905;
		constexpr static std::string_view Color_type_name = "Color";
		constexpr static rivet::rivet_type_id Color_type_id = 0x7f058428;
		constexpr static std::string_view ClipNodes_type_name = "ClipNodes";
		constexpr static rivet::rivet_type_id ClipNodes_type_id = 0x898c5a25;
		constexpr static std::string_view PoseNodes_type_name = "PoseNodes";
		constexpr static rivet::rivet_type_id PoseNodes_type_id = 0x2fb73da;
		constexpr static std::string_view BiBlendNodes_type_name = "BiBlendNodes";
		constexpr static rivet::rivet_type_id BiBlendNodes_type_id = 0xbd8a0826;
		constexpr static std::string_view TriBlendNodes_type_name = "TriBlendNodes";
		constexpr static rivet::rivet_type_id TriBlendNodes_type_id = 0x4389a930;
		constexpr static std::string_view BlendNodes_type_name = "BlendNodes";
		constexpr static rivet::rivet_type_id BlendNodes_type_id = 0x9dc0997c;
		constexpr static std::string_view SequenceNodes_type_name = "SequenceNodes";
		constexpr static rivet::rivet_type_id SequenceNodes_type_id = 0x83220fbc;
		constexpr static std::string_view RandomNodes_type_name = "RandomNodes";
		constexpr static rivet::rivet_type_id RandomNodes_type_id = 0x6d7a6d51;
		constexpr static std::string_view GridNodes_type_name = "GridNodes";
		constexpr static rivet::rivet_type_id GridNodes_type_id = 0x251668bd;
		constexpr static std::string_view SelectNodes_type_name = "SelectNodes";
		constexpr static rivet::rivet_type_id SelectNodes_type_id = 0xa43a03d4;
		constexpr static std::string_view MirrorNodes_type_name = "MirrorNodes";
		constexpr static rivet::rivet_type_id MirrorNodes_type_id = 0x4103242f;
		constexpr static std::string_view PerformanceNodes_type_name = "PerformanceNodes";
		constexpr static rivet::rivet_type_id PerformanceNodes_type_id = 0x82a2f1e;
		constexpr static std::string_view Vars_type_name = "Vars";
		constexpr static rivet::rivet_type_id Vars_type_id = 0xc2907a09;
		constexpr static std::string_view FilterVars_type_name = "FilterVars";
		constexpr static rivet::rivet_type_id FilterVars_type_id = 0x23bbd396;
		constexpr static std::string_view MulAddOps_type_name = "MulAddOps";
		constexpr static rivet::rivet_type_id MulAddOps_type_id = 0xe079afa9;
		constexpr static std::string_view ClampOps_type_name = "ClampOps";
		constexpr static rivet::rivet_type_id ClampOps_type_id = 0xd991bfc2;
		constexpr static std::string_view SmoothOps_type_name = "SmoothOps";
		constexpr static rivet::rivet_type_id SmoothOps_type_id = 0xd5d4a35;
		constexpr static std::string_view GroupNodes_type_name = "GroupNodes";
		constexpr static rivet::rivet_type_id GroupNodes_type_id = 0x73b55faa;
		constexpr static std::string_view Comments_type_name = "Comments";
		constexpr static rivet::rivet_type_id Comments_type_id = 0xa59f2b5a;
		constexpr static std::string_view TransitionDurationDefault_type_name = "TransitionDurationDefault";
		constexpr static rivet::rivet_type_id TransitionDurationDefault_type_id = 0x54af03ab;
		constexpr static std::string_view TransitionDurationFromNone_type_name = "TransitionDurationFromNone";
		constexpr static rivet::rivet_type_id TransitionDurationFromNone_type_id = 0xeb6a6262;
		constexpr static std::string_view TransitionDurationToNone_type_name = "TransitionDurationToNone";
		constexpr static rivet::rivet_type_id TransitionDurationToNone_type_id = 0x87c0415d;
		constexpr static std::string_view TransitionDurationSelf_type_name = "TransitionDurationSelf";
		constexpr static rivet::rivet_type_id TransitionDurationSelf_type_id = 0x7bf037b7; 

		explicit AnimDriverDef() = default;
		explicit AnimDriverDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t Id {};
		std::string_view RootName {};
		uint32_t RootIndex {};
		std::string_view Name {};
		rivet::ddl::generated::x7c99d780 LayerType {};
		rivet::ddl::generated::xc95d8425 Flags {};
		uint32_t LayerId {};
		float x {};
		float y {};
		float x1 {};
		float y1 {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> Color {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverClipNodeDef>> ClipNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverPoseNodeDef>> PoseNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverBiBlendNodeDef>> BiBlendNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverTriBlendNodeDef>> TriBlendNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverBlendNodeDef>> BlendNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverSequenceNodeDef>> SequenceNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverRandomNodeDef>> RandomNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverGridNodeDef>> GridNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverSelectNodeDef>> SelectNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverMirrorNodeDef>> MirrorNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverPerformanceNodeDef>> PerformanceNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverVarDef>> Vars {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverFilterVarDef>> FilterVars {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverOpMulAddDef>> MulAddOps {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverOpClampDef>> ClampOps {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverOpSmoothDef>> SmoothOps {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverGroupNodeDef>> GroupNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimDriverCommentDef>> Comments {};
		float TransitionDurationDefault {};
		float TransitionDurationFromNone {};
		float TransitionDurationToNone {};
		float TransitionDurationSelf {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimDriverDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
