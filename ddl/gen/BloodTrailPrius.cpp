// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BloodTrailPrius.hpp>

namespace rivet::ddl::generated {
	BloodTrailPrius::BloodTrailPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SplatFrequency = serialized->get_float(SplatFrequency_type_id, 0.500000f);
		MovingSplatFrequency = serialized->get_float(MovingSplatFrequency_type_id, 0.200000f);
		SpeedThreshold = serialized->get_float(SpeedThreshold_type_id, 1.000000f);
		RandOffset = serialized->get_float(RandOffset_type_id, 0.300000f);
		UseDamageTimer = serialized->get_bool(UseDamageTimer_type_id, true);
		MaxDuration = serialized->get_float(MaxDuration_type_id, 3.000000f);
		MaxDamage = serialized->get_float(MaxDamage_type_id, 30.000000f); 
	}

	[[nodiscard]] auto
	BloodTrailPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BloodTrailPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BloodTrailPrius> {
		if (incoming_type_id == BloodTrailPrius::type_id) {
			return std::make_shared<BloodTrailPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
