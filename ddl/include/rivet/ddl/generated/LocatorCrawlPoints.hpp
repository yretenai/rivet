// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED LocatorCrawlPoints : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "LocatorCrawlPoints";
		constexpr static rivet::rivet_type_id type_id = 0xfd2615c9;

		constexpr static std::string_view From_type_name = "From";
		constexpr static rivet::rivet_type_id From_type_id = 0x898a61c0;
		constexpr static std::string_view To_type_name = "To";
		constexpr static rivet::rivet_type_id To_type_id = 0xe2efff19;
		constexpr static std::string_view TimeToReach_type_name = "TimeToReach";
		constexpr static rivet::rivet_type_id TimeToReach_type_id = 0x94cabd78; 

		explicit LocatorCrawlPoints() = default;
		explicit LocatorCrawlPoints([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view From {};
		std::string_view To {};
		float TimeToReach {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LocatorCrawlPoints>;
	};
} // namespace rivet::ddl::generated

// clang-format on
