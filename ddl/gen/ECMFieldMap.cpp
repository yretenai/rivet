// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ECMField.hpp> 

#include <rivet/ddl/generated/ECMFieldMap.hpp>

namespace rivet::ddl::generated {
	ECMFieldMap::ECMFieldMap([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Source = serialized->unwrap_into<rivet::ddl::generated::ECMField>(Source_type_id);
		Dest = serialized->unwrap_into<rivet::ddl::generated::ECMField>(Dest_type_id);
		Op = serialized->get_enum<rivet::ddl::generated::x48fb1e07>(Op_type_id, rivet::ddl::generated::x48fb1e07_values); 
	}

	[[nodiscard]] auto
	ECMFieldMap::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ECMFieldMap::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ECMFieldMap> {
		if (incoming_type_id == ECMFieldMap::type_id) {
			return std::make_shared<ECMFieldMap>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
