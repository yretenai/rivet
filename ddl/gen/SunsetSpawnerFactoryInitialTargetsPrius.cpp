// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SunsetSpawnerFactoryInitialTargetsPrius.hpp>

namespace rivet::ddl::generated {
	SunsetSpawnerFactoryInitialTargetsPrius::SunsetSpawnerFactoryInitialTargetsPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TargetGroupHandle = serialized->get_uint32(TargetGroupHandle_type_id, 0u);
		TargetTime = serialized->get_float(TargetTime_type_id, 5.000000f);
		Aggro = serialized->get_float(Aggro_type_id, 100.000000f);
		WaitForIntro = serialized->get_bool(WaitForIntro_type_id, true);
		WaitForTargetsTargetable = serialized->get_bool(WaitForTargetsTargetable_type_id, true);
		TargetsUnlosable = serialized->get_bool(TargetsUnlosable_type_id, false); 
	}

	[[nodiscard]] auto
	SunsetSpawnerFactoryInitialTargetsPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SunsetSpawnerFactoryInitialTargetsPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SunsetSpawnerFactoryInitialTargetsPrius> {
		if (incoming_type_id == SunsetSpawnerFactoryInitialTargetsPrius::type_id) {
			return std::make_shared<SunsetSpawnerFactoryInitialTargetsPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
