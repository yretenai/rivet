// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RecoveryLedgeModeParams.hpp> 

#include <rivet/ddl/generated/HeroLedgeConfig.hpp>

namespace rivet::ddl::generated {
	HeroLedgeConfig::HeroLedgeConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FromGroundDistanceForward = serialized->get_float(FromGroundDistanceForward_type_id, 1.000000f);
		FromGroundDistanceSide = serialized->get_float(FromGroundDistanceSide_type_id, 1.000000f);
		FromGroundHeightMax = serialized->get_float(FromGroundHeightMax_type_id, 2.000000f);
		FromGroundHeightMin = serialized->get_float(FromGroundHeightMin_type_id, 1.600000f);
		FromGroundInputAngleTol = serialized->get_float(FromGroundInputAngleTol_type_id, 50.000000f);
		FromAirDistanceForward = serialized->get_float(FromAirDistanceForward_type_id, 1.000000f);
		FromAirDistanceSide = serialized->get_float(FromAirDistanceSide_type_id, 1.000000f);
		FromAirHeightMax = serialized->get_float(FromAirHeightMax_type_id, 2.000000f);
		FromAirHeightMin = serialized->get_float(FromAirHeightMin_type_id, 1.600000f);
		FromAirInputAngleTol = serialized->get_float(FromAirInputAngleTol_type_id, 50.000000f);
		FromLedgeDistanceForward = serialized->get_float(FromLedgeDistanceForward_type_id, 1.000000f);
		FromLedgeDistanceSide = serialized->get_float(FromLedgeDistanceSide_type_id, 1.000000f);
		FromLedgeHeightMax = serialized->get_float(FromLedgeHeightMax_type_id, 2.000000f);
		FromLedgeHeightMin = serialized->get_float(FromLedgeHeightMin_type_id, 1.600000f);
		FromLedgeInputAngleTol = serialized->get_float(FromLedgeInputAngleTol_type_id, 50.000000f);
		RecoveryFrontJumpParams = serialized->unwrap_into<rivet::ddl::generated::RecoveryLedgeModeParams>(RecoveryFrontJumpParams_type_id);
		RecoveryRunOffParams = serialized->unwrap_into<rivet::ddl::generated::RecoveryLedgeModeParams>(RecoveryRunOffParams_type_id);
		RecoveryKnockOffParams = serialized->unwrap_into<rivet::ddl::generated::RecoveryLedgeModeParams>(RecoveryKnockOffParams_type_id);
		RecoveryIntroDriver = serialized->get_string(RecoveryIntroDriver_type_id, {});
		RecoveryLoopDriver = serialized->get_string(RecoveryLoopDriver_type_id, {});
		RecoveryClimbDriver = serialized->get_string(RecoveryClimbDriver_type_id, {});
		RecoveryLetGoDriver = serialized->get_string(RecoveryLetGoDriver_type_id, {});
		RecoveryHandsLocator = serialized->get_string(RecoveryHandsLocator_type_id, {});
		RecoveryIKHandLocator = serialized->get_string(RecoveryIKHandLocator_type_id, {});
		RecoveryIKHandQueryMaxOffsetY = serialized->get_float(RecoveryIKHandQueryMaxOffsetY_type_id, 0.150000f);
		RecoveryIKHandQueryMinOffsetY = serialized->get_float(RecoveryIKHandQueryMinOffsetY_type_id, -0.250000f);
		RecoveryIKHandRadius = serialized->get_float(RecoveryIKHandRadius_type_id, 0.250000f); 
	}

	[[nodiscard]] auto
	HeroLedgeConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	HeroLedgeConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroLedgeConfig> {
		if (incoming_type_id == HeroLedgeConfig::type_id) {
			return std::make_shared<HeroLedgeConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
