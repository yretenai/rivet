// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct MayaScriptData;
	struct CodeData;
	struct HoudiniEngineData; 

	struct RIVET_DDL_SHARED Branch : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "Branch";
		constexpr static rivet::rivet_type_id type_id = 0x85fe5578;

		constexpr static std::string_view CodeBranches_type_name = "CodeBranches";
		constexpr static rivet::rivet_type_id CodeBranches_type_id = 0xa1772e58;
		constexpr static std::string_view MayaVersion_type_name = "MayaVersion";
		constexpr static rivet::rivet_type_id MayaVersion_type_id = 0xeeb2b4cc;
		constexpr static std::string_view BranchName_type_name = "BranchName";
		constexpr static rivet::rivet_type_id BranchName_type_id = 0xc44d190;
		constexpr static std::string_view Games_type_name = "Games";
		constexpr static rivet::rivet_type_id Games_type_id = 0xe670e7f0;
		constexpr static std::string_view HoudiniEngine_type_name = "HoudiniEngine";
		constexpr static rivet::rivet_type_id HoudiniEngine_type_id = 0x1c0b36be;
		constexpr static std::string_view Code_type_name = "Code";
		constexpr static rivet::rivet_type_id Code_type_id = 0x4785f028;
		constexpr static std::string_view MayaScripts_type_name = "MayaScripts";
		constexpr static rivet::rivet_type_id MayaScripts_type_id = 0x8cb0f031; 

		explicit Branch() = default;
		explicit Branch([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::string_view> CodeBranches {};
		std::string_view MayaVersion {};
		std::string_view BranchName {};
		std::vector<std::string_view> Games {};
		std::shared_ptr<rivet::ddl::generated::HoudiniEngineData> HoudiniEngine {};
		std::shared_ptr<rivet::ddl::generated::CodeData> Code {};
		std::vector<std::shared_ptr<rivet::ddl::generated::MayaScriptData>> MayaScripts {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Branch>;
	};
} // namespace rivet::ddl::generated

// clang-format on
