// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/NPCInfobotPrius.hpp>

namespace rivet::ddl::generated {
	NPCInfobotPrius::NPCInfobotPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FullMovieFile = serialized->get_string(FullMovieFile_type_id, {});
		SubtitleConfig = serialized->get_string(SubtitleConfig_type_id, {});
		FadeSoundAtEnd = serialized->get_bool(FadeSoundAtEnd_type_id, true);
		FadeInToMovie = serialized->get_bool(FadeInToMovie_type_id, true);
		FadeOutFromMovie = serialized->get_bool(FadeOutFromMovie_type_id, true);
		CamBlendInTime = serialized->get_float(CamBlendInTime_type_id, 2.000000f);
		CamBlendOutTime = serialized->get_float(CamBlendOutTime_type_id, 2.000000f);
		LockOutHero = serialized->get_bool(LockOutHero_type_id, true);
		AutoCollectAtEnd = serialized->get_bool(AutoCollectAtEnd_type_id, true); 
	}

	[[nodiscard]] auto
	NPCInfobotPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	NPCInfobotPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NPCInfobotPrius> {
		if (incoming_type_id == NPCInfobotPrius::type_id) {
			return std::make_shared<NPCInfobotPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
