// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ScriptVarNode.hpp>

namespace rivet::ddl::generated {
	ScriptVarNode::ScriptVarNode([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Id = serialized->get_uint64(Id_type_id);
		Name = serialized->get_string(Name_type_id);
		XPos = serialized->get_int32(XPos_type_id);
		YPos = serialized->get_int32(YPos_type_id);
		Editable = serialized->get_bool(Editable_type_id);
		GlobalName = serialized->get_string(GlobalName_type_id);
		Type = serialized->get_enum<rivet::ddl::generated::x36ed0644>(Type_type_id, rivet::ddl::generated::x36ed0644_values);
		BoolValue = serialized->get_bool(BoolValue_type_id);
		FloatValue = serialized->get_float(FloatValue_type_id);
		VecValue = serialized->get_floats(VecValue_type_id);
		StringValue = serialized->get_string(StringValue_type_id);
		ActorValue = serialized->get_uint64(ActorValue_type_id); 
	}

	[[nodiscard]] auto
	ScriptVarNode::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ScriptVarNode::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ScriptVarNode> {
		if (incoming_type_id == ScriptVarNode::type_id) {
			return std::make_shared<ScriptVarNode>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
