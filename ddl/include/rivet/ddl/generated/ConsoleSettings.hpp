// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED ConsoleSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ConsoleSettings";
		constexpr static rivet::rivet_type_id type_id = 0x9de11dd4;

		constexpr static std::string_view Enable_type_name = "Enable";
		constexpr static rivet::rivet_type_id Enable_type_id = 0xcdd88655;
		constexpr static std::string_view Font_type_name = "Font";
		constexpr static rivet::rivet_type_id Font_type_id = 0xe004c862;
		constexpr static std::string_view ForegroundColor_type_name = "ForegroundColor";
		constexpr static rivet::rivet_type_id ForegroundColor_type_id = 0xc18c46e8;
		constexpr static std::string_view BackgroundColor_type_name = "BackgroundColor";
		constexpr static rivet::rivet_type_id BackgroundColor_type_id = 0xcbda4a; 

		explicit ConsoleSettings() = default;
		explicit ConsoleSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		bool Enable {};
		std::string_view Font {};
		std::vector<uint8_t> ForegroundColor {};
		std::vector<uint8_t> BackgroundColor {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ConsoleSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
