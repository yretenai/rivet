// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SwingshotItemConfig.hpp>
#include <rivet/ddl/generated/GrindBootItemConfig.hpp>
#include <rivet/ddl/generated/HelipackItemConfig.hpp>
#include <rivet/ddl/generated/VersaGloveItemConfig.hpp>
#include <rivet/ddl/generated/MagBootItemConfig.hpp>
#include <rivet/ddl/generated/GlitchProjectorItemConfig.hpp>
#include <rivet/ddl/generated/PortalZipItemConfig.hpp>
#include <rivet/ddl/generated/MapOMaticItemConfig.hpp>
#include <rivet/ddl/generated/HoverbootItemConfig.hpp>
#include <rivet/ddl/generated/BoxBreakerItemConfig.hpp> 

#include <rivet/ddl/generated/GadgetItemConfig.hpp>

namespace rivet::ddl::generated {
	GadgetItemConfig::GadgetItemConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): GameItemConfig(serialized) {
		GadgetType = serialized->get_enum<rivet::ddl::generated::xce74edfb>(GadgetType_type_id, rivet::ddl::generated::xce74edfb_values, rivet::ddl::generated::xce74edfb::Omniboots); 
	}

	[[nodiscard]] auto
	GadgetItemConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GadgetItemConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GadgetItemConfig> {
		if (incoming_type_id == GadgetItemConfig::type_id) {
			return std::make_shared<GadgetItemConfig>(serialized);
		}

		auto BoxBreakerItemConfig_ptr = BoxBreakerItemConfig::from_substruct(incoming_type_id, serialized);
		if (BoxBreakerItemConfig_ptr != nullptr) {
			return BoxBreakerItemConfig_ptr;
		}

		auto HoverbootItemConfig_ptr = HoverbootItemConfig::from_substruct(incoming_type_id, serialized);
		if (HoverbootItemConfig_ptr != nullptr) {
			return HoverbootItemConfig_ptr;
		}

		auto MapOMaticItemConfig_ptr = MapOMaticItemConfig::from_substruct(incoming_type_id, serialized);
		if (MapOMaticItemConfig_ptr != nullptr) {
			return MapOMaticItemConfig_ptr;
		}

		auto MagBootItemConfig_ptr = MagBootItemConfig::from_substruct(incoming_type_id, serialized);
		if (MagBootItemConfig_ptr != nullptr) {
			return MagBootItemConfig_ptr;
		}

		auto HelipackItemConfig_ptr = HelipackItemConfig::from_substruct(incoming_type_id, serialized);
		if (HelipackItemConfig_ptr != nullptr) {
			return HelipackItemConfig_ptr;
		}

		auto PortalZipItemConfig_ptr = PortalZipItemConfig::from_substruct(incoming_type_id, serialized);
		if (PortalZipItemConfig_ptr != nullptr) {
			return PortalZipItemConfig_ptr;
		}

		auto GrindBootItemConfig_ptr = GrindBootItemConfig::from_substruct(incoming_type_id, serialized);
		if (GrindBootItemConfig_ptr != nullptr) {
			return GrindBootItemConfig_ptr;
		}

		auto SwingshotItemConfig_ptr = SwingshotItemConfig::from_substruct(incoming_type_id, serialized);
		if (SwingshotItemConfig_ptr != nullptr) {
			return SwingshotItemConfig_ptr;
		}

		auto GlitchProjectorItemConfig_ptr = GlitchProjectorItemConfig::from_substruct(incoming_type_id, serialized);
		if (GlitchProjectorItemConfig_ptr != nullptr) {
			return GlitchProjectorItemConfig_ptr;
		}

		auto VersaGloveItemConfig_ptr = VersaGloveItemConfig::from_substruct(incoming_type_id, serialized);
		if (VersaGloveItemConfig_ptr != nullptr) {
			return VersaGloveItemConfig_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
