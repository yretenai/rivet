// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MountAbilityNone.hpp>
#include <rivet/ddl/generated/MountAbilitySpeedBrake.hpp>
#include <rivet/ddl/generated/MountAbilityHexapodRewind.hpp>
#include <rivet/ddl/generated/MountAbilitySpeedBoost.hpp>
#include <rivet/ddl/generated/MountAbilityFireWeapon.hpp>
#include <rivet/ddl/generated/MountAbilityHexapodDash.hpp>
#include <rivet/ddl/generated/MountAbilityFlyGoto.hpp>
#include <rivet/ddl/generated/MountAbilityPlayAnim.hpp>
#include <rivet/ddl/generated/MountAbilityDismount.hpp> 

#include <rivet/ddl/generated/MountAbilityBase.hpp>

namespace rivet::ddl::generated {
	MountAbilityBase::MountAbilityBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		InputControls = serialized->get_enums<rivet::ddl::generated::xce61f0ef>(InputControls_type_id, rivet::ddl::generated::xce61f0ef_values); 
	}

	[[nodiscard]] auto
	MountAbilityBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MountAbilityBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MountAbilityBase> {
		if (incoming_type_id == MountAbilityBase::type_id) {
			return std::make_shared<MountAbilityBase>(serialized);
		}

		auto MountAbilitySpeedBoost_ptr = MountAbilitySpeedBoost::from_substruct(incoming_type_id, serialized);
		if (MountAbilitySpeedBoost_ptr != nullptr) {
			return MountAbilitySpeedBoost_ptr;
		}

		auto MountAbilityFireWeapon_ptr = MountAbilityFireWeapon::from_substruct(incoming_type_id, serialized);
		if (MountAbilityFireWeapon_ptr != nullptr) {
			return MountAbilityFireWeapon_ptr;
		}

		auto MountAbilityHexapodDash_ptr = MountAbilityHexapodDash::from_substruct(incoming_type_id, serialized);
		if (MountAbilityHexapodDash_ptr != nullptr) {
			return MountAbilityHexapodDash_ptr;
		}

		auto MountAbilityFlyGoto_ptr = MountAbilityFlyGoto::from_substruct(incoming_type_id, serialized);
		if (MountAbilityFlyGoto_ptr != nullptr) {
			return MountAbilityFlyGoto_ptr;
		}

		auto MountAbilityPlayAnim_ptr = MountAbilityPlayAnim::from_substruct(incoming_type_id, serialized);
		if (MountAbilityPlayAnim_ptr != nullptr) {
			return MountAbilityPlayAnim_ptr;
		}

		auto MountAbilityDismount_ptr = MountAbilityDismount::from_substruct(incoming_type_id, serialized);
		if (MountAbilityDismount_ptr != nullptr) {
			return MountAbilityDismount_ptr;
		}

		auto MountAbilityHexapodRewind_ptr = MountAbilityHexapodRewind::from_substruct(incoming_type_id, serialized);
		if (MountAbilityHexapodRewind_ptr != nullptr) {
			return MountAbilityHexapodRewind_ptr;
		}

		auto MountAbilityNone_ptr = MountAbilityNone::from_substruct(incoming_type_id, serialized);
		if (MountAbilityNone_ptr != nullptr) {
			return MountAbilityNone_ptr;
		}

		auto MountAbilitySpeedBrake_ptr = MountAbilitySpeedBrake::from_substruct(incoming_type_id, serialized);
		if (MountAbilitySpeedBrake_ptr != nullptr) {
			return MountAbilitySpeedBrake_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
