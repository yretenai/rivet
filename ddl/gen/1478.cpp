// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FinaleLaserSweepConfig.hpp>
#include <rivet/ddl/generated/BotComboLaserShotType.hpp> 

#include <rivet/ddl/generated/BotComboMoveFinaleLaserSweep.hpp>

namespace rivet::ddl::generated {
	BotComboMoveFinaleLaserSweep::BotComboMoveFinaleLaserSweep([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotComboMove(serialized) {
		LaserShotType = serialized->unwrap_into<rivet::ddl::generated::BotComboLaserShotType>(LaserShotType_type_id);
		LaserMaxLength = serialized->get_float(LaserMaxLength_type_id);
		SpawnedShotConfig = serialized->get_string(SpawnedShotConfig_type_id);
		CurveActorId = serialized->get_uint64(CurveActorId_type_id);
		MultiLaserSweepData = serialized->unwrap_into_many<rivet::ddl::generated::FinaleLaserSweepConfig>(MultiLaserSweepData_type_id);
		PortalActorAsset = serialized->get_string(PortalActorAsset_type_id);
		WeaponActorAsset = serialized->get_string(WeaponActorAsset_type_id);
		AttachCurveToTarget = serialized->get_bool(AttachCurveToTarget_type_id);
		AttachCurveTargetVol = serialized->get_uint64(AttachCurveTargetVol_type_id);
		PredictTarget = serialized->get_bool(PredictTarget_type_id);
		SweepCount = serialized->get_uint32(SweepCount_type_id);
		CancelOutOfVolume = serialized->get_bool(CancelOutOfVolume_type_id); 
	}

	auto
	BotComboMoveFinaleLaserSweep::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	BotComboMoveFinaleLaserSweep::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotComboMoveFinaleLaserSweep::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboMoveFinaleLaserSweep> {
		if (incoming_type_id == BotComboMoveFinaleLaserSweep::type_id) {
			return std::make_shared<BotComboMoveFinaleLaserSweep>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
