// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/VelocityFollowerData.hpp>

namespace rivet::ddl::generated {
	VelocityFollowerData::VelocityFollowerData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Enabled = serialized->get_bool(Enabled_type_id);
		MotionMode = serialized->get_enum<rivet::ddl::generated::x79dd0c33>(MotionMode_type_id, rivet::ddl::generated::x79dd0c33_values);
		DefaultPitch = serialized->get_float(DefaultPitch_type_id);
		SpeedTrigger = serialized->get_float(SpeedTrigger_type_id);
		PostInputDelay = serialized->get_float(PostInputDelay_type_id);
		SpeedMaxYaw = serialized->get_float(SpeedMaxYaw_type_id);
		SpeedMaxPitch = serialized->get_float(SpeedMaxPitch_type_id);
		AccelOrGain = serialized->get_float(AccelOrGain_type_id);
		AccelOrGainAccel = serialized->get_float(AccelOrGainAccel_type_id);
		DecelOrDamp = serialized->get_float(DecelOrDamp_type_id);
		DeadBackAngle = serialized->get_float(DeadBackAngle_type_id);
		DeadFrontAngle = serialized->get_float(DeadFrontAngle_type_id);
		PitchScaleUp = serialized->get_float(PitchScaleUp_type_id);
		PitchScaleDown = serialized->get_float(PitchScaleDown_type_id);
		MinYawPitchDiffTolerance = serialized->get_float(MinYawPitchDiffTolerance_type_id);
		MinSpeedTolerance = serialized->get_float(MinSpeedTolerance_type_id);
		MaxYawDiff = serialized->get_float(MaxYawDiff_type_id);
		MaxPitch = serialized->get_float(MaxPitch_type_id);
		MinPitch = serialized->get_float(MinPitch_type_id); 
	}

	auto
	VelocityFollowerData::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	VelocityFollowerData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	VelocityFollowerData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VelocityFollowerData> {
		if (incoming_type_id == VelocityFollowerData::type_id) {
			return std::make_shared<VelocityFollowerData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
