// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/BotComboMove.hpp> 

namespace rivet::ddl::generated {
	struct BotComboLaserShotType; 

	struct RIVET_DDL_SHARED BotComboLaserShot : BotComboMove {
		constexpr const static std::string_view type_name = "BotComboLaserShot";
		constexpr const static rivet::rivet_type_id type_id = 0x9e55c93c;

		constexpr const static std::string_view LaserMaxLength_type_name = "LaserMaxLength";
		constexpr const static rivet::rivet_type_id LaserMaxLength_type_id = 0x2d4d4979;
		constexpr const static std::string_view CurveActorId_type_name = "CurveActorId";
		constexpr const static rivet::rivet_type_id CurveActorId_type_id = 0xbef6b0d3;
		constexpr const static std::string_view DisableHitReactPartialsDuringAttack_type_name = "DisableHitReactPartialsDuringAttack";
		constexpr const static rivet::rivet_type_id DisableHitReactPartialsDuringAttack_type_id = 0x760d56f1;
		constexpr const static std::string_view SpawnedShotConfig_type_name = "SpawnedShotConfig";
		constexpr const static rivet::rivet_type_id SpawnedShotConfig_type_id = 0x7e9e8e66;
		constexpr const static std::string_view LaserShotType_type_name = "LaserShotType";
		constexpr const static rivet::rivet_type_id LaserShotType_type_id = 0x240dd6c; 

		explicit BotComboLaserShot() = default;
		explicit BotComboLaserShot([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float LaserMaxLength {};
		uint64_t CurveActorId {};
		bool DisableHitReactPartialsDuringAttack {};
		std::string_view SpawnedShotConfig {};
		std::shared_ptr<rivet::ddl::generated::BotComboLaserShotType> LaserShotType {}; 

		auto
		get_type_id() const noexcept -> rivet::rivet_type_id override;

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotComboLaserShot>;
	};
} // namespace rivet::ddl::generated

// clang-format on
