// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MaterialGraphNotes.hpp>
#include <rivet/ddl/generated/TessellationSettings.hpp>
#include <rivet/ddl/generated/PreviewModelContainer.hpp>
#include <rivet/ddl/generated/MaterialGraphComment.hpp>
#include <rivet/ddl/generated/MaterialGraphNode.hpp>
#include <rivet/ddl/generated/VaultMetaData.hpp> 

#include <rivet/ddl/generated/MaterialGraphDef.hpp>

namespace rivet::ddl::generated {
	MaterialGraphDef::MaterialGraphDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		VaultMetaData = serialized->unwrap_into<rivet::ddl::generated::VaultMetaData>(VaultMetaData_type_id);
		IconPath = serialized->get_string(IconPath_type_id, "");
		Usage = serialized->get_enum<rivet::ddl::generated::x5771f07c>(Usage_type_id, rivet::ddl::generated::x5771f07c_values, rivet::ddl::generated::x5771f07c::Model3D);
		Preview = serialized->get_enum<rivet::ddl::generated::x65877bb6>(Preview_type_id, rivet::ddl::generated::x65877bb6_values, rivet::ddl::generated::x65877bb6::Model);
		FrameGrabQuality = serialized->get_enum<rivet::ddl::generated::FrameGrabQuality>(FrameGrabQuality_type_id, rivet::ddl::generated::FrameGrabQuality_values, rivet::ddl::generated::FrameGrabQuality::Color_Half_Size);
		FrameGrabOversize = serialized->get_float(FrameGrabOversize_type_id, 0.000000);
		ScreenReflection = serialized->get_enum<rivet::ddl::generated::xd958924a>(ScreenReflection_type_id, rivet::ddl::generated::xd958924a_values, rivet::ddl::generated::xd958924a::Opaque_Only);
		LightScattering = serialized->get_bool(LightScattering_type_id, false);
		DoNotRayTrace = serialized->get_bool(DoNotRayTrace_type_id, false);
		CustomShadows = serialized->get_bool(CustomShadows_type_id, false);
		DisplacementFade = serialized->get_bool(DisplacementFade_type_id, true);
		LodDist = serialized->get_float(LodDist_type_id, 0.000000);
		PixelDepthOutput = serialized->get_bool(PixelDepthOutput_type_id, false);
		OverrideLinearDepth = serialized->get_bool(OverrideLinearDepth_type_id, false);
		OverrideHyperDepth = serialized->get_bool(OverrideHyperDepth_type_id, false);
		PreviewIdLow = serialized->get_uint32(PreviewIdLow_type_id, 0);
		PreviewIdHigh = serialized->get_uint32(PreviewIdHigh_type_id, 0);
		Nodes = serialized->unwrap_into_many<rivet::ddl::generated::MaterialGraphNode>(Nodes_type_id);
		Comments = serialized->unwrap_into_many<rivet::ddl::generated::MaterialGraphComment>(Comments_type_id);
		PreviewModel = serialized->unwrap_into<rivet::ddl::generated::PreviewModelContainer>(PreviewModel_type_id);
		TessSettings = serialized->unwrap_into<rivet::ddl::generated::TessellationSettings>(TessSettings_type_id);
		Notes = serialized->unwrap_into<rivet::ddl::generated::MaterialGraphNotes>(Notes_type_id);
		ModelSlotExclusion = serialized->get_strings(ModelSlotExclusion_type_id); 
	}

	[[nodiscard]] auto
	MaterialGraphDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	MaterialGraphDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialGraphDef> {
		if (incoming_type_id == MaterialGraphDef::type_id) {
			return std::make_shared<MaterialGraphDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
