// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TriggerEffectKeyFrameDataCustom.hpp>
#include <rivet/ddl/generated/TriggerEffectKeyFrameDataTime.hpp>
#include <rivet/ddl/generated/TriggerEffectKeyFrameDataPosition.hpp>
#include <rivet/ddl/generated/TriggerEffectKeyFrameBlendBase.hpp>
#include <rivet/ddl/generated/TriggerEffectDataBase.hpp> 

#include <rivet/ddl/generated/TriggerEffectKeyFrameDataBase.hpp>

namespace rivet::ddl::generated {
	TriggerEffectKeyFrameDataBase::TriggerEffectKeyFrameDataBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TriggerEffect = serialized->unwrap_into<rivet::ddl::generated::TriggerEffectDataBase>(TriggerEffect_type_id);
		BlendStyle = serialized->unwrap_into<rivet::ddl::generated::TriggerEffectKeyFrameBlendBase>(BlendStyle_type_id); 
	}

	[[nodiscard]] auto
	TriggerEffectKeyFrameDataBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TriggerEffectKeyFrameDataBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerEffectKeyFrameDataBase> {
		if (incoming_type_id == TriggerEffectKeyFrameDataBase::type_id) {
			return std::make_shared<TriggerEffectKeyFrameDataBase>(serialized);
		}

		auto TriggerEffectKeyFrameDataPosition_ptr = TriggerEffectKeyFrameDataPosition::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectKeyFrameDataPosition_ptr != nullptr) {
			return TriggerEffectKeyFrameDataPosition_ptr;
		}

		auto TriggerEffectKeyFrameDataTime_ptr = TriggerEffectKeyFrameDataTime::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectKeyFrameDataTime_ptr != nullptr) {
			return TriggerEffectKeyFrameDataTime_ptr;
		}

		auto TriggerEffectKeyFrameDataCustom_ptr = TriggerEffectKeyFrameDataCustom::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectKeyFrameDataCustom_ptr != nullptr) {
			return TriggerEffectKeyFrameDataCustom_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
