// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RobotTestActionEventInfo.hpp>

namespace rivet::ddl::generated {
	RobotTestActionEventInfo::RobotTestActionEventInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		UniqueId = serialized->get_uint32(UniqueId_type_id, 0);
		ShotPlayCount = serialized->get_uint32(ShotPlayCount_type_id, 0);
		EventType = serialized->get_enum<rivet::ddl::generated::x32784e2f>(EventType_type_id, rivet::ddl::generated::x32784e2f_values, rivet::ddl::generated::x32784e2f::EventSpawned);
		ActorName = serialized->get_string(ActorName_type_id, {});
		ActionType = serialized->get_string(ActionType_type_id, {});
		DurationType = serialized->get_string(DurationType_type_id, {});
		TypeDetailInfo = serialized->get_string(TypeDetailInfo_type_id, {}); 
	}

	[[nodiscard]] auto
	RobotTestActionEventInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RobotTestActionEventInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RobotTestActionEventInfo> {
		if (incoming_type_id == RobotTestActionEventInfo::type_id) {
			return std::make_shared<RobotTestActionEventInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
