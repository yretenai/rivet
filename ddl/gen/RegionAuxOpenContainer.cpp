// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/RegionFolderNode.hpp>
#include <rivet/ddl/generated/Region2DMapOverlay.hpp> 

#include <rivet/ddl/generated/RegionAuxOpenContainer.hpp>

namespace rivet::ddl::generated {
	RegionAuxOpenContainer::RegionAuxOpenContainer([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TileRadius = serialized->get_uint32(TileRadius_type_id, 0);
		LoadDistance = serialized->get_uint32(LoadDistance_type_id, 150);
		UnloadDistance = serialized->get_uint32(UnloadDistance_type_id, 170);
		MapOverlay = serialized->unwrap_into<rivet::ddl::generated::Region2DMapOverlay>(MapOverlay_type_id);
		Folders = serialized->unwrap_into_many<rivet::ddl::generated::RegionFolderNode>(Folders_type_id);
		ZoneAssetIdToFolder = serialized->get_uint64s(ZoneAssetIdToFolder_type_id);
		Zones = serialized->get_strings(Zones_type_id);
		NavFormat = serialized->get_enum<rivet::ddl::generated::x287f0b35>(NavFormat_type_id, rivet::ddl::generated::x287f0b35_values, rivet::ddl::generated::x287f0b35::Unit_tiles);
		NavExclusionZones = serialized->get_strings(NavExclusionZones_type_id);
		NavInclusionZones = serialized->get_strings(NavInclusionZones_type_id);
		Regions = serialized->get_strings(Regions_type_id); 
	}

	[[nodiscard]] auto
	RegionAuxOpenContainer::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	RegionAuxOpenContainer::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<RegionAuxOpenContainer> {
		if (incoming_type_id == RegionAuxOpenContainer::type_id) {
			return std::make_shared<RegionAuxOpenContainer>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
