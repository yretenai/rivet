// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/AllegianceRelation.hpp>
#include <rivet/ddl/generated/enums/x6bdf4ba1.hpp>
#include <rivet/ddl/generated/enums/xa3ea6fcb.hpp> 

namespace rivet::ddl::generated {
	struct InteractLocationApproachData;
	struct InteractLocationCameraSettings;
	struct InteractLocationPromptData; 

	struct RIVET_DDL_SHARED InteractLocationPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "InteractLocationPrius";
		constexpr static rivet::rivet_type_id type_id = 0xa000acde;

		constexpr static std::string_view LocIndex_type_name = "LocIndex";
		constexpr static rivet::rivet_type_id LocIndex_type_id = 0x6c69290d;
		constexpr static std::string_view RequireHold_type_name = "RequireHold";
		constexpr static rivet::rivet_type_id RequireHold_type_id = 0xe319acb7;
		constexpr static std::string_view HoldTime_type_name = "HoldTime";
		constexpr static rivet::rivet_type_id HoldTime_type_id = 0x1cb513d0;
		constexpr static std::string_view PromptData_type_name = "PromptData";
		constexpr static rivet::rivet_type_id PromptData_type_id = 0xd8ff0f39;
		constexpr static std::string_view ApproachData_type_name = "ApproachData";
		constexpr static rivet::rivet_type_id ApproachData_type_id = 0xf23fd5cf;
		constexpr static std::string_view Allegiance_type_name = "Allegiance";
		constexpr static rivet::rivet_type_id Allegiance_type_id = 0xd10c0c26;
		constexpr static std::string_view AllegianceRelation_type_name = "AllegianceRelation";
		constexpr static rivet::rivet_type_id AllegianceRelation_type_id = 0xc5336d41;
		constexpr static std::string_view CameraSettings_type_name = "CameraSettings";
		constexpr static rivet::rivet_type_id CameraSettings_type_id = 0xf7f1ab6e; 

		explicit InteractLocationPrius() = default;
		explicit InteractLocationPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::xa3ea6fcb LocIndex {};
		bool RequireHold {};
		float HoldTime {};
		std::shared_ptr<rivet::ddl::generated::InteractLocationPromptData> PromptData {};
		std::shared_ptr<rivet::ddl::generated::InteractLocationApproachData> ApproachData {};
		rivet::ddl::generated::x6bdf4ba1 Allegiance {};
		rivet::ddl::generated::AllegianceRelation AllegianceRelation {};
		std::shared_ptr<rivet::ddl::generated::InteractLocationCameraSettings> CameraSettings {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<InteractLocationPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
