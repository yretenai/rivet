// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TerrainSystem03EditingTerrain0411.hpp>

namespace rivet::ddl::generated {
	TerrainSystem03EditingTerrain0411::TerrainSystem03EditingTerrain0411([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		line00 = serialized->get_string(line00_type_id, {});
		line01 = serialized->get_string(line01_type_id, {});
		line03 = serialized->get_string(line03_type_id, {});
		line04 = serialized->get_string(line04_type_id, {});
		line05 = serialized->get_string(line05_type_id, {});
		line06 = serialized->get_string(line06_type_id, {});
		line07 = serialized->get_string(line07_type_id, {});
		line08 = serialized->get_string(line08_type_id, {});
		line09 = serialized->get_string(line09_type_id, {}); 
	}

	[[nodiscard]] auto
	TerrainSystem03EditingTerrain0411::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TerrainSystem03EditingTerrain0411::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TerrainSystem03EditingTerrain0411> {
		if (incoming_type_id == TerrainSystem03EditingTerrain0411::type_id) {
			return std::make_shared<TerrainSystem03EditingTerrain0411>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
