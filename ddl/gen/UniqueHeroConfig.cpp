// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/SpaceshipHeroConfig.hpp> 

#include <rivet/ddl/generated/UniqueHeroConfig.hpp>

namespace rivet::ddl::generated {
	UniqueHeroConfig::UniqueHeroConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		BodyScale = serialized->get_float(BodyScale_type_id);
		AimSourceOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(AimSourceOffset_type_id);
		ItemLoadoutConfig = serialized->get_string(ItemLoadoutConfig_type_id);
		HeroSkinConfig = serialized->get_string(HeroSkinConfig_type_id);
		HeroLevelConfig = serialized->get_string(HeroLevelConfig_type_id);
		WeaponLevelConfig = serialized->get_string(WeaponLevelConfig_type_id);
		EmergentVOConfig = serialized->get_string(EmergentVOConfig_type_id);
		VendorConfig = serialized->get_string(VendorConfig_type_id);
		TraversalConfig = serialized->get_string(TraversalConfig_type_id);
		LavaDamage = serialized->get_float(LavaDamage_type_id);
		TurretDamageFactor = serialized->get_float(TurretDamageFactor_type_id);
		QuicksandDeathTime = serialized->get_float(QuicksandDeathTime_type_id);
		ClankBotTossDist = serialized->get_float(ClankBotTossDist_type_id);
		PowerBotTossDist = serialized->get_float(PowerBotTossDist_type_id);
		SpringBotTossDist = serialized->get_float(SpringBotTossDist_type_id);
		StretchBotTossDist = serialized->get_float(StretchBotTossDist_type_id);
		BombBotTossDist = serialized->get_float(BombBotTossDist_type_id); 
	}

	[[nodiscard]] auto
	UniqueHeroConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UniqueHeroConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UniqueHeroConfig> {
		if (incoming_type_id == UniqueHeroConfig::type_id) {
			return std::make_shared<UniqueHeroConfig>(serialized);
		}

		auto SpaceshipHeroConfig_ptr = SpaceshipHeroConfig::from_substruct(incoming_type_id, serialized);
		if (SpaceshipHeroConfig_ptr != nullptr) {
			return SpaceshipHeroConfig_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
