// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ECMResponse.hpp>
#include <rivet/ddl/generated/ECMSelector.hpp> 

#include <rivet/ddl/generated/ECMFilter.hpp>

namespace rivet::ddl::generated {
	ECMFilter::ECMFilter([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Name = serialized->get_string(Name_type_id);
		ContinueType = serialized->get_enum<rivet::ddl::generated::x97f06575>(ContinueType_type_id, rivet::ddl::generated::x97f06575_values);
		Scope = serialized->get_enum<rivet::ddl::generated::x3c7c71d2>(Scope_type_id, rivet::ddl::generated::x3c7c71d2_values);
		Selector = serialized->unwrap_into_many<rivet::ddl::generated::ECMSelector>(Selector_type_id);
		Response = serialized->unwrap_into_many<rivet::ddl::generated::ECMResponse>(Response_type_id);
		IsValid = serialized->get_bool(IsValid_type_id); 
	}

	[[nodiscard]] auto
	ECMFilter::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ECMFilter::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ECMFilter> {
		if (incoming_type_id == ECMFilter::type_id) {
			return std::make_shared<ECMFilter>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
