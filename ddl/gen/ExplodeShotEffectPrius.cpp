// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp>
#include <rivet/ddl/generated/DamageModifierExplosionPrius.hpp> 

#include <rivet/ddl/generated/ExplodeShotEffectPrius.hpp>

namespace rivet::ddl::generated {
	ExplodeShotEffectPrius::ExplodeShotEffectPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ScriptedShotEffectBasePrius(serialized) {
		ExplodeData = serialized->unwrap_into<rivet::ddl::generated::DamageModifierExplosionPrius>(ExplodeData_type_id);
		DamageType = serialized->get_enum<rivet::ddl::generated::DamageTypes>(DamageType_type_id, rivet::ddl::generated::DamageTypes_values, rivet::ddl::generated::DamageTypes::Explosion);
		DamageFlags = serialized->get_bitset<rivet::ddl::generated::x65d7dac2>(DamageFlags_type_id, rivet::ddl::generated::x65d7dac2_values, 0);
		DamageOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(DamageOffset_type_id);
		OffsetMode = serialized->get_enum<rivet::ddl::generated::xe1cdcd87>(OffsetMode_type_id, rivet::ddl::generated::xe1cdcd87_values, rivet::ddl::generated::xe1cdcd87::Local);
		Impulse = serialized->get_float(Impulse_type_id, 0.000000);
		TriggerEvent = serialized->get_bool(TriggerEvent_type_id, true); 
	}

	[[nodiscard]] auto
	ExplodeShotEffectPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ExplodeShotEffectPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ExplodeShotEffectPrius> {
		if (incoming_type_id == ExplodeShotEffectPrius::type_id) {
			return std::make_shared<ExplodeShotEffectPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
