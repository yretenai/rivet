// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/OnHitFriendlyNodeDef.hpp>
#include <rivet/ddl/generated/OnHitEnvironmentNodeDef.hpp>
#include <rivet/ddl/generated/OnHitEnemyNodeDef.hpp>
#include <rivet/ddl/generated/OnHitNonFriendlyNodeDef.hpp> 

#include <rivet/ddl/generated/OnHitAnythingNodeDef.hpp>

namespace rivet::ddl::generated {
	OnHitAnythingNodeDef::OnHitAnythingNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): NodalShotEventNodeBaseDef(serialized) {

	}

	[[nodiscard]] auto
	OnHitAnythingNodeDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	OnHitAnythingNodeDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<OnHitAnythingNodeDef> {
		if (incoming_type_id == OnHitAnythingNodeDef::type_id) {
			return std::make_shared<OnHitAnythingNodeDef>(serialized);
		}

		auto OnHitNonFriendlyNodeDef_ptr = OnHitNonFriendlyNodeDef::from_substruct(incoming_type_id, serialized);
		if (OnHitNonFriendlyNodeDef_ptr != nullptr) {
			return OnHitNonFriendlyNodeDef_ptr;
		}

		auto OnHitEnemyNodeDef_ptr = OnHitEnemyNodeDef::from_substruct(incoming_type_id, serialized);
		if (OnHitEnemyNodeDef_ptr != nullptr) {
			return OnHitEnemyNodeDef_ptr;
		}

		auto OnHitEnvironmentNodeDef_ptr = OnHitEnvironmentNodeDef::from_substruct(incoming_type_id, serialized);
		if (OnHitEnvironmentNodeDef_ptr != nullptr) {
			return OnHitEnvironmentNodeDef_ptr;
		}

		auto OnHitFriendlyNodeDef_ptr = OnHitFriendlyNodeDef::from_substruct(incoming_type_id, serialized);
		if (OnHitFriendlyNodeDef_ptr != nullptr) {
			return OnHitFriendlyNodeDef_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
