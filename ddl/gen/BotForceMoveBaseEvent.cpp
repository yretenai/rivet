// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/BotShoveEvent.hpp>
#include <rivet/ddl/generated/BotFlingEvent.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/BotForceMoveBaseEvent.hpp>

namespace rivet::ddl::generated {
	BotForceMoveBaseEvent::BotForceMoveBaseEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		Direction = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Direction_type_id); 
	}

	[[nodiscard]] auto
	BotForceMoveBaseEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	BotForceMoveBaseEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<BotForceMoveBaseEvent> {
		if (incoming_type_id == BotForceMoveBaseEvent::type_id) {
			return std::make_shared<BotForceMoveBaseEvent>(serialized);
		}

		auto BotFlingEvent_ptr = BotFlingEvent::from_substruct(incoming_type_id, serialized);
		if (BotFlingEvent_ptr != nullptr) {
			return BotFlingEvent_ptr;
		}

		auto BotShoveEvent_ptr = BotShoveEvent::from_substruct(incoming_type_id, serialized);
		if (BotShoveEvent_ptr != nullptr) {
			return BotShoveEvent_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
