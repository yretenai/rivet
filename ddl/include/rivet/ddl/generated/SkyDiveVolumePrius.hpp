// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xd2417a1c.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED SkyDiveVolumePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "SkyDiveVolumePrius";
		constexpr static rivet::rivet_type_id type_id = 0x9118edfb;

		constexpr static std::string_view TargetVolume_type_name = "TargetVolume";
		constexpr static rivet::rivet_type_id TargetVolume_type_id = 0x4b2b87f8;
		constexpr static std::string_view DiveTime_type_name = "DiveTime";
		constexpr static rivet::rivet_type_id DiveTime_type_id = 0xb7e73be8;
		constexpr static std::string_view CameraDistance_type_name = "CameraDistance";
		constexpr static rivet::rivet_type_id CameraDistance_type_id = 0xe26912a;
		constexpr static std::string_view CameraOrientation_type_name = "CameraOrientation";
		constexpr static rivet::rivet_type_id CameraOrientation_type_id = 0x33140089;
		constexpr static std::string_view UseDiveCameraOffset_type_name = "UseDiveCameraOffset";
		constexpr static rivet::rivet_type_id UseDiveCameraOffset_type_id = 0xa87c4979; 

		explicit SkyDiveVolumePrius() = default;
		explicit SkyDiveVolumePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t TargetVolume {};
		float DiveTime {};
		float CameraDistance {};
		rivet::ddl::generated::xd2417a1c CameraOrientation {};
		bool UseDiveCameraOffset {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SkyDiveVolumePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
