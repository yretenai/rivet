// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DevstatsPrimarySegmentInfo.hpp>

namespace rivet::ddl::generated {
	DevstatsPrimarySegmentInfo::DevstatsPrimarySegmentInfo([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		PrimarySegmentId = serialized->get_string(PrimarySegmentId_type_id, {});
		ParentSegmentId = serialized->get_string(ParentSegmentId_type_id, {});
		PrimarySegmentType = serialized->get_enum<rivet::ddl::generated::xc6f5c0d7>(PrimarySegmentType_type_id, rivet::ddl::generated::xc6f5c0d7_values, rivet::ddl::generated::xc6f5c0d7::Playthrough);
		ParentSegmentType = serialized->get_enum<rivet::ddl::generated::xc6f5c0d7>(ParentSegmentType_type_id, rivet::ddl::generated::xc6f5c0d7_values, rivet::ddl::generated::xc6f5c0d7::Playthrough);
		PrimarySegmentName = serialized->get_string(PrimarySegmentName_type_id, {});
		PrimaryParentSegmentName = serialized->get_string(PrimaryParentSegmentName_type_id, {});
		PrimarySegmentTime = serialized->get_float(PrimarySegmentTime_type_id, 0.000000);
		PrimaryParentSegmentTime = serialized->get_float(PrimaryParentSegmentTime_type_id, 0.000000); 
	}

	[[nodiscard]] auto
	DevstatsPrimarySegmentInfo::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	DevstatsPrimarySegmentInfo::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<DevstatsPrimarySegmentInfo> {
		if (incoming_type_id == DevstatsPrimarySegmentInfo::type_id) {
			return std::make_shared<DevstatsPrimarySegmentInfo>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
