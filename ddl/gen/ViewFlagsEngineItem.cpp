// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ViewFlagsEngineItem.hpp>

namespace rivet::ddl::generated {
	ViewFlagsEngineItem::ViewFlagsEngineItem([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		WorldAxesEnabled = serialized->get_bool(WorldAxesEnabled_type_id);
		WorldGridEnabled = serialized->get_bool(WorldGridEnabled_type_id);
		KeyLightArrowEnabled = serialized->get_bool(KeyLightArrowEnabled_type_id);
		UVMapEnabled = serialized->get_bool(UVMapEnabled_type_id);
		MotionBlurEnabled = serialized->get_bool(MotionBlurEnabled_type_id);
		TemporalAntiAliasingEnabled = serialized->get_bool(TemporalAntiAliasingEnabled_type_id);
		ScreenSpaceReflectionEnabled = serialized->get_bool(ScreenSpaceReflectionEnabled_type_id);
		ScreenSpaceAmbientOcclusionEnabled = serialized->get_bool(ScreenSpaceAmbientOcclusionEnabled_type_id);
		ColorCorrectionEnabled = serialized->get_bool(ColorCorrectionEnabled_type_id);
		DepthOfFieldEnabled = serialized->get_bool(DepthOfFieldEnabled_type_id);
		DepthOfFieldMarkerEnabled = serialized->get_bool(DepthOfFieldMarkerEnabled_type_id);
		ChromaticAberrationEnabled = serialized->get_bool(ChromaticAberrationEnabled_type_id);
		WeatherEffectsEnabled = serialized->get_bool(WeatherEffectsEnabled_type_id);
		PostProcessEnabled = serialized->get_bool(PostProcessEnabled_type_id);
		ScreenFadeEnabled = serialized->get_bool(ScreenFadeEnabled_type_id); 
	}

	[[nodiscard]] auto
	ViewFlagsEngineItem::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ViewFlagsEngineItem::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ViewFlagsEngineItem> {
		if (incoming_type_id == ViewFlagsEngineItem::type_id) {
			return std::make_shared<ViewFlagsEngineItem>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
