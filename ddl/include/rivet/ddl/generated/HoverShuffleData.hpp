// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HoverShuffleData : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "HoverShuffleData";
		constexpr static rivet::rivet_type_id type_id = 0x5d8cb773;

		constexpr static std::string_view HoverShuffleMinRange_type_name = "HoverShuffleMinRange";
		constexpr static rivet::rivet_type_id HoverShuffleMinRange_type_id = 0x85acb5f5;
		constexpr static std::string_view HoverShuffleMaxRange_type_name = "HoverShuffleMaxRange";
		constexpr static rivet::rivet_type_id HoverShuffleMaxRange_type_id = 0x63cc1a14;
		constexpr static std::string_view HoverShuffleDistShortThreshold_type_name = "HoverShuffleDistShortThreshold";
		constexpr static rivet::rivet_type_id HoverShuffleDistShortThreshold_type_id = 0x75b71ad4;
		constexpr static std::string_view HoverShuffleDistMediumThreshold_type_name = "HoverShuffleDistMediumThreshold";
		constexpr static rivet::rivet_type_id HoverShuffleDistMediumThreshold_type_id = 0x824840c;
		constexpr static std::string_view HoverShuffleDesiredMoveSpeed_type_name = "HoverShuffleDesiredMoveSpeed";
		constexpr static rivet::rivet_type_id HoverShuffleDesiredMoveSpeed_type_id = 0x275ee12f; 

		explicit HoverShuffleData() = default;
		explicit HoverShuffleData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float HoverShuffleMinRange {};
		float HoverShuffleMaxRange {};
		float HoverShuffleDistShortThreshold {};
		float HoverShuffleDistMediumThreshold {};
		float HoverShuffleDesiredMoveSpeed {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HoverShuffleData>;
	};
} // namespace rivet::ddl::generated

// clang-format on
