// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/POIAttributeEdgeModeRing.hpp>
#include <rivet/ddl/generated/POIAttributeEdgeModeNone.hpp>
#include <rivet/ddl/generated/POIAttributeEdgeModeScreenEdge.hpp> 

#include <rivet/ddl/generated/POIAttributeEdgeModeBase.hpp>

namespace rivet::ddl::generated {
	POIAttributeEdgeModeBase::POIAttributeEdgeModeBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {

	}

	auto
	POIAttributeEdgeModeBase::get_type_id() const noexcept -> rivet::rivet_type_id {
		return type_id;
	}

	[[nodiscard]] auto
	POIAttributeEdgeModeBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	POIAttributeEdgeModeBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<POIAttributeEdgeModeBase> {
		if (incoming_type_id == POIAttributeEdgeModeBase::type_id) {
			return std::make_shared<POIAttributeEdgeModeBase>(serialized);
		}

		auto POIAttributeEdgeModeNone_ptr = POIAttributeEdgeModeNone::from_substruct(incoming_type_id, serialized);
		if (POIAttributeEdgeModeNone_ptr != nullptr) {
			return POIAttributeEdgeModeNone_ptr;
		}

		auto POIAttributeEdgeModeScreenEdge_ptr = POIAttributeEdgeModeScreenEdge::from_substruct(incoming_type_id, serialized);
		if (POIAttributeEdgeModeScreenEdge_ptr != nullptr) {
			return POIAttributeEdgeModeScreenEdge_ptr;
		}

		auto POIAttributeEdgeModeRing_ptr = POIAttributeEdgeModeRing::from_substruct(incoming_type_id, serialized);
		if (POIAttributeEdgeModeRing_ptr != nullptr) {
			return POIAttributeEdgeModeRing_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
