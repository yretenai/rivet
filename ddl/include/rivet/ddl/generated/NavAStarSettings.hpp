// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED NavAStarSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "NavAStarSettings";
		constexpr static rivet::rivet_type_id type_id = 0xa17cd505;

		constexpr static std::string_view EdgeMax_type_name = "EdgeMax";
		constexpr static rivet::rivet_type_id EdgeMax_type_id = 0xabfd835f;
		constexpr static std::string_view QueueMax_type_name = "QueueMax";
		constexpr static rivet::rivet_type_id QueueMax_type_id = 0x7e004787;
		constexpr static std::string_view LinkMax_type_name = "LinkMax";
		constexpr static rivet::rivet_type_id LinkMax_type_id = 0x6f34c010;
		constexpr static std::string_view LocalStoreSize_type_name = "LocalStoreSize";
		constexpr static rivet::rivet_type_id LocalStoreSize_type_id = 0x76b05498;
		constexpr static std::string_view MaxFindPathDistance_type_name = "MaxFindPathDistance";
		constexpr static rivet::rivet_type_id MaxFindPathDistance_type_id = 0x6ebe5680;
		constexpr static std::string_view ResultMax_type_name = "ResultMax";
		constexpr static rivet::rivet_type_id ResultMax_type_id = 0x46208816;
		constexpr static std::string_view NodeExpandMax_type_name = "NodeExpandMax";
		constexpr static rivet::rivet_type_id NodeExpandMax_type_id = 0x45517fb4; 

		explicit NavAStarSettings() = default;
		explicit NavAStarSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint16_t EdgeMax {};
		uint16_t QueueMax {};
		uint16_t LinkMax {};
		int32_t LocalStoreSize {};
		float MaxFindPathDistance {};
		uint16_t ResultMax {};
		uint16_t NodeExpandMax {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<NavAStarSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
