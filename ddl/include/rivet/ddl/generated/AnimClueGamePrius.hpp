// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimClueGamePrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimClueGamePrius";
		constexpr static rivet::rivet_type_id type_id = 0xc60af4ec;

		constexpr static std::string_view DelayAfterUse_type_name = "DelayAfterUse";
		constexpr static rivet::rivet_type_id DelayAfterUse_type_id = 0x28e62610;
		constexpr static std::string_view SkipAlertAnim_type_name = "SkipAlertAnim";
		constexpr static rivet::rivet_type_id SkipAlertAnim_type_id = 0x88656e30;
		constexpr static std::string_view RandomStart_type_name = "RandomStart";
		constexpr static rivet::rivet_type_id RandomStart_type_id = 0xef3e3d22; 

		explicit AnimClueGamePrius() = default;
		explicit AnimClueGamePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float DelayAfterUse {};
		bool SkipAlertAnim {};
		bool RandomStart {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimClueGamePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
