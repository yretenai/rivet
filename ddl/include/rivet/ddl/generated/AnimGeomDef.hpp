// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct VaultMetaData; 

	struct RIVET_DDL_SHARED AnimGeomDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimGeomDef";
		constexpr static rivet::rivet_type_id type_id = 0xc3727b56;

		constexpr static std::string_view VaultMetaData_type_name = "VaultMetaData";
		constexpr static rivet::rivet_type_id VaultMetaData_type_id = 0x37889aa;
		constexpr static std::string_view IconPath_type_name = "IconPath";
		constexpr static rivet::rivet_type_id IconPath_type_id = 0xbf5b007f;
		constexpr static std::string_view AbcFilename_type_name = "AbcFilename";
		constexpr static rivet::rivet_type_id AbcFilename_type_id = 0x67a294b9;
		constexpr static std::string_view FilterNodeName_type_name = "FilterNodeName";
		constexpr static rivet::rivet_type_id FilterNodeName_type_id = 0xa8a9ef53;
		constexpr static std::string_view StartFrame_type_name = "StartFrame";
		constexpr static rivet::rivet_type_id StartFrame_type_id = 0xcd935029;
		constexpr static std::string_view EndFrame_type_name = "EndFrame";
		constexpr static rivet::rivet_type_id EndFrame_type_id = 0xfddf52e6;
		constexpr static std::string_view IsLooping_type_name = "IsLooping";
		constexpr static rivet::rivet_type_id IsLooping_type_id = 0xd3118ad1; 

		explicit AnimGeomDef() = default;
		explicit AnimGeomDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::VaultMetaData> VaultMetaData {};
		std::string_view IconPath {};
		std::string_view AbcFilename {};
		std::string_view FilterNodeName {};
		int32_t StartFrame {};
		int32_t EndFrame {};
		bool IsLooping {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimGeomDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
