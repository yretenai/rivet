// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/Prims.hpp>

namespace rivet::ddl::generated {
	Prims::Prims([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		BOOL = serialized->get_bool(BOOL_type_id, true);
		F32 = serialized->get_float(F32_type_id, 9.000000f);
		F64 = serialized->get_double(F64_type_id, 102.400000);
		I8 = serialized->get_int8(I8_type_id, -8);
		I16 = serialized->get_int16(I16_type_id, 0u);
		I32 = serialized->get_int32(I32_type_id, 0u);
		I64 = serialized->get_int64(I64_type_id, 1099511627775u);
		U8 = serialized->get_uint8(U8_type_id, 250u);
		U16 = serialized->get_uint16(U16_type_id, 0u);
		U32 = serialized->get_uint32(U32_type_id, 1048575u);
		U64 = serialized->get_uint64(U64_type_id, 0ull); 
	}

	[[nodiscard]] auto
	Prims::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	Prims::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<Prims> {
		if (incoming_type_id == Prims::type_id) {
			return std::make_shared<Prims>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
