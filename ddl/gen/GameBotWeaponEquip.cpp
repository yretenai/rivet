// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameBotWeaponStream.hpp> 

#include <rivet/ddl/generated/GameBotWeaponEquip.hpp>

namespace rivet::ddl::generated {
	GameBotWeaponEquip::GameBotWeaponEquip([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): GameBotWeaponType(serialized) {
		AttachLocator = serialized->get_string(AttachLocator_type_id, "igLoc_gunAttach");
		FiringConfig = serialized->get_string(FiringConfig_type_id, {});
		ShootingConfig = serialized->get_string(ShootingConfig_type_id, {}); 
	}

	[[nodiscard]] auto
	GameBotWeaponEquip::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameBotWeaponEquip::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotWeaponEquip> {
		if (incoming_type_id == GameBotWeaponEquip::type_id) {
			return std::make_shared<GameBotWeaponEquip>(serialized);
		}

		auto GameBotWeaponStream_ptr = GameBotWeaponStream::from_substruct(incoming_type_id, serialized);
		if (GameBotWeaponStream_ptr != nullptr) {
			return GameBotWeaponStream_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
