// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED FlightAreaFirepointHunterPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "FlightAreaFirepointHunterPrius";
		constexpr static rivet::rivet_type_id type_id = 0x4fb123a8;

		constexpr static std::string_view MinPlanarDistance_type_name = "MinPlanarDistance";
		constexpr static rivet::rivet_type_id MinPlanarDistance_type_id = 0xc845686a;
		constexpr static std::string_view MaxPlanarDistance_type_name = "MaxPlanarDistance";
		constexpr static rivet::rivet_type_id MaxPlanarDistance_type_id = 0xddcebc98;
		constexpr static std::string_view MinVerticalOffset_type_name = "MinVerticalOffset";
		constexpr static rivet::rivet_type_id MinVerticalOffset_type_id = 0x175453fe;
		constexpr static std::string_view MaxElevationDegrees_type_name = "MaxElevationDegrees";
		constexpr static rivet::rivet_type_id MaxElevationDegrees_type_id = 0xd1ea2ea7;
		constexpr static std::string_view MaxTargetDistance_type_name = "MaxTargetDistance";
		constexpr static rivet::rivet_type_id MaxTargetDistance_type_id = 0xf9748b84;
		constexpr static std::string_view MinPosDelta_type_name = "MinPosDelta";
		constexpr static rivet::rivet_type_id MinPosDelta_type_id = 0xf086d8e1;
		constexpr static std::string_view MaxPosDelta_type_name = "MaxPosDelta";
		constexpr static rivet::rivet_type_id MaxPosDelta_type_id = 0x3c8ba3ee;
		constexpr static std::string_view PreferVolumeSwitch_type_name = "PreferVolumeSwitch";
		constexpr static rivet::rivet_type_id PreferVolumeSwitch_type_id = 0x65df8544;
		constexpr static std::string_view RatingLos_type_name = "RatingLos";
		constexpr static rivet::rivet_type_id RatingLos_type_id = 0x43264fa2;
		constexpr static std::string_view RatingLosError_type_name = "RatingLosError";
		constexpr static rivet::rivet_type_id RatingLosError_type_id = 0x743ac661;
		constexpr static std::string_view RatingDistance_type_name = "RatingDistance";
		constexpr static rivet::rivet_type_id RatingDistance_type_id = 0x20b81176;
		constexpr static std::string_view RatingDistanceError_type_name = "RatingDistanceError";
		constexpr static rivet::rivet_type_id RatingDistanceError_type_id = 0x9ac0caf7;
		constexpr static std::string_view RatingTargetDistance_type_name = "RatingTargetDistance";
		constexpr static rivet::rivet_type_id RatingTargetDistance_type_id = 0xc759faee;
		constexpr static std::string_view RatingElev_type_name = "RatingElev";
		constexpr static rivet::rivet_type_id RatingElev_type_id = 0xe22b7486;
		constexpr static std::string_view RatingElevError_type_name = "RatingElevError";
		constexpr static rivet::rivet_type_id RatingElevError_type_id = 0xd8952efe;
		constexpr static std::string_view RatingPositionDelta_type_name = "RatingPositionDelta";
		constexpr static rivet::rivet_type_id RatingPositionDelta_type_id = 0x59787f3b;
		constexpr static std::string_view RatingVolumeWeight_type_name = "RatingVolumeWeight";
		constexpr static rivet::rivet_type_id RatingVolumeWeight_type_id = 0xb63370d1; 

		explicit FlightAreaFirepointHunterPrius() = default;
		explicit FlightAreaFirepointHunterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float MinPlanarDistance {};
		float MaxPlanarDistance {};
		float MinVerticalOffset {};
		float MaxElevationDegrees {};
		float MaxTargetDistance {};
		float MinPosDelta {};
		float MaxPosDelta {};
		bool PreferVolumeSwitch {};
		float RatingLos {};
		float RatingLosError {};
		float RatingDistance {};
		float RatingDistanceError {};
		float RatingTargetDistance {};
		float RatingElev {};
		float RatingElevError {};
		float RatingPositionDelta {};
		float RatingVolumeWeight {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FlightAreaFirepointHunterPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
