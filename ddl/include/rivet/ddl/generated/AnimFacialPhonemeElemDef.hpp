// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x9c9e2a0a.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimFacialPhonemeElemDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimFacialPhonemeElemDef";
		constexpr static rivet::rivet_type_id type_id = 0x56a13942;

		constexpr static std::string_view Id_type_name = "Id";
		constexpr static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr static std::string_view PhonemeId_type_name = "PhonemeId";
		constexpr static rivet::rivet_type_id PhonemeId_type_id = 0x65bf2e7a;
		constexpr static std::string_view StartTime_type_name = "StartTime";
		constexpr static rivet::rivet_type_id StartTime_type_id = 0xc5bae2b;
		constexpr static std::string_view EndTime_type_name = "EndTime";
		constexpr static rivet::rivet_type_id EndTime_type_id = 0xf5a688c4;
		constexpr static std::string_view Weight_type_name = "Weight";
		constexpr static rivet::rivet_type_id Weight_type_id = 0x39b51b26; 

		explicit AnimFacialPhonemeElemDef() = default;
		explicit AnimFacialPhonemeElemDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t Id {};
		rivet::ddl::generated::x9c9e2a0a PhonemeId {};
		float StartTime {};
		float EndTime {};
		float Weight {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimFacialPhonemeElemDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
