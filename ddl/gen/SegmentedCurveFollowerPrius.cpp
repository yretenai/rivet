// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SegmentedCurveFollowerPrius.hpp>

namespace rivet::ddl::generated {
	SegmentedCurveFollowerPrius::SegmentedCurveFollowerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		JointNames = serialized->get_strings(JointNames_type_id);
		Acceleration = serialized->get_float(Acceleration_type_id);
		Deceleration = serialized->get_float(Deceleration_type_id);
		MaxSpeed = serialized->get_float(MaxSpeed_type_id);
		InitialCurve = serialized->get_uint64(InitialCurve_type_id);
		InitialCurveAutoStart = serialized->get_bool(InitialCurveAutoStart_type_id);
		DeleteAtEnd = serialized->get_bool(DeleteAtEnd_type_id);
		IgnoreDecelAtEnd = serialized->get_bool(IgnoreDecelAtEnd_type_id);
		KeepSpeedBetweenCurves = serialized->get_bool(KeepSpeedBetweenCurves_type_id);
		ExtendOffCurve = serialized->get_bool(ExtendOffCurve_type_id); 
	}

	[[nodiscard]] auto
	SegmentedCurveFollowerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SegmentedCurveFollowerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SegmentedCurveFollowerPrius> {
		if (incoming_type_id == SegmentedCurveFollowerPrius::type_id) {
			return std::make_shared<SegmentedCurveFollowerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
