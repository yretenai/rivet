// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/OutputPlugSignal.hpp>
#include <rivet/ddl/generated/InputPlugBoolean.hpp>
#include <rivet/ddl/generated/InputPlugSignal.hpp> 

#include <rivet/ddl/generated/CheckBoolNodeDef.hpp>

namespace rivet::ddl::generated {
	CheckBoolNodeDef::CheckBoolNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): LogicNodeBaseDef(serialized) {
		Check = serialized->unwrap_into<rivet::ddl::generated::InputPlugSignal>(Check_type_id);
		Bool = serialized->unwrap_into<rivet::ddl::generated::InputPlugBoolean>(Bool_type_id);
		True = serialized->unwrap_into<rivet::ddl::generated::OutputPlugSignal>(True_type_id);
		False = serialized->unwrap_into<rivet::ddl::generated::OutputPlugSignal>(False_type_id); 
	}

	[[nodiscard]] auto
	CheckBoolNodeDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CheckBoolNodeDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CheckBoolNodeDef> {
		if (incoming_type_id == CheckBoolNodeDef::type_id) {
			return std::make_shared<CheckBoolNodeDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
