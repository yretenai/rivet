// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct AnimMaterialComponentCineTextureDef;
	struct AnimMaterialComponentMorphOverrideDef;
	struct AnimMaterialComponentMapDef; 

	struct RIVET_DDL_SHARED AnimMaterialComponentPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimMaterialComponentPrius";
		constexpr static rivet::rivet_type_id type_id = 0xa6755243;

		constexpr static std::string_view MaterialMapList_type_name = "MaterialMapList";
		constexpr static rivet::rivet_type_id MaterialMapList_type_id = 0x2c9ec3f8;
		constexpr static std::string_view MorphOverrides_type_name = "MorphOverrides";
		constexpr static rivet::rivet_type_id MorphOverrides_type_id = 0xca303d91;
		constexpr static std::string_view CinematicTexture_type_name = "CinematicTexture";
		constexpr static rivet::rivet_type_id CinematicTexture_type_id = 0x7bfa1243;
		constexpr static std::string_view AlwaysUpdate_type_name = "AlwaysUpdate";
		constexpr static rivet::rivet_type_id AlwaysUpdate_type_id = 0x4e3b0091; 

		explicit AnimMaterialComponentPrius() = default;
		explicit AnimMaterialComponentPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::AnimMaterialComponentMapDef>> MaterialMapList {};
		std::vector<std::shared_ptr<rivet::ddl::generated::AnimMaterialComponentMorphOverrideDef>> MorphOverrides {};
		std::shared_ptr<rivet::ddl::generated::AnimMaterialComponentCineTextureDef> CinematicTexture {};
		bool AlwaysUpdate {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimMaterialComponentPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
