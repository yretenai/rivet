// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ExtermibotSprayShotPrius.hpp>
#include <rivet/ddl/generated/GrenadeShotPrius.hpp>
#include <rivet/ddl/generated/GrabbedActorShotPrius.hpp>
#include <rivet/ddl/generated/ShotThumperPrius.hpp>
#include <rivet/ddl/generated/ShotGloveOfDoomPrius.hpp>
#include <rivet/ddl/generated/ShotRYNOGrenadePrius.hpp>
#include <rivet/ddl/generated/ShotVolcanicEruptorPrius.hpp>
#include <rivet/ddl/generated/ShotSargassoCentipedeAODPrius.hpp>
#include <rivet/ddl/generated/ItemShotPrius.hpp>
#include <rivet/ddl/generated/ShotClankPuzzlePrius.hpp>
#include <rivet/ddl/generated/ShotMrFunGuyPrius.hpp> 

#include <rivet/ddl/generated/LobbedShotPrius.hpp>

namespace rivet::ddl::generated {
	LobbedShotPrius::LobbedShotPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BasicBulletPrius(serialized) {
		DealDamageOnFirstImpact = serialized->get_bool(DealDamageOnFirstImpact_type_id);
		DealDamageOnAllImpacts = serialized->get_bool(DealDamageOnAllImpacts_type_id);
		SendHitEventsOnFirstImpact = serialized->get_bool(SendHitEventsOnFirstImpact_type_id);
		SendHitEventsOnAllImpacts = serialized->get_bool(SendHitEventsOnAllImpacts_type_id);
		DestroyOnHit = serialized->get_bool(DestroyOnHit_type_id);
		DestroyOnLanded = serialized->get_bool(DestroyOnLanded_type_id);
		DestroyOnHitEnemy = serialized->get_bool(DestroyOnHitEnemy_type_id); 
	}

	[[nodiscard]] auto
	LobbedShotPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LobbedShotPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LobbedShotPrius> {
		if (incoming_type_id == LobbedShotPrius::type_id) {
			return std::make_shared<LobbedShotPrius>(serialized);
		}

		auto ExtermibotSprayShotPrius_ptr = ExtermibotSprayShotPrius::from_substruct(incoming_type_id, serialized);
		if (ExtermibotSprayShotPrius_ptr != nullptr) {
			return ExtermibotSprayShotPrius_ptr;
		}

		auto GrabbedActorShotPrius_ptr = GrabbedActorShotPrius::from_substruct(incoming_type_id, serialized);
		if (GrabbedActorShotPrius_ptr != nullptr) {
			return GrabbedActorShotPrius_ptr;
		}

		auto ShotGloveOfDoomPrius_ptr = ShotGloveOfDoomPrius::from_substruct(incoming_type_id, serialized);
		if (ShotGloveOfDoomPrius_ptr != nullptr) {
			return ShotGloveOfDoomPrius_ptr;
		}

		auto ShotThumperPrius_ptr = ShotThumperPrius::from_substruct(incoming_type_id, serialized);
		if (ShotThumperPrius_ptr != nullptr) {
			return ShotThumperPrius_ptr;
		}

		auto ShotVolcanicEruptorPrius_ptr = ShotVolcanicEruptorPrius::from_substruct(incoming_type_id, serialized);
		if (ShotVolcanicEruptorPrius_ptr != nullptr) {
			return ShotVolcanicEruptorPrius_ptr;
		}

		auto ShotSargassoCentipedeAODPrius_ptr = ShotSargassoCentipedeAODPrius::from_substruct(incoming_type_id, serialized);
		if (ShotSargassoCentipedeAODPrius_ptr != nullptr) {
			return ShotSargassoCentipedeAODPrius_ptr;
		}

		auto ItemShotPrius_ptr = ItemShotPrius::from_substruct(incoming_type_id, serialized);
		if (ItemShotPrius_ptr != nullptr) {
			return ItemShotPrius_ptr;
		}

		auto ShotRYNOGrenadePrius_ptr = ShotRYNOGrenadePrius::from_substruct(incoming_type_id, serialized);
		if (ShotRYNOGrenadePrius_ptr != nullptr) {
			return ShotRYNOGrenadePrius_ptr;
		}

		auto GrenadeShotPrius_ptr = GrenadeShotPrius::from_substruct(incoming_type_id, serialized);
		if (GrenadeShotPrius_ptr != nullptr) {
			return GrenadeShotPrius_ptr;
		}

		auto ShotClankPuzzlePrius_ptr = ShotClankPuzzlePrius::from_substruct(incoming_type_id, serialized);
		if (ShotClankPuzzlePrius_ptr != nullptr) {
			return ShotClankPuzzlePrius_ptr;
		}

		auto ShotMrFunGuyPrius_ptr = ShotMrFunGuyPrius::from_substruct(incoming_type_id, serialized);
		if (ShotMrFunGuyPrius_ptr != nullptr) {
			return ShotMrFunGuyPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
