// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimLookAtPrius.hpp> 

#include <rivet/ddl/generated/LookAtPrius.hpp>

namespace rivet::ddl::generated {
	LookAtPrius::LookAtPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EnabledComponentBasePrius(serialized) {
		LookAtAwareness = serialized->get_uint64(LookAtAwareness_type_id);
		LookAtRange = serialized->get_float(LookAtRange_type_id);
		TargetType = serialized->get_enum<rivet::ddl::generated::xf16844d6>(TargetType_type_id, rivet::ddl::generated::xf16844d6_values);
		TargetPriority = serialized->get_enum<rivet::ddl::generated::x7bee456>(TargetPriority_type_id, rivet::ddl::generated::x7bee456_values);
		SpecificTarget = serialized->get_uint64(SpecificTarget_type_id);
		TargetLocationType = serialized->get_enum<rivet::ddl::generated::x6729cb3b>(TargetLocationType_type_id, rivet::ddl::generated::x6729cb3b_values);
		TargetLocatorName = serialized->get_string(TargetLocatorName_type_id);
		TargetLocUpOffset = serialized->get_float(TargetLocUpOffset_type_id); 
	}

	[[nodiscard]] auto
	LookAtPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	LookAtPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LookAtPrius> {
		if (incoming_type_id == LookAtPrius::type_id) {
			return std::make_shared<LookAtPrius>(serialized);
		}

		auto AnimLookAtPrius_ptr = AnimLookAtPrius::from_substruct(incoming_type_id, serialized);
		if (AnimLookAtPrius_ptr != nullptr) {
			return AnimLookAtPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
