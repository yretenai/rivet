// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/LogoCustomData.hpp>
#include <rivet/ddl/generated/WeaponImageData.hpp>
#include <rivet/ddl/generated/VanityIconData.hpp>
#include <rivet/ddl/generated/PauseMapIconData.hpp>
#include <rivet/ddl/generated/ShortcutIconData.hpp>
#include <rivet/ddl/generated/GadgetIconData.hpp>
#include <rivet/ddl/generated/CollectibleImageData.hpp>
#include <rivet/ddl/generated/WeaponIconData.hpp> 

#include <rivet/ddl/generated/UIIconsConfig.hpp>

namespace rivet::ddl::generated {
	UIIconsConfig::UIIconsConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ConfigBase(serialized) {
		Weapons = serialized->unwrap_into_many<rivet::ddl::generated::WeaponIconData>(Weapons_type_id);
		Gadgets = serialized->unwrap_into_many<rivet::ddl::generated::GadgetIconData>(Gadgets_type_id);
		Shortcuts = serialized->unwrap_into_many<rivet::ddl::generated::ShortcutIconData>(Shortcuts_type_id);
		MapIcons = serialized->unwrap_into_many<rivet::ddl::generated::PauseMapIconData>(MapIcons_type_id);
		VanityIcons = serialized->unwrap_into_many<rivet::ddl::generated::VanityIconData>(VanityIcons_type_id);
		WeaponImages = serialized->unwrap_into_many<rivet::ddl::generated::WeaponImageData>(WeaponImages_type_id);
		CollectibleImages = serialized->unwrap_into_many<rivet::ddl::generated::CollectibleImageData>(CollectibleImages_type_id);
		LogoImage = serialized->get_string(LogoImage_type_id, "");
		CustomLogos = serialized->unwrap_into_many<rivet::ddl::generated::LogoCustomData>(CustomLogos_type_id); 
	}

	[[nodiscard]] auto
	UIIconsConfig::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UIIconsConfig::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIIconsConfig> {
		if (incoming_type_id == UIIconsConfig::type_id) {
			return std::make_shared<UIIconsConfig>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
