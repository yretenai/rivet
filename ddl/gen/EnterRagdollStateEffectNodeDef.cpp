// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/InputPlugFloat.hpp> 

#include <rivet/ddl/generated/EnterRagdollStateEffectNodeDef.hpp>

namespace rivet::ddl::generated {
	EnterRagdollStateEffectNodeDef::EnterRagdollStateEffectNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): NodalShotEffectNodeBaseDef(serialized) {
		ActorType = serialized->get_enum<rivet::ddl::generated::x684c6439>(ActorType_type_id, rivet::ddl::generated::x684c6439_values, rivet::ddl::generated::x684c6439::HitActor);
		Impulse = serialized->unwrap_into<rivet::ddl::generated::InputPlugFloat>(Impulse_type_id);
		Lifetime = serialized->unwrap_into<rivet::ddl::generated::InputPlugFloat>(Lifetime_type_id); 
	}

	[[nodiscard]] auto
	EnterRagdollStateEffectNodeDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	EnterRagdollStateEffectNodeDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EnterRagdollStateEffectNodeDef> {
		if (incoming_type_id == EnterRagdollStateEffectNodeDef::type_id) {
			return std::make_shared<EnterRagdollStateEffectNodeDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
