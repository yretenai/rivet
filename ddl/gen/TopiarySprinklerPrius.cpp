// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TopiarySprinklerPrius.hpp>

namespace rivet::ddl::generated {
	TopiarySprinklerPrius::TopiarySprinklerPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Owner = serialized->get_uint32(Owner_type_id);
		Weapon = serialized->get_uint32(Weapon_type_id);
		WeaponId = serialized->get_uint32(WeaponId_type_id);
		WeaponNameHash = serialized->get_uint32(WeaponNameHash_type_id);
		UpgradeVersion = serialized->get_uint8(UpgradeVersion_type_id);
		MaxActiveSprinklers = serialized->get_int8(MaxActiveSprinklers_type_id);
		Duration = serialized->get_float(Duration_type_id);
		SearchRadius = serialized->get_float(SearchRadius_type_id);
		StatusAmount = serialized->get_float(StatusAmount_type_id);
		TargetDuration = serialized->get_float(TargetDuration_type_id);
		TimeBetweenDamage = serialized->get_float(TimeBetweenDamage_type_id);
		TimeToRotate180 = serialized->get_float(TimeToRotate180_type_id);
		EveryNthWaterShotFlagged = serialized->get_uint32(EveryNthWaterShotFlagged_type_id);
		HealthDropConfig = serialized->get_string(HealthDropConfig_type_id);
		DropHealthOnBotDeath = serialized->get_bool(DropHealthOnBotDeath_type_id);
		StatusDamageAmount = serialized->get_float(StatusDamageAmount_type_id);
		IncomingDamageMultiplier = serialized->get_float(IncomingDamageMultiplier_type_id);
		OwnerAllegiance = serialized->get_enum<rivet::ddl::generated::x6bdf4ba1>(OwnerAllegiance_type_id, rivet::ddl::generated::x6bdf4ba1_values); 
	}

	[[nodiscard]] auto
	TopiarySprinklerPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TopiarySprinklerPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TopiarySprinklerPrius> {
		if (incoming_type_id == TopiarySprinklerPrius::type_id) {
			return std::make_shared<TopiarySprinklerPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
