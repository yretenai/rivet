// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x3afd25fe.hpp>
#include <rivet/ddl/generated/enums/x92dd42a2.hpp>
#include <rivet/ddl/generated/enums/MotionBlur.hpp>
#include <rivet/ddl/generated/enums/OverlapType.hpp> 

namespace rivet::ddl::generated {
	struct FurProperties;
	struct MaterialAlpha;
	struct MaterialNotes;
	struct PreviewModelContainer;
	struct ShaderSampler;
	struct WaterProperties;
	struct DDLVector3;
	struct ShaderConstant;
	struct VaultMetaData; 

	struct RIVET_DDL_SHARED MaterialDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "MaterialDef";
		constexpr static rivet::rivet_type_id type_id = 0x3c1c9f05;

		constexpr static std::string_view VaultMetaData_type_name = "VaultMetaData";
		constexpr static rivet::rivet_type_id VaultMetaData_type_id = 0x37889aa;
		constexpr static std::string_view IconPath_type_name = "IconPath";
		constexpr static rivet::rivet_type_id IconPath_type_id = 0xbf5b007f;
		constexpr static std::string_view HierarchicalAssetParent_type_name = "HierarchicalAssetParent";
		constexpr static rivet::rivet_type_id HierarchicalAssetParent_type_id = 0xa71e2658;
		constexpr static std::string_view ApprovedMaterialGraph_type_name = "ApprovedMaterialGraph";
		constexpr static rivet::rivet_type_id ApprovedMaterialGraph_type_id = 0xfffdf598;
		constexpr static std::string_view TemplatePath_type_name = "TemplatePath";
		constexpr static rivet::rivet_type_id TemplatePath_type_id = 0x8be88c69;
		constexpr static std::string_view OverlapType_type_name = "OverlapType";
		constexpr static rivet::rivet_type_id OverlapType_type_id = 0x5d6518ba;
		constexpr static std::string_view MotionBlur_type_name = "MotionBlur";
		constexpr static rivet::rivet_type_id MotionBlur_type_id = 0xea782a54;
		constexpr static std::string_view AVMaterial_type_name = "AVMaterial";
		constexpr static rivet::rivet_type_id AVMaterial_type_id = 0xe73ba957;
		constexpr static std::string_view AudioMaterial_type_name = "AudioMaterial";
		constexpr static rivet::rivet_type_id AudioMaterial_type_id = 0xf14e1df7;
		constexpr static std::string_view BuiltIn_type_name = "BuiltIn";
		constexpr static rivet::rivet_type_id BuiltIn_type_id = 0xe6db58e0;
		constexpr static std::string_view SSReflection_type_name = "SSReflection";
		constexpr static rivet::rivet_type_id SSReflection_type_id = 0x96cb64da;
		constexpr static std::string_view LodDist_type_name = "LodDist";
		constexpr static rivet::rivet_type_id LodDist_type_id = 0x458a5600;
		constexpr static std::string_view DoubleSided_type_name = "DoubleSided";
		constexpr static rivet::rivet_type_id DoubleSided_type_id = 0x3e799799;
		constexpr static std::string_view SkipShadowCast_type_name = "SkipShadowCast";
		constexpr static rivet::rivet_type_id SkipShadowCast_type_id = 0x40b0e1ca;
		constexpr static std::string_view ShadowCastOnly_type_name = "ShadowCastOnly";
		constexpr static rivet::rivet_type_id ShadowCastOnly_type_id = 0xcc51dbbf;
		constexpr static std::string_view CastOpaqueShadow_type_name = "CastOpaqueShadow";
		constexpr static rivet::rivet_type_id CastOpaqueShadow_type_id = 0x31b28fc3;
		constexpr static std::string_view SkipEmbeddedTest_type_name = "SkipEmbeddedTest";
		constexpr static rivet::rivet_type_id SkipEmbeddedTest_type_id = 0xe914d40a;
		constexpr static std::string_view SkipLightCapture_type_name = "SkipLightCapture";
		constexpr static rivet::rivet_type_id SkipLightCapture_type_id = 0x64ede99a;
		constexpr static std::string_view SkipRayTracedShadows_type_name = "SkipRayTracedShadows";
		constexpr static rivet::rivet_type_id SkipRayTracedShadows_type_id = 0xe6ce263e;
		constexpr static std::string_view UseAoOnDecals_type_name = "UseAoOnDecals";
		constexpr static rivet::rivet_type_id UseAoOnDecals_type_id = 0x99ce8a7c;
		constexpr static std::string_view HasAnimatedTexture_type_name = "HasAnimatedTexture";
		constexpr static rivet::rivet_type_id HasAnimatedTexture_type_id = 0xc2e7b7d6;
		constexpr static std::string_view LensFlareOcclusion_type_name = "LensFlareOcclusion";
		constexpr static rivet::rivet_type_id LensFlareOcclusion_type_id = 0x677f2340;
		constexpr static std::string_view SortTriangles_type_name = "SortTriangles";
		constexpr static rivet::rivet_type_id SortTriangles_type_id = 0x38ec511c;
		constexpr static std::string_view SkipImpostorPojection_type_name = "SkipImpostorPojection";
		constexpr static rivet::rivet_type_id SkipImpostorPojection_type_id = 0x12ebb90e;
		constexpr static std::string_view VoxelizationOrderBias_type_name = "VoxelizationOrderBias";
		constexpr static rivet::rivet_type_id VoxelizationOrderBias_type_id = 0x1e9fe88b;
		constexpr static std::string_view WorldMapColor_type_name = "WorldMapColor";
		constexpr static rivet::rivet_type_id WorldMapColor_type_id = 0x3498ff8a;
		constexpr static std::string_view ModelSlotExclusion_type_name = "ModelSlotExclusion";
		constexpr static rivet::rivet_type_id ModelSlotExclusion_type_id = 0x902ee427;
		constexpr static std::string_view PreviewModel_type_name = "PreviewModel";
		constexpr static rivet::rivet_type_id PreviewModel_type_id = 0x5e53ae29;
		constexpr static std::string_view Notes_type_name = "Notes";
		constexpr static rivet::rivet_type_id Notes_type_id = 0x18486a4d;
		constexpr static std::string_view AlphaProperties_type_name = "AlphaProperties";
		constexpr static rivet::rivet_type_id AlphaProperties_type_id = 0xa731268e;
		constexpr static std::string_view FurProperties_type_name = "FurProperties";
		constexpr static rivet::rivet_type_id FurProperties_type_id = 0xafa8e623;
		constexpr static std::string_view WaterProperties_type_name = "WaterProperties";
		constexpr static rivet::rivet_type_id WaterProperties_type_id = 0x1f51d4da;
		constexpr static std::string_view Variations_type_name = "Variations";
		constexpr static rivet::rivet_type_id Variations_type_id = 0x80850167;
		constexpr static std::string_view Constants_type_name = "Constants";
		constexpr static rivet::rivet_type_id Constants_type_id = 0x11306034;
		constexpr static std::string_view Textures_type_name = "Textures";
		constexpr static rivet::rivet_type_id Textures_type_id = 0x5f860466; 

		explicit MaterialDef() = default;
		explicit MaterialDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::shared_ptr<rivet::ddl::generated::VaultMetaData> VaultMetaData {};
		std::string_view IconPath {};
		std::string_view HierarchicalAssetParent {};
		std::string_view ApprovedMaterialGraph {};
		std::string_view TemplatePath {};
		rivet::ddl::generated::OverlapType OverlapType {};
		rivet::ddl::generated::MotionBlur MotionBlur {};
		std::string_view AVMaterial {};
		std::string_view AudioMaterial {};
		rivet::ddl::generated::x92dd42a2 BuiltIn {};
		rivet::ddl::generated::x3afd25fe SSReflection {};
		float LodDist {};
		bool DoubleSided {};
		bool SkipShadowCast {};
		bool ShadowCastOnly {};
		bool CastOpaqueShadow {};
		bool SkipEmbeddedTest {};
		bool SkipLightCapture {};
		bool SkipRayTracedShadows {};
		bool UseAoOnDecals {};
		bool HasAnimatedTexture {};
		bool LensFlareOcclusion {};
		bool SortTriangles {};
		bool SkipImpostorPojection {};
		int8_t VoxelizationOrderBias {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> WorldMapColor {};
		std::vector<std::string_view> ModelSlotExclusion {};
		std::shared_ptr<rivet::ddl::generated::PreviewModelContainer> PreviewModel {};
		std::shared_ptr<rivet::ddl::generated::MaterialNotes> Notes {};
		std::shared_ptr<rivet::ddl::generated::MaterialAlpha> AlphaProperties {};
		std::shared_ptr<rivet::ddl::generated::FurProperties> FurProperties {};
		std::shared_ptr<rivet::ddl::generated::WaterProperties> WaterProperties {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ShaderConstant>> Variations {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ShaderConstant>> Constants {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ShaderSampler>> Textures {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<MaterialDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
