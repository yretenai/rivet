// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SoundStateGroupDef.hpp>
#include <rivet/ddl/generated/SoundSwitchGroupDef.hpp>
#include <rivet/ddl/generated/SoundWwiseMapDef.hpp> 

#include <rivet/ddl/generated/SoundGameSyncDataDef.hpp>

namespace rivet::ddl::generated {
	SoundGameSyncDataDef::SoundGameSyncDataDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Triggers = serialized->unwrap_into_many<rivet::ddl::generated::SoundWwiseMapDef>(Triggers_type_id);
		StateGroups = serialized->unwrap_into_many<rivet::ddl::generated::SoundStateGroupDef>(StateGroups_type_id);
		SwitchGroups = serialized->unwrap_into_many<rivet::ddl::generated::SoundSwitchGroupDef>(SwitchGroups_type_id);
		GameParameters = serialized->unwrap_into_many<rivet::ddl::generated::SoundWwiseMapDef>(GameParameters_type_id);
		Environments = serialized->unwrap_into_many<rivet::ddl::generated::SoundWwiseMapDef>(Environments_type_id); 
	}

	[[nodiscard]] auto
	SoundGameSyncDataDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SoundGameSyncDataDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundGameSyncDataDef> {
		if (incoming_type_id == SoundGameSyncDataDef::type_id) {
			return std::make_shared<SoundGameSyncDataDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
