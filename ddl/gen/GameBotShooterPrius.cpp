// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GameBotShooterExtermibotPrius.hpp>
#include <rivet/ddl/generated/GameBotShooterConstructorBotPrius.hpp>
#include <rivet/ddl/generated/GameBotShooterJetPackPrius.hpp>
#include <rivet/ddl/generated/GameBotShooterTestDummyPrius.hpp>
#include <rivet/ddl/generated/GameBotShooterBlargBomberPrius.hpp>
#include <rivet/ddl/generated/GameBotShooterBlargSaucerPrius.hpp>
#include <rivet/ddl/generated/GameBotShooterSheepPrius.hpp> 

#include <rivet/ddl/generated/GameBotShooterPrius.hpp>

namespace rivet::ddl::generated {
	GameBotShooterPrius::GameBotShooterPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): GameBotShooterBasePrius(serialized) {

	}

	[[nodiscard]] auto
	GameBotShooterPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GameBotShooterPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GameBotShooterPrius> {
		if (incoming_type_id == GameBotShooterPrius::type_id) {
			return std::make_shared<GameBotShooterPrius>(serialized);
		}

		auto GameBotShooterSheepPrius_ptr = GameBotShooterSheepPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterSheepPrius_ptr != nullptr) {
			return GameBotShooterSheepPrius_ptr;
		}

		auto GameBotShooterBlargSaucerPrius_ptr = GameBotShooterBlargSaucerPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterBlargSaucerPrius_ptr != nullptr) {
			return GameBotShooterBlargSaucerPrius_ptr;
		}

		auto GameBotShooterBlargBomberPrius_ptr = GameBotShooterBlargBomberPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterBlargBomberPrius_ptr != nullptr) {
			return GameBotShooterBlargBomberPrius_ptr;
		}

		auto GameBotShooterTestDummyPrius_ptr = GameBotShooterTestDummyPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterTestDummyPrius_ptr != nullptr) {
			return GameBotShooterTestDummyPrius_ptr;
		}

		auto GameBotShooterJetPackPrius_ptr = GameBotShooterJetPackPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterJetPackPrius_ptr != nullptr) {
			return GameBotShooterJetPackPrius_ptr;
		}

		auto GameBotShooterConstructorBotPrius_ptr = GameBotShooterConstructorBotPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterConstructorBotPrius_ptr != nullptr) {
			return GameBotShooterConstructorBotPrius_ptr;
		}

		auto GameBotShooterExtermibotPrius_ptr = GameBotShooterExtermibotPrius::from_substruct(incoming_type_id, serialized);
		if (GameBotShooterExtermibotPrius_ptr != nullptr) {
			return GameBotShooterExtermibotPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
