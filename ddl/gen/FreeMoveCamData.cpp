// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/YawAndPitchData.hpp> 

#include <rivet/ddl/generated/FreeMoveCamData.hpp>

namespace rivet::ddl::generated {
	FreeMoveCamData::FreeMoveCamData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TetherDistance = serialized->get_float(TetherDistance_type_id, 15.000000f);
		MoveSpeed = serialized->get_float(MoveSpeed_type_id, 4.000000f);
		RiseSpeed = serialized->get_float(RiseSpeed_type_id, 3.000000f);
		Acceleration = serialized->get_float(Acceleration_type_id, 20.000000f);
		YawAndPitch = serialized->unwrap_into<rivet::ddl::generated::YawAndPitchData>(YawAndPitch_type_id);
		StickConfig = serialized->get_string(StickConfig_type_id, {}); 
	}

	[[nodiscard]] auto
	FreeMoveCamData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	FreeMoveCamData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<FreeMoveCamData> {
		if (incoming_type_id == FreeMoveCamData::type_id) {
			return std::make_shared<FreeMoveCamData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
