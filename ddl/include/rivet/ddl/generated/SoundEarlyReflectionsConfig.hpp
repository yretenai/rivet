// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x47d78dec.hpp>
#include <rivet/ddl/generated/enums/x5d0fe319.hpp>
#include <rivet/ddl/generated/enums/xfc5a3cb7.hpp>
#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct ReflectionProperty; 

	struct RIVET_DDL_SHARED SoundEarlyReflectionsConfig : ConfigBase {
		constexpr static std::string_view type_name = "SoundEarlyReflectionsConfig";
		constexpr static rivet::rivet_type_id type_id = 0xec3c1742;

		constexpr static std::string_view NumSamplesSqrt_type_name = "NumSamplesSqrt";
		constexpr static rivet::rivet_type_id NumSamplesSqrt_type_id = 0x6731fdae;
		constexpr static std::string_view SamplingRadius_type_name = "SamplingRadius";
		constexpr static rivet::rivet_type_id SamplingRadius_type_id = 0xb32efb1f;
		constexpr static std::string_view RayYawAngle_type_name = "RayYawAngle";
		constexpr static rivet::rivet_type_id RayYawAngle_type_id = 0x54dd1e10;
		constexpr static std::string_view SamplingPosition_type_name = "SamplingPosition";
		constexpr static rivet::rivet_type_id SamplingPosition_type_id = 0xa9ea2d3;
		constexpr static std::string_view Orientation_type_name = "Orientation";
		constexpr static rivet::rivet_type_id Orientation_type_id = 0xbb5c948d;
		constexpr static std::string_view GroundDistance_type_name = "GroundDistance";
		constexpr static rivet::rivet_type_id GroundDistance_type_id = 0x2b8faa58;
		constexpr static std::string_view VerticalRayOrientation_type_name = "VerticalRayOrientation";
		constexpr static rivet::rivet_type_id VerticalRayOrientation_type_id = 0xb8510fcf;
		constexpr static std::string_view VerticalRayDistance_type_name = "VerticalRayDistance";
		constexpr static rivet::rivet_type_id VerticalRayDistance_type_id = 0xe8751737;
		constexpr static std::string_view VerticalRayMaxRadius_type_name = "VerticalRayMaxRadius";
		constexpr static rivet::rivet_type_id VerticalRayMaxRadius_type_id = 0xf5059842;
		constexpr static std::string_view VerticalRayFilterSize_type_name = "VerticalRayFilterSize";
		constexpr static rivet::rivet_type_id VerticalRayFilterSize_type_id = 0x9d0203c7;
		constexpr static std::string_view CoefficientPolicy_type_name = "CoefficientPolicy";
		constexpr static rivet::rivet_type_id CoefficientPolicy_type_id = 0x6032a2fb;
		constexpr static std::string_view DefaultReflectionCoefficient_type_name = "DefaultReflectionCoefficient";
		constexpr static rivet::rivet_type_id DefaultReflectionCoefficient_type_id = 0xe3a2959a;
		constexpr static std::string_view ReflectionProperties_type_name = "ReflectionProperties";
		constexpr static rivet::rivet_type_id ReflectionProperties_type_id = 0x6e813bd5; 

		explicit SoundEarlyReflectionsConfig() = default;
		explicit SoundEarlyReflectionsConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint8_t NumSamplesSqrt {};
		float SamplingRadius {};
		float RayYawAngle {};
		rivet::ddl::generated::xfc5a3cb7 SamplingPosition {};
		rivet::ddl::generated::x5d0fe319 Orientation {};
		float GroundDistance {};
		rivet::ddl::generated::x5d0fe319 VerticalRayOrientation {};
		float VerticalRayDistance {};
		float VerticalRayMaxRadius {};
		uint16_t VerticalRayFilterSize {};
		rivet::ddl::generated::x47d78dec CoefficientPolicy {};
		float DefaultReflectionCoefficient {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ReflectionProperty>> ReflectionProperties {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SoundEarlyReflectionsConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
