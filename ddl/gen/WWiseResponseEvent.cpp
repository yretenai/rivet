// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WWiseResponseEvent.hpp>

namespace rivet::ddl::generated {
	WWiseResponseEvent::WWiseResponseEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ResponseEvent(serialized) {
		WwiseType = serialized->get_enum<rivet::ddl::generated::x5f40dd5c>(WwiseType_type_id, rivet::ddl::generated::x5f40dd5c_values, rivet::ddl::generated::x5f40dd5c::Parameter);
		WwiseActionName = serialized->get_string(WwiseActionName_type_id, {});
		GroupName = serialized->get_string(GroupName_type_id, {});
		Value = serialized->get_float(Value_type_id, 0.000000f);
		SwitchValue = serialized->get_string(SwitchValue_type_id, {}); 
	}

	[[nodiscard]] auto
	WWiseResponseEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WWiseResponseEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WWiseResponseEvent> {
		if (incoming_type_id == WWiseResponseEvent::type_id) {
			return std::make_shared<WWiseResponseEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
