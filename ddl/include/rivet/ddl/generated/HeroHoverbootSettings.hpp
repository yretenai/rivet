// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED HeroHoverbootSettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "HeroHoverbootSettings";
		constexpr static rivet::rivet_type_id type_id = 0x8ec44800;

		constexpr static std::string_view OverrideBaseSpeed_type_name = "OverrideBaseSpeed";
		constexpr static rivet::rivet_type_id OverrideBaseSpeed_type_id = 0x1a29aa11;
		constexpr static std::string_view OverrideKickExtraSpeedMax_type_name = "OverrideKickExtraSpeedMax";
		constexpr static rivet::rivet_type_id OverrideKickExtraSpeedMax_type_id = 0xe602e3cc;
		constexpr static std::string_view OverrideGoodKickBoost_type_name = "OverrideGoodKickBoost";
		constexpr static rivet::rivet_type_id OverrideGoodKickBoost_type_id = 0x2a5d633d;
		constexpr static std::string_view OverrideBadKickBoost_type_name = "OverrideBadKickBoost";
		constexpr static rivet::rivet_type_id OverrideBadKickBoost_type_id = 0x48df097c;
		constexpr static std::string_view UseSpeedOverrides_type_name = "UseSpeedOverrides";
		constexpr static rivet::rivet_type_id UseSpeedOverrides_type_id = 0x9031515a;
		constexpr static std::string_view UseTriggerResistance_type_name = "UseTriggerResistance";
		constexpr static rivet::rivet_type_id UseTriggerResistance_type_id = 0x69cf3196; 

		explicit HeroHoverbootSettings() = default;
		explicit HeroHoverbootSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float OverrideBaseSpeed {};
		float OverrideKickExtraSpeedMax {};
		float OverrideGoodKickBoost {};
		float OverrideBadKickBoost {};
		bool UseSpeedOverrides {};
		bool UseTriggerResistance {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<HeroHoverbootSettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
