// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SimpleMaterialSplinePrius.hpp>

namespace rivet::ddl::generated {
	SimpleMaterialSplinePrius::SimpleMaterialSplinePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Material = serialized->get_string(Material_type_id, {});
		Radius = serialized->get_float(Radius_type_id, 0.500000f);
		TilingDistance = serialized->get_float(TilingDistance_type_id, -1.000000f);
		SplineType = serialized->get_enum<rivet::ddl::generated::SplineTypes>(SplineType_type_id, rivet::ddl::generated::SplineTypes_values, rivet::ddl::generated::SplineTypes::CatmullRom);
		CanMove = serialized->get_bool(CanMove_type_id, false);
		SkipShadowCast = serialized->get_bool(SkipShadowCast_type_id, false); 
	}

	[[nodiscard]] auto
	SimpleMaterialSplinePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SimpleMaterialSplinePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SimpleMaterialSplinePrius> {
		if (incoming_type_id == SimpleMaterialSplinePrius::type_id) {
			return std::make_shared<SimpleMaterialSplinePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
