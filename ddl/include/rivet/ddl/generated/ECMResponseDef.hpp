// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct ECMCommentNodeDef;
	struct ECMFieldOpNodeDef;
	struct ECMInputNodeDef;
	struct ECMEffectNodeDef; 

	struct RIVET_DDL_SHARED ECMResponseDef : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "ECMResponseDef";
		constexpr static rivet::rivet_type_id type_id = 0x61365696;

		constexpr static std::string_view Id_type_name = "Id";
		constexpr static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr static std::string_view Index_type_name = "Index";
		constexpr static rivet::rivet_type_id Index_type_id = 0x9920abc0;
		constexpr static std::string_view Enabled_type_name = "Enabled";
		constexpr static rivet::rivet_type_id Enabled_type_id = 0x5113d8bc;
		constexpr static std::string_view Name_type_name = "Name";
		constexpr static rivet::rivet_type_id Name_type_id = 0x6eb3beb6;
		constexpr static std::string_view EffectNodes_type_name = "EffectNodes";
		constexpr static rivet::rivet_type_id EffectNodes_type_id = 0x9c603cc1;
		constexpr static std::string_view InputNodes_type_name = "InputNodes";
		constexpr static rivet::rivet_type_id InputNodes_type_id = 0x1982bfed;
		constexpr static std::string_view FieldOpNodes_type_name = "FieldOpNodes";
		constexpr static rivet::rivet_type_id FieldOpNodes_type_id = 0x2e2a59cb;
		constexpr static std::string_view CommentNodes_type_name = "CommentNodes";
		constexpr static rivet::rivet_type_id CommentNodes_type_id = 0x6461c08f; 

		explicit ECMResponseDef() = default;
		explicit ECMResponseDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t Id {};
		int32_t Index {};
		bool Enabled {};
		std::string_view Name {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ECMEffectNodeDef>> EffectNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ECMInputNodeDef>> InputNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ECMFieldOpNodeDef>> FieldOpNodes {};
		std::vector<std::shared_ptr<rivet::ddl::generated::ECMCommentNodeDef>> CommentNodes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ECMResponseDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
