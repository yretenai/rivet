// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/GrindCameraOverrideVolumePrius.hpp>

namespace rivet::ddl::generated {
	GrindCameraOverrideVolumePrius::GrindCameraOverrideVolumePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		HeroOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(HeroOffset_type_id);
		IsHeroOffsetAdditive = serialized->get_bool(IsHeroOffsetAdditive_type_id, true);
		CurveLookAheadDistance = serialized->get_float(CurveLookAheadDistance_type_id, 0.000000f);
		IsCurveLookAheadDistanceAdditive = serialized->get_bool(IsCurveLookAheadDistanceAdditive_type_id, true);
		LookAtActor = serialized->get_uint64(LookAtActor_type_id, 0ull);
		TargetOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(TargetOffset_type_id);
		IsTargetOffsetRelative = serialized->get_bool(IsTargetOffsetRelative_type_id, true);
		BlendInTime = serialized->get_float(BlendInTime_type_id, 0.250000f);
		BlendOutTime = serialized->get_float(BlendOutTime_type_id, 0.250000f); 
	}

	[[nodiscard]] auto
	GrindCameraOverrideVolumePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GrindCameraOverrideVolumePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GrindCameraOverrideVolumePrius> {
		if (incoming_type_id == GrindCameraOverrideVolumePrius::type_id) {
			return std::make_shared<GrindCameraOverrideVolumePrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
