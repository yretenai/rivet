// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/FastCurveFollowerAutoStopperPrius.hpp> 

#include <rivet/ddl/generated/CurveFollowerAutoStopperPrius.hpp>

namespace rivet::ddl::generated {
	CurveFollowerAutoStopperPrius::CurveFollowerAutoStopperPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		StartEnabled = serialized->get_bool(StartEnabled_type_id);
		StopDist = serialized->get_float(StopDist_type_id);
		LookAheadDist = serialized->get_float(LookAheadDist_type_id);
		OverrideAccel = serialized->get_bool(OverrideAccel_type_id);
		ResumeAccel = serialized->get_float(ResumeAccel_type_id);
		OneCollCheck = serialized->get_bool(OneCollCheck_type_id);
		StopCollCheckTime = serialized->get_float(StopCollCheckTime_type_id);
		ResumeDist = serialized->get_float(ResumeDist_type_id); 
	}

	[[nodiscard]] auto
	CurveFollowerAutoStopperPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CurveFollowerAutoStopperPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CurveFollowerAutoStopperPrius> {
		if (incoming_type_id == CurveFollowerAutoStopperPrius::type_id) {
			return std::make_shared<CurveFollowerAutoStopperPrius>(serialized);
		}

		auto FastCurveFollowerAutoStopperPrius_ptr = FastCurveFollowerAutoStopperPrius::from_substruct(incoming_type_id, serialized);
		if (FastCurveFollowerAutoStopperPrius_ptr != nullptr) {
			return FastCurveFollowerAutoStopperPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
