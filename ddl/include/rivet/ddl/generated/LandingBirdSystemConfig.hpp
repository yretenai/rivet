// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/ConfigBase.hpp> 

namespace rivet::ddl::generated {
	struct DimensionalPulseTargetFlockPrius;
	struct LandingBirdType; 

	struct RIVET_DDL_SHARED LandingBirdSystemConfig : ConfigBase {
		constexpr const static std::string_view type_name = "LandingBirdSystemConfig";
		constexpr const static rivet::rivet_type_id type_id = 0xe2d25465;

		constexpr const static std::string_view InitialLoadDelay_type_name = "InitialLoadDelay";
		constexpr const static rivet::rivet_type_id InitialLoadDelay_type_id = 0x6bc8e325;
		constexpr const static std::string_view PostFleeCooldown_type_name = "PostFleeCooldown";
		constexpr const static rivet::rivet_type_id PostFleeCooldown_type_id = 0x6ebd89a8;
		constexpr const static std::string_view MaxIdleSpeed_type_name = "MaxIdleSpeed";
		constexpr const static rivet::rivet_type_id MaxIdleSpeed_type_id = 0x40189a17;
		constexpr const static std::string_view IdleSpawnDelay_type_name = "IdleSpawnDelay";
		constexpr const static rivet::rivet_type_id IdleSpawnDelay_type_id = 0x7370d587;
		constexpr const static std::string_view LandCircleOffsetXZ_type_name = "LandCircleOffsetXZ";
		constexpr const static rivet::rivet_type_id LandCircleOffsetXZ_type_id = 0xafa9accd;
		constexpr const static std::string_view LandCircleRadiusXZ_type_name = "LandCircleRadiusXZ";
		constexpr const static rivet::rivet_type_id LandCircleRadiusXZ_type_id = 0xbf7ed98b;
		constexpr const static std::string_view MaxLandHeightDiff_type_name = "MaxLandHeightDiff";
		constexpr const static rivet::rivet_type_id MaxLandHeightDiff_type_id = 0x10f7a304;
		constexpr const static std::string_view MaxLandNormalAngle_type_name = "MaxLandNormalAngle";
		constexpr const static rivet::rivet_type_id MaxLandNormalAngle_type_id = 0xae60ccd2;
		constexpr const static std::string_view FleeDestroyOffscreenDelay_type_name = "FleeDestroyOffscreenDelay";
		constexpr const static rivet::rivet_type_id FleeDestroyOffscreenDelay_type_id = 0xc3bae185;
		constexpr const static std::string_view FleeFromPulses_type_name = "FleeFromPulses";
		constexpr const static rivet::rivet_type_id FleeFromPulses_type_id = 0x97e14b23;
		constexpr const static std::string_view PulseFlockTargetPrius_type_name = "PulseFlockTargetPrius";
		constexpr const static rivet::rivet_type_id PulseFlockTargetPrius_type_id = 0xefb78e9c;
		constexpr const static std::string_view BirdTypes_type_name = "BirdTypes";
		constexpr const static rivet::rivet_type_id BirdTypes_type_id = 0x6f844477; 

		explicit LandingBirdSystemConfig() = default;
		explicit LandingBirdSystemConfig([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float InitialLoadDelay {};
		float PostFleeCooldown {};
		float MaxIdleSpeed {};
		float IdleSpawnDelay {};
		float LandCircleOffsetXZ {};
		float LandCircleRadiusXZ {};
		float MaxLandHeightDiff {};
		float MaxLandNormalAngle {};
		float FleeDestroyOffscreenDelay {};
		bool FleeFromPulses {};
		std::shared_ptr<rivet::ddl::generated::DimensionalPulseTargetFlockPrius> PulseFlockTargetPrius {};
		std::vector<std::shared_ptr<rivet::ddl::generated::LandingBirdType>> BirdTypes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<LandingBirdSystemConfig>;
	};
} // namespace rivet::ddl::generated

// clang-format on
