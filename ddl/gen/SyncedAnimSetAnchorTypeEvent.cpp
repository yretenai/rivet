// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SyncedAnimSetAnchorTypeEvent.hpp>

namespace rivet::ddl::generated {
	SyncedAnimSetAnchorTypeEvent::SyncedAnimSetAnchorTypeEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EventBase(serialized) {
		AnchorPosType = serialized->get_enum<rivet::ddl::generated::x91b33164>(AnchorPosType_type_id, rivet::ddl::generated::x91b33164_values);
		AnchorRotType = serialized->get_enum<rivet::ddl::generated::xb40cfc5d>(AnchorRotType_type_id, rivet::ddl::generated::xb40cfc5d_values);
		GuestAnchor = serialized->get_enum<rivet::ddl::generated::x19aa8603>(GuestAnchor_type_id, rivet::ddl::generated::x19aa8603_values);
		ForcePosBlendTime = serialized->get_float(ForcePosBlendTime_type_id);
		ForceRotBlendTime = serialized->get_float(ForceRotBlendTime_type_id); 
	}

	[[nodiscard]] auto
	SyncedAnimSetAnchorTypeEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SyncedAnimSetAnchorTypeEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SyncedAnimSetAnchorTypeEvent> {
		if (incoming_type_id == SyncedAnimSetAnchorTypeEvent::type_id) {
			return std::make_shared<SyncedAnimSetAnchorTypeEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
