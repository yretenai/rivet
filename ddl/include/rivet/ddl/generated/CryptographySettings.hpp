// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/x27dd4d8e.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED CryptographySettings : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "CryptographySettings";
		constexpr static rivet::rivet_type_id type_id = 0x75ea5ecc;

		constexpr static std::string_view Level_type_name = "Level";
		constexpr static rivet::rivet_type_id Level_type_id = 0x83b900d2;
		constexpr static std::string_view CrcMessages_type_name = "CrcMessages";
		constexpr static rivet::rivet_type_id CrcMessages_type_id = 0xff695b63;
		constexpr static std::string_view WrapMessages_type_name = "WrapMessages";
		constexpr static rivet::rivet_type_id WrapMessages_type_id = 0xc7177294; 

		explicit CryptographySettings() = default;
		explicit CryptographySettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::x27dd4d8e Level {};
		bool CrcMessages {};
		bool WrapMessages {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CryptographySettings>;
	};
} // namespace rivet::ddl::generated

// clang-format on
