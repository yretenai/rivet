// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/SpawnerBotPrius.hpp>
#include <rivet/ddl/generated/SpawnerBotStaticPrius.hpp> 

#include <rivet/ddl/generated/SpawnerBotBasePrius.hpp>

namespace rivet::ddl::generated {
	SpawnerBotBasePrius::SpawnerBotBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): BotPrius(serialized) {
		OverrideNumActive = serialized->get_int8(OverrideNumActive_type_id, -1);
		OverrideSpawnDelay = serialized->get_float(OverrideSpawnDelay_type_id, -1.000000f);
		OverrideSpawnTriggerDelay = serialized->get_float(OverrideSpawnTriggerDelay_type_id, -1.000000f);
		SpawnTemplate = serialized->get_uint64(SpawnTemplate_type_id, 0ull);
		SpawnGroup = serialized->get_uint64(SpawnGroup_type_id, 0ull);
		ExtraSpawnIntoGroup = serialized->get_uint64(ExtraSpawnIntoGroup_type_id, 0ull);
		SpawnerBotConfig = serialized->get_string(SpawnerBotConfig_type_id, {}); 
	}

	[[nodiscard]] auto
	SpawnerBotBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SpawnerBotBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SpawnerBotBasePrius> {
		if (incoming_type_id == SpawnerBotBasePrius::type_id) {
			return std::make_shared<SpawnerBotBasePrius>(serialized);
		}

		auto SpawnerBotStaticPrius_ptr = SpawnerBotStaticPrius::from_substruct(incoming_type_id, serialized);
		if (SpawnerBotStaticPrius_ptr != nullptr) {
			return SpawnerBotStaticPrius_ptr;
		}

		auto SpawnerBotPrius_ptr = SpawnerBotPrius::from_substruct(incoming_type_id, serialized);
		if (SpawnerBotPrius_ptr != nullptr) {
			return SpawnerBotPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
