// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/GUISettings.hpp>

namespace rivet::ddl::generated {
	GUISettings::GUISettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		RenderEnable = serialized->get_bool(RenderEnable_type_id);
		PrintErrorMarkers = serialized->get_bool(PrintErrorMarkers_type_id);
		EasyDebug = serialized->get_bool(EasyDebug_type_id);
		UseDebugMenuInput = serialized->get_bool(UseDebugMenuInput_type_id);
		UseAltDebugMenuInput = serialized->get_bool(UseAltDebugMenuInput_type_id);
		DebugMenuLeftStickAsDPad = serialized->get_bool(DebugMenuLeftStickAsDPad_type_id);
		UpdatePhase = serialized->get_uint32(UpdatePhase_type_id);
		PostActorUpdate = serialized->get_bool(PostActorUpdate_type_id);
		PrototypeMessageDebug = serialized->get_bool(PrototypeMessageDebug_type_id); 
	}

	[[nodiscard]] auto
	GUISettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	GUISettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GUISettings> {
		if (incoming_type_id == GUISettings::type_id) {
			return std::make_shared<GUISettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
