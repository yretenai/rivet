// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector2; 

	struct RIVET_DDL_SHARED VisualEffectPhysicsParam : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "VisualEffectPhysicsParam";
		constexpr static rivet::rivet_type_id type_id = 0x3ba6a89a;

		constexpr static std::string_view CollisionRotationSpeedDecay_type_name = "CollisionRotationSpeedDecay";
		constexpr static rivet::rivet_type_id CollisionRotationSpeedDecay_type_id = 0xb1c3a6fb;
		constexpr static std::string_view CollisionBeamClamp_type_name = "CollisionBeamClamp";
		constexpr static rivet::rivet_type_id CollisionBeamClamp_type_id = 0x2cbdb22e;
		constexpr static std::string_view CollisionBeamScale_type_name = "CollisionBeamScale";
		constexpr static rivet::rivet_type_id CollisionBeamScale_type_id = 0x60f8e050;
		constexpr static std::string_view CollisionLifeScale_type_name = "CollisionLifeScale";
		constexpr static rivet::rivet_type_id CollisionLifeScale_type_id = 0xd661926e;
		constexpr static std::string_view CollisionDistance_type_name = "CollisionDistance";
		constexpr static rivet::rivet_type_id CollisionDistance_type_id = 0x735fc935;
		constexpr static std::string_view CollisionRadius_type_name = "CollisionRadius";
		constexpr static rivet::rivet_type_id CollisionRadius_type_id = 0x7d546bba;
		constexpr static std::string_view CollisionMass_type_name = "CollisionMass";
		constexpr static rivet::rivet_type_id CollisionMass_type_id = 0xb603f6a2;
		constexpr static std::string_view CollisionRestitution_type_name = "CollisionRestitution";
		constexpr static rivet::rivet_type_id CollisionRestitution_type_id = 0x6fd1fb6;
		constexpr static std::string_view CollisionFriction_type_name = "CollisionFriction";
		constexpr static rivet::rivet_type_id CollisionFriction_type_id = 0x7dc14bbf;
		constexpr static std::string_view CollisionLinearDamping_type_name = "CollisionLinearDamping";
		constexpr static rivet::rivet_type_id CollisionLinearDamping_type_id = 0x29d755c8;
		constexpr static std::string_view CollisionGravityMultiplier_type_name = "CollisionGravityMultiplier";
		constexpr static rivet::rivet_type_id CollisionGravityMultiplier_type_id = 0x747edc12;
		constexpr static std::string_view CollisionStartTime_type_name = "CollisionStartTime";
		constexpr static rivet::rivet_type_id CollisionStartTime_type_id = 0x90c7646c;
		constexpr static std::string_view CollisionModel_type_name = "CollisionModel";
		constexpr static rivet::rivet_type_id CollisionModel_type_id = 0x99449b50;
		constexpr static std::string_view CollisionAngularVelocity_type_name = "CollisionAngularVelocity";
		constexpr static rivet::rivet_type_id CollisionAngularVelocity_type_id = 0x8d878378; 

		explicit VisualEffectPhysicsParam() = default;
		explicit VisualEffectPhysicsParam([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		float CollisionRotationSpeedDecay {};
		float CollisionBeamClamp {};
		float CollisionBeamScale {};
		float CollisionLifeScale {};
		float CollisionDistance {};
		float CollisionRadius {};
		float CollisionMass {};
		float CollisionRestitution {};
		float CollisionFriction {};
		float CollisionLinearDamping {};
		float CollisionGravityMultiplier {};
		float CollisionStartTime {};
		std::string_view CollisionModel {};
		std::shared_ptr<rivet::ddl::generated::DDLVector2> CollisionAngularVelocity {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<VisualEffectPhysicsParam>;
	};
} // namespace rivet::ddl::generated

// clang-format on
