// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/ExplosiveInteractPrius.hpp>
#include <rivet/ddl/generated/RotatableInteractPrius.hpp>
#include <rivet/ddl/generated/CarryableDockPrius.hpp>
#include <rivet/ddl/generated/InteractCannonPrius.hpp>
#include <rivet/ddl/generated/InteractConditionPriusItem.hpp>
#include <rivet/ddl/generated/InteractLocationPriusItem.hpp>
#include <rivet/ddl/generated/SlottedInteractAnimData.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/SlottedInteractObjectPrius.hpp>

namespace rivet::ddl::generated {
	SlottedInteractObjectPrius::SlottedInteractObjectPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		LinkGroup = serialized->get_uint64(LinkGroup_type_id, 0ull);
		RequiredUsers = serialized->get_int32(RequiredUsers_type_id, -1);
		RetriggerTime = serialized->get_float(RetriggerTime_type_id, -1.000000f);
		LoopingInteract = serialized->get_bool(LoopingInteract_type_id, false);
		LoopingTime = serialized->get_float(LoopingTime_type_id, 3.000000f);
		LoopingLocked = serialized->get_bool(LoopingLocked_type_id, false);
		ExecuteLocked = serialized->get_bool(ExecuteLocked_type_id, false);
		StartDisabled = serialized->get_bool(StartDisabled_type_id, false);
		StayInUseUntilEnd = serialized->get_bool(StayInUseUntilEnd_type_id, true);
		IgnoreOnUse = serialized->get_bool(IgnoreOnUse_type_id, true);
		DisableGravity = serialized->get_bool(DisableGravity_type_id, false);
		MakeInvulnerable = serialized->get_bool(MakeInvulnerable_type_id, false);
		DoStartFade = serialized->get_bool(DoStartFade_type_id, false);
		StartFadeOutTime = serialized->get_float(StartFadeOutTime_type_id, 1.750000f);
		StartFadeHoldTime = serialized->get_float(StartFadeHoldTime_type_id, 0.100000f);
		StartFadeInTime = serialized->get_float(StartFadeInTime_type_id, 0.500000f);
		LockPlayerInInteract = serialized->get_bool(LockPlayerInInteract_type_id, false);
		DisplayProgressBar = serialized->get_bool(DisplayProgressBar_type_id, false);
		DisplayProgressBarFromStart = serialized->get_bool(DisplayProgressBarFromStart_type_id, false);
		InteractOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(InteractOffset_type_id);
		SyncJointOffset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(SyncJointOffset_type_id);
		LinkWaitLocTag = serialized->get_string(LinkWaitLocTag_type_id, "INVALID");
		AnimData = serialized->unwrap_into<rivet::ddl::generated::SlottedInteractAnimData>(AnimData_type_id);
		LocationList = serialized->unwrap_into_many<rivet::ddl::generated::InteractLocationPriusItem>(LocationList_type_id);
		ConditionList = serialized->unwrap_into_many<rivet::ddl::generated::InteractConditionPriusItem>(ConditionList_type_id); 
	}

	[[nodiscard]] auto
	SlottedInteractObjectPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SlottedInteractObjectPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SlottedInteractObjectPrius> {
		if (incoming_type_id == SlottedInteractObjectPrius::type_id) {
			return std::make_shared<SlottedInteractObjectPrius>(serialized);
		}

		auto InteractCannonPrius_ptr = InteractCannonPrius::from_substruct(incoming_type_id, serialized);
		if (InteractCannonPrius_ptr != nullptr) {
			return InteractCannonPrius_ptr;
		}

		auto CarryableDockPrius_ptr = CarryableDockPrius::from_substruct(incoming_type_id, serialized);
		if (CarryableDockPrius_ptr != nullptr) {
			return CarryableDockPrius_ptr;
		}

		auto RotatableInteractPrius_ptr = RotatableInteractPrius::from_substruct(incoming_type_id, serialized);
		if (RotatableInteractPrius_ptr != nullptr) {
			return RotatableInteractPrius_ptr;
		}

		auto ExplosiveInteractPrius_ptr = ExplosiveInteractPrius::from_substruct(incoming_type_id, serialized);
		if (ExplosiveInteractPrius_ptr != nullptr) {
			return ExplosiveInteractPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
