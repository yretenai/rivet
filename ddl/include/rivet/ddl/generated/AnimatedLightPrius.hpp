// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimatedLightPrius : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "AnimatedLightPrius";
		constexpr static rivet::rivet_type_id type_id = 0x3f834d70;

		constexpr static std::string_view AttachJointHash_type_name = "AttachJointHash";
		constexpr static rivet::rivet_type_id AttachJointHash_type_id = 0x2cb9fbf0;
		constexpr static std::string_view DriverJointHash_type_name = "DriverJointHash";
		constexpr static rivet::rivet_type_id DriverJointHash_type_id = 0xb46e1778;
		constexpr static std::string_view ColorR_type_name = "ColorR";
		constexpr static rivet::rivet_type_id ColorR_type_id = 0xb0af9da6;
		constexpr static std::string_view ColorG_type_name = "ColorG";
		constexpr static rivet::rivet_type_id ColorG_type_id = 0xdd72794d;
		constexpr static std::string_view ColorB_type_name = "ColorB";
		constexpr static rivet::rivet_type_id ColorB_type_id = 0xad188dc2; 

		explicit AnimatedLightPrius() = default;
		explicit AnimatedLightPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint32_t AttachJointHash {};
		uint32_t DriverJointHash {};
		float ColorR {};
		float ColorG {};
		float ColorB {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimatedLightPrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
