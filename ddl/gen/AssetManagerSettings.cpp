// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WhitelistAllocatorSettings.hpp>
#include <rivet/ddl/generated/AssetTypeSettings.hpp> 

#include <rivet/ddl/generated/AssetManagerSettings.hpp>

namespace rivet::ddl::generated {
	AssetManagerSettings::AssetManagerSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Level = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Level_type_id);
		Zone = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Zone_type_id);
		Conduit = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Conduit_type_id);
		Config = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Config_type_id);
		Cinematic = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Cinematic_type_id);
		Cinematic2 = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Cinematic2_type_id);
		AnimClip = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(AnimClip_type_id);
		AnimSet = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(AnimSet_type_id);
		Texture = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Texture_type_id);
		Atmosphere = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Atmosphere_type_id);
		VisualEffect = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(VisualEffect_type_id);
		SoundBank = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(SoundBank_type_id);
		Localization = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Localization_type_id);
		ZoneStatic = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(ZoneStatic_type_id);
		ZonePhysics = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(ZonePhysics_type_id);
		ZoneCover = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(ZoneCover_type_id);
		ModelVariant = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(ModelVariant_type_id);
		MaterialTemplate = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(MaterialTemplate_type_id);
		Actor = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Actor_type_id);
		Model = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Model_type_id);
		Material = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Material_type_id);
		LightGrid = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(LightGrid_type_id);
		LevelLight = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(LevelLight_type_id);
		NodeGraph = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(NodeGraph_type_id);
		Breakable = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Breakable_type_id);
		WwiseLookup = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(WwiseLookup_type_id);
		Terrain = serialized->unwrap_into<rivet::ddl::generated::AssetTypeSettings>(Terrain_type_id);
		ModelManagerWhitelist = serialized->unwrap_into<rivet::ddl::generated::WhitelistAllocatorSettings>(ModelManagerWhitelist_type_id);
		AssertOnLoadError = serialized->get_bool(AssertOnLoadError_type_id, false);
		AssertOnMaxCount = serialized->get_bool(AssertOnMaxCount_type_id, true);
		VisualEffectSingleFrameMax = serialized->get_uint32(VisualEffectSingleFrameMax_type_id, 3932160);
		TextureStreamBufferSize = serialized->get_uint32(TextureStreamBufferSize_type_id, 16777216);
		TextureLowMipsMaxSize = serialized->get_uint32(TextureLowMipsMaxSize_type_id, 62914560);
		ZoneGameplayDataCallbackMax = serialized->get_int32(ZoneGameplayDataCallbackMax_type_id, 32);
		ZoneManagerCallbackMax = serialized->get_int32(ZoneManagerCallbackMax_type_id, 4);
		ZoneManagerCombinedScriptActionTypeMax = serialized->get_int32(ZoneManagerCombinedScriptActionTypeMax_type_id, 32);
		ZoneLightBinMax = serialized->get_uint32(ZoneLightBinMax_type_id, 64);
		LightGridUnpackBufferSize = serialized->get_uint32(LightGridUnpackBufferSize_type_id, 16777216);
		MaxEnvProbeEntries = serialized->get_uint32(MaxEnvProbeEntries_type_id, 512);
		AssetLoaderTempAllocSize = serialized->get_uint32(AssetLoaderTempAllocSize_type_id, 12582192);
		MaxVertexShaders = serialized->get_uint32(MaxVertexShaders_type_id, 1024);
		MaxHullShaders = serialized->get_uint32(MaxHullShaders_type_id, 512);
		MaxDomainShaders = serialized->get_uint32(MaxDomainShaders_type_id, 512);
		MaxPixelShaders = serialized->get_uint32(MaxPixelShaders_type_id, 6400);
		AudioLanguage = serialized->get_enum<rivet::ddl::generated::x572515d>(AudioLanguage_type_id, rivet::ddl::generated::x572515d_values, rivet::ddl::generated::x572515d::English);
		TextLanguage = serialized->get_enum<rivet::ddl::generated::x572515d>(TextLanguage_type_id, rivet::ddl::generated::x572515d_values, rivet::ddl::generated::x572515d::English);
		DebugLocalization = serialized->get_bool(DebugLocalization_type_id, false);
		VerboseDiagnostics = serialized->get_bool(VerboseDiagnostics_type_id, true);
		WarnOnZoneLooseLoads = serialized->get_bool(WarnOnZoneLooseLoads_type_id, false);
		LoadHistoryDetailLevel = serialized->get_enum<rivet::ddl::generated::LoadHistoryDetailLevel>(LoadHistoryDetailLevel_type_id, rivet::ddl::generated::LoadHistoryDetailLevel_values, rivet::ddl::generated::LoadHistoryDetailLevel::None);
		DisplayLooseLoadDetail = serialized->get_bool(DisplayLooseLoadDetail_type_id, false);
		DisableDelayedStreaming = serialized->get_bool(DisableDelayedStreaming_type_id, false);
		EnableZoneReloads = serialized->get_bool(EnableZoneReloads_type_id, false);
		DebugTraceAsset = serialized->get_string(DebugTraceAsset_type_id, {}); 
	}

	[[nodiscard]] auto
	AssetManagerSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AssetManagerSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AssetManagerSettings> {
		if (incoming_type_id == AssetManagerSettings::type_id) {
			return std::make_shared<AssetManagerSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
