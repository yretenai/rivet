// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/QueryVolumeShapeCone.hpp>
#include <rivet/ddl/generated/QueryVolumeShapeEllipsoid.hpp>
#include <rivet/ddl/generated/QueryVolumeShapeCylinder.hpp>
#include <rivet/ddl/generated/QueryVolumeShapeSphere.hpp>
#include <rivet/ddl/generated/QueryVolumeShapeCube.hpp>
#include <rivet/ddl/generated/DDLVector3.hpp> 

#include <rivet/ddl/generated/QueryVolumeShape.hpp>

namespace rivet::ddl::generated {
	QueryVolumeShape::QueryVolumeShape([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Offset = serialized->unwrap_into<rivet::ddl::generated::DDLVector3>(Offset_type_id); 
	}

	[[nodiscard]] auto
	QueryVolumeShape::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	QueryVolumeShape::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<QueryVolumeShape> {
		if (incoming_type_id == QueryVolumeShape::type_id) {
			return std::make_shared<QueryVolumeShape>(serialized);
		}

		auto QueryVolumeShapeCube_ptr = QueryVolumeShapeCube::from_substruct(incoming_type_id, serialized);
		if (QueryVolumeShapeCube_ptr != nullptr) {
			return QueryVolumeShapeCube_ptr;
		}

		auto QueryVolumeShapeSphere_ptr = QueryVolumeShapeSphere::from_substruct(incoming_type_id, serialized);
		if (QueryVolumeShapeSphere_ptr != nullptr) {
			return QueryVolumeShapeSphere_ptr;
		}

		auto QueryVolumeShapeCylinder_ptr = QueryVolumeShapeCylinder::from_substruct(incoming_type_id, serialized);
		if (QueryVolumeShapeCylinder_ptr != nullptr) {
			return QueryVolumeShapeCylinder_ptr;
		}

		auto QueryVolumeShapeCone_ptr = QueryVolumeShapeCone::from_substruct(incoming_type_id, serialized);
		if (QueryVolumeShapeCone_ptr != nullptr) {
			return QueryVolumeShapeCone_ptr;
		}

		auto QueryVolumeShapeEllipsoid_ptr = QueryVolumeShapeEllipsoid::from_substruct(incoming_type_id, serialized);
		if (QueryVolumeShapeEllipsoid_ptr != nullptr) {
			return QueryVolumeShapeEllipsoid_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
