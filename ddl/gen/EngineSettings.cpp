// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CameraInputSettings.hpp>
#include <rivet/ddl/generated/LightCaptureSettings.hpp>
#include <rivet/ddl/generated/EventSettings.hpp> 

#include <rivet/ddl/generated/EngineSettings.hpp>

namespace rivet::ddl::generated {
	EngineSettings::EngineSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		SubtitleSystemEnable = serialized->get_bool(SubtitleSystemEnable_type_id);
		InputEnable = serialized->get_bool(InputEnable_type_id);
		DecalsEnable = serialized->get_bool(DecalsEnable_type_id);
		VFXEnable = serialized->get_bool(VFXEnable_type_id);
		WaterSimCreationEnable = serialized->get_bool(WaterSimCreationEnable_type_id);
		MaxUpdateRequestsFromThreads = serialized->get_int32(MaxUpdateRequestsFromThreads_type_id);
		MaxActorParentRequests = serialized->get_int32(MaxActorParentRequests_type_id);
		MaxDefaultBucketRequests = serialized->get_int32(MaxDefaultBucketRequests_type_id);
		JobWaitTimeoutMs = serialized->get_int32(JobWaitTimeoutMs_type_id);
		Event = serialized->unwrap_into<rivet::ddl::generated::EventSettings>(Event_type_id);
		LightCapture = serialized->unwrap_into<rivet::ddl::generated::LightCaptureSettings>(LightCapture_type_id);
		ScriptSignalMax = serialized->get_int32(ScriptSignalMax_type_id);
		ScratchSize = serialized->get_uint64(ScratchSize_type_id);
		ScratchSizePersistent = serialized->get_uint64(ScratchSizePersistent_type_id);
		AmmEmuVaddrSpace = serialized->get_uint64(AmmEmuVaddrSpace_type_id);
		GlobalForceClipDistance = serialized->get_float(GlobalForceClipDistance_type_id);
		GlobalForceClipEnabled = serialized->get_bool(GlobalForceClipEnabled_type_id);
		ArchiveTocPath = serialized->get_string(ArchiveTocPath_type_id);
		ArchiveLoaderCoalesceAdjacentReads = serialized->get_bool(ArchiveLoaderCoalesceAdjacentReads_type_id);
		MovieCaptureFrameRate = serialized->get_int32(MovieCaptureFrameRate_type_id);
		MovieCaptureOutputWidth = serialized->get_int32(MovieCaptureOutputWidth_type_id);
		MovieCaptureOutputHeight = serialized->get_int32(MovieCaptureOutputHeight_type_id);
		MovieCaptureFaceSize = serialized->get_int32(MovieCaptureFaceSize_type_id);
		ScreenshotIp = serialized->get_string(ScreenshotIp_type_id);
		CameraSettings = serialized->unwrap_into<rivet::ddl::generated::CameraInputSettings>(CameraSettings_type_id);
		LightBarColor = serialized->get_uint8s(LightBarColor_type_id);
		NavMeshValidationEnable = serialized->get_bool(NavMeshValidationEnable_type_id);
		MovieSystemEnable = serialized->get_bool(MovieSystemEnable_type_id);
		MovieMemoryBudget = serialized->get_uint32(MovieMemoryBudget_type_id);
		JobBatchMax = serialized->get_int32(JobBatchMax_type_id);
		UseLockedTimeStep = serialized->get_bool(UseLockedTimeStep_type_id);
		TimeSmoothing = serialized->get_bool(TimeSmoothing_type_id);
		TimeSmoothingFrames = serialized->get_uint32(TimeSmoothingFrames_type_id);
		RequireDependencyDag = serialized->get_bool(RequireDependencyDag_type_id);
		DDLUseJson = serialized->get_bool(DDLUseJson_type_id);
		InitDDL = serialized->get_bool(InitDDL_type_id);
		DebugFontAlwaysShadowed = serialized->get_bool(DebugFontAlwaysShadowed_type_id);
		MinCullDist = serialized->get_float(MinCullDist_type_id);
		OutlineDrawMaxDist = serialized->get_float(OutlineDrawMaxDist_type_id);
		InitDebugImGui = serialized->get_bool(InitDebugImGui_type_id);
		ToolWindow = serialized->get_string(ToolWindow_type_id);
		EnforcePadFocus = serialized->get_bool(EnforcePadFocus_type_id);
		PadEnable = serialized->get_bool(PadEnable_type_id);
		NoLoadHackAssetId = serialized->get_uint64(NoLoadHackAssetId_type_id);
		IsCinematicEditor = serialized->get_bool(IsCinematicEditor_type_id);
		PlayGoEnable = serialized->get_bool(PlayGoEnable_type_id);
		ExitAfterOneFrame = serialized->get_bool(ExitAfterOneFrame_type_id); 
	}

	[[nodiscard]] auto
	EngineSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	EngineSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<EngineSettings> {
		if (incoming_type_id == EngineSettings::type_id) {
			return std::make_shared<EngineSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
