// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/UIPhotoModeOption.hpp>

namespace rivet::ddl::generated {
	UIPhotoModeOption::UIPhotoModeOption([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ID = serialized->get_enum<rivet::ddl::generated::x4f56b709>(ID_type_id, rivet::ddl::generated::x4f56b709_values);
		Label = serialized->get_string(Label_type_id);
		ValueMin = serialized->get_float(ValueMin_type_id);
		ValueMax = serialized->get_float(ValueMax_type_id);
		Fidelity = serialized->get_int32(Fidelity_type_id);
		FastFidelity = serialized->get_int32(FastFidelity_type_id);
		SliderType = serialized->get_enum<rivet::ddl::generated::xed640b4c>(SliderType_type_id, rivet::ddl::generated::xed640b4c_values);
		ClampType = serialized->get_enum<rivet::ddl::generated::xc57b533a>(ClampType_type_id, rivet::ddl::generated::xc57b533a_values);
		Settings = serialized->get_strings(Settings_type_id); 
	}

	[[nodiscard]] auto
	UIPhotoModeOption::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	UIPhotoModeOption::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<UIPhotoModeOption> {
		if (incoming_type_id == UIPhotoModeOption::type_id) {
			return std::make_shared<UIPhotoModeOption>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
