// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TriggerSwitchIfAnyActivePrius.hpp>
#include <rivet/ddl/generated/TriggerSwitchSimplePrius.hpp>
#include <rivet/ddl/generated/TriggerSwitchAutoResetPrius.hpp>
#include <rivet/ddl/generated/TriggerSwitchResponseEntry.hpp> 

#include <rivet/ddl/generated/TriggerSwitchBasePrius.hpp>

namespace rivet::ddl::generated {
	TriggerSwitchBasePrius::TriggerSwitchBasePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): EnabledComponentBasePrius(serialized) {
		GroupName = serialized->get_string(GroupName_type_id, {});
		Responses = serialized->unwrap_into_many<rivet::ddl::generated::TriggerSwitchResponseEntry>(Responses_type_id); 
	}

	[[nodiscard]] auto
	TriggerSwitchBasePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TriggerSwitchBasePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerSwitchBasePrius> {
		if (incoming_type_id == TriggerSwitchBasePrius::type_id) {
			return std::make_shared<TriggerSwitchBasePrius>(serialized);
		}

		auto TriggerSwitchAutoResetPrius_ptr = TriggerSwitchAutoResetPrius::from_substruct(incoming_type_id, serialized);
		if (TriggerSwitchAutoResetPrius_ptr != nullptr) {
			return TriggerSwitchAutoResetPrius_ptr;
		}

		auto TriggerSwitchSimplePrius_ptr = TriggerSwitchSimplePrius::from_substruct(incoming_type_id, serialized);
		if (TriggerSwitchSimplePrius_ptr != nullptr) {
			return TriggerSwitchSimplePrius_ptr;
		}

		auto TriggerSwitchIfAnyActivePrius_ptr = TriggerSwitchIfAnyActivePrius::from_substruct(incoming_type_id, serialized);
		if (TriggerSwitchIfAnyActivePrius_ptr != nullptr) {
			return TriggerSwitchIfAnyActivePrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
