// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WeaponTriggerData.hpp>

namespace rivet::ddl::generated {
	WeaponTriggerData::WeaponTriggerData([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		Button = serialized->get_enum<rivet::ddl::generated::x58d054ed>(Button_type_id, rivet::ddl::generated::x58d054ed_values);
		TriggerType = serialized->get_enum<rivet::ddl::generated::xaab5853c>(TriggerType_type_id, rivet::ddl::generated::xaab5853c_values);
		ResponseType = serialized->get_enum<rivet::ddl::generated::xbcfeb3f2>(ResponseType_type_id, rivet::ddl::generated::xbcfeb3f2_values);
		TriggerFlags = serialized->get_bitset<rivet::ddl::generated::xa80df7b6>(TriggerFlags_type_id, rivet::ddl::generated::xa80df7b6_values);
		EmitterIndex = serialized->get_enum<rivet::ddl::generated::x77a4e9ba>(EmitterIndex_type_id, rivet::ddl::generated::x77a4e9ba_values);
		AmmoIndex = serialized->get_enum<rivet::ddl::generated::xa80b028a>(AmmoIndex_type_id, rivet::ddl::generated::xa80b028a_values);
		ShotIndex = serialized->get_enum<rivet::ddl::generated::x63d1a5d5>(ShotIndex_type_id, rivet::ddl::generated::x63d1a5d5_values);
		AccuracyIndex = serialized->get_enum<rivet::ddl::generated::x4dd7659a>(AccuracyIndex_type_id, rivet::ddl::generated::x4dd7659a_values);
		UserStateIndex = serialized->get_enum<rivet::ddl::generated::xa26ce77>(UserStateIndex_type_id, rivet::ddl::generated::xa26ce77_values);
		FireSoundRange = serialized->get_float(FireSoundRange_type_id);
		RoundsPerSecond = serialized->get_float(RoundsPerSecond_type_id);
		FireAnimName = serialized->get_string(FireAnimName_type_id); 
	}

	[[nodiscard]] auto
	WeaponTriggerData::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	WeaponTriggerData::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<WeaponTriggerData> {
		if (incoming_type_id == WeaponTriggerData::type_id) {
			return std::make_shared<WeaponTriggerData>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
