// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/enums/xd458e3df.hpp>
#include <rivet/ddl/generated/enums/xe76a4768.hpp>
#include <rivet/ddl/generated/EventBase.hpp> 

namespace rivet::ddl::generated {
	struct RIVET_DDL_SHARED AnimPropActionEvent : EventBase {
		constexpr static std::string_view type_name = "AnimPropActionEvent";
		constexpr static rivet::rivet_type_id type_id = 0x99442740;

		constexpr static std::string_view PropName_type_name = "PropName";
		constexpr static rivet::rivet_type_id PropName_type_id = 0x97a161ef;
		constexpr static std::string_view ActionType_type_name = "ActionType";
		constexpr static rivet::rivet_type_id ActionType_type_id = 0x874b2194;
		constexpr static std::string_view ActionText_type_name = "ActionText";
		constexpr static rivet::rivet_type_id ActionText_type_id = 0x301ed17a;
		constexpr static std::string_view AutoRemove_type_name = "AutoRemove";
		constexpr static rivet::rivet_type_id AutoRemove_type_id = 0x37a7c558;
		constexpr static std::string_view SpawnForShot_type_name = "SpawnForShot";
		constexpr static rivet::rivet_type_id SpawnForShot_type_id = 0xd313a39;
		constexpr static std::string_view MatchAnimType_type_name = "MatchAnimType";
		constexpr static rivet::rivet_type_id MatchAnimType_type_id = 0x24fabc40; 

		explicit AnimPropActionEvent() = default;
		explicit AnimPropActionEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::string_view PropName {};
		rivet::ddl::generated::xe76a4768 ActionType {};
		std::string_view ActionText {};
		bool AutoRemove {};
		bool SpawnForShot {};
		rivet::ddl::generated::xd458e3df MatchAnimType {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimPropActionEvent>;
	};
} // namespace rivet::ddl::generated

// clang-format on
