// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/bitsets/TargetType.hpp>
#include <rivet/ddl/generated/TargetHunterBasePrius.hpp> 

namespace rivet::ddl::generated {
	struct TargetShapeContainer;
	struct DDLVector3; 

	struct RIVET_DDL_SHARED TargetHunterTargetTypePrius : TargetHunterBasePrius {
		constexpr static std::string_view type_name = "TargetHunterTargetTypePrius";
		constexpr static rivet::rivet_type_id type_id = 0x7d99faa3;

		constexpr static std::string_view TargetTypes_type_name = "TargetTypes";
		constexpr static rivet::rivet_type_id TargetTypes_type_id = 0x85109145;
		constexpr static std::string_view ShapeOffset_type_name = "ShapeOffset";
		constexpr static rivet::rivet_type_id ShapeOffset_type_id = 0x92099931;
		constexpr static std::string_view Shapes_type_name = "Shapes";
		constexpr static rivet::rivet_type_id Shapes_type_id = 0xada3eb75; 

		explicit TargetHunterTargetTypePrius() = default;
		explicit TargetHunterTargetTypePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		rivet::ddl::generated::TargetType TargetTypes {};
		std::shared_ptr<rivet::ddl::generated::DDLVector3> ShapeOffset {};
		std::vector<std::shared_ptr<rivet::ddl::generated::TargetShapeContainer>> Shapes {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TargetHunterTargetTypePrius>;
	};
} // namespace rivet::ddl::generated

// clang-format on
