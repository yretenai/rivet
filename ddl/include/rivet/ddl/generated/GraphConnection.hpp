// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

namespace rivet::ddl::generated {
	struct DDLVector2; 

	struct RIVET_DDL_SHARED GraphConnection : rivet::structures::rivet_ddl_base {
		constexpr static std::string_view type_name = "GraphConnection";
		constexpr static rivet::rivet_type_id type_id = 0x9e1e03e9;

		constexpr static std::string_view Id_type_name = "Id";
		constexpr static rivet::rivet_type_id Id_type_id = 0x8a514a8d;
		constexpr static std::string_view Disabled_type_name = "Disabled";
		constexpr static rivet::rivet_type_id Disabled_type_id = 0x7effd393;
		constexpr static std::string_view SourceId_type_name = "SourceId";
		constexpr static rivet::rivet_type_id SourceId_type_id = 0x1414e790;
		constexpr static std::string_view SourceCon_type_name = "SourceCon";
		constexpr static rivet::rivet_type_id SourceCon_type_id = 0xb47297e1;
		constexpr static std::string_view TargetId_type_name = "TargetId";
		constexpr static rivet::rivet_type_id TargetId_type_id = 0xc3642b05;
		constexpr static std::string_view TargetCon_type_name = "TargetCon";
		constexpr static rivet::rivet_type_id TargetCon_type_id = 0x34c080e6;
		constexpr static std::string_view Pins_type_name = "Pins";
		constexpr static rivet::rivet_type_id Pins_type_id = 0xf9f2930; 

		explicit GraphConnection() = default;
		explicit GraphConnection([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		uint64_t Id {};
		bool Disabled {};
		uint64_t SourceId {};
		std::string_view SourceCon {};
		uint64_t TargetId {};
		std::string_view TargetCon {};
		std::vector<std::shared_ptr<rivet::ddl::generated::DDLVector2>> Pins {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<GraphConnection>;
	};
} // namespace rivet::ddl::generated

// clang-format on
