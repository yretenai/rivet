// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#pragma once

// clang-format off

#include <cstdint>
#include <memory>
#include <string_view>
#include <vector>

#include <rivet/hash/type_id.hpp>
#include <rivet/rivet_array.hpp>
#include <rivet/rivet_keywords.hpp>
#include <rivet/structures/rivet_serialization.hpp>

#include <rivet/ddl/generated/MathNodeBaseDef.hpp> 

namespace rivet::ddl::generated {
	struct OutputPlugVec3;
	struct InputPlugVec3; 

	struct RIVET_DDL_SHARED AddVectorsNodeDef : MathNodeBaseDef {
		constexpr static std::string_view type_name = "AddVectorsNodeDef";
		constexpr static rivet::rivet_type_id type_id = 0x16e9e600;

		constexpr static std::string_view Addend_type_name = "Addend";
		constexpr static rivet::rivet_type_id Addend_type_id = 0x6b596841;
		constexpr static std::string_view Sum_type_name = "Sum";
		constexpr static rivet::rivet_type_id Sum_type_id = 0xe2e8b684; 

		explicit AddVectorsNodeDef() = default;
		explicit AddVectorsNodeDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized);

		std::vector<std::shared_ptr<rivet::ddl::generated::InputPlugVec3>> Addend {};
		std::shared_ptr<rivet::ddl::generated::OutputPlugVec3> Sum {}; 

		[[nodiscard]] auto
		get_type_name() const noexcept -> std::string_view override;

		[[nodiscard]] static auto
		from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AddVectorsNodeDef>;
	};
} // namespace rivet::ddl::generated

// clang-format on
