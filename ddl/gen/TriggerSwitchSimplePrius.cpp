// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TriggerSwitchRandomEnabledPrius.hpp> 

#include <rivet/ddl/generated/TriggerSwitchSimplePrius.hpp>

namespace rivet::ddl::generated {
	TriggerSwitchSimplePrius::TriggerSwitchSimplePrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): TriggerSwitchBasePrius(serialized) {
		AutoDisableType = serialized->get_enum<rivet::ddl::generated::x4bc99fe3>(AutoDisableType_type_id, rivet::ddl::generated::x4bc99fe3_values, rivet::ddl::generated::x4bc99fe3::Do_Not_Auto_Disable); 
	}

	[[nodiscard]] auto
	TriggerSwitchSimplePrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TriggerSwitchSimplePrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerSwitchSimplePrius> {
		if (incoming_type_id == TriggerSwitchSimplePrius::type_id) {
			return std::make_shared<TriggerSwitchSimplePrius>(serialized);
		}

		auto TriggerSwitchRandomEnabledPrius_ptr = TriggerSwitchRandomEnabledPrius::from_substruct(incoming_type_id, serialized);
		if (TriggerSwitchRandomEnabledPrius_ptr != nullptr) {
			return TriggerSwitchRandomEnabledPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
