// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/PortalPassiveShiftPrius.hpp>
#include <rivet/ddl/generated/PortalLoadPrius.hpp> 

#include <rivet/ddl/generated/PortalPrius.hpp>

namespace rivet::ddl::generated {
	PortalPrius::PortalPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		TargetPortal = serialized->get_uint64(TargetPortal_type_id, 0ull);
		StartActive = serialized->get_bool(StartActive_type_id, false);
		StartActiveIfLoaded = serialized->get_bool(StartActiveIfLoaded_type_id, false);
		SyncWithTargetPortal = serialized->get_bool(SyncWithTargetPortal_type_id, true);
		PortalLoad = serialized->unwrap_into<rivet::ddl::generated::PortalLoadPrius>(PortalLoad_type_id); 
	}

	[[nodiscard]] auto
	PortalPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	PortalPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<PortalPrius> {
		if (incoming_type_id == PortalPrius::type_id) {
			return std::make_shared<PortalPrius>(serialized);
		}

		auto PortalPassiveShiftPrius_ptr = PortalPassiveShiftPrius::from_substruct(incoming_type_id, serialized);
		if (PortalPassiveShiftPrius_ptr != nullptr) {
			return PortalPassiveShiftPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
