// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/MasterDebugOutfittingConfig.hpp>
#include <rivet/ddl/generated/UICollectiblesConfig.hpp>
#include <rivet/ddl/generated/MotionActionConfig.hpp>
#include <rivet/ddl/generated/SpaceshipHeroFlightConfig.hpp>
#include <rivet/ddl/generated/BotConfigFiring.hpp>
#include <rivet/ddl/generated/GameMacroConfig.hpp>
#include <rivet/ddl/generated/FlockDensityConfig.hpp>
#include <rivet/ddl/generated/ProximitySpawnerConfig.hpp>
#include <rivet/ddl/generated/VanityBundleConfig.hpp>
#include <rivet/ddl/generated/SharedHeroConfig.hpp>
#include <rivet/ddl/generated/StreamingVideoBaseConfig.hpp>
#include <rivet/ddl/generated/AttackCooldownSystemConfig.hpp>
#include <rivet/ddl/generated/MasterWeaponList.hpp>
#include <rivet/ddl/generated/DifficultyModProgressionBonusConfig.hpp>
#include <rivet/ddl/generated/MissionOrderConfigBase.hpp>
#include <rivet/ddl/generated/DeviceSpecificLocalizationConfig.hpp>
#include <rivet/ddl/generated/DevstatsSystemConfig.hpp>
#include <rivet/ddl/generated/LootListConfig.hpp>
#include <rivet/ddl/generated/MountConfig.hpp>
#include <rivet/ddl/generated/FastTravelConfig.hpp>
#include <rivet/ddl/generated/CustomRespawnConfig.hpp>
#include <rivet/ddl/generated/ShotWarmongerMicroRocketConfig.hpp>
#include <rivet/ddl/generated/BotConfigLookSelector.hpp>
#include <rivet/ddl/generated/DepthOfFieldGameConfig.hpp>
#include <rivet/ddl/generated/HealthDropConfig.hpp>
#include <rivet/ddl/generated/PhysicsExperimentalSoftKickableConfig.hpp>
#include <rivet/ddl/generated/SkinItemDecalConfig.hpp>
#include <rivet/ddl/generated/LandingBirdSystemConfig.hpp>
#include <rivet/ddl/generated/ModelSplineConfig.hpp>
#include <rivet/ddl/generated/GroovitronDanceTrophyConfig.hpp>
#include <rivet/ddl/generated/UICreditsConfig.hpp>
#include <rivet/ddl/generated/ActivityMetadataConfig.hpp>
#include <rivet/ddl/generated/WeaponEquipListenerConfig.hpp>
#include <rivet/ddl/generated/MeleeConfig.hpp>
#include <rivet/ddl/generated/UIIconsConfig.hpp>
#include <rivet/ddl/generated/StreamingVideoOverrideConfig.hpp>
#include <rivet/ddl/generated/BiomeConfig.hpp>
#include <rivet/ddl/generated/MapDataConfig.hpp>
#include <rivet/ddl/generated/ColorCorrectionSystemConfig.hpp>
#include <rivet/ddl/generated/DamageMultiPrimConfig.hpp>
#include <rivet/ddl/generated/SoundFocusComponentConfig.hpp>
#include <rivet/ddl/generated/HeroPortalZipConfig.hpp>
#include <rivet/ddl/generated/HashListConfig.hpp>
#include <rivet/ddl/generated/BodypartToFilterConfig.hpp>
#include <rivet/ddl/generated/VanitySetConfig.hpp>
#include <rivet/ddl/generated/DamageIntelConfig.hpp>
#include <rivet/ddl/generated/MaterialBuildConfig.hpp>
#include <rivet/ddl/generated/MountCameraConfig.hpp>
#include <rivet/ddl/generated/VendorConfig.hpp>
#include <rivet/ddl/generated/TimeScaleConfig.hpp>
#include <rivet/ddl/generated/FinaleMechConfigStatusEffects.hpp>
#include <rivet/ddl/generated/FollowCameraUserConfig.hpp>
#include <rivet/ddl/generated/WeaponModConfig.hpp>
#include <rivet/ddl/generated/RewardRenderModeConfig.hpp>
#include <rivet/ddl/generated/LedgeBirdSystemConfig.hpp>
#include <rivet/ddl/generated/UIFontMapConfig.hpp>
#include <rivet/ddl/generated/CritterTypeConfig.hpp>
#include <rivet/ddl/generated/HeroSkinConfig.hpp>
#include <rivet/ddl/generated/BotConfigStatusEffects.hpp>
#include <rivet/ddl/generated/CollectibleSystemConfig.hpp>
#include <rivet/ddl/generated/BreakableVariantDifficultyModConfig.hpp>
#include <rivet/ddl/generated/RewardShipSkinConfig.hpp>
#include <rivet/ddl/generated/FusionGrenadeSubShotConfig.hpp>
#include <rivet/ddl/generated/TradingCardConfig.hpp>
#include <rivet/ddl/generated/KineticReactConfig.hpp>
#include <rivet/ddl/generated/MasterLootList.hpp>
#include <rivet/ddl/generated/ShotBouncerMiniBombConfig.hpp>
#include <rivet/ddl/generated/MasterGeneralInventoryList.hpp>
#include <rivet/ddl/generated/UIDifficultyConfig.hpp>
#include <rivet/ddl/generated/UniqueHeroConfig.hpp>
#include <rivet/ddl/generated/PhotomodeSystemSharedConfig.hpp>
#include <rivet/ddl/generated/TriggerEffectConfig.hpp>
#include <rivet/ddl/generated/CameraShakingConfig.hpp>
#include <rivet/ddl/generated/EmergentVOConfig.hpp>
#include <rivet/ddl/generated/BotConfigTargeting.hpp>
#include <rivet/ddl/generated/AimAssistUserConfig.hpp>
#include <rivet/ddl/generated/UIBootGameConfig.hpp>
#include <rivet/ddl/generated/RewardHeadSizeConfig.hpp>
#include <rivet/ddl/generated/SoundListenerConfig.hpp>
#include <rivet/ddl/generated/HoudiniMenuConfig.hpp>
#include <rivet/ddl/generated/ClankPuzzleTargetBaseConfig.hpp>
#include <rivet/ddl/generated/FocusTrackingConfig.hpp>
#include <rivet/ddl/generated/BotDebugSpawnConfig.hpp>
#include <rivet/ddl/generated/LevelEconomyDataConfig.hpp>
#include <rivet/ddl/generated/CameraCurve.hpp>
#include <rivet/ddl/generated/ProximitySpawnSystemConfig.hpp>
#include <rivet/ddl/generated/TextureBuildConfig.hpp>
#include <rivet/ddl/generated/PyrocitorSubShotConfig.hpp>
#include <rivet/ddl/generated/DevstatsTimeConfig.hpp>
#include <rivet/ddl/generated/SpawnedShotEmitterConfig.hpp>
#include <rivet/ddl/generated/ChunkManagerConfig.hpp>
#include <rivet/ddl/generated/AimAssistTargetConfig.hpp>
#include <rivet/ddl/generated/CameraStickConfig.hpp>
#include <rivet/ddl/generated/UIPhotoModeConfig.hpp>
#include <rivet/ddl/generated/EconomyBoltModelSwapConfig.hpp>
#include <rivet/ddl/generated/ObjectiveSystemConfig_Tools.hpp>
#include <rivet/ddl/generated/UIArenaConfig.hpp>
#include <rivet/ddl/generated/DimensionalPulseConfig.hpp>
#include <rivet/ddl/generated/BotConfigCombo.hpp>
#include <rivet/ddl/generated/TargetingAimAngleConfig.hpp>
#include <rivet/ddl/generated/DamageStateManagerConfig.hpp>
#include <rivet/ddl/generated/RewardMeleeWeaponSkinConfig.hpp>
#include <rivet/ddl/generated/UIObjectDisplayerConfig.hpp>
#include <rivet/ddl/generated/AmbientBarrageConfig.hpp>
#include <rivet/ddl/generated/UIGalleryConfig.hpp>
#include <rivet/ddl/generated/StreakConfig.hpp>
#include <rivet/ddl/generated/BotConfigAnimFilterSelector.hpp>
#include <rivet/ddl/generated/IconMapConfig.hpp>
#include <rivet/ddl/generated/LootSetupConfig.hpp>
#include <rivet/ddl/generated/AwardsConfig.hpp>
#include <rivet/ddl/generated/LevelAreaConfig.hpp>
#include <rivet/ddl/generated/BotConfigDeath.hpp>
#include <rivet/ddl/generated/RandomAttachmentConfig.hpp>
#include <rivet/ddl/generated/FlockConfig.hpp>
#include <rivet/ddl/generated/HoudiniConfig.hpp>
#include <rivet/ddl/generated/MasterGadgetList.hpp>
#include <rivet/ddl/generated/MasterSkinItemList.hpp>
#include <rivet/ddl/generated/SpaceshipMagnetConfig.hpp>
#include <rivet/ddl/generated/ClankPackConfig.hpp>
#include <rivet/ddl/generated/StatusEffectGlobalConfig.hpp>
#include <rivet/ddl/generated/AccessibilityHighlightConfig.hpp>
#include <rivet/ddl/generated/FormationMotionConfig.hpp>
#include <rivet/ddl/generated/SoundEngineConfig.hpp>
#include <rivet/ddl/generated/PropConfig.hpp>
#include <rivet/ddl/generated/BotConfigModifyMovement.hpp>
#include <rivet/ddl/generated/TradingCardSetConfig.hpp>
#include <rivet/ddl/generated/ZurkonShotConfig.hpp>
#include <rivet/ddl/generated/WeaponLevelConfig.hpp>
#include <rivet/ddl/generated/AccessibilitySystemConfig.hpp>
#include <rivet/ddl/generated/RegionMacroEconomyConfig.hpp>
#include <rivet/ddl/generated/UIJukeboxConfig.hpp>
#include <rivet/ddl/generated/BotVariantDifficultyModConfig.hpp>
#include <rivet/ddl/generated/HazardDamageAreaConfig.hpp>
#include <rivet/ddl/generated/HeroLevelConfig.hpp>
#include <rivet/ddl/generated/DebugActorSystemConfig.hpp>
#include <rivet/ddl/generated/BotConfigMelee.hpp>
#include <rivet/ddl/generated/UITutorialsConfig.hpp>
#include <rivet/ddl/generated/SpaceshipThrustConfig.hpp>
#include <rivet/ddl/generated/SpawnerBotBaseConfig.hpp>
#include <rivet/ddl/generated/DifficultyModConfig.hpp>
#include <rivet/ddl/generated/UIOptionsConfig.hpp>
#include <rivet/ddl/generated/EntitlementSystemConfig.hpp>
#include <rivet/ddl/generated/HeroOpenPocketDimConfig.hpp>
#include <rivet/ddl/generated/AutoPlaceCritterSystemConfig.hpp>
#include <rivet/ddl/generated/TradingCardBonusDisplayConfig.hpp>
#include <rivet/ddl/generated/BotConfigMovement3D.hpp>
#include <rivet/ddl/generated/BotConfigWaterFx.hpp>
#include <rivet/ddl/generated/AssetSwapPlatSpec.hpp>
#include <rivet/ddl/generated/BotConfigMovement.hpp>
#include <rivet/ddl/generated/ActivitySystemConfig.hpp>
#include <rivet/ddl/generated/IncinerateConfig.hpp>
#include <rivet/ddl/generated/CameraAimContextConfig.hpp>
#include <rivet/ddl/generated/StackableCrateSystemConfig.hpp>
#include <rivet/ddl/generated/SaveSystemConfig.hpp>
#include <rivet/ddl/generated/LoadCoherentURLConfig.hpp>
#include <rivet/ddl/generated/HeroTraversalConfig.hpp>
#include <rivet/ddl/generated/SubShotConfig.hpp>
#include <rivet/ddl/generated/MovieSubtitlesConfig.hpp>
#include <rivet/ddl/generated/ProjectileThrowingConfig.hpp>
#include <rivet/ddl/generated/MasterItemLoadoutList.hpp>
#include <rivet/ddl/generated/AmmoConfigBase.hpp>
#include <rivet/ddl/generated/BotConfigEmergentVO.hpp>
#include <rivet/ddl/generated/BotConfigHitReact.hpp>
#include <rivet/ddl/generated/POIConfig.hpp>
#include <rivet/ddl/generated/SkinItemConstantConfig.hpp>
#include <rivet/ddl/generated/PriusReferenceGenerationRulesConfig.hpp>
#include <rivet/ddl/generated/FlockingManagerConfig.hpp>
#include <rivet/ddl/generated/CrowdSpawnerTypeConfig.hpp>
#include <rivet/ddl/generated/EconMacroConfig.hpp>
#include <rivet/ddl/generated/RewardHomeRunHitterConfig.hpp>
#include <rivet/ddl/generated/LootDropConfig.hpp>
#include <rivet/ddl/generated/ObjectiveSystemConfig.hpp>
#include <rivet/ddl/generated/WeaponConfigBase.hpp>
#include <rivet/ddl/generated/RewardMeleeModelSwapConfig.hpp>
#include <rivet/ddl/generated/BotVariantConfig.hpp>
#include <rivet/ddl/generated/VehicleSetConfig.hpp>
#include <rivet/ddl/generated/SpawnedShotTargetingConfig.hpp>
#include <rivet/ddl/generated/SoundEarlyReflectionsConfig.hpp>
#include <rivet/ddl/generated/PerfSpecConfig.hpp>
#include <rivet/ddl/generated/BotConfigAiming.hpp>
#include <rivet/ddl/generated/VehicleSystemConfig.hpp>
#include <rivet/ddl/generated/ItemLoadoutConfig.hpp>
#include <rivet/ddl/generated/ReqList.hpp>
#include <rivet/ddl/generated/BootConfig.hpp>
#include <rivet/ddl/generated/ClankPackLoadoutConfig.hpp>
#include <rivet/ddl/generated/LedgeBirdTypeConfig.hpp>
#include <rivet/ddl/generated/GoldBoltSystemConfig.hpp>
#include <rivet/ddl/generated/ModelBuildConfig.hpp>
#include <rivet/ddl/generated/Cinematic2ActorAssignmentConfig.hpp>
#include <rivet/ddl/generated/LandingBirdTypeConfig.hpp>
#include <rivet/ddl/generated/MasterMissionOrderConfigBase.hpp>
#include <rivet/ddl/generated/HeroCharacterConfig.hpp>
#include <rivet/ddl/generated/LightGridModConfig.hpp>
#include <rivet/ddl/generated/DebugPlaytestConfig.hpp>
#include <rivet/ddl/generated/ItemConfig.hpp>
#include <rivet/ddl/generated/UIViewInfoConfig.hpp>
#include <rivet/ddl/generated/Cinematic2BuildConfig.hpp>
#include <rivet/ddl/generated/ScreenEffectListConfig.hpp>
#include <rivet/ddl/generated/ConversationConfig.hpp>
#include <rivet/ddl/generated/WeaponGridConfig.hpp>
#include <rivet/ddl/generated/TriggerEffectSystemConfig.hpp>
#include <rivet/ddl/generated/HazardTurretConfig.hpp>
#include <rivet/ddl/generated/PirateHeavyMiniBounceBombShotConfig.hpp>
#include <rivet/ddl/generated/UIIconMarkupConfig.hpp>
#include <rivet/ddl/generated/SoundMaterialObstructionConfig.hpp>
#include <rivet/ddl/generated/SkinItemColorConfig.hpp>
#include <rivet/ddl/generated/BotConfigShooting.hpp>
#include <rivet/ddl/generated/DialogSetConfig.hpp>
#include <rivet/ddl/generated/HeroHoverbootConfig.hpp>
#include <rivet/ddl/generated/GameBotConfigFiring.hpp>
#include <rivet/ddl/generated/UIEndGameOptionConfig.hpp>
#include <rivet/ddl/generated/HeroSlideConfig.hpp>
#include <rivet/ddl/generated/TradingCardClassConfig.hpp>
#include <rivet/ddl/generated/BotConfigPhysics.hpp>
#include <rivet/ddl/generated/LootTableConfig.hpp>
#include <rivet/ddl/generated/ShotPredatorLauncherMiniMissileConfig.hpp>
#include <rivet/ddl/generated/SpawnedShotConfig.hpp>
#include <rivet/ddl/generated/MusicIntensityTrackerConfig.hpp>
#include <rivet/ddl/generated/ZoomConfig.hpp>
#include <rivet/ddl/generated/BotConfigAwareness.hpp>
#include <rivet/ddl/generated/ShieldConfig.hpp>
#include <rivet/ddl/generated/Cinematic2ActorCustomizationConfig.hpp>
#include <rivet/ddl/generated/CrowdSpawnerSystemConfig.hpp>
#include <rivet/ddl/generated/FarmLightingConfig2.hpp>
#include <rivet/ddl/generated/HeroGrindConfig.hpp>
#include <rivet/ddl/generated/MoverConfig.hpp> 

#include <rivet/ddl/generated/ConfigBase.hpp>

namespace rivet::ddl::generated {
	ConfigBase::ConfigBase([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		ID = serialized->get_uint64(ID_type_id, 0);
		Comment = serialized->get_string(Comment_type_id, {}); 
	}

	[[nodiscard]] auto
	ConfigBase::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	ConfigBase::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<ConfigBase> {
		if (incoming_type_id == ConfigBase::type_id) {
			return std::make_shared<ConfigBase>(serialized);
		}

		auto ProjectileThrowingConfig_ptr = ProjectileThrowingConfig::from_substruct(incoming_type_id, serialized);
		if (ProjectileThrowingConfig_ptr != nullptr) {
			return ProjectileThrowingConfig_ptr;
		}

		auto AmbientBarrageConfig_ptr = AmbientBarrageConfig::from_substruct(incoming_type_id, serialized);
		if (AmbientBarrageConfig_ptr != nullptr) {
			return AmbientBarrageConfig_ptr;
		}

		auto UIPhotoModeConfig_ptr = UIPhotoModeConfig::from_substruct(incoming_type_id, serialized);
		if (UIPhotoModeConfig_ptr != nullptr) {
			return UIPhotoModeConfig_ptr;
		}

		auto ObjectiveSystemConfig_Tools_ptr = ObjectiveSystemConfig_Tools::from_substruct(incoming_type_id, serialized);
		if (ObjectiveSystemConfig_Tools_ptr != nullptr) {
			return ObjectiveSystemConfig_Tools_ptr;
		}

		auto UIOptionsConfig_ptr = UIOptionsConfig::from_substruct(incoming_type_id, serialized);
		if (UIOptionsConfig_ptr != nullptr) {
			return UIOptionsConfig_ptr;
		}

		auto LevelAreaConfig_ptr = LevelAreaConfig::from_substruct(incoming_type_id, serialized);
		if (LevelAreaConfig_ptr != nullptr) {
			return LevelAreaConfig_ptr;
		}

		auto TargetingAimAngleConfig_ptr = TargetingAimAngleConfig::from_substruct(incoming_type_id, serialized);
		if (TargetingAimAngleConfig_ptr != nullptr) {
			return TargetingAimAngleConfig_ptr;
		}

		auto FlockConfig_ptr = FlockConfig::from_substruct(incoming_type_id, serialized);
		if (FlockConfig_ptr != nullptr) {
			return FlockConfig_ptr;
		}

		auto BotConfigHitReact_ptr = BotConfigHitReact::from_substruct(incoming_type_id, serialized);
		if (BotConfigHitReact_ptr != nullptr) {
			return BotConfigHitReact_ptr;
		}

		auto MasterSkinItemList_ptr = MasterSkinItemList::from_substruct(incoming_type_id, serialized);
		if (MasterSkinItemList_ptr != nullptr) {
			return MasterSkinItemList_ptr;
		}

		auto AssetSwapPlatSpec_ptr = AssetSwapPlatSpec::from_substruct(incoming_type_id, serialized);
		if (AssetSwapPlatSpec_ptr != nullptr) {
			return AssetSwapPlatSpec_ptr;
		}

		auto FormationMotionConfig_ptr = FormationMotionConfig::from_substruct(incoming_type_id, serialized);
		if (FormationMotionConfig_ptr != nullptr) {
			return FormationMotionConfig_ptr;
		}

		auto DebugActorSystemConfig_ptr = DebugActorSystemConfig::from_substruct(incoming_type_id, serialized);
		if (DebugActorSystemConfig_ptr != nullptr) {
			return DebugActorSystemConfig_ptr;
		}

		auto ZurkonShotConfig_ptr = ZurkonShotConfig::from_substruct(incoming_type_id, serialized);
		if (ZurkonShotConfig_ptr != nullptr) {
			return ZurkonShotConfig_ptr;
		}

		auto BotVariantDifficultyModConfig_ptr = BotVariantDifficultyModConfig::from_substruct(incoming_type_id, serialized);
		if (BotVariantDifficultyModConfig_ptr != nullptr) {
			return BotVariantDifficultyModConfig_ptr;
		}

		auto HoudiniMenuConfig_ptr = HoudiniMenuConfig::from_substruct(incoming_type_id, serialized);
		if (HoudiniMenuConfig_ptr != nullptr) {
			return HoudiniMenuConfig_ptr;
		}

		auto MasterGadgetList_ptr = MasterGadgetList::from_substruct(incoming_type_id, serialized);
		if (MasterGadgetList_ptr != nullptr) {
			return MasterGadgetList_ptr;
		}

		auto BotConfigMelee_ptr = BotConfigMelee::from_substruct(incoming_type_id, serialized);
		if (BotConfigMelee_ptr != nullptr) {
			return BotConfigMelee_ptr;
		}

		auto StackableCrateSystemConfig_ptr = StackableCrateSystemConfig::from_substruct(incoming_type_id, serialized);
		if (StackableCrateSystemConfig_ptr != nullptr) {
			return StackableCrateSystemConfig_ptr;
		}

		auto TradingCardSetConfig_ptr = TradingCardSetConfig::from_substruct(incoming_type_id, serialized);
		if (TradingCardSetConfig_ptr != nullptr) {
			return TradingCardSetConfig_ptr;
		}

		auto LightGridModConfig_ptr = LightGridModConfig::from_substruct(incoming_type_id, serialized);
		if (LightGridModConfig_ptr != nullptr) {
			return LightGridModConfig_ptr;
		}

		auto CameraCurve_ptr = CameraCurve::from_substruct(incoming_type_id, serialized);
		if (CameraCurve_ptr != nullptr) {
			return CameraCurve_ptr;
		}

		auto SubShotConfig_ptr = SubShotConfig::from_substruct(incoming_type_id, serialized);
		if (SubShotConfig_ptr != nullptr) {
			return SubShotConfig_ptr;
		}

		auto UniqueHeroConfig_ptr = UniqueHeroConfig::from_substruct(incoming_type_id, serialized);
		if (UniqueHeroConfig_ptr != nullptr) {
			return UniqueHeroConfig_ptr;
		}

		auto AwardsConfig_ptr = AwardsConfig::from_substruct(incoming_type_id, serialized);
		if (AwardsConfig_ptr != nullptr) {
			return AwardsConfig_ptr;
		}

		auto DimensionalPulseConfig_ptr = DimensionalPulseConfig::from_substruct(incoming_type_id, serialized);
		if (DimensionalPulseConfig_ptr != nullptr) {
			return DimensionalPulseConfig_ptr;
		}

		auto AutoPlaceCritterSystemConfig_ptr = AutoPlaceCritterSystemConfig::from_substruct(incoming_type_id, serialized);
		if (AutoPlaceCritterSystemConfig_ptr != nullptr) {
			return AutoPlaceCritterSystemConfig_ptr;
		}

		auto UITutorialsConfig_ptr = UITutorialsConfig::from_substruct(incoming_type_id, serialized);
		if (UITutorialsConfig_ptr != nullptr) {
			return UITutorialsConfig_ptr;
		}

		auto IconMapConfig_ptr = IconMapConfig::from_substruct(incoming_type_id, serialized);
		if (IconMapConfig_ptr != nullptr) {
			return IconMapConfig_ptr;
		}

		auto RewardHeadSizeConfig_ptr = RewardHeadSizeConfig::from_substruct(incoming_type_id, serialized);
		if (RewardHeadSizeConfig_ptr != nullptr) {
			return RewardHeadSizeConfig_ptr;
		}

		auto CameraAimContextConfig_ptr = CameraAimContextConfig::from_substruct(incoming_type_id, serialized);
		if (CameraAimContextConfig_ptr != nullptr) {
			return CameraAimContextConfig_ptr;
		}

		auto UIArenaConfig_ptr = UIArenaConfig::from_substruct(incoming_type_id, serialized);
		if (UIArenaConfig_ptr != nullptr) {
			return UIArenaConfig_ptr;
		}

		auto ClankPackLoadoutConfig_ptr = ClankPackLoadoutConfig::from_substruct(incoming_type_id, serialized);
		if (ClankPackLoadoutConfig_ptr != nullptr) {
			return ClankPackLoadoutConfig_ptr;
		}

		auto BotConfigMovement3D_ptr = BotConfigMovement3D::from_substruct(incoming_type_id, serialized);
		if (BotConfigMovement3D_ptr != nullptr) {
			return BotConfigMovement3D_ptr;
		}

		auto AimAssistTargetConfig_ptr = AimAssistTargetConfig::from_substruct(incoming_type_id, serialized);
		if (AimAssistTargetConfig_ptr != nullptr) {
			return AimAssistTargetConfig_ptr;
		}

		auto ChunkManagerConfig_ptr = ChunkManagerConfig::from_substruct(incoming_type_id, serialized);
		if (ChunkManagerConfig_ptr != nullptr) {
			return ChunkManagerConfig_ptr;
		}

		auto RewardMeleeModelSwapConfig_ptr = RewardMeleeModelSwapConfig::from_substruct(incoming_type_id, serialized);
		if (RewardMeleeModelSwapConfig_ptr != nullptr) {
			return RewardMeleeModelSwapConfig_ptr;
		}

		auto LootSetupConfig_ptr = LootSetupConfig::from_substruct(incoming_type_id, serialized);
		if (LootSetupConfig_ptr != nullptr) {
			return LootSetupConfig_ptr;
		}

		auto UIJukeboxConfig_ptr = UIJukeboxConfig::from_substruct(incoming_type_id, serialized);
		if (UIJukeboxConfig_ptr != nullptr) {
			return UIJukeboxConfig_ptr;
		}

		auto EmergentVOConfig_ptr = EmergentVOConfig::from_substruct(incoming_type_id, serialized);
		if (EmergentVOConfig_ptr != nullptr) {
			return EmergentVOConfig_ptr;
		}

		auto RegionMacroEconomyConfig_ptr = RegionMacroEconomyConfig::from_substruct(incoming_type_id, serialized);
		if (RegionMacroEconomyConfig_ptr != nullptr) {
			return RegionMacroEconomyConfig_ptr;
		}

		auto SpawnedShotEmitterConfig_ptr = SpawnedShotEmitterConfig::from_substruct(incoming_type_id, serialized);
		if (SpawnedShotEmitterConfig_ptr != nullptr) {
			return SpawnedShotEmitterConfig_ptr;
		}

		auto BotConfigPhysics_ptr = BotConfigPhysics::from_substruct(incoming_type_id, serialized);
		if (BotConfigPhysics_ptr != nullptr) {
			return BotConfigPhysics_ptr;
		}

		auto HeroSlideConfig_ptr = HeroSlideConfig::from_substruct(incoming_type_id, serialized);
		if (HeroSlideConfig_ptr != nullptr) {
			return HeroSlideConfig_ptr;
		}

		auto ReqList_ptr = ReqList::from_substruct(incoming_type_id, serialized);
		if (ReqList_ptr != nullptr) {
			return ReqList_ptr;
		}

		auto DifficultyModConfig_ptr = DifficultyModConfig::from_substruct(incoming_type_id, serialized);
		if (DifficultyModConfig_ptr != nullptr) {
			return DifficultyModConfig_ptr;
		}

		auto LevelEconomyDataConfig_ptr = LevelEconomyDataConfig::from_substruct(incoming_type_id, serialized);
		if (LevelEconomyDataConfig_ptr != nullptr) {
			return LevelEconomyDataConfig_ptr;
		}

		auto ClankPuzzleTargetBaseConfig_ptr = ClankPuzzleTargetBaseConfig::from_substruct(incoming_type_id, serialized);
		if (ClankPuzzleTargetBaseConfig_ptr != nullptr) {
			return ClankPuzzleTargetBaseConfig_ptr;
		}

		auto SoundListenerConfig_ptr = SoundListenerConfig::from_substruct(incoming_type_id, serialized);
		if (SoundListenerConfig_ptr != nullptr) {
			return SoundListenerConfig_ptr;
		}

		auto SaveSystemConfig_ptr = SaveSystemConfig::from_substruct(incoming_type_id, serialized);
		if (SaveSystemConfig_ptr != nullptr) {
			return SaveSystemConfig_ptr;
		}

		auto UIGalleryConfig_ptr = UIGalleryConfig::from_substruct(incoming_type_id, serialized);
		if (UIGalleryConfig_ptr != nullptr) {
			return UIGalleryConfig_ptr;
		}

		auto AccessibilitySystemConfig_ptr = AccessibilitySystemConfig::from_substruct(incoming_type_id, serialized);
		if (AccessibilitySystemConfig_ptr != nullptr) {
			return AccessibilitySystemConfig_ptr;
		}

		auto CameraShakingConfig_ptr = CameraShakingConfig::from_substruct(incoming_type_id, serialized);
		if (CameraShakingConfig_ptr != nullptr) {
			return CameraShakingConfig_ptr;
		}

		auto SoundEngineConfig_ptr = SoundEngineConfig::from_substruct(incoming_type_id, serialized);
		if (SoundEngineConfig_ptr != nullptr) {
			return SoundEngineConfig_ptr;
		}

		auto BotConfigWaterFx_ptr = BotConfigWaterFx::from_substruct(incoming_type_id, serialized);
		if (BotConfigWaterFx_ptr != nullptr) {
			return BotConfigWaterFx_ptr;
		}

		auto PyrocitorSubShotConfig_ptr = PyrocitorSubShotConfig::from_substruct(incoming_type_id, serialized);
		if (PyrocitorSubShotConfig_ptr != nullptr) {
			return PyrocitorSubShotConfig_ptr;
		}

		auto MasterGeneralInventoryList_ptr = MasterGeneralInventoryList::from_substruct(incoming_type_id, serialized);
		if (MasterGeneralInventoryList_ptr != nullptr) {
			return MasterGeneralInventoryList_ptr;
		}

		auto MasterLootList_ptr = MasterLootList::from_substruct(incoming_type_id, serialized);
		if (MasterLootList_ptr != nullptr) {
			return MasterLootList_ptr;
		}

		auto ProximitySpawnSystemConfig_ptr = ProximitySpawnSystemConfig::from_substruct(incoming_type_id, serialized);
		if (ProximitySpawnSystemConfig_ptr != nullptr) {
			return ProximitySpawnSystemConfig_ptr;
		}

		auto POIConfig_ptr = POIConfig::from_substruct(incoming_type_id, serialized);
		if (POIConfig_ptr != nullptr) {
			return POIConfig_ptr;
		}

		auto MovieSubtitlesConfig_ptr = MovieSubtitlesConfig::from_substruct(incoming_type_id, serialized);
		if (MovieSubtitlesConfig_ptr != nullptr) {
			return MovieSubtitlesConfig_ptr;
		}

		auto PriusReferenceGenerationRulesConfig_ptr = PriusReferenceGenerationRulesConfig::from_substruct(incoming_type_id, serialized);
		if (PriusReferenceGenerationRulesConfig_ptr != nullptr) {
			return PriusReferenceGenerationRulesConfig_ptr;
		}

		auto FocusTrackingConfig_ptr = FocusTrackingConfig::from_substruct(incoming_type_id, serialized);
		if (FocusTrackingConfig_ptr != nullptr) {
			return FocusTrackingConfig_ptr;
		}

		auto SpawnerBotBaseConfig_ptr = SpawnerBotBaseConfig::from_substruct(incoming_type_id, serialized);
		if (SpawnerBotBaseConfig_ptr != nullptr) {
			return SpawnerBotBaseConfig_ptr;
		}

		auto TriggerEffectConfig_ptr = TriggerEffectConfig::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectConfig_ptr != nullptr) {
			return TriggerEffectConfig_ptr;
		}

		auto CrowdSpawnerTypeConfig_ptr = CrowdSpawnerTypeConfig::from_substruct(incoming_type_id, serialized);
		if (CrowdSpawnerTypeConfig_ptr != nullptr) {
			return CrowdSpawnerTypeConfig_ptr;
		}

		auto BotConfigModifyMovement_ptr = BotConfigModifyMovement::from_substruct(incoming_type_id, serialized);
		if (BotConfigModifyMovement_ptr != nullptr) {
			return BotConfigModifyMovement_ptr;
		}

		auto EconMacroConfig_ptr = EconMacroConfig::from_substruct(incoming_type_id, serialized);
		if (EconMacroConfig_ptr != nullptr) {
			return EconMacroConfig_ptr;
		}

		auto RewardHomeRunHitterConfig_ptr = RewardHomeRunHitterConfig::from_substruct(incoming_type_id, serialized);
		if (RewardHomeRunHitterConfig_ptr != nullptr) {
			return RewardHomeRunHitterConfig_ptr;
		}

		auto LootDropConfig_ptr = LootDropConfig::from_substruct(incoming_type_id, serialized);
		if (LootDropConfig_ptr != nullptr) {
			return LootDropConfig_ptr;
		}

		auto ObjectiveSystemConfig_ptr = ObjectiveSystemConfig::from_substruct(incoming_type_id, serialized);
		if (ObjectiveSystemConfig_ptr != nullptr) {
			return ObjectiveSystemConfig_ptr;
		}

		auto SpaceshipMagnetConfig_ptr = SpaceshipMagnetConfig::from_substruct(incoming_type_id, serialized);
		if (SpaceshipMagnetConfig_ptr != nullptr) {
			return SpaceshipMagnetConfig_ptr;
		}

		auto RewardMeleeWeaponSkinConfig_ptr = RewardMeleeWeaponSkinConfig::from_substruct(incoming_type_id, serialized);
		if (RewardMeleeWeaponSkinConfig_ptr != nullptr) {
			return RewardMeleeWeaponSkinConfig_ptr;
		}

		auto WeaponConfigBase_ptr = WeaponConfigBase::from_substruct(incoming_type_id, serialized);
		if (WeaponConfigBase_ptr != nullptr) {
			return WeaponConfigBase_ptr;
		}

		auto BotVariantConfig_ptr = BotVariantConfig::from_substruct(incoming_type_id, serialized);
		if (BotVariantConfig_ptr != nullptr) {
			return BotVariantConfig_ptr;
		}

		auto StreakConfig_ptr = StreakConfig::from_substruct(incoming_type_id, serialized);
		if (StreakConfig_ptr != nullptr) {
			return StreakConfig_ptr;
		}

		auto EconomyBoltModelSwapConfig_ptr = EconomyBoltModelSwapConfig::from_substruct(incoming_type_id, serialized);
		if (EconomyBoltModelSwapConfig_ptr != nullptr) {
			return EconomyBoltModelSwapConfig_ptr;
		}

		auto WeaponLevelConfig_ptr = WeaponLevelConfig::from_substruct(incoming_type_id, serialized);
		if (WeaponLevelConfig_ptr != nullptr) {
			return WeaponLevelConfig_ptr;
		}

		auto VehicleSetConfig_ptr = VehicleSetConfig::from_substruct(incoming_type_id, serialized);
		if (VehicleSetConfig_ptr != nullptr) {
			return VehicleSetConfig_ptr;
		}

		auto SpawnedShotTargetingConfig_ptr = SpawnedShotTargetingConfig::from_substruct(incoming_type_id, serialized);
		if (SpawnedShotTargetingConfig_ptr != nullptr) {
			return SpawnedShotTargetingConfig_ptr;
		}

		auto LoadCoherentURLConfig_ptr = LoadCoherentURLConfig::from_substruct(incoming_type_id, serialized);
		if (LoadCoherentURLConfig_ptr != nullptr) {
			return LoadCoherentURLConfig_ptr;
		}

		auto UIBootGameConfig_ptr = UIBootGameConfig::from_substruct(incoming_type_id, serialized);
		if (UIBootGameConfig_ptr != nullptr) {
			return UIBootGameConfig_ptr;
		}

		auto StatusEffectGlobalConfig_ptr = StatusEffectGlobalConfig::from_substruct(incoming_type_id, serialized);
		if (StatusEffectGlobalConfig_ptr != nullptr) {
			return StatusEffectGlobalConfig_ptr;
		}

		auto TradingCardClassConfig_ptr = TradingCardClassConfig::from_substruct(incoming_type_id, serialized);
		if (TradingCardClassConfig_ptr != nullptr) {
			return TradingCardClassConfig_ptr;
		}

		auto PerfSpecConfig_ptr = PerfSpecConfig::from_substruct(incoming_type_id, serialized);
		if (PerfSpecConfig_ptr != nullptr) {
			return PerfSpecConfig_ptr;
		}

		auto VehicleSystemConfig_ptr = VehicleSystemConfig::from_substruct(incoming_type_id, serialized);
		if (VehicleSystemConfig_ptr != nullptr) {
			return VehicleSystemConfig_ptr;
		}

		auto BootConfig_ptr = BootConfig::from_substruct(incoming_type_id, serialized);
		if (BootConfig_ptr != nullptr) {
			return BootConfig_ptr;
		}

		auto MasterItemLoadoutList_ptr = MasterItemLoadoutList::from_substruct(incoming_type_id, serialized);
		if (MasterItemLoadoutList_ptr != nullptr) {
			return MasterItemLoadoutList_ptr;
		}

		auto GoldBoltSystemConfig_ptr = GoldBoltSystemConfig::from_substruct(incoming_type_id, serialized);
		if (GoldBoltSystemConfig_ptr != nullptr) {
			return GoldBoltSystemConfig_ptr;
		}

		auto AimAssistUserConfig_ptr = AimAssistUserConfig::from_substruct(incoming_type_id, serialized);
		if (AimAssistUserConfig_ptr != nullptr) {
			return AimAssistUserConfig_ptr;
		}

		auto ModelBuildConfig_ptr = ModelBuildConfig::from_substruct(incoming_type_id, serialized);
		if (ModelBuildConfig_ptr != nullptr) {
			return ModelBuildConfig_ptr;
		}

		auto CrowdSpawnerSystemConfig_ptr = CrowdSpawnerSystemConfig::from_substruct(incoming_type_id, serialized);
		if (CrowdSpawnerSystemConfig_ptr != nullptr) {
			return CrowdSpawnerSystemConfig_ptr;
		}

		auto LandingBirdTypeConfig_ptr = LandingBirdTypeConfig::from_substruct(incoming_type_id, serialized);
		if (LandingBirdTypeConfig_ptr != nullptr) {
			return LandingBirdTypeConfig_ptr;
		}

		auto SpaceshipThrustConfig_ptr = SpaceshipThrustConfig::from_substruct(incoming_type_id, serialized);
		if (SpaceshipThrustConfig_ptr != nullptr) {
			return SpaceshipThrustConfig_ptr;
		}

		auto TriggerEffectSystemConfig_ptr = TriggerEffectSystemConfig::from_substruct(incoming_type_id, serialized);
		if (TriggerEffectSystemConfig_ptr != nullptr) {
			return TriggerEffectSystemConfig_ptr;
		}

		auto Cinematic2BuildConfig_ptr = Cinematic2BuildConfig::from_substruct(incoming_type_id, serialized);
		if (Cinematic2BuildConfig_ptr != nullptr) {
			return Cinematic2BuildConfig_ptr;
		}

		auto CameraStickConfig_ptr = CameraStickConfig::from_substruct(incoming_type_id, serialized);
		if (CameraStickConfig_ptr != nullptr) {
			return CameraStickConfig_ptr;
		}

		auto MasterMissionOrderConfigBase_ptr = MasterMissionOrderConfigBase::from_substruct(incoming_type_id, serialized);
		if (MasterMissionOrderConfigBase_ptr != nullptr) {
			return MasterMissionOrderConfigBase_ptr;
		}

		auto FlockingManagerConfig_ptr = FlockingManagerConfig::from_substruct(incoming_type_id, serialized);
		if (FlockingManagerConfig_ptr != nullptr) {
			return FlockingManagerConfig_ptr;
		}

		auto DebugPlaytestConfig_ptr = DebugPlaytestConfig::from_substruct(incoming_type_id, serialized);
		if (DebugPlaytestConfig_ptr != nullptr) {
			return DebugPlaytestConfig_ptr;
		}

		auto ItemConfig_ptr = ItemConfig::from_substruct(incoming_type_id, serialized);
		if (ItemConfig_ptr != nullptr) {
			return ItemConfig_ptr;
		}

		auto ScreenEffectListConfig_ptr = ScreenEffectListConfig::from_substruct(incoming_type_id, serialized);
		if (ScreenEffectListConfig_ptr != nullptr) {
			return ScreenEffectListConfig_ptr;
		}

		auto HazardTurretConfig_ptr = HazardTurretConfig::from_substruct(incoming_type_id, serialized);
		if (HazardTurretConfig_ptr != nullptr) {
			return HazardTurretConfig_ptr;
		}

		auto PirateHeavyMiniBounceBombShotConfig_ptr = PirateHeavyMiniBounceBombShotConfig::from_substruct(incoming_type_id, serialized);
		if (PirateHeavyMiniBounceBombShotConfig_ptr != nullptr) {
			return PirateHeavyMiniBounceBombShotConfig_ptr;
		}

		auto UIIconMarkupConfig_ptr = UIIconMarkupConfig::from_substruct(incoming_type_id, serialized);
		if (UIIconMarkupConfig_ptr != nullptr) {
			return UIIconMarkupConfig_ptr;
		}

		auto BotConfigEmergentVO_ptr = BotConfigEmergentVO::from_substruct(incoming_type_id, serialized);
		if (BotConfigEmergentVO_ptr != nullptr) {
			return BotConfigEmergentVO_ptr;
		}

		auto SkinItemColorConfig_ptr = SkinItemColorConfig::from_substruct(incoming_type_id, serialized);
		if (SkinItemColorConfig_ptr != nullptr) {
			return SkinItemColorConfig_ptr;
		}

		auto DialogSetConfig_ptr = DialogSetConfig::from_substruct(incoming_type_id, serialized);
		if (DialogSetConfig_ptr != nullptr) {
			return DialogSetConfig_ptr;
		}

		auto HeroHoverbootConfig_ptr = HeroHoverbootConfig::from_substruct(incoming_type_id, serialized);
		if (HeroHoverbootConfig_ptr != nullptr) {
			return HeroHoverbootConfig_ptr;
		}

		auto ActivitySystemConfig_ptr = ActivitySystemConfig::from_substruct(incoming_type_id, serialized);
		if (ActivitySystemConfig_ptr != nullptr) {
			return ActivitySystemConfig_ptr;
		}

		auto HeroTraversalConfig_ptr = HeroTraversalConfig::from_substruct(incoming_type_id, serialized);
		if (HeroTraversalConfig_ptr != nullptr) {
			return HeroTraversalConfig_ptr;
		}

		auto ShotBouncerMiniBombConfig_ptr = ShotBouncerMiniBombConfig::from_substruct(incoming_type_id, serialized);
		if (ShotBouncerMiniBombConfig_ptr != nullptr) {
			return ShotBouncerMiniBombConfig_ptr;
		}

		auto UIEndGameOptionConfig_ptr = UIEndGameOptionConfig::from_substruct(incoming_type_id, serialized);
		if (UIEndGameOptionConfig_ptr != nullptr) {
			return UIEndGameOptionConfig_ptr;
		}

		auto LedgeBirdTypeConfig_ptr = LedgeBirdTypeConfig::from_substruct(incoming_type_id, serialized);
		if (LedgeBirdTypeConfig_ptr != nullptr) {
			return LedgeBirdTypeConfig_ptr;
		}

		auto MusicIntensityTrackerConfig_ptr = MusicIntensityTrackerConfig::from_substruct(incoming_type_id, serialized);
		if (MusicIntensityTrackerConfig_ptr != nullptr) {
			return MusicIntensityTrackerConfig_ptr;
		}

		auto ShotPredatorLauncherMiniMissileConfig_ptr = ShotPredatorLauncherMiniMissileConfig::from_substruct(incoming_type_id, serialized);
		if (ShotPredatorLauncherMiniMissileConfig_ptr != nullptr) {
			return ShotPredatorLauncherMiniMissileConfig_ptr;
		}

		auto HoudiniConfig_ptr = HoudiniConfig::from_substruct(incoming_type_id, serialized);
		if (HoudiniConfig_ptr != nullptr) {
			return HoudiniConfig_ptr;
		}

		auto BotConfigAwareness_ptr = BotConfigAwareness::from_substruct(incoming_type_id, serialized);
		if (BotConfigAwareness_ptr != nullptr) {
			return BotConfigAwareness_ptr;
		}

		auto Cinematic2ActorCustomizationConfig_ptr = Cinematic2ActorCustomizationConfig::from_substruct(incoming_type_id, serialized);
		if (Cinematic2ActorCustomizationConfig_ptr != nullptr) {
			return Cinematic2ActorCustomizationConfig_ptr;
		}

		auto BotConfigCombo_ptr = BotConfigCombo::from_substruct(incoming_type_id, serialized);
		if (BotConfigCombo_ptr != nullptr) {
			return BotConfigCombo_ptr;
		}

		auto DevstatsTimeConfig_ptr = DevstatsTimeConfig::from_substruct(incoming_type_id, serialized);
		if (DevstatsTimeConfig_ptr != nullptr) {
			return DevstatsTimeConfig_ptr;
		}

		auto FarmLightingConfig2_ptr = FarmLightingConfig2::from_substruct(incoming_type_id, serialized);
		if (FarmLightingConfig2_ptr != nullptr) {
			return FarmLightingConfig2_ptr;
		}

		auto MoverConfig_ptr = MoverConfig::from_substruct(incoming_type_id, serialized);
		if (MoverConfig_ptr != nullptr) {
			return MoverConfig_ptr;
		}

		auto EntitlementSystemConfig_ptr = EntitlementSystemConfig::from_substruct(incoming_type_id, serialized);
		if (EntitlementSystemConfig_ptr != nullptr) {
			return EntitlementSystemConfig_ptr;
		}

		auto DamageStateManagerConfig_ptr = DamageStateManagerConfig::from_substruct(incoming_type_id, serialized);
		if (DamageStateManagerConfig_ptr != nullptr) {
			return DamageStateManagerConfig_ptr;
		}

		auto LootTableConfig_ptr = LootTableConfig::from_substruct(incoming_type_id, serialized);
		if (LootTableConfig_ptr != nullptr) {
			return LootTableConfig_ptr;
		}

		auto BotConfigAiming_ptr = BotConfigAiming::from_substruct(incoming_type_id, serialized);
		if (BotConfigAiming_ptr != nullptr) {
			return BotConfigAiming_ptr;
		}

		auto TradingCardConfig_ptr = TradingCardConfig::from_substruct(incoming_type_id, serialized);
		if (TradingCardConfig_ptr != nullptr) {
			return TradingCardConfig_ptr;
		}

		auto RewardShipSkinConfig_ptr = RewardShipSkinConfig::from_substruct(incoming_type_id, serialized);
		if (RewardShipSkinConfig_ptr != nullptr) {
			return RewardShipSkinConfig_ptr;
		}

		auto BreakableVariantDifficultyModConfig_ptr = BreakableVariantDifficultyModConfig::from_substruct(incoming_type_id, serialized);
		if (BreakableVariantDifficultyModConfig_ptr != nullptr) {
			return BreakableVariantDifficultyModConfig_ptr;
		}

		auto BotConfigStatusEffects_ptr = BotConfigStatusEffects::from_substruct(incoming_type_id, serialized);
		if (BotConfigStatusEffects_ptr != nullptr) {
			return BotConfigStatusEffects_ptr;
		}

		auto CollectibleSystemConfig_ptr = CollectibleSystemConfig::from_substruct(incoming_type_id, serialized);
		if (CollectibleSystemConfig_ptr != nullptr) {
			return CollectibleSystemConfig_ptr;
		}

		auto CritterTypeConfig_ptr = CritterTypeConfig::from_substruct(incoming_type_id, serialized);
		if (CritterTypeConfig_ptr != nullptr) {
			return CritterTypeConfig_ptr;
		}

		auto UIFontMapConfig_ptr = UIFontMapConfig::from_substruct(incoming_type_id, serialized);
		if (UIFontMapConfig_ptr != nullptr) {
			return UIFontMapConfig_ptr;
		}

		auto AccessibilityHighlightConfig_ptr = AccessibilityHighlightConfig::from_substruct(incoming_type_id, serialized);
		if (AccessibilityHighlightConfig_ptr != nullptr) {
			return AccessibilityHighlightConfig_ptr;
		}

		auto LedgeBirdSystemConfig_ptr = LedgeBirdSystemConfig::from_substruct(incoming_type_id, serialized);
		if (LedgeBirdSystemConfig_ptr != nullptr) {
			return LedgeBirdSystemConfig_ptr;
		}

		auto WeaponModConfig_ptr = WeaponModConfig::from_substruct(incoming_type_id, serialized);
		if (WeaponModConfig_ptr != nullptr) {
			return WeaponModConfig_ptr;
		}

		auto VendorConfig_ptr = VendorConfig::from_substruct(incoming_type_id, serialized);
		if (VendorConfig_ptr != nullptr) {
			return VendorConfig_ptr;
		}

		auto MountCameraConfig_ptr = MountCameraConfig::from_substruct(incoming_type_id, serialized);
		if (MountCameraConfig_ptr != nullptr) {
			return MountCameraConfig_ptr;
		}

		auto MaterialBuildConfig_ptr = MaterialBuildConfig::from_substruct(incoming_type_id, serialized);
		if (MaterialBuildConfig_ptr != nullptr) {
			return MaterialBuildConfig_ptr;
		}

		auto BotConfigAnimFilterSelector_ptr = BotConfigAnimFilterSelector::from_substruct(incoming_type_id, serialized);
		if (BotConfigAnimFilterSelector_ptr != nullptr) {
			return BotConfigAnimFilterSelector_ptr;
		}

		auto DamageIntelConfig_ptr = DamageIntelConfig::from_substruct(incoming_type_id, serialized);
		if (DamageIntelConfig_ptr != nullptr) {
			return DamageIntelConfig_ptr;
		}

		auto VanitySetConfig_ptr = VanitySetConfig::from_substruct(incoming_type_id, serialized);
		if (VanitySetConfig_ptr != nullptr) {
			return VanitySetConfig_ptr;
		}

		auto BodypartToFilterConfig_ptr = BodypartToFilterConfig::from_substruct(incoming_type_id, serialized);
		if (BodypartToFilterConfig_ptr != nullptr) {
			return BodypartToFilterConfig_ptr;
		}

		auto UIViewInfoConfig_ptr = UIViewInfoConfig::from_substruct(incoming_type_id, serialized);
		if (UIViewInfoConfig_ptr != nullptr) {
			return UIViewInfoConfig_ptr;
		}

		auto HashListConfig_ptr = HashListConfig::from_substruct(incoming_type_id, serialized);
		if (HashListConfig_ptr != nullptr) {
			return HashListConfig_ptr;
		}

		auto SkinItemConstantConfig_ptr = SkinItemConstantConfig::from_substruct(incoming_type_id, serialized);
		if (SkinItemConstantConfig_ptr != nullptr) {
			return SkinItemConstantConfig_ptr;
		}

		auto HeroPortalZipConfig_ptr = HeroPortalZipConfig::from_substruct(incoming_type_id, serialized);
		if (HeroPortalZipConfig_ptr != nullptr) {
			return HeroPortalZipConfig_ptr;
		}

		auto DamageMultiPrimConfig_ptr = DamageMultiPrimConfig::from_substruct(incoming_type_id, serialized);
		if (DamageMultiPrimConfig_ptr != nullptr) {
			return DamageMultiPrimConfig_ptr;
		}

		auto ColorCorrectionSystemConfig_ptr = ColorCorrectionSystemConfig::from_substruct(incoming_type_id, serialized);
		if (ColorCorrectionSystemConfig_ptr != nullptr) {
			return ColorCorrectionSystemConfig_ptr;
		}

		auto MapDataConfig_ptr = MapDataConfig::from_substruct(incoming_type_id, serialized);
		if (MapDataConfig_ptr != nullptr) {
			return MapDataConfig_ptr;
		}

		auto StreamingVideoOverrideConfig_ptr = StreamingVideoOverrideConfig::from_substruct(incoming_type_id, serialized);
		if (StreamingVideoOverrideConfig_ptr != nullptr) {
			return StreamingVideoOverrideConfig_ptr;
		}

		auto IncinerateConfig_ptr = IncinerateConfig::from_substruct(incoming_type_id, serialized);
		if (IncinerateConfig_ptr != nullptr) {
			return IncinerateConfig_ptr;
		}

		auto GameBotConfigFiring_ptr = GameBotConfigFiring::from_substruct(incoming_type_id, serialized);
		if (GameBotConfigFiring_ptr != nullptr) {
			return GameBotConfigFiring_ptr;
		}

		auto FollowCameraUserConfig_ptr = FollowCameraUserConfig::from_substruct(incoming_type_id, serialized);
		if (FollowCameraUserConfig_ptr != nullptr) {
			return FollowCameraUserConfig_ptr;
		}

		auto UIIconsConfig_ptr = UIIconsConfig::from_substruct(incoming_type_id, serialized);
		if (UIIconsConfig_ptr != nullptr) {
			return UIIconsConfig_ptr;
		}

		auto MeleeConfig_ptr = MeleeConfig::from_substruct(incoming_type_id, serialized);
		if (MeleeConfig_ptr != nullptr) {
			return MeleeConfig_ptr;
		}

		auto AmmoConfigBase_ptr = AmmoConfigBase::from_substruct(incoming_type_id, serialized);
		if (AmmoConfigBase_ptr != nullptr) {
			return AmmoConfigBase_ptr;
		}

		auto WeaponEquipListenerConfig_ptr = WeaponEquipListenerConfig::from_substruct(incoming_type_id, serialized);
		if (WeaponEquipListenerConfig_ptr != nullptr) {
			return WeaponEquipListenerConfig_ptr;
		}

		auto ActivityMetadataConfig_ptr = ActivityMetadataConfig::from_substruct(incoming_type_id, serialized);
		if (ActivityMetadataConfig_ptr != nullptr) {
			return ActivityMetadataConfig_ptr;
		}

		auto HeroGrindConfig_ptr = HeroGrindConfig::from_substruct(incoming_type_id, serialized);
		if (HeroGrindConfig_ptr != nullptr) {
			return HeroGrindConfig_ptr;
		}

		auto UICreditsConfig_ptr = UICreditsConfig::from_substruct(incoming_type_id, serialized);
		if (UICreditsConfig_ptr != nullptr) {
			return UICreditsConfig_ptr;
		}

		auto GroovitronDanceTrophyConfig_ptr = GroovitronDanceTrophyConfig::from_substruct(incoming_type_id, serialized);
		if (GroovitronDanceTrophyConfig_ptr != nullptr) {
			return GroovitronDanceTrophyConfig_ptr;
		}

		auto TradingCardBonusDisplayConfig_ptr = TradingCardBonusDisplayConfig::from_substruct(incoming_type_id, serialized);
		if (TradingCardBonusDisplayConfig_ptr != nullptr) {
			return TradingCardBonusDisplayConfig_ptr;
		}

		auto RandomAttachmentConfig_ptr = RandomAttachmentConfig::from_substruct(incoming_type_id, serialized);
		if (RandomAttachmentConfig_ptr != nullptr) {
			return RandomAttachmentConfig_ptr;
		}

		auto HeroCharacterConfig_ptr = HeroCharacterConfig::from_substruct(incoming_type_id, serialized);
		if (HeroCharacterConfig_ptr != nullptr) {
			return HeroCharacterConfig_ptr;
		}

		auto FusionGrenadeSubShotConfig_ptr = FusionGrenadeSubShotConfig::from_substruct(incoming_type_id, serialized);
		if (FusionGrenadeSubShotConfig_ptr != nullptr) {
			return FusionGrenadeSubShotConfig_ptr;
		}

		auto ModelSplineConfig_ptr = ModelSplineConfig::from_substruct(incoming_type_id, serialized);
		if (ModelSplineConfig_ptr != nullptr) {
			return ModelSplineConfig_ptr;
		}

		auto SkinItemDecalConfig_ptr = SkinItemDecalConfig::from_substruct(incoming_type_id, serialized);
		if (SkinItemDecalConfig_ptr != nullptr) {
			return SkinItemDecalConfig_ptr;
		}

		auto PhysicsExperimentalSoftKickableConfig_ptr = PhysicsExperimentalSoftKickableConfig::from_substruct(incoming_type_id, serialized);
		if (PhysicsExperimentalSoftKickableConfig_ptr != nullptr) {
			return PhysicsExperimentalSoftKickableConfig_ptr;
		}

		auto UIObjectDisplayerConfig_ptr = UIObjectDisplayerConfig::from_substruct(incoming_type_id, serialized);
		if (UIObjectDisplayerConfig_ptr != nullptr) {
			return UIObjectDisplayerConfig_ptr;
		}

		auto WeaponGridConfig_ptr = WeaponGridConfig::from_substruct(incoming_type_id, serialized);
		if (WeaponGridConfig_ptr != nullptr) {
			return WeaponGridConfig_ptr;
		}

		auto KineticReactConfig_ptr = KineticReactConfig::from_substruct(incoming_type_id, serialized);
		if (KineticReactConfig_ptr != nullptr) {
			return KineticReactConfig_ptr;
		}

		auto HealthDropConfig_ptr = HealthDropConfig::from_substruct(incoming_type_id, serialized);
		if (HealthDropConfig_ptr != nullptr) {
			return HealthDropConfig_ptr;
		}

		auto FinaleMechConfigStatusEffects_ptr = FinaleMechConfigStatusEffects::from_substruct(incoming_type_id, serialized);
		if (FinaleMechConfigStatusEffects_ptr != nullptr) {
			return FinaleMechConfigStatusEffects_ptr;
		}

		auto PhotomodeSystemSharedConfig_ptr = PhotomodeSystemSharedConfig::from_substruct(incoming_type_id, serialized);
		if (PhotomodeSystemSharedConfig_ptr != nullptr) {
			return PhotomodeSystemSharedConfig_ptr;
		}

		auto TextureBuildConfig_ptr = TextureBuildConfig::from_substruct(incoming_type_id, serialized);
		if (TextureBuildConfig_ptr != nullptr) {
			return TextureBuildConfig_ptr;
		}

		auto BotDebugSpawnConfig_ptr = BotDebugSpawnConfig::from_substruct(incoming_type_id, serialized);
		if (BotDebugSpawnConfig_ptr != nullptr) {
			return BotDebugSpawnConfig_ptr;
		}

		auto DepthOfFieldGameConfig_ptr = DepthOfFieldGameConfig::from_substruct(incoming_type_id, serialized);
		if (DepthOfFieldGameConfig_ptr != nullptr) {
			return DepthOfFieldGameConfig_ptr;
		}

		auto ShotWarmongerMicroRocketConfig_ptr = ShotWarmongerMicroRocketConfig::from_substruct(incoming_type_id, serialized);
		if (ShotWarmongerMicroRocketConfig_ptr != nullptr) {
			return ShotWarmongerMicroRocketConfig_ptr;
		}

		auto ItemLoadoutConfig_ptr = ItemLoadoutConfig::from_substruct(incoming_type_id, serialized);
		if (ItemLoadoutConfig_ptr != nullptr) {
			return ItemLoadoutConfig_ptr;
		}

		auto ConversationConfig_ptr = ConversationConfig::from_substruct(incoming_type_id, serialized);
		if (ConversationConfig_ptr != nullptr) {
			return ConversationConfig_ptr;
		}

		auto FastTravelConfig_ptr = FastTravelConfig::from_substruct(incoming_type_id, serialized);
		if (FastTravelConfig_ptr != nullptr) {
			return FastTravelConfig_ptr;
		}

		auto TimeScaleConfig_ptr = TimeScaleConfig::from_substruct(incoming_type_id, serialized);
		if (TimeScaleConfig_ptr != nullptr) {
			return TimeScaleConfig_ptr;
		}

		auto HeroLevelConfig_ptr = HeroLevelConfig::from_substruct(incoming_type_id, serialized);
		if (HeroLevelConfig_ptr != nullptr) {
			return HeroLevelConfig_ptr;
		}

		auto CustomRespawnConfig_ptr = CustomRespawnConfig::from_substruct(incoming_type_id, serialized);
		if (CustomRespawnConfig_ptr != nullptr) {
			return CustomRespawnConfig_ptr;
		}

		auto SoundFocusComponentConfig_ptr = SoundFocusComponentConfig::from_substruct(incoming_type_id, serialized);
		if (SoundFocusComponentConfig_ptr != nullptr) {
			return SoundFocusComponentConfig_ptr;
		}

		auto ClankPackConfig_ptr = ClankPackConfig::from_substruct(incoming_type_id, serialized);
		if (ClankPackConfig_ptr != nullptr) {
			return ClankPackConfig_ptr;
		}

		auto HeroSkinConfig_ptr = HeroSkinConfig::from_substruct(incoming_type_id, serialized);
		if (HeroSkinConfig_ptr != nullptr) {
			return HeroSkinConfig_ptr;
		}

		auto ShieldConfig_ptr = ShieldConfig::from_substruct(incoming_type_id, serialized);
		if (ShieldConfig_ptr != nullptr) {
			return ShieldConfig_ptr;
		}

		auto MountConfig_ptr = MountConfig::from_substruct(incoming_type_id, serialized);
		if (MountConfig_ptr != nullptr) {
			return MountConfig_ptr;
		}

		auto DevstatsSystemConfig_ptr = DevstatsSystemConfig::from_substruct(incoming_type_id, serialized);
		if (DevstatsSystemConfig_ptr != nullptr) {
			return DevstatsSystemConfig_ptr;
		}

		auto BotConfigMovement_ptr = BotConfigMovement::from_substruct(incoming_type_id, serialized);
		if (BotConfigMovement_ptr != nullptr) {
			return BotConfigMovement_ptr;
		}

		auto LandingBirdSystemConfig_ptr = LandingBirdSystemConfig::from_substruct(incoming_type_id, serialized);
		if (LandingBirdSystemConfig_ptr != nullptr) {
			return LandingBirdSystemConfig_ptr;
		}

		auto SoundMaterialObstructionConfig_ptr = SoundMaterialObstructionConfig::from_substruct(incoming_type_id, serialized);
		if (SoundMaterialObstructionConfig_ptr != nullptr) {
			return SoundMaterialObstructionConfig_ptr;
		}

		auto DeviceSpecificLocalizationConfig_ptr = DeviceSpecificLocalizationConfig::from_substruct(incoming_type_id, serialized);
		if (DeviceSpecificLocalizationConfig_ptr != nullptr) {
			return DeviceSpecificLocalizationConfig_ptr;
		}

		auto MissionOrderConfigBase_ptr = MissionOrderConfigBase::from_substruct(incoming_type_id, serialized);
		if (MissionOrderConfigBase_ptr != nullptr) {
			return MissionOrderConfigBase_ptr;
		}

		auto RewardRenderModeConfig_ptr = RewardRenderModeConfig::from_substruct(incoming_type_id, serialized);
		if (RewardRenderModeConfig_ptr != nullptr) {
			return RewardRenderModeConfig_ptr;
		}

		auto Cinematic2ActorAssignmentConfig_ptr = Cinematic2ActorAssignmentConfig::from_substruct(incoming_type_id, serialized);
		if (Cinematic2ActorAssignmentConfig_ptr != nullptr) {
			return Cinematic2ActorAssignmentConfig_ptr;
		}

		auto SpawnedShotConfig_ptr = SpawnedShotConfig::from_substruct(incoming_type_id, serialized);
		if (SpawnedShotConfig_ptr != nullptr) {
			return SpawnedShotConfig_ptr;
		}

		auto MasterWeaponList_ptr = MasterWeaponList::from_substruct(incoming_type_id, serialized);
		if (MasterWeaponList_ptr != nullptr) {
			return MasterWeaponList_ptr;
		}

		auto AttackCooldownSystemConfig_ptr = AttackCooldownSystemConfig::from_substruct(incoming_type_id, serialized);
		if (AttackCooldownSystemConfig_ptr != nullptr) {
			return AttackCooldownSystemConfig_ptr;
		}

		auto StreamingVideoBaseConfig_ptr = StreamingVideoBaseConfig::from_substruct(incoming_type_id, serialized);
		if (StreamingVideoBaseConfig_ptr != nullptr) {
			return StreamingVideoBaseConfig_ptr;
		}

		auto SharedHeroConfig_ptr = SharedHeroConfig::from_substruct(incoming_type_id, serialized);
		if (SharedHeroConfig_ptr != nullptr) {
			return SharedHeroConfig_ptr;
		}

		auto VanityBundleConfig_ptr = VanityBundleConfig::from_substruct(incoming_type_id, serialized);
		if (VanityBundleConfig_ptr != nullptr) {
			return VanityBundleConfig_ptr;
		}

		auto BotConfigDeath_ptr = BotConfigDeath::from_substruct(incoming_type_id, serialized);
		if (BotConfigDeath_ptr != nullptr) {
			return BotConfigDeath_ptr;
		}

		auto ProximitySpawnerConfig_ptr = ProximitySpawnerConfig::from_substruct(incoming_type_id, serialized);
		if (ProximitySpawnerConfig_ptr != nullptr) {
			return ProximitySpawnerConfig_ptr;
		}

		auto FlockDensityConfig_ptr = FlockDensityConfig::from_substruct(incoming_type_id, serialized);
		if (FlockDensityConfig_ptr != nullptr) {
			return FlockDensityConfig_ptr;
		}

		auto BotConfigTargeting_ptr = BotConfigTargeting::from_substruct(incoming_type_id, serialized);
		if (BotConfigTargeting_ptr != nullptr) {
			return BotConfigTargeting_ptr;
		}

		auto PropConfig_ptr = PropConfig::from_substruct(incoming_type_id, serialized);
		if (PropConfig_ptr != nullptr) {
			return PropConfig_ptr;
		}

		auto HazardDamageAreaConfig_ptr = HazardDamageAreaConfig::from_substruct(incoming_type_id, serialized);
		if (HazardDamageAreaConfig_ptr != nullptr) {
			return HazardDamageAreaConfig_ptr;
		}

		auto DifficultyModProgressionBonusConfig_ptr = DifficultyModProgressionBonusConfig::from_substruct(incoming_type_id, serialized);
		if (DifficultyModProgressionBonusConfig_ptr != nullptr) {
			return DifficultyModProgressionBonusConfig_ptr;
		}

		auto BotConfigShooting_ptr = BotConfigShooting::from_substruct(incoming_type_id, serialized);
		if (BotConfigShooting_ptr != nullptr) {
			return BotConfigShooting_ptr;
		}

		auto GameMacroConfig_ptr = GameMacroConfig::from_substruct(incoming_type_id, serialized);
		if (GameMacroConfig_ptr != nullptr) {
			return GameMacroConfig_ptr;
		}

		auto SoundEarlyReflectionsConfig_ptr = SoundEarlyReflectionsConfig::from_substruct(incoming_type_id, serialized);
		if (SoundEarlyReflectionsConfig_ptr != nullptr) {
			return SoundEarlyReflectionsConfig_ptr;
		}

		auto BotConfigLookSelector_ptr = BotConfigLookSelector::from_substruct(incoming_type_id, serialized);
		if (BotConfigLookSelector_ptr != nullptr) {
			return BotConfigLookSelector_ptr;
		}

		auto HeroOpenPocketDimConfig_ptr = HeroOpenPocketDimConfig::from_substruct(incoming_type_id, serialized);
		if (HeroOpenPocketDimConfig_ptr != nullptr) {
			return HeroOpenPocketDimConfig_ptr;
		}

		auto UIDifficultyConfig_ptr = UIDifficultyConfig::from_substruct(incoming_type_id, serialized);
		if (UIDifficultyConfig_ptr != nullptr) {
			return UIDifficultyConfig_ptr;
		}

		auto ZoomConfig_ptr = ZoomConfig::from_substruct(incoming_type_id, serialized);
		if (ZoomConfig_ptr != nullptr) {
			return ZoomConfig_ptr;
		}

		auto BiomeConfig_ptr = BiomeConfig::from_substruct(incoming_type_id, serialized);
		if (BiomeConfig_ptr != nullptr) {
			return BiomeConfig_ptr;
		}

		auto BotConfigFiring_ptr = BotConfigFiring::from_substruct(incoming_type_id, serialized);
		if (BotConfigFiring_ptr != nullptr) {
			return BotConfigFiring_ptr;
		}

		auto SpaceshipHeroFlightConfig_ptr = SpaceshipHeroFlightConfig::from_substruct(incoming_type_id, serialized);
		if (SpaceshipHeroFlightConfig_ptr != nullptr) {
			return SpaceshipHeroFlightConfig_ptr;
		}

		auto MotionActionConfig_ptr = MotionActionConfig::from_substruct(incoming_type_id, serialized);
		if (MotionActionConfig_ptr != nullptr) {
			return MotionActionConfig_ptr;
		}

		auto UICollectiblesConfig_ptr = UICollectiblesConfig::from_substruct(incoming_type_id, serialized);
		if (UICollectiblesConfig_ptr != nullptr) {
			return UICollectiblesConfig_ptr;
		}

		auto LootListConfig_ptr = LootListConfig::from_substruct(incoming_type_id, serialized);
		if (LootListConfig_ptr != nullptr) {
			return LootListConfig_ptr;
		}

		auto MasterDebugOutfittingConfig_ptr = MasterDebugOutfittingConfig::from_substruct(incoming_type_id, serialized);
		if (MasterDebugOutfittingConfig_ptr != nullptr) {
			return MasterDebugOutfittingConfig_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
