// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/CompositeShaderResponseEvent.hpp>

namespace rivet::ddl::generated {
	CompositeShaderResponseEvent::CompositeShaderResponseEvent([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): ResponseEvent(serialized) {
		PreShader = serialized->get_string(PreShader_type_id);
		PostShader = serialized->get_string(PostShader_type_id);
		AffectSelf = serialized->get_bool(AffectSelf_type_id);
		AffectAttachments = serialized->get_bool(AffectAttachments_type_id);
		AffectHead = serialized->get_bool(AffectHead_type_id);
		AffectHair = serialized->get_bool(AffectHair_type_id);
		UseHeadAsMaterialMapping = serialized->get_bool(UseHeadAsMaterialMapping_type_id);
		DesiredShadowState = serialized->get_enum<rivet::ddl::generated::x32cc2d2c>(DesiredShadowState_type_id, rivet::ddl::generated::x32cc2d2c_values);
		MaterialMappingName = serialized->get_string(MaterialMappingName_type_id);
		Remove = serialized->get_bool(Remove_type_id); 
	}

	[[nodiscard]] auto
	CompositeShaderResponseEvent::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	CompositeShaderResponseEvent::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<CompositeShaderResponseEvent> {
		if (incoming_type_id == CompositeShaderResponseEvent::type_id) {
			return std::make_shared<CompositeShaderResponseEvent>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
