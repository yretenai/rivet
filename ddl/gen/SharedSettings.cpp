// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/WaterImpulseSettings.hpp>
#include <rivet/ddl/generated/HitReactSettings.hpp>
#include <rivet/ddl/generated/BotNavSettings.hpp>
#include <rivet/ddl/generated/TargetSystemSettings.hpp>
#include <rivet/ddl/generated/HeapTemplate.hpp> 

#include <rivet/ddl/generated/SharedSettings.hpp>

namespace rivet::ddl::generated {
	SharedSettings::SharedSettings([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		DedicatedServer = serialized->get_bool(DedicatedServer_type_id, false);
		HeroSpawnEnable = serialized->get_bool(HeroSpawnEnable_type_id, true);
		CritterSystemEnable = serialized->get_bool(CritterSystemEnable_type_id, true);
		FadeOverTimeMaterial = serialized->get_string(FadeOverTimeMaterial_type_id, "shared\\materialgraph\\global\\FX_Generic_Dissolve\\FX_generic_Dissolve.materialgraph");
		StreamingVideoSystemEnable = serialized->get_bool(StreamingVideoSystemEnable_type_id, true);
		StreamingVideoMaxStreams = serialized->get_uint8(StreamingVideoMaxStreams_type_id, 32);
		StreamingVideoGpuHeapSize = serialized->get_uint64(StreamingVideoGpuHeapSize_type_id, 8388608);
		StreamingVideoMainHeapSize = serialized->get_uint64(StreamingVideoMainHeapSize_type_id, 20971520);
		StreamingVideoGpuHeapTemplate = serialized->unwrap_into<rivet::ddl::generated::HeapTemplate>(StreamingVideoGpuHeapTemplate_type_id);
		MaxCoverObjects = serialized->get_int32(MaxCoverObjects_type_id, 2048);
		TargetSystem = serialized->unwrap_into<rivet::ddl::generated::TargetSystemSettings>(TargetSystem_type_id);
		GameTcpPort = serialized->get_uint16(GameTcpPort_type_id, 0);
		GameUdpPort = serialized->get_uint16(GameUdpPort_type_id, 0);
		GameType = serialized->get_enum<rivet::ddl::generated::GameType>(GameType_type_id, rivet::ddl::generated::GameType_values, rivet::ddl::generated::GameType::Campaign);
		ActorSaveUidMax = serialized->get_uint32(ActorSaveUidMax_type_id, 3096);
		ActorSaveLocalUidMax = serialized->get_uint8(ActorSaveLocalUidMax_type_id, 64);
		SaveTransferTarget = serialized->get_string(SaveTransferTarget_type_id, "tus");
		SaveTransferFilename = serialized->get_string(SaveTransferFilename_type_id, "");
		SaveTransferKey = serialized->get_string(SaveTransferKey_type_id, "FgpvYRifvWnSHCNBeOxJPFBGgDrETIHWGqgcJYRJAFK");
		KickableDrawnTurnOnDistance = serialized->get_float(KickableDrawnTurnOnDistance_type_id, 60.000000);
		KickableDrawnTurnOffDistance = serialized->get_float(KickableDrawnTurnOffDistance_type_id, 70.000000);
		KickableNotDrawnTurnOnDistance = serialized->get_float(KickableNotDrawnTurnOnDistance_type_id, 30.000000);
		KickableNotDrawnTurnOffDistance = serialized->get_float(KickableNotDrawnTurnOffDistance_type_id, 35.000000);
		Levels = serialized->get_strings(Levels_type_id);
		DebugScreenAverageEnabled = serialized->get_bool(DebugScreenAverageEnabled_type_id, false);
		DebugShortcutsEnabled = serialized->get_bool(DebugShortcutsEnabled_type_id, true);
		AllowDemoDebugDraw = serialized->get_bool(AllowDemoDebugDraw_type_id, false);
		DemoMode = serialized->get_bool(DemoMode_type_id, false);
		DemoType = serialized->get_string(DemoType_type_id, {});
		CustomCmdLineFlagSet = serialized->get_bool(CustomCmdLineFlagSet_type_id, false);
		CustomCmdLineFlagValue = serialized->get_string(CustomCmdLineFlagValue_type_id, {});
		HeroSetupEnable = serialized->get_bool(HeroSetupEnable_type_id, true);
		OnHeroEnterVolumeUsesActorPosition = serialized->get_bool(OnHeroEnterVolumeUsesActorPosition_type_id, false);
		UseFollowCamera = serialized->get_bool(UseFollowCamera_type_id, true);
		PkgMode = serialized->get_bool(PkgMode_type_id, false);
		AspectArgHD = serialized->get_bool(AspectArgHD_type_id, true);
		AutoCheckpoint = serialized->get_bool(AutoCheckpoint_type_id, true);
		DisableHmdPause = serialized->get_bool(DisableHmdPause_type_id, false);
		SingleInstanceInFinal = serialized->get_bool(SingleInstanceInFinal_type_id, true);
		POIScreenMarginPercentWidth = serialized->get_float(POIScreenMarginPercentWidth_type_id, 0.000000);
		POIScreenMarginPercentHeight = serialized->get_float(POIScreenMarginPercentHeight_type_id, 0.000000);
		FirepointGunHoldOffsetHigh = serialized->get_float(FirepointGunHoldOffsetHigh_type_id, 1.400000);
		FirepointGunHoldOffsetLow = serialized->get_float(FirepointGunHoldOffsetLow_type_id, 0.750000);
		FirepointMaxGathered = serialized->get_int32(FirepointMaxGathered_type_id, 512);
		FirepointMaxEval = serialized->get_int32(FirepointMaxEval_type_id, 512);
		DialogSetSystemMaxSets = serialized->get_uint32(DialogSetSystemMaxSets_type_id, 1024);
		DialogSetSystemSaveSize = serialized->get_uint32(DialogSetSystemSaveSize_type_id, 32768);
		BotNavSettings = serialized->unwrap_into<rivet::ddl::generated::BotNavSettings>(BotNavSettings_type_id);
		HitReactSettings = serialized->unwrap_into<rivet::ddl::generated::HitReactSettings>(HitReactSettings_type_id);
		WaterImpulseSettings = serialized->unwrap_into<rivet::ddl::generated::WaterImpulseSettings>(WaterImpulseSettings_type_id);
		GameplayBuiltVolumeMaxBuiltZones = serialized->get_uint32(GameplayBuiltVolumeMaxBuiltZones_type_id, 96);
		GameplayBuiltVolumeMaxBuilttVolumes = serialized->get_uint32(GameplayBuiltVolumeMaxBuilttVolumes_type_id, 8192);
		PerfSpec = serialized->get_enum<rivet::ddl::generated::x11adfe43>(PerfSpec_type_id, rivet::ddl::generated::x11adfe43_values, rivet::ddl::generated::x11adfe43::None);
		OverridePerfSpec = serialized->get_bool(OverridePerfSpec_type_id, false);
		OpenWorldNumColumns = serialized->get_uint32(OpenWorldNumColumns_type_id, 26);
		OpenWorldNumRows = serialized->get_uint32(OpenWorldNumRows_type_id, 48);
		OpenWorldCellWidth = serialized->get_float(OpenWorldCellWidth_type_id, 128.000000);
		OpenWorldCellLength = serialized->get_float(OpenWorldCellLength_type_id, 128.000000);
		OpenWorldMaxCharsPerCellOnMap = serialized->get_uint32(OpenWorldMaxCharsPerCellOnMap_type_id, 4);
		OpenWorldColumnLetterOffset = serialized->get_uint32(OpenWorldColumnLetterOffset_type_id, 0);
		OpenWorldRowNumberOffset = serialized->get_uint32(OpenWorldRowNumberOffset_type_id, 0);
		OpenWorldGridMapWidth = serialized->get_uint32(OpenWorldGridMapWidth_type_id, 900);
		OpenWorldGridMapHeight = serialized->get_uint32(OpenWorldGridMapHeight_type_id, 950);
		PerfTestMaxNumRecordings = serialized->get_uint32(PerfTestMaxNumRecordings_type_id, 2048);
		PerfTestConnectToTelemetry = serialized->get_bool(PerfTestConnectToTelemetry_type_id, false);
		PerfTestFinishAfterMissionChange = serialized->get_bool(PerfTestFinishAfterMissionChange_type_id, false);
		PerfTestFinishAfterObjectiveChange = serialized->get_bool(PerfTestFinishAfterObjectiveChange_type_id, false);
		PerfTestMissionTestCinematicsOnly = serialized->get_bool(PerfTestMissionTestCinematicsOnly_type_id, false);
		PerfTestMissionTestSkipCinematics = serialized->get_bool(PerfTestMissionTestSkipCinematics_type_id, false);
		PerfTestMissionTestLoop = serialized->get_bool(PerfTestMissionTestLoop_type_id, false);
		PerfTestStartMissionTest = serialized->get_bool(PerfTestStartMissionTest_type_id, false);
		PerfTestStartMissionTestObjective = serialized->get_string(PerfTestStartMissionTestObjective_type_id, {});
		PerfTestMissionTestSkipCineTime = serialized->get_float(PerfTestMissionTestSkipCineTime_type_id, 1.000000);
		PerfRTHeroDistanceMovingFastSpeed = serialized->get_float(PerfRTHeroDistanceMovingFastSpeed_type_id, 15.000000);
		PerfRTHeroDistanceMovingFastCount = serialized->get_uint32(PerfRTHeroDistanceMovingFastCount_type_id, 20);
		PerfRTHeroDistanceMovingSlowCount = serialized->get_uint32(PerfRTHeroDistanceMovingSlowCount_type_id, 220);
		PerfRTHeroDistanceFirstRingRadius = serialized->get_float(PerfRTHeroDistanceFirstRingRadius_type_id, 15.000000);
		PerfRTHeroDistanceSecondRingRadius = serialized->get_float(PerfRTHeroDistanceSecondRingRadius_type_id, 40.000000); 
	}

	[[nodiscard]] auto
	SharedSettings::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	SharedSettings::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<SharedSettings> {
		if (incoming_type_id == SharedSettings::type_id) {
			return std::make_shared<SharedSettings>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
