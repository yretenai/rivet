// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TriggerResponderChangeMaterialUpdateParentPrius.hpp> 

#include <rivet/ddl/generated/TriggerResponderChangeMaterialPrius.hpp>

namespace rivet::ddl::generated {
	TriggerResponderChangeMaterialPrius::TriggerResponderChangeMaterialPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): TriggerResponderBasePrius(serialized) {
		MatConstValueTrig = serialized->get_float(MatConstValueTrig_type_id);
		MatConstValueNotTrig = serialized->get_float(MatConstValueNotTrig_type_id);
		MatConstValueDisabled = serialized->get_float(MatConstValueDisabled_type_id);
		BlendTimeTriggered = serialized->get_float(BlendTimeTriggered_type_id);
		BlendTimeNotTriggered = serialized->get_float(BlendTimeNotTriggered_type_id);
		BlendTimeDisabled = serialized->get_float(BlendTimeDisabled_type_id); 
	}

	[[nodiscard]] auto
	TriggerResponderChangeMaterialPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TriggerResponderChangeMaterialPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerResponderChangeMaterialPrius> {
		if (incoming_type_id == TriggerResponderChangeMaterialPrius::type_id) {
			return std::make_shared<TriggerResponderChangeMaterialPrius>(serialized);
		}

		auto TriggerResponderChangeMaterialUpdateParentPrius_ptr = TriggerResponderChangeMaterialUpdateParentPrius::from_substruct(incoming_type_id, serialized);
		if (TriggerResponderChangeMaterialUpdateParentPrius_ptr != nullptr) {
			return TriggerResponderChangeMaterialUpdateParentPrius_ptr;
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
