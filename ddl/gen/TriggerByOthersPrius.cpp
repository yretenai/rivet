// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/TriggerByOthersEntry.hpp> 

#include <rivet/ddl/generated/TriggerByOthersPrius.hpp>

namespace rivet::ddl::generated {
	TriggerByOthersPrius::TriggerByOthersPrius([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): TriggerByBasePrius(serialized) {
		Mode = serialized->get_enum<rivet::ddl::generated::x6200f389>(Mode_type_id, rivet::ddl::generated::x6200f389_values, rivet::ddl::generated::x6200f389::All);
		Number = serialized->get_int32(Number_type_id, 1);
		TriggeringActors = serialized->unwrap_into_many<rivet::ddl::generated::TriggerByOthersEntry>(TriggeringActors_type_id); 
	}

	[[nodiscard]] auto
	TriggerByOthersPrius::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	TriggerByOthersPrius::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<TriggerByOthersPrius> {
		if (incoming_type_id == TriggerByOthersPrius::type_id) {
			return std::make_shared<TriggerByOthersPrius>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
