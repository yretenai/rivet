// <auto-generated>
// rivet project
// Copyright (c) 2023 <https://github.com/yretenai/rivet>
// SPDX-License-Identifier: MPL-2.0

#include <rivet/ddl/generated/AnimVisDumpMorphTargetDef.hpp>
#include <rivet/ddl/generated/AnimVisDumpJointDef.hpp> 

#include <rivet/ddl/generated/AnimVisDumpSequenceDef.hpp>

namespace rivet::ddl::generated {
	AnimVisDumpSequenceDef::AnimVisDumpSequenceDef([[maybe_unused]] const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized): rivet::structures::rivet_ddl_base(serialized) {
		FrameCount = serialized->get_uint32(FrameCount_type_id, 0);
		TimeStart = serialized->get_float(TimeStart_type_id, 0.000000);
		TimeEnd = serialized->get_float(TimeEnd_type_id, 0.000000);
		SampleRate = serialized->get_float(SampleRate_type_id, 0.000000);
		JointNames = serialized->get_strings(JointNames_type_id);
		MorphTargetNames = serialized->get_strings(MorphTargetNames_type_id);
		Joints = serialized->unwrap_into_many<rivet::ddl::generated::AnimVisDumpJointDef>(Joints_type_id);
		MorphTargets = serialized->unwrap_into_many<rivet::ddl::generated::AnimVisDumpMorphTargetDef>(MorphTargets_type_id); 
	}

	[[nodiscard]] auto
	AnimVisDumpSequenceDef::get_type_name() const noexcept -> std::string_view {
		return type_name;
	}

	[[nodiscard]] auto
	AnimVisDumpSequenceDef::from_substruct(rivet_type_id incoming_type_id, const std::shared_ptr<const rivet::structures::rivet_serialized_object> &serialized) -> std::shared_ptr<AnimVisDumpSequenceDef> {
		if (incoming_type_id == AnimVisDumpSequenceDef::type_id) {
			return std::make_shared<AnimVisDumpSequenceDef>(serialized);
		}
 
		return nullptr;
	}
} // namespace rivet::ddl::generated
